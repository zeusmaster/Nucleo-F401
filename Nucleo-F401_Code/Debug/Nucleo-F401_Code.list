
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e18  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b710  0800b710  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b710  0800b710  0001b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b718  0800b718  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b718  0800b718  0001b718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b71c  0800b71c  0001b71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800b720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000088  0800b7a8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800b7a8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039f8e  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047b7  00000000  00000000  0005a046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0005e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0005ffd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a406  00000000  00000000  00061598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b8db  00000000  00000000  0007b99e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a18d4  00000000  00000000  00097279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006490  00000000  00000000  00138ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068e0 	.word	0x080068e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080068e0 	.word	0x080068e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <I2C_LCD1602_Send_Command>:
#define LCD1_address 		0x4E // A0,A1,A2 OPEN->E

extern I2C_HandleTypeDef hi2c1;

void I2C_LCD1602_Send_Command(unsigned char command)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	char command_MSB, command_LSB;
	uint8_t I2C_cmd[4];
	command_MSB = ( command & 0xf0 );
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
	command_LSB = ( (command << 4) & 0xf0 ) ;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73bb      	strb	r3, [r7, #14]

	I2C_cmd[ 0 ] = command_MSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	723b      	strb	r3, [r7, #8]
	I2C_cmd[ 1 ] = command_MSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	727b      	strb	r3, [r7, #9]
	I2C_cmd[ 2 ] = command_LSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72bb      	strb	r3, [r7, #10]
	I2C_cmd[ 3 ] = command_LSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_cmd, 4, 100 );
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <I2C_LCD1602_Send_Command+0x5c>)
 80005c6:	f003 ffbb 	bl	8004540 <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000224 	.word	0x20000224

080005d8 <I2C_LCD1602_Send_Data>:

void I2C_LCD1602_Send_Data(unsigned char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	char data_MSB, data_LSB;
	uint8_t I2C_data[4];
	data_MSB = ( data & 0xf0 ) ;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	data_LSB =  ( (data << 4) & 0xf0 ) ;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]

	I2C_data[ 0 ] = data_MSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	I2C_data[ 1 ] = data_MSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	I2C_data[ 2 ] = data_LSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	I2C_data[ 3 ] = data_LSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_data, 4, 100 );
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2304      	movs	r3, #4
 8000622:	214e      	movs	r1, #78	; 0x4e
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <I2C_LCD1602_Send_Data+0x5c>)
 8000626:	f003 ff8b 	bl	8004540 <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000224 	.word	0x20000224

08000638 <I2C_LCD1602_Init>:

void I2C_LCD1602_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 800063c:	2032      	movs	r0, #50	; 0x32
 800063e:	f002 fbd5 	bl	8002dec <HAL_Delay>

	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8000642:	2030      	movs	r0, #48	; 0x30
 8000644:	f7ff ff98 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000648:	2005      	movs	r0, #5
 800064a:	f002 fbcf 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 800064e:	2030      	movs	r0, #48	; 0x30
 8000650:	f7ff ff92 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000654:	2005      	movs	r0, #5
 8000656:	f002 fbc9 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 800065a:	2030      	movs	r0, #48	; 0x30
 800065c:	f7ff ff8c 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000660:	2005      	movs	r0, #5
 8000662:	f002 fbc3 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( MODE4bit ); HAL_Delay(5);
 8000666:	2020      	movs	r0, #32
 8000668:	f7ff ff86 	bl	8000578 <I2C_LCD1602_Send_Command>
 800066c:	2005      	movs	r0, #5
 800066e:	f002 fbbd 	bl	8002dec <HAL_Delay>

	I2C_LCD1602_Send_Command(FUNCTIONSET ); HAL_Delay(5); // 4bit 2line font5x10
 8000672:	202c      	movs	r0, #44	; 0x2c
 8000674:	f7ff ff80 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000678:	2005      	movs	r0, #5
 800067a:	f002 fbb7 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( DISPLAYON ); HAL_Delay(5);
 800067e:	200c      	movs	r0, #12
 8000680:	f7ff ff7a 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000684:	2005      	movs	r0, #5
 8000686:	f002 fbb1 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( ALLCLR ); HAL_Delay(5);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ff74 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000690:	2005      	movs	r0, #5
 8000692:	f002 fbab 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command( ENTMODE ); HAL_Delay(5);
 8000696:	2006      	movs	r0, #6
 8000698:	f7ff ff6e 	bl	8000578 <I2C_LCD1602_Send_Command>
 800069c:	2005      	movs	r0, #5
 800069e:	f002 fba5 	bl	8002dec <HAL_Delay>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <I2C_LCD1602_Send_string>:

void I2C_LCD1602_Send_string( char *string)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
	while( * string ) I2C_LCD1602_Send_Data( *string++ );
 80006ae:	e006      	b.n	80006be <I2C_LCD1602_Send_string+0x18>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	607a      	str	r2, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff8d 	bl	80005d8 <I2C_LCD1602_Send_Data>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d1f4      	bne.n	80006b0 <I2C_LCD1602_Send_string+0xa>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <I2C_LCD1602_GotoXY>:
void I2C_LCD1602_GotoXY(char x, char y)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	460a      	mov	r2, r1
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	4613      	mov	r3, r2
 80006de:	71bb      	strb	r3, [r7, #6]
	if( !y ) I2C_LCD1602_Send_Command( 0x80 | x );
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <I2C_LCD1602_GotoXY+0x26>
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff42 	bl	8000578 <I2C_LCD1602_Send_Command>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
}
 80006f4:	e006      	b.n	8000704 <I2C_LCD1602_GotoXY+0x34>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff3a 	bl	8000578 <I2C_LCD1602_Send_Command>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <I2C_LCD1602_Send_String_XY>:

void I2C_LCD1602_Send_String_XY( char x, char y, char *string )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	460b      	mov	r3, r1
 800071a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD1602_GotoXY( x , y );
 800071c:	79ba      	ldrb	r2, [r7, #6]
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffd4 	bl	80006d0 <I2C_LCD1602_GotoXY>
	I2C_LCD1602_Send_string( string );
 8000728:	6838      	ldr	r0, [r7, #0]
 800072a:	f7ff ffbc 	bl	80006a6 <I2C_LCD1602_Send_string>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <I2C_LCD1602_Clear>:
void I2C_LCD1602_BlinkOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x01); }
void I2C_LCD1602_CursorOn(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON | 0x02); }
void I2C_LCD1602_CursorOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x02); }

void I2C_LCD1602_Clear()
{
 8000736:	b580      	push	{r7, lr}
 8000738:	af00      	add	r7, sp, #0
/*	I2C_LCD1602_Send_Command (0x80);
	for (int i=0; i<70; i++)
	{
		I2C_LCD1602_Send_Data (' ');
	}*/
	I2C_LCD1602_Send_Command(ALLCLR); HAL_Delay(1);
 800073a:	2001      	movs	r0, #1
 800073c:	f7ff ff1c 	bl	8000578 <I2C_LCD1602_Send_Command>
 8000740:	2001      	movs	r0, #1
 8000742:	f002 fb53 	bl	8002dec <HAL_Delay>
	I2C_LCD1602_Send_Command(0x80); HAL_Delay(1);
 8000746:	2080      	movs	r0, #128	; 0x80
 8000748:	f7ff ff16 	bl	8000578 <I2C_LCD1602_Send_Command>
 800074c:	2001      	movs	r0, #1
 800074e:	f002 fb4d 	bl	8002dec <HAL_Delay>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <HAL_TIM_PeriodElapsedCallback>:
#include "SR04.h"

float SR04_Echo_HighTime= 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	if( htim->Instance == TIM1 ) 	 	 TIM1->SR =0;   }
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a05      	ldr	r2, [pc, #20]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d102      	bne.n	8000770 <HAL_TIM_PeriodElapsedCallback+0x18>
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40010000 	.word	0x40010000

08000780 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SR04_ECHO_Pin )
 800078a:	88fb      	ldrh	r3, [r7, #6]
 800078c:	2b10      	cmp	r3, #16
 800078e:	d113      	bne.n	80007b8 <HAL_GPIO_EXTI_Callback+0x38>
	{
		TIM1->CNT =0;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin( SR04_ECHO_GPIO_Port, SR04_ECHO_Pin) ) {
 8000796:	bf00      	nop
 8000798:	2110      	movs	r1, #16
 800079a:	480a      	ldr	r0, [pc, #40]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x44>)
 800079c:	f003 fd42 	bl	8004224 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d1f8      	bne.n	8000798 <HAL_GPIO_EXTI_Callback+0x18>
		}
		SR04_Echo_HighTime = TIM1->CNT ;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_GPIO_EXTI_Callback+0x40>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80007b4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010000 	.word	0x40010000
 80007c4:	40020800 	.word	0x40020800
 80007c8:	200000a4 	.word	0x200000a4

080007cc <Buzzer_OnOff>:
	return (status == HAL_OK ? len : 0);
}

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	e012      	b.n	8000800 <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 80007da:	2201      	movs	r2, #1
 80007dc:	2102      	movs	r1, #2
 80007de:	480d      	ldr	r0, [pc, #52]	; (8000814 <Buzzer_OnOff+0x48>)
 80007e0:	f003 fd38 	bl	8004254 <HAL_GPIO_WritePin>
 80007e4:	200a      	movs	r0, #10
 80007e6:	f002 fb01 	bl	8002dec <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2102      	movs	r1, #2
 80007ee:	4809      	ldr	r0, [pc, #36]	; (8000814 <Buzzer_OnOff+0x48>)
 80007f0:	f003 fd30 	bl	8004254 <HAL_GPIO_WritePin>
 80007f4:	200a      	movs	r0, #10
 80007f6:	f002 faf9 	bl	8002dec <HAL_Delay>
	for(int i=0;i< times ; i++)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3301      	adds	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbe8      	blt.n	80007da <Buzzer_OnOff+0xe>
	}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020400 	.word	0x40020400

08000818 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <Key_input+0x58>)
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f023 030f 	bic.w	r3, r3, #15
 8000828:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2bf0      	cmp	r3, #240	; 0xf0
 800082e:	d10d      	bne.n	800084c <Key_input+0x34>
    { if(key_flag == 0)
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <Key_input+0x5c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <Key_input+0x24>
        return key;
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	e014      	b.n	8000866 <Key_input+0x4e>
      else
        { HAL_Delay(20);
 800083c:	2014      	movs	r0, #20
 800083e:	f002 fad5 	bl	8002dec <HAL_Delay>
          key_flag = 0;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <Key_input+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	701a      	strb	r2, [r3, #0]
          return key;
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	e00c      	b.n	8000866 <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <Key_input+0x5c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	e006      	b.n	8000866 <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ffb7 	bl	80007cc <Buzzer_OnOff>
          key_flag = 1;
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <Key_input+0x5c>)
 8000860:	2201      	movs	r2, #1
 8000862:	701a      	strb	r2, [r3, #0]
          return key;
 8000864:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40020400 	.word	0x40020400
 8000874:	200000a8 	.word	0x200000a8

08000878 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_ADC1_Init+0x98>)
 800088c:	4a21      	ldr	r2, [pc, #132]	; (8000914 <MX_ADC1_Init+0x9c>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_ADC1_Init+0x98>)
 8000892:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_ADC1_Init+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_ADC1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_ADC1_Init+0x98>)
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <MX_ADC1_Init+0xa0>)
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_ADC1_Init+0x98>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_ADC1_Init+0x98>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_ADC1_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_ADC1_Init+0x98>)
 80008da:	f002 faab 	bl	8002e34 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008e4:	f000 fcb6 	bl	8001254 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80008f0:	2304      	movs	r3, #4
 80008f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_ADC1_Init+0x98>)
 80008fa:	f002 fbed 	bl	80030d8 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000904:	f000 fca6 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000017c 	.word	0x2000017c
 8000914:	40012000 	.word	0x40012000
 8000918:	0f000001 	.word	0x0f000001

0800091c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <HAL_ADC_MspInit+0xdc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d157      	bne.n	80009ee <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a26      	ldr	r2, [pc, #152]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_ADC_MspInit+0xe0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097a:	2303      	movs	r3, #3
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	481d      	ldr	r0, [pc, #116]	; (8000a00 <HAL_ADC_MspInit+0xe4>)
 800098a:	f003 fac7 	bl	8003f1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 8000990:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <HAL_ADC_MspInit+0xec>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009d2:	480c      	ldr	r0, [pc, #48]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009d4:	f002 ff32 	bl	800383c <HAL_DMA_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009de:	f000 fc39 	bl	8001254 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <HAL_ADC_MspInit+0xe8>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40012000 	.word	0x40012000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	200001c4 	.word	0x200001c4
 8000a08:	40026410 	.word	0x40026410

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	2038      	movs	r0, #56	; 0x38
 8000a34:	f002 fecb 	bl	80037ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a38:	2038      	movs	r0, #56	; 0x38
 8000a3a:	f002 fee4 	bl	8003806 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b4d      	ldr	r3, [pc, #308]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a48      	ldr	r2, [pc, #288]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a41      	ldr	r2, [pc, #260]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a3a      	ldr	r2, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <MX_GPIO_Init+0x15c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	4835      	ldr	r0, [pc, #212]	; (8000bac <MX_GPIO_Init+0x160>)
 8000ad8:	f003 fbbc 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2120      	movs	r1, #32
 8000ae0:	4833      	ldr	r0, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x164>)
 8000ae2:	f003 fbb7 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4832      	ldr	r0, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x168>)
 8000aec:	f003 fbb2 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_GPIO_Init+0x16c>)
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	482a      	ldr	r0, [pc, #168]	; (8000bb0 <MX_GPIO_Init+0x164>)
 8000b06:	f003 fa09 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4822      	ldr	r0, [pc, #136]	; (8000bac <MX_GPIO_Init+0x160>)
 8000b22:	f003 f9fb 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_ECHO_Pin;
 8000b26:	2310      	movs	r3, #16
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_GPIO_Init+0x170>)
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <MX_GPIO_Init+0x164>)
 8000b3a:	f003 f9ef 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_TRIG_Pin;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4816      	ldr	r0, [pc, #88]	; (8000bb0 <MX_GPIO_Init+0x164>)
 8000b56:	f003 f9e1 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <MX_GPIO_Init+0x168>)
 8000b72:	f003 f9d3 	bl	8003f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 8000b76:	23f0      	movs	r3, #240	; 0xf0
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <MX_GPIO_Init+0x168>)
 8000b8a:	f003 f9c7 	bl	8003f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	200a      	movs	r0, #10
 8000b94:	f002 fe1b 	bl	80037ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b98:	200a      	movs	r0, #10
 8000b9a:	f002 fe34 	bl	8003806 <HAL_NVIC_EnableIRQ>

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020800 	.word	0x40020800
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	10210000 	.word	0x10210000
 8000bbc:	10110000 	.word	0x10110000

08000bc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_I2C1_Init+0x54>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bcc:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <MX_I2C1_Init+0x58>)
 8000bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf0:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bfc:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_I2C1_Init+0x50>)
 8000bfe:	f003 fb5b 	bl	80042b8 <HAL_I2C_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c08:	f000 fb24 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000224 	.word	0x20000224
 8000c14:	40005400 	.word	0x40005400
 8000c18:	000186a0 	.word	0x000186a0

08000c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_I2C_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <HAL_I2C_MspInit+0x8c>)
 8000c78:	f003 f950 	bl	8003f1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_I2C_MspInit+0x88>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020400 	.word	0x40020400

08000cac <Time_count>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status);
void Time_count()
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	Second++;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <Time_count+0x5c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <Time_count+0x5c>)
 8000cba:	701a      	strb	r2, [r3, #0]
	if( Second > 59 )	{
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <Time_count+0x5c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b3b      	cmp	r3, #59	; 0x3b
 8000cc2:	d908      	bls.n	8000cd6 <Time_count+0x2a>
	  Minute ++;		Second = 0;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <Time_count+0x60>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <Time_count+0x60>)
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <Time_count+0x5c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
	}
	if (Minute > 59 ) 	{
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <Time_count+0x60>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b3b      	cmp	r3, #59	; 0x3b
 8000cdc:	d908      	bls.n	8000cf0 <Time_count+0x44>
	  Hour++;			 Minute =0;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <Time_count+0x64>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <Time_count+0x64>)
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <Time_count+0x60>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	}
	if( Hour > 11) Hour = 0;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <Time_count+0x64>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b0b      	cmp	r3, #11
 8000cf6:	d902      	bls.n	8000cfe <Time_count+0x52>
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <Time_count+0x64>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	200000ea 	.word	0x200000ea
 8000d0c:	200000e9 	.word	0x200000e9
 8000d10:	200000e8 	.word	0x200000e8

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f001 fff5 	bl	8002d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f88d 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d22:	f7ff fe93 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d26:	f7ff fe71 	bl	8000a0c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d2a:	f000 fc01 	bl	8001530 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d2e:	f7ff fda3 	bl	8000878 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d32:	f7ff ff45 	bl	8000bc0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000d36:	f000 fb53 	bl	80013e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4833      	ldr	r0, [pc, #204]	; (8000e10 <main+0xfc>)
 8000d44:	f002 f8ba 	bl	8002ebc <HAL_ADC_Start_DMA>

  u8g_InitComFn(&u8g,&u8g_dev_ssd1306_128x64_i2c,u8g_com_hw_i2c_fn);
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <main+0x100>)
 8000d4a:	4933      	ldr	r1, [pc, #204]	; (8000e18 <main+0x104>)
 8000d4c:	4833      	ldr	r0, [pc, #204]	; (8000e1c <main+0x108>)
 8000d4e:	f001 fbce 	bl	80024ee <u8g_InitComFn>

  I2C_LCD1602_Init();
 8000d52:	f7ff fc71 	bl	8000638 <I2C_LCD1602_Init>

  I2C_LCD1602_Send_String_XY( 0 , 0, "Welcom Zeus");
 8000d56:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <main+0x10c>)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fcd6 	bl	800070c <I2C_LCD1602_Send_String_XY>
  I2C_LCD1602_Send_String_XY( 0 , 1, "I2C PCF8574");
 8000d60:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <main+0x110>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fcd1 	bl	800070c <I2C_LCD1602_Send_String_XY>
  HAL_Delay(2000);
 8000d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d6e:	f002 f83d 	bl	8002dec <HAL_Delay>
  I2C_LCD1602_Clear();
 8000d72:	f7ff fce0 	bl	8000736 <I2C_LCD1602_Clear>

  sprintf( str, "start");
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	492b      	ldr	r1, [pc, #172]	; (8000e28 <main+0x114>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f005 f982 	bl	8006084 <siprintf>
  I2C_LCD1602_Send_string(str);
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fc8f 	bl	80006a6 <I2C_LCD1602_Send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fd1f 	bl	80007cc <Buzzer_OnOff>

  uint16_t AvgAdc=0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	83bb      	strh	r3, [r7, #28]
  uint16_t count = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	83fb      	strh	r3, [r7, #30]
  float distance = 0;
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
    /* USER CODE BEGIN 3 */

	  //distance = SR04_Check_Distance(10);
	  //sprintf(str, "%f mm", distance );

	  u8g_xyputs( 10, 55, &str[0] ,count++);
 8000d9c:	8bfb      	ldrh	r3, [r7, #30]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	83fa      	strh	r2, [r7, #30]
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	1d3a      	adds	r2, r7, #4
 8000da6:	2137      	movs	r1, #55	; 0x37
 8000da8:	200a      	movs	r0, #10
 8000daa:	f000 f9df 	bl	800116c <u8g_xyputs>

	  Time_count();
 8000dae:	f7ff ff7d 	bl	8000cac <Time_count>
	  if( count >100 ) count = 0;
 8000db2:	8bfb      	ldrh	r3, [r7, #30]
 8000db4:	2b64      	cmp	r3, #100	; 0x64
 8000db6:	d901      	bls.n	8000dbc <main+0xa8>
 8000db8:	2300      	movs	r3, #0
 8000dba:	83fb      	strh	r3, [r7, #30]

	  //HAL_Delay(500);



	  switch( Key_input() ) {
 8000dbc:	f7ff fd2c 	bl	8000818 <Key_input>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2be0      	cmp	r3, #224	; 0xe0
 8000dc4:	d00f      	beq.n	8000de6 <main+0xd2>
 8000dc6:	2be0      	cmp	r3, #224	; 0xe0
 8000dc8:	dc1f      	bgt.n	8000e0a <main+0xf6>
 8000dca:	2bd0      	cmp	r3, #208	; 0xd0
 8000dcc:	d011      	beq.n	8000df2 <main+0xde>
 8000dce:	2bd0      	cmp	r3, #208	; 0xd0
 8000dd0:	dc1b      	bgt.n	8000e0a <main+0xf6>
 8000dd2:	2b70      	cmp	r3, #112	; 0x70
 8000dd4:	d013      	beq.n	8000dfe <main+0xea>
 8000dd6:	2bb0      	cmp	r3, #176	; 0xb0
 8000dd8:	d117      	bne.n	8000e0a <main+0xf6>
	  case KEY_UP:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "UP    pressed");
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <main+0x118>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fc94 	bl	800070c <I2C_LCD1602_Send_String_XY>
		  break;
 8000de4:	e012      	b.n	8000e0c <main+0xf8>

	  case KEY_DOWN:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "DOWN  pressed");
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <main+0x11c>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fc8e 	bl	800070c <I2C_LCD1602_Send_String_XY>
		  break;
 8000df0:	e00c      	b.n	8000e0c <main+0xf8>

	  case KEY_RIGHT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "RIGHT pressed");
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <main+0x120>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	2000      	movs	r0, #0
 8000df8:	f7ff fc88 	bl	800070c <I2C_LCD1602_Send_String_XY>
		  break;
 8000dfc:	e006      	b.n	8000e0c <main+0xf8>

	  case KEY_LEFT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "LEFT  pressed");
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <main+0x124>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fc82 	bl	800070c <I2C_LCD1602_Send_String_XY>
		  break;
 8000e08:	e000      	b.n	8000e0c <main+0xf8>

	  default:
		  break;
 8000e0a:	bf00      	nop
	  u8g_xyputs( 10, 55, &str[0] ,count++);
 8000e0c:	e7c6      	b.n	8000d9c <main+0x88>
 8000e0e:	bf00      	nop
 8000e10:	2000017c 	.word	0x2000017c
 8000e14:	08001615 	.word	0x08001615
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	080068f8 	.word	0x080068f8
 8000e24:	08006904 	.word	0x08006904
 8000e28:	08006910 	.word	0x08006910
 8000e2c:	08006918 	.word	0x08006918
 8000e30:	08006928 	.word	0x08006928
 8000e34:	08006938 	.word	0x08006938
 8000e38:	08006948 	.word	0x08006948

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	; 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	2230      	movs	r2, #48	; 0x30
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f005 f912 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <SystemClock_Config+0xcc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <SystemClock_Config+0xd0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <SystemClock_Config+0xd0>)
 8000e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <SystemClock_Config+0xd0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb0:	2308      	movs	r3, #8
 8000eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000eb4:	2354      	movs	r3, #84	; 0x54
 8000eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f003 fe43 	bl	8004b50 <HAL_RCC_OscConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f9c0 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f004 f8a5 	bl	8005040 <HAL_RCC_ClockConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000efc:	f000 f9aa 	bl	8001254 <Error_Handler>
  }
}
 8000f00:	bf00      	nop
 8000f02:	3750      	adds	r7, #80	; 0x50
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000

08000f10 <u8g_battery_status>:

/* USER CODE BEGIN 4 */

void u8g_battery_status(uint8_t x, uint8_t y, uint8_t percentage)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	717b      	strb	r3, [r7, #5]
	char str[5];
	u8g_DrawFrame(&u8g, x, y, 18, 7); // battery����
 8000f22:	79ba      	ldrb	r2, [r7, #6]
 8000f24:	79f9      	ldrb	r1, [r7, #7]
 8000f26:	2307      	movs	r3, #7
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	488c      	ldr	r0, [pc, #560]	; (8001160 <u8g_battery_status+0x250>)
 8000f2e:	f001 fe4f 	bl	8002bd0 <u8g_DrawFrame>
	u8g_DrawFrame(&u8g, x+18,y+(5/2), 2,3); //battery����ǥ��
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	3312      	adds	r3, #18
 8000f36:	b2d9      	uxtb	r1, r3
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	2303      	movs	r3, #3
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	4886      	ldr	r0, [pc, #536]	; (8001160 <u8g_battery_status+0x250>)
 8000f46:	f001 fe43 	bl	8002bd0 <u8g_DrawFrame>
	uint8_t battery_step = 5;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	73fb      	strb	r3, [r7, #15]
	if( percentage > 90 ) 		battery_step =5;
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	2b5a      	cmp	r3, #90	; 0x5a
 8000f52:	d902      	bls.n	8000f5a <u8g_battery_status+0x4a>
 8000f54:	2305      	movs	r3, #5
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e01c      	b.n	8000f94 <u8g_battery_status+0x84>
	else if (percentage <= 10 )	battery_step =0;
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	2b0a      	cmp	r3, #10
 8000f5e:	d802      	bhi.n	8000f66 <u8g_battery_status+0x56>
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
 8000f64:	e016      	b.n	8000f94 <u8g_battery_status+0x84>
	else if (percentage <= 20 )	battery_step =1;
 8000f66:	797b      	ldrb	r3, [r7, #5]
 8000f68:	2b14      	cmp	r3, #20
 8000f6a:	d802      	bhi.n	8000f72 <u8g_battery_status+0x62>
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	e010      	b.n	8000f94 <u8g_battery_status+0x84>
	else if (percentage <= 40 )	battery_step =2;
 8000f72:	797b      	ldrb	r3, [r7, #5]
 8000f74:	2b28      	cmp	r3, #40	; 0x28
 8000f76:	d802      	bhi.n	8000f7e <u8g_battery_status+0x6e>
 8000f78:	2302      	movs	r3, #2
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e00a      	b.n	8000f94 <u8g_battery_status+0x84>
	else if (percentage <= 60 )	battery_step =3;
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	2b3c      	cmp	r3, #60	; 0x3c
 8000f82:	d802      	bhi.n	8000f8a <u8g_battery_status+0x7a>
 8000f84:	2303      	movs	r3, #3
 8000f86:	73fb      	strb	r3, [r7, #15]
 8000f88:	e004      	b.n	8000f94 <u8g_battery_status+0x84>
	else if (percentage <= 80 )	battery_step =4;
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	2b50      	cmp	r3, #80	; 0x50
 8000f8e:	d801      	bhi.n	8000f94 <u8g_battery_status+0x84>
 8000f90:	2304      	movs	r3, #4
 8000f92:	73fb      	strb	r3, [r7, #15]

	switch( battery_step )
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	f200 80c6 	bhi.w	800112a <u8g_battery_status+0x21a>
 8000f9e:	a201      	add	r2, pc, #4	; (adr r2, 8000fa4 <u8g_battery_status+0x94>)
 8000fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa4:	08000fb9 	.word	0x08000fb9
 8000fa8:	08000fd3 	.word	0x08000fd3
 8000fac:	08001005 	.word	0x08001005
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	080010b1 	.word	0x080010b1
	{
	case 1:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	b2d9      	uxtb	r1, r3
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	4865      	ldr	r0, [pc, #404]	; (8001160 <u8g_battery_status+0x250>)
 8000fcc:	f001 fe46 	bl	8002c5c <u8g_draw_box>
		break;
 8000fd0:	e0ab      	b.n	800112a <u8g_battery_status+0x21a>
	case 2:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	b2d9      	uxtb	r1, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	2305      	movs	r3, #5
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	485e      	ldr	r0, [pc, #376]	; (8001160 <u8g_battery_status+0x250>)
 8000fe6:	f001 fe39 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3305      	adds	r3, #5
 8000fee:	b2d9      	uxtb	r1, r3
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	4858      	ldr	r0, [pc, #352]	; (8001160 <u8g_battery_status+0x250>)
 8000ffe:	f001 fe2d 	bl	8002c5c <u8g_draw_box>
		break;
 8001002:	e092      	b.n	800112a <u8g_battery_status+0x21a>
	case 3:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3302      	adds	r3, #2
 8001008:	b2d9      	uxtb	r1, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	2305      	movs	r3, #5
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2302      	movs	r3, #2
 8001016:	4852      	ldr	r0, [pc, #328]	; (8001160 <u8g_battery_status+0x250>)
 8001018:	f001 fe20 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	3305      	adds	r3, #5
 8001020:	b2d9      	uxtb	r1, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	2305      	movs	r3, #5
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2302      	movs	r3, #2
 800102e:	484c      	ldr	r0, [pc, #304]	; (8001160 <u8g_battery_status+0x250>)
 8001030:	f001 fe14 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	3308      	adds	r3, #8
 8001038:	b2d9      	uxtb	r1, r3
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	2305      	movs	r3, #5
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2302      	movs	r3, #2
 8001046:	4846      	ldr	r0, [pc, #280]	; (8001160 <u8g_battery_status+0x250>)
 8001048:	f001 fe08 	bl	8002c5c <u8g_draw_box>
		break;
 800104c:	e06d      	b.n	800112a <u8g_battery_status+0x21a>
	case 4:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	3302      	adds	r3, #2
 8001052:	b2d9      	uxtb	r1, r3
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	3301      	adds	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	2305      	movs	r3, #5
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2302      	movs	r3, #2
 8001060:	483f      	ldr	r0, [pc, #252]	; (8001160 <u8g_battery_status+0x250>)
 8001062:	f001 fdfb 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	3305      	adds	r3, #5
 800106a:	b2d9      	uxtb	r1, r3
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	2305      	movs	r3, #5
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	4839      	ldr	r0, [pc, #228]	; (8001160 <u8g_battery_status+0x250>)
 800107a:	f001 fdef 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	3308      	adds	r3, #8
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	2305      	movs	r3, #5
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <u8g_battery_status+0x250>)
 8001092:	f001 fde3 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	330b      	adds	r3, #11
 800109a:	b2d9      	uxtb	r1, r3
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	2305      	movs	r3, #5
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	482d      	ldr	r0, [pc, #180]	; (8001160 <u8g_battery_status+0x250>)
 80010aa:	f001 fdd7 	bl	8002c5c <u8g_draw_box>
		break;
 80010ae:	e03c      	b.n	800112a <u8g_battery_status+0x21a>
	case 5:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3302      	adds	r3, #2
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	2305      	movs	r3, #5
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2302      	movs	r3, #2
 80010c2:	4827      	ldr	r0, [pc, #156]	; (8001160 <u8g_battery_status+0x250>)
 80010c4:	f001 fdca 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3305      	adds	r3, #5
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	2305      	movs	r3, #5
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2302      	movs	r3, #2
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <u8g_battery_status+0x250>)
 80010dc:	f001 fdbe 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	3308      	adds	r3, #8
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	2305      	movs	r3, #5
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2302      	movs	r3, #2
 80010f2:	481b      	ldr	r0, [pc, #108]	; (8001160 <u8g_battery_status+0x250>)
 80010f4:	f001 fdb2 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	330b      	adds	r3, #11
 80010fc:	b2d9      	uxtb	r1, r3
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	3301      	adds	r3, #1
 8001102:	b2da      	uxtb	r2, r3
 8001104:	2305      	movs	r3, #5
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2302      	movs	r3, #2
 800110a:	4815      	ldr	r0, [pc, #84]	; (8001160 <u8g_battery_status+0x250>)
 800110c:	f001 fda6 	bl	8002c5c <u8g_draw_box>
		u8g_draw_box(&u8g,x+14,y+1,2,5);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	330e      	adds	r3, #14
 8001114:	b2d9      	uxtb	r1, r3
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	2305      	movs	r3, #5
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2302      	movs	r3, #2
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <u8g_battery_status+0x250>)
 8001124:	f001 fd9a 	bl	8002c5c <u8g_draw_box>
		break;
 8001128:	bf00      	nop
	}
	u8g_SetFont( &u8g, u8g_font_courB08 );
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <u8g_battery_status+0x254>)
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <u8g_battery_status+0x250>)
 800112e:	f001 f873 	bl	8002218 <u8g_SetFont>
	sprintf( str, "%d%%",percentage);
 8001132:	797a      	ldrb	r2, [r7, #5]
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	490b      	ldr	r1, [pc, #44]	; (8001168 <u8g_battery_status+0x258>)
 800113a:	4618      	mov	r0, r3
 800113c:	f004 ffa2 	bl	8006084 <siprintf>
	u8g_DrawStr( &u8g,  x-25,  y+7, str );
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b19      	subs	r3, #25
 8001144:	b2d9      	uxtb	r1, r3
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	3307      	adds	r3, #7
 800114a:	b2da      	uxtb	r2, r3
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <u8g_battery_status+0x250>)
 8001152:	f000 ff9c 	bl	800208e <u8g_DrawStr>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000ac 	.word	0x200000ac
 8001164:	080069d4 	.word	0x080069d4
 8001168:	08006958 	.word	0x08006958

0800116c <u8g_xyputs>:
void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af02      	add	r7, sp, #8
 8001172:	603a      	str	r2, [r7, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	460b      	mov	r3, r1
 800117c:	71bb      	strb	r3, [r7, #6]
 800117e:	4613      	mov	r3, r2
 8001180:	717b      	strb	r3, [r7, #5]
	char Str_HM[20],Str_Sec[10];
	sprintf( Str_HM, "%02d:%02d", Hour, Minute);
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <u8g_xyputs+0xc4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <u8g_xyputs+0xc8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	f107 0014 	add.w	r0, r7, #20
 8001190:	4929      	ldr	r1, [pc, #164]	; (8001238 <u8g_xyputs+0xcc>)
 8001192:	f004 ff77 	bl	8006084 <siprintf>
	sprintf( Str_Sec, "%02d", Second);
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <u8g_xyputs+0xd0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4927      	ldr	r1, [pc, #156]	; (8001240 <u8g_xyputs+0xd4>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f004 ff6e 	bl	8006084 <siprintf>
	u8g_FirstPage(&u8g);
 80011a8:	4826      	ldr	r0, [pc, #152]	; (8001244 <u8g_xyputs+0xd8>)
 80011aa:	f001 f9b8 	bl	800251e <u8g_FirstPage>
	do
	{
		u8g_SetFont( &u8g, u8g_font_courB10 );
 80011ae:	4926      	ldr	r1, [pc, #152]	; (8001248 <u8g_xyputs+0xdc>)
 80011b0:	4824      	ldr	r0, [pc, #144]	; (8001244 <u8g_xyputs+0xd8>)
 80011b2:	f001 f831 	bl	8002218 <u8g_SetFont>
		u8g_DrawStr( &u8g,  x,  y, str );
 80011b6:	79ba      	ldrb	r2, [r7, #6]
 80011b8:	79f9      	ldrb	r1, [r7, #7]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <u8g_xyputs+0xd8>)
 80011be:	f000 ff66 	bl	800208e <u8g_DrawStr>

		//u8g_DrawBitmap(&u8g,10,1,16,52,Zeus_logo);
		u8g_SetFont( &u8g, u8g_font_osb21 );
 80011c2:	4922      	ldr	r1, [pc, #136]	; (800124c <u8g_xyputs+0xe0>)
 80011c4:	481f      	ldr	r0, [pc, #124]	; (8001244 <u8g_xyputs+0xd8>)
 80011c6:	f001 f827 	bl	8002218 <u8g_SetFont>
		u8g_DrawStr( &u8g, 35,40,&Str_HM[0]);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2228      	movs	r2, #40	; 0x28
 80011d0:	2123      	movs	r1, #35	; 0x23
 80011d2:	481c      	ldr	r0, [pc, #112]	; (8001244 <u8g_xyputs+0xd8>)
 80011d4:	f000 ff5b 	bl	800208e <u8g_DrawStr>

		u8g_SetFont( &u8g, u8g_font_gdb11 );
 80011d8:	491d      	ldr	r1, [pc, #116]	; (8001250 <u8g_xyputs+0xe4>)
 80011da:	481a      	ldr	r0, [pc, #104]	; (8001244 <u8g_xyputs+0xd8>)
 80011dc:	f001 f81c 	bl	8002218 <u8g_SetFont>
		u8g_DrawStr( &u8g, 108,38,&Str_Sec[0]);
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2226      	movs	r2, #38	; 0x26
 80011e6:	216c      	movs	r1, #108	; 0x6c
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <u8g_xyputs+0xd8>)
 80011ea:	f000 ff50 	bl	800208e <u8g_DrawStr>

		u8g_battery_status(100,6,battery_status);
 80011ee:	797b      	ldrb	r3, [r7, #5]
 80011f0:	461a      	mov	r2, r3
 80011f2:	2106      	movs	r1, #6
 80011f4:	2064      	movs	r0, #100	; 0x64
 80011f6:	f7ff fe8b 	bl	8000f10 <u8g_battery_status>


		u8g_DrawFrame(&u8g,2,2,126,62);
 80011fa:	233e      	movs	r3, #62	; 0x3e
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	237e      	movs	r3, #126	; 0x7e
 8001200:	2202      	movs	r2, #2
 8001202:	2102      	movs	r1, #2
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <u8g_xyputs+0xd8>)
 8001206:	f001 fce3 	bl	8002bd0 <u8g_DrawFrame>
		u8g_DrawFrame(&u8g,1,1,127,63);
 800120a:	233f      	movs	r3, #63	; 0x3f
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	237f      	movs	r3, #127	; 0x7f
 8001210:	2201      	movs	r2, #1
 8001212:	2101      	movs	r1, #1
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <u8g_xyputs+0xd8>)
 8001216:	f001 fcdb 	bl	8002bd0 <u8g_DrawFrame>
	} while( u8g_NextPage(&u8g));
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <u8g_xyputs+0xd8>)
 800121c:	f001 f98d 	bl	800253a <u8g_NextPage>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1c3      	bne.n	80011ae <u8g_xyputs+0x42>
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000e8 	.word	0x200000e8
 8001234:	200000e9 	.word	0x200000e9
 8001238:	08006960 	.word	0x08006960
 800123c:	200000ea 	.word	0x200000ea
 8001240:	0800696c 	.word	0x0800696c
 8001244:	200000ac 	.word	0x200000ac
 8001248:	08007350 	.word	0x08007350
 800124c:	08009148 	.word	0x08009148
 8001250:	0800806c 	.word	0x0800806c

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	; (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	; (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a2:	2007      	movs	r0, #7
 80012a4:	f002 fa88 	bl	80037b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40023800 	.word	0x40023800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f001 fd50 	bl	8002dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001314:	2010      	movs	r0, #16
 8001316:	f002 ffb7 	bl	8004288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001326:	f004 f8d4 	bl	80054d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000278 	.word	0x20000278

08001334 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA2_Stream0_IRQHandler+0x10>)
 800133a:	f002 fb85 	bl	8003a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001c4 	.word	0x200001c4

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f004 fe52 	bl	8006020 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20018000 	.word	0x20018000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200000ec 	.word	0x200000ec
 80013b0:	20000318 	.word	0x20000318

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <SystemInit+0x28>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <SystemInit+0x28>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <SystemInit+0x28>)
 80013ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ce:	609a      	str	r2, [r3, #8]
#endif
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <MX_TIM1_Init+0xa8>)
 80013fe:	4a23      	ldr	r2, [pc, #140]	; (800148c <MX_TIM1_Init+0xac>)
 8001400:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001404:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001408:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_TIM1_Init+0xa8>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001412:	f242 720f 	movw	r2, #9999	; 0x270f
 8001416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <MX_TIM1_Init+0xa8>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <MX_TIM1_Init+0xa8>)
 800142c:	f004 f802 	bl	8005434 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001436:	f7ff ff0d 	bl	8001254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800143a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143e:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001454:	f004 f945 	bl	80056e2 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800145e:	f7ff fef9 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_TIM1_Init+0xa8>)
 8001470:	f004 fb3e 	bl	8005af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800147a:	f7ff feeb 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000278 	.word	0x20000278
 800148c:	40010000 	.word	0x40010000

08001490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_TIM_Base_MspInit+0x94>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d134      	bne.n	800151c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_TIM_Base_MspInit+0x98>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4809      	ldr	r0, [pc, #36]	; (800152c <HAL_TIM_Base_MspInit+0x9c>)
 8001508:	f002 fd08 	bl	8003f1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2019      	movs	r0, #25
 8001512:	f002 f95c 	bl	80037ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001516:	2019      	movs	r0, #25
 8001518:	f002 f975 	bl	8003806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	; 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40010000 	.word	0x40010000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000

08001530 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART2_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART2_UART_Init+0x4c>)
 8001568:	f004 fb44 	bl	8005bf4 <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001572:	f7ff fe6f 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002c0 	.word	0x200002c0
 8001580:	40004400 	.word	0x40004400

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a19      	ldr	r2, [pc, #100]	; (8001608 <HAL_UART_MspInit+0x84>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d12b      	bne.n	80015fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x88>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <HAL_UART_MspInit+0x88>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_UART_MspInit+0x88>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015de:	230c      	movs	r3, #12
 80015e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ee:	2307      	movs	r3, #7
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x8c>)
 80015fa:	f002 fc8f 	bl	8003f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40004400 	.word	0x40004400
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000

08001614 <u8g_com_hw_i2c_fn>:
	 usleep(10);
 }
   
   
 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800161a:	af02      	add	r7, sp, #8
 800161c:	f107 040c 	add.w	r4, r7, #12
 8001620:	6020      	str	r0, [r4, #0]
 8001622:	4608      	mov	r0, r1
 8001624:	4611      	mov	r1, r2
 8001626:	1d3a      	adds	r2, r7, #4
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	f107 030b 	add.w	r3, r7, #11
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	f107 030a 	add.w	r3, r7, #10
 8001636:	460a      	mov	r2, r1
 8001638:	701a      	strb	r2, [r3, #0]
  switch(msg)  
 800163a:	f107 030b 	add.w	r3, r7, #11
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b07      	cmp	r3, #7
 8001642:	d86a      	bhi.n	800171a <u8g_com_hw_i2c_fn+0x106>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <u8g_com_hw_i2c_fn+0x38>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	0800171b 	.word	0x0800171b
 8001650:	0800171b 	.word	0x0800171b
 8001654:	0800166d 	.word	0x0800166d
 8001658:	0800171b 	.word	0x0800171b
 800165c:	0800171b 	.word	0x0800171b
 8001660:	08001687 	.word	0x08001687
 8001664:	080016af 	.word	0x080016af
 8001668:	080016af 	.word	0x080016af
    break;  
   
   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
	   //HAL_Delay(1);
	   //u8g_10MicroDelay();
    if (arg_val == 0)  
 800166c:	f107 030a 	add.w	r3, r7, #10
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d103      	bne.n	800167e <u8g_com_hw_i2c_fn+0x6a>
    {  
         control = 0;  
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <u8g_com_hw_i2c_fn+0x114>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
    }  
    else  
    {  
         control = 0x40;  
    }  
    break;  
 800167c:	e04d      	b.n	800171a <u8g_com_hw_i2c_fn+0x106>
         control = 0x40;  
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <u8g_com_hw_i2c_fn+0x114>)
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	701a      	strb	r2, [r3, #0]
    break;  
 8001684:	e049      	b.n	800171a <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_BYTE:  
   {  
        uint8_t buffer[2];  
        buffer[0] = control;  
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <u8g_com_hw_i2c_fn+0x114>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
        buffer[1] = arg_val;  
 800168e:	f107 030a 	add.w	r3, r7, #10
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);  
 8001698:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800169c:	f242 7310 	movw	r3, #10000	; 0x2710
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2302      	movs	r3, #2
 80016a4:	2178      	movs	r1, #120	; 0x78
 80016a6:	4821      	ldr	r0, [pc, #132]	; (800172c <u8g_com_hw_i2c_fn+0x118>)
 80016a8:	f002 ff4a 	bl	8004540 <HAL_I2C_Master_Transmit>
   }  
        break;  
 80016ac:	e035      	b.n	800171a <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_SEQ:  
   case U8G_COM_MSG_WRITE_SEQ_P:  
   {  
        uint8_t buffer[DATA_BUFFER_SIZE];  
           uint8_t *ptr = arg_ptr;  
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
           buffer[0] = control;  
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <u8g_com_hw_i2c_fn+0x114>)
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80016c6:	e011      	b.n	80016ec <u8g_com_hw_i2c_fn+0xd8>
           {  
                buffer[i] = *(ptr++);
 80016c8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80016d2:	7819      	ldrb	r1, [r3, #0]
 80016d4:	f107 0214 	add.w	r2, r7, #20
 80016d8:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80016dc:	4413      	add	r3, r2
 80016de:	460a      	mov	r2, r1
 80016e0:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 80016e2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80016e6:	3301      	adds	r3, #1
 80016e8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80016ec:	f107 030a 	add.w	r3, r7, #10
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dde6      	ble.n	80016c8 <u8g_com_hw_i2c_fn+0xb4>
           }  
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val+1, I2C_TIMEOUT);  
 80016fa:	f107 030a 	add.w	r3, r7, #10
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	f107 0214 	add.w	r2, r7, #20
 800170a:	f242 7110 	movw	r1, #10000	; 0x2710
 800170e:	9100      	str	r1, [sp, #0]
 8001710:	2178      	movs	r1, #120	; 0x78
 8001712:	4806      	ldr	r0, [pc, #24]	; (800172c <u8g_com_hw_i2c_fn+0x118>)
 8001714:	f002 ff14 	bl	8004540 <HAL_I2C_Master_Transmit>
   }  
   
    break;  
 8001718:	bf00      	nop
  }  
  return 1;  
 800171a:	2301      	movs	r3, #1
 }  
 800171c:	4618      	mov	r0, r3
 800171e:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001722:	46bd      	mov	sp, r7
 8001724:	bd90      	pop	{r4, r7, pc}
 8001726:	bf00      	nop
 8001728:	200000f0 	.word	0x200000f0
 800172c:	20000224 	.word	0x20000224

08001730 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8001730:	b490      	push	{r4, r7}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	70fb      	strb	r3, [r7, #3]
 8001742:	460b      	mov	r3, r1
 8001744:	70bb      	strb	r3, [r7, #2]
 8001746:	4613      	mov	r3, r2
 8001748:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 800174a:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 800174c:	7e3b      	ldrb	r3, [r7, #24]
 800174e:	4423      	add	r3, r4
 8001750:	b2dc      	uxtb	r4, r3
  tmp--;
 8001752:	4623      	mov	r3, r4
 8001754:	3b01      	subs	r3, #1
 8001756:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001764:	73fa      	strb	r2, [r7, #15]
 8001766:	73bb      	strb	r3, [r7, #14]
 8001768:	78bb      	ldrb	r3, [r7, #2]
 800176a:	737b      	strb	r3, [r7, #13]
 800176c:	4623      	mov	r3, r4
 800176e:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8001770:	7bba      	ldrb	r2, [r7, #14]
 8001772:	7b7b      	ldrb	r3, [r7, #13]
 8001774:	429a      	cmp	r2, r3
 8001776:	d30d      	bcc.n	8001794 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	7b3b      	ldrb	r3, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d801      	bhi.n	8001784 <u8g_IsBBXIntersection+0x54>
      return 1;
 8001780:	2301      	movs	r3, #1
 8001782:	e014      	b.n	80017ae <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8001784:	7b7a      	ldrb	r2, [r7, #13]
 8001786:	7b3b      	ldrb	r3, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d901      	bls.n	8001790 <u8g_IsBBXIntersection+0x60>
	return 1;
 800178c:	2301      	movs	r3, #1
 800178e:	e00e      	b.n	80017ae <u8g_IsBBXIntersection+0x7e>
	return 0;
 8001790:	2300      	movs	r3, #0
 8001792:	e00c      	b.n	80017ae <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8001794:	7bfa      	ldrb	r2, [r7, #15]
 8001796:	7b3b      	ldrb	r3, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d807      	bhi.n	80017ac <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 800179c:	7b7a      	ldrb	r2, [r7, #13]
 800179e:	7b3b      	ldrb	r3, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d901      	bls.n	80017a8 <u8g_IsBBXIntersection+0x78>
	return 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e002      	b.n	80017ae <u8g_IsBBXIntersection+0x7e>
	return 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e000      	b.n	80017ae <u8g_IsBBXIntersection+0x7e>
      return 0;
 80017ac:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <u8g_IsBBXIntersection+0x86>
    return 0; 
 80017b2:	2300      	movs	r3, #0
 80017b4:	e032      	b.n	800181c <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 80017b6:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 80017b8:	787b      	ldrb	r3, [r7, #1]
 80017ba:	4423      	add	r3, r4
 80017bc:	b2dc      	uxtb	r4, r3
  tmp--;
 80017be:	4623      	mov	r3, r4
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80017d0:	72fa      	strb	r2, [r7, #11]
 80017d2:	72bb      	strb	r3, [r7, #10]
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	727b      	strb	r3, [r7, #9]
 80017d8:	4623      	mov	r3, r4
 80017da:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 80017dc:	7aba      	ldrb	r2, [r7, #10]
 80017de:	7a7b      	ldrb	r3, [r7, #9]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d30d      	bcc.n	8001800 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 80017e4:	7afa      	ldrb	r2, [r7, #11]
 80017e6:	7a3b      	ldrb	r3, [r7, #8]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d801      	bhi.n	80017f0 <u8g_IsBBXIntersection+0xc0>
      return 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e014      	b.n	800181a <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 80017f0:	7a7a      	ldrb	r2, [r7, #9]
 80017f2:	7a3b      	ldrb	r3, [r7, #8]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d901      	bls.n	80017fc <u8g_IsBBXIntersection+0xcc>
	return 1;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e00e      	b.n	800181a <u8g_IsBBXIntersection+0xea>
	return 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e00c      	b.n	800181a <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8001800:	7afa      	ldrb	r2, [r7, #11]
 8001802:	7a3b      	ldrb	r3, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	d807      	bhi.n	8001818 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8001808:	7a7a      	ldrb	r2, [r7, #9]
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d901      	bls.n	8001814 <u8g_IsBBXIntersection+0xe4>
	return 1;
 8001810:	2301      	movs	r3, #1
 8001812:	e002      	b.n	800181a <u8g_IsBBXIntersection+0xea>
	return 0;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <u8g_IsBBXIntersection+0xea>
      return 0;
 8001818:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 800181a:	bf00      	nop
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bc90      	pop	{r4, r7}
 8001824:	4770      	bx	lr

08001826 <u8g_InitCom>:
#include "u8g_arm.h"

extern void u8g_Delay(uint16_t val);

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8001826:	b590      	push	{r4, r7, lr}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	4613      	mov	r3, r2
 8001832:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	689c      	ldr	r4, [r3, #8]
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	2300      	movs	r3, #0
 800183c:	2101      	movs	r1, #1
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	47a0      	blx	r4
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}

0800184c <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	4613      	mov	r3, r2
 8001858:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	689c      	ldr	r4, [r3, #8]
 800185e:	79fa      	ldrb	r2, [r7, #7]
 8001860:	2300      	movs	r3, #0
 8001862:	2103      	movs	r1, #3
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	47a0      	blx	r4
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689c      	ldr	r4, [r3, #8]
 800187e:	2300      	movs	r3, #0
 8001880:	2200      	movs	r2, #0
 8001882:	2104      	movs	r1, #4
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	47a0      	blx	r4
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bd90      	pop	{r4, r7, pc}

08001890 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689c      	ldr	r4, [r3, #8]
 800189e:	2300      	movs	r3, #0
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	47a0      	blx	r4
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}

080018b0 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	4613      	mov	r3, r2
 80018bc:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	689c      	ldr	r4, [r3, #8]
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	2300      	movs	r3, #0
 80018c6:	2102      	movs	r1, #2
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	47a0      	blx	r4
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	4613      	mov	r3, r2
 80018e0:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	689c      	ldr	r4, [r3, #8]
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	2300      	movs	r3, #0
 80018ea:	2105      	movs	r1, #5
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	47a0      	blx	r4
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd90      	pop	{r4, r7, pc}

080018fa <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 80018fa:	b590      	push	{r4, r7, lr}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	689c      	ldr	r4, [r3, #8]
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2106      	movs	r1, #6
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	47a0      	blx	r4
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bd90      	pop	{r4, r7, pc}

08001922 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d110      	bne.n	8001960 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 800193e:	7dbb      	ldrb	r3, [r7, #22]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d00a      	beq.n	800195a <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8001944:	7dbb      	ldrb	r3, [r7, #22]
 8001946:	461a      	mov	r2, r3
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff ffc2 	bl	80018d4 <u8g_WriteByte>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d15d      	bne.n	8001a12 <u8g_WriteEscSeqP+0xf0>
          return 0;
 8001956:	2300      	movs	r3, #0
 8001958:	e061      	b.n	8001a1e <u8g_WriteEscSeqP+0xfc>
      }
      else
      {
        is_escape = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	75fb      	strb	r3, [r7, #23]
 800195e:	e058      	b.n	8001a12 <u8g_WriteEscSeqP+0xf0>
      }
    }
    else
    {
      if ( value == 255 )
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	2bff      	cmp	r3, #255	; 0xff
 8001964:	d10a      	bne.n	800197c <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8001966:	7dbb      	ldrb	r3, [r7, #22]
 8001968:	461a      	mov	r2, r3
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff ffb1 	bl	80018d4 <u8g_WriteByte>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d14a      	bne.n	8001a0e <u8g_WriteEscSeqP+0xec>
          return 0;
 8001978:	2300      	movs	r3, #0
 800197a:	e050      	b.n	8001a1e <u8g_WriteEscSeqP+0xfc>
      }
      else if ( value == 254 )
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	2bfe      	cmp	r3, #254	; 0xfe
 8001980:	d04b      	beq.n	8001a1a <u8g_WriteEscSeqP+0xf8>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8001982:	7dbb      	ldrb	r3, [r7, #22]
 8001984:	2bef      	cmp	r3, #239	; 0xef
 8001986:	d842      	bhi.n	8001a0e <u8g_WriteEscSeqP+0xec>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8001988:	7dbb      	ldrb	r3, [r7, #22]
 800198a:	2bdf      	cmp	r3, #223	; 0xdf
 800198c:	d909      	bls.n	80019a2 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 800198e:	7dbb      	ldrb	r3, [r7, #22]
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff ff88 	bl	80018b0 <u8g_SetAddress>
 80019a0:	e035      	b.n	8001a0e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xd0 )
 80019a2:	7dbb      	ldrb	r3, [r7, #22]
 80019a4:	2bcf      	cmp	r3, #207	; 0xcf
 80019a6:	d909      	bls.n	80019bc <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 80019a8:	7dbb      	ldrb	r3, [r7, #22]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff ff49 	bl	800184c <u8g_SetChipSelect>
 80019ba:	e028      	b.n	8001a0e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xc0 )
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	2bbf      	cmp	r3, #191	; 0xbf
 80019c0:	d91a      	bls.n	80019f8 <u8g_WriteEscSeqP+0xd6>
      {
        u8g_SetResetLow(u8g, dev);
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff ff53 	bl	8001870 <u8g_SetResetLow>
        value &= 0x0f;
 80019ca:	7dbb      	ldrb	r3, [r7, #22]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	75bb      	strb	r3, [r7, #22]
        value+=2;
 80019d8:	7dbb      	ldrb	r3, [r7, #22]
 80019da:	3302      	adds	r3, #2
 80019dc:	75bb      	strb	r3, [r7, #22]
        HAL_Delay(value);
 80019de:	7dbb      	ldrb	r3, [r7, #22]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f001 fa03 	bl	8002dec <HAL_Delay>
        u8g_SetResetHigh(u8g, dev);
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff ff51 	bl	8001890 <u8g_SetResetHigh>
        HAL_Delay(value);
 80019ee:	7dbb      	ldrb	r3, [r7, #22]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 f9fb 	bl	8002dec <HAL_Delay>
 80019f6:	e00a      	b.n	8001a0e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xbe )
 80019f8:	7dbb      	ldrb	r3, [r7, #22]
 80019fa:	2bbd      	cmp	r3, #189	; 0xbd
 80019fc:	d807      	bhi.n	8001a0e <u8g_WriteEscSeqP+0xec>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 80019fe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db03      	blt.n	8001a0e <u8g_WriteEscSeqP+0xec>
      {
    	  HAL_Delay(value);
 8001a06:	7dbb      	ldrb	r3, [r7, #22]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 f9ef 	bl	8002dec <HAL_Delay>
      }
      is_escape = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3301      	adds	r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8001a18:	e78b      	b.n	8001932 <u8g_WriteEscSeqP+0x10>
        break;
 8001a1a:	bf00      	nop
  }
  return 1;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	460b      	mov	r3, r1
 8001a34:	72fb      	strb	r3, [r7, #11]
 8001a36:	4613      	mov	r3, r2
 8001a38:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8001a3a:	7afb      	ldrb	r3, [r7, #11]
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d811      	bhi.n	8001a64 <u8g_com_null_fn+0x3c>
 8001a40:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <u8g_com_null_fn+0x20>)
 8001a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a46:	bf00      	nop
 8001a48:	08001a65 	.word	0x08001a65
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a65 	.word	0x08001a65
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a65 	.word	0x08001a65
 8001a5c:	08001a65 	.word	0x08001a65
 8001a60:	08001a65 	.word	0x08001a65
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3b0a      	subs	r3, #10
 8001a88:	2b0b      	cmp	r3, #11
 8001a8a:	d85b      	bhi.n	8001b44 <u8g_dev_ssd1306_128x64_fn+0xd0>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <u8g_dev_ssd1306_128x64_fn+0x20>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001ac5 	.word	0x08001ac5
 8001a98:	08001b45 	.word	0x08001b45
 8001a9c:	08001b45 	.word	0x08001b45
 8001aa0:	08001b45 	.word	0x08001b45
 8001aa4:	08001b45 	.word	0x08001b45
 8001aa8:	08001b45 	.word	0x08001b45
 8001aac:	08001b29 	.word	0x08001b29
 8001ab0:	08001b37 	.word	0x08001b37
 8001ab4:	08001b45 	.word	0x08001b45
 8001ab8:	08001b45 	.word	0x08001b45
 8001abc:	08001b45 	.word	0x08001b45
 8001ac0:	08001adb 	.word	0x08001adb
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	68b9      	ldr	r1, [r7, #8]
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff feac 	bl	8001826 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8001ace:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <u8g_dev_ssd1306_128x64_fn+0xe8>)
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7ff ff25 	bl	8001922 <u8g_WriteEscSeqP>
      break;
 8001ad8:	e034      	b.n	8001b44 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <u8g_dev_ssd1306_128x64_fn+0xec>)
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f7ff ff1c 	bl	8001922 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	791b      	ldrb	r3, [r3, #4]
 8001aee:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff feeb 	bl	80018d4 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8001afe:	2201      	movs	r2, #1
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f7ff fed4 	bl	80018b0 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	6978      	ldr	r0, [r7, #20]
 8001b0e:	f000 fe53 	bl	80027b8 <u8g_pb_WriteBuffer>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e01a      	b.n	8001b52 <u8g_dev_ssd1306_128x64_fn+0xde>
        u8g_SetChipSelect(u8g, dev, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff fe93 	bl	800184c <u8g_SetChipSelect>
      }
      break;
 8001b26:	e00d      	b.n	8001b44 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <u8g_dev_ssd1306_128x64_fn+0xf0>)
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff fef8 	bl	8001922 <u8g_WriteEscSeqP>
      return 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00d      	b.n	8001b52 <u8g_dev_ssd1306_128x64_fn+0xde>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8001b36:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <u8g_dev_ssd1306_128x64_fn+0xf4>)
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff fef1 	bl	8001922 <u8g_WriteEscSeqP>
      return 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e006      	b.n	8001b52 <u8g_dev_ssd1306_128x64_fn+0xde>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fef4 	bl	8002938 <u8g_dev_pb8v1_base_fn>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	0800698c 	.word	0x0800698c
 8001b60:	080069b4 	.word	0x080069b4
 8001b64:	080069bc 	.word	0x080069bc
 8001b68:	080069c8 	.word	0x080069c8

08001b6c <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	781b      	ldrb	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	81fb      	strh	r3, [r7, #14]
    font++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3301      	adds	r3, #1
 8001bae:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffc6 	bl	8001b6c <u8g_font_get_byte>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffec 	bl	8001bd0 <u8g_font_GetFormat>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d00a      	beq.n	8001c14 <u8g_font_GetFontGlyphStructureSize+0x2a>
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	dc0a      	bgt.n	8001c18 <u8g_font_GetFontGlyphStructureSize+0x2e>
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <u8g_font_GetFontGlyphStructureSize+0x22>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d002      	beq.n	8001c10 <u8g_font_GetFontGlyphStructureSize+0x26>
 8001c0a:	e005      	b.n	8001c18 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	e004      	b.n	8001c1a <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e002      	b.n	8001c1a <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 8001c14:	2306      	movs	r3, #6
 8001c16:	e000      	b.n	8001c1a <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8001c18:	2303      	movs	r3, #3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ff9d 	bl	8001b6c <u8g_font_get_byte>
 8001c32:	4603      	mov	r3, r0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 8001c44:	2106      	movs	r1, #6
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <u8g_font_get_word>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8001c5e:	2108      	movs	r1, #8
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff95 	bl	8001b90 <u8g_font_get_word>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8001c78:	210a      	movs	r1, #10
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff76 	bl	8001b6c <u8g_font_get_byte>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 8001c92:	210b      	movs	r1, #11
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff69 	bl	8001b6c <u8g_font_get_byte>
 8001c9a:	4603      	mov	r3, r0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8001cac:	210c      	movs	r1, #12
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff5c 	bl	8001b6c <u8g_font_get_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b25b      	sxtb	r3, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 8001cc8:	210d      	movs	r1, #13
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ff4e 	bl	8001b6c <u8g_font_get_byte>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	b25b      	sxtb	r3, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff40 	bl	8001b6c <u8g_font_get_byte>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b25b      	sxtb	r3, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 8001d00:	210f      	movs	r1, #15
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff32 	bl	8001b6c <u8g_font_get_byte>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b25b      	sxtb	r3, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8001d1c:	2110      	movs	r1, #16
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ff24 	bl	8001b6c <u8g_font_get_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b25b      	sxtb	r3, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff55 	bl	8001bea <u8g_font_GetFontGlyphStructureSize>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4413      	add	r3, r2
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff36 	bl	8001bd0 <u8g_font_GetFormat>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <u8g_CopyGlyphDataToCache+0x1e>
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d11b      	bne.n	8001da6 <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	785a      	ldrb	r2, [r3, #1]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	3303      	adds	r3, #3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b25a      	sxtb	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b25a      	sxtb	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	779a      	strb	r2, [r3, #30]
      break;
 8001da4:	e034      	b.n	8001e10 <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8001dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3b02      	subs	r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	b25a      	sxtb	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8001dd2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	785b      	ldrb	r3, [r3, #1]
 8001dde:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	789b      	ldrb	r3, [r3, #2]
 8001dfe:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	091b      	lsrs	r3, r3, #4
 8001e04:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 8001e06:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	771a      	strb	r2, [r3, #28]
    
      
      break;
 8001e0e:	bf00      	nop
  }
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	779a      	strb	r2, [r3, #30]
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff feb4 	bl	8001bd0 <u8g_font_GetFormat>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff feba 	bl	8001bea <u8g_font_GetFontGlyphStructureSize>
 8001e76:	4603      	mov	r3, r0
 8001e78:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8001e7a:	23ff      	movs	r3, #255	; 0xff
 8001e7c:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8001e7e:	7c3b      	ldrb	r3, [r7, #16]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <u8g_GetGlyph+0x3c>
    mask = 15;
 8001e84:	230f      	movs	r3, #15
 8001e86:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff feef 	bl	8001c70 <u8g_font_GetFontStartEncoding>
 8001e92:	4603      	mov	r3, r0
 8001e94:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fef5 	bl	8001c8a <u8g_font_GetFontEndEncoding>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fed4 	bl	8001c56 <u8g_font_GetEncoding97Pos>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b60      	cmp	r3, #96	; 0x60
 8001eb6:	d909      	bls.n	8001ecc <u8g_GetGlyph+0x80>
 8001eb8:	89bb      	ldrh	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8001ebe:	89bb      	ldrh	r3, [r7, #12]
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
    start = 97;
 8001ec6:	2361      	movs	r3, #97	; 0x61
 8001ec8:	74fb      	strb	r3, [r7, #19]
 8001eca:	e016      	b.n	8001efa <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff feb3 	bl	8001c3c <u8g_font_GetEncoding65Pos>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	2b40      	cmp	r3, #64	; 0x40
 8001ede:	d909      	bls.n	8001ef4 <u8g_GetGlyph+0xa8>
 8001ee0:	89bb      	ldrh	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8001ee6:	89bb      	ldrh	r3, [r7, #12]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4413      	add	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
      start = 65;
 8001eee:	2341      	movs	r3, #65	; 0x41
 8001ef0:	74fb      	strb	r3, [r7, #19]
 8001ef2:	e002      	b.n	8001efa <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3311      	adds	r3, #17
 8001ef8:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	7bbb      	ldrb	r3, [r7, #14]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d904      	bls.n	8001f0c <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff88 	bl	8001e18 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e032      	b.n	8001f72 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8001f10:	7cba      	ldrb	r2, [r7, #18]
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d828      	bhi.n	8001f6a <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2bff      	cmp	r3, #255	; 0xff
 8001f1e:	d103      	bne.n	8001f28 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e017      	b.n	8001f58 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8001f28:	7cba      	ldrb	r2, [r7, #18]
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d105      	bne.n	8001f3c <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ff0c 	bl	8001d50 <u8g_CopyGlyphDataToCache>
          return p;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	e01a      	b.n	8001f72 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3302      	adds	r3, #2
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	7c7b      	ldrb	r3, [r7, #17]
 8001f44:	4013      	ands	r3, r2
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8001f58:	7cba      	ldrb	r2, [r7, #18]
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d003      	beq.n	8001f68 <u8g_GetGlyph+0x11c>
        break;
      i++;
 8001f60:	7cbb      	ldrb	r3, [r7, #18]
 8001f62:	3301      	adds	r3, #1
 8001f64:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8001f66:	e7d7      	b.n	8001f18 <u8g_GetGlyph+0xcc>
        break;
 8001f68:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ff54 	bl	8001e18 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b088      	sub	sp, #32
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	4608      	mov	r0, r1
 8001f84:	4611      	mov	r1, r2
 8001f86:	461a      	mov	r2, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	70fb      	strb	r3, [r7, #3]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70bb      	strb	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	4619      	mov	r1, r3
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff57 	bl	8001e4c <u8g_GetGlyph>
 8001f9e:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <u8g_draw_glyph+0x30>
      return 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e06d      	b.n	8002086 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff febd 	bl	8001d30 <u8g_font_GetGlyphDataStart>
 8001fb6:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7fdb      	ldrb	r3, [r3, #31]
 8001fbc:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc4:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	70bb      	strb	r3, [r7, #2]
  y--;
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8001fe8:	78ba      	ldrb	r2, [r7, #2]
 8001fea:	7abb      	ldrb	r3, [r7, #10]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	7af8      	ldrb	r0, [r7, #11]
 8001ff6:	78f9      	ldrb	r1, [r7, #3]
 8001ff8:	7abb      	ldrb	r3, [r7, #10]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fb96 	bl	8001730 <u8g_IsBBXIntersection>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002010:	e039      	b.n	8002086 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8002012:	7afb      	ldrb	r3, [r7, #11]
 8002014:	3307      	adds	r3, #7
 8002016:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 800201e:	78bb      	ldrb	r3, [r7, #2]
 8002020:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8002022:	7c3a      	ldrb	r2, [r7, #16]
 8002024:	7abb      	ldrb	r3, [r7, #10]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	743b      	strb	r3, [r7, #16]
  iy++;
 800202a:	7c3b      	ldrb	r3, [r7, #16]
 800202c:	3301      	adds	r3, #1
 800202e:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8002030:	2300      	movs	r3, #0
 8002032:	74bb      	strb	r3, [r7, #18]
 8002034:	e020      	b.n	8002078 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800203a:	2300      	movs	r3, #0
 800203c:	74fb      	strb	r3, [r7, #19]
 800203e:	e011      	b.n	8002064 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	7c3a      	ldrb	r2, [r7, #16]
 8002046:	7c79      	ldrb	r1, [r7, #17]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2300      	movs	r3, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fa8b 	bl	8002568 <u8g_Draw8Pixel>
      data++;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
      ix+=8;
 8002058:	7c7b      	ldrb	r3, [r7, #17]
 800205a:	3308      	adds	r3, #8
 800205c:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 800205e:	7cfb      	ldrb	r3, [r7, #19]
 8002060:	3301      	adds	r3, #1
 8002062:	74fb      	strb	r3, [r7, #19]
 8002064:	7cfa      	ldrb	r2, [r7, #19]
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	429a      	cmp	r2, r3
 800206a:	d3e9      	bcc.n	8002040 <u8g_draw_glyph+0xc6>
    }
    iy++;
 800206c:	7c3b      	ldrb	r3, [r7, #16]
 800206e:	3301      	adds	r3, #1
 8002070:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8002072:	7cbb      	ldrb	r3, [r7, #18]
 8002074:	3301      	adds	r3, #1
 8002076:	74bb      	strb	r3, [r7, #18]
 8002078:	7cba      	ldrb	r2, [r7, #18]
 800207a:	7abb      	ldrb	r3, [r7, #10]
 800207c:	429a      	cmp	r2, r3
 800207e:	d3da      	bcc.n	8002036 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	72fb      	strb	r3, [r7, #11]
 800209c:	4613      	mov	r3, r2
 800209e:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	7abb      	ldrb	r3, [r7, #10]
 80020b2:	4413      	add	r3, r2
 80020b4:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 80020b6:	e013      	b.n	80020e0 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	7aba      	ldrb	r2, [r7, #10]
 80020be:	7af9      	ldrb	r1, [r7, #11]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7ff ff5a 	bl	8001f7a <u8g_draw_glyph>
 80020c6:	4603      	mov	r3, r0
 80020c8:	75bb      	strb	r3, [r7, #22]
    x += d;
 80020ca:	7dba      	ldrb	r2, [r7, #22]
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	4413      	add	r3, r2
 80020d0:	72fb      	strb	r3, [r7, #11]
    t += d;
 80020d2:	7dba      	ldrb	r2, [r7, #22]
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	4413      	add	r3, r2
 80020d8:	75fb      	strb	r3, [r7, #23]
    s++;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3301      	adds	r3, #1
 80020de:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e7      	bne.n	80020b8 <u8g_DrawStr+0x2a>
  }
  return t;
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06b      	beq.n	80021da <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d114      	bne.n	8002136 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd86 	bl	8001c22 <u8g_font_GetCapitalAHeight>
 8002116:	4603      	mov	r3, r0
 8002118:	b25a      	sxtb	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fdbd 	bl	8001ca4 <u8g_font_GetLowerGDescent>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002134:	e02d      	b.n	8002192 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800213c:	2b01      	cmp	r3, #1
 800213e:	d114      	bne.n	800216a <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fdd7 	bl	8001cf8 <u8g_font_GetFontXAscent>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fddb 	bl	8001d14 <u8g_font_GetFontXDescent>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002168:	e013      	b.n	8002192 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fda6 	bl	8001cc0 <u8g_font_GetFontAscent>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fdaa 	bl	8001cdc <u8g_font_GetFontDescent>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8002198:	b21a      	sxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d00d      	beq.n	80021ce <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80021be:	b29b      	uxth	r3, r3
 80021c0:	89fa      	ldrh	r2, [r7, #14]
 80021c2:	fb12 f303 	smulbb	r3, r2, r3
 80021c6:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 80021c8:	89fb      	ldrh	r3, [r7, #14]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80021d8:	e000      	b.n	80021dc <u8g_UpdateRefHeight+0xea>
    return;
 80021da:	bf00      	nop
}
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <u8g_SetFontPosBaseline+0x1c>)
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	080021e3 	.word	0x080021e3

08002218 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d008      	beq.n	800223e <u8g_SetFont+0x26>
  {
    u8g->font = font;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff5d 	bl	80020f2 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffdd 	bl	80021f8 <u8g_SetFontPosBaseline>
  }
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002246:	b590      	push	{r4, r7, lr}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	681c      	ldr	r4, [r3, #0]
 800225a:	79fa      	ldrb	r2, [r7, #7]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	47a0      	blx	r4
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bd90      	pop	{r4, r7, pc}

0800226e <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	2002      	movs	r0, #2
 800227e:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002280:	2300      	movs	r3, #0
 8002282:	220a      	movs	r2, #10
 8002284:	6839      	ldr	r1, [r7, #0]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffdd 	bl	8002246 <u8g_call_dev_fn>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	2003      	movs	r0, #3
 8002296:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	2000      	movs	r0, #0
 800229e:	4798      	blx	r3
  return r;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b8:	2002      	movs	r0, #2
 80022ba:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c0:	2001      	movs	r0, #1
 80022c2:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80022c4:	2300      	movs	r3, #0
 80022c6:	2214      	movs	r2, #20
 80022c8:	6839      	ldr	r1, [r7, #0]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ffbb 	bl	8002246 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3338      	adds	r3, #56	; 0x38
 80022d4:	2217      	movs	r2, #23
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ffb4 	bl	8002246 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e2:	2000      	movs	r0, #0
 80022e4:	4798      	blx	r3
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	2002      	movs	r0, #2
 80022fe:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	2001      	movs	r0, #1
 8002306:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002308:	2300      	movs	r3, #0
 800230a:	2215      	movs	r2, #21
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff99 	bl	8002246 <u8g_call_dev_fn>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3338      	adds	r3, #56	; 0x38
 8002322:	2217      	movs	r2, #23
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff8d 	bl	8002246 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002330:	2000      	movs	r0, #0
 8002332:	4798      	blx	r3
  return r;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	4611      	mov	r1, r2
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	4613      	mov	r3, r2
 8002352:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	332d      	adds	r3, #45	; 0x2d
 8002358:	617b      	str	r3, [r7, #20]
  arg->x = x;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f897 2020 	ldrb.w	r2, [r7, #32]
 800236c:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002374:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	223b      	movs	r2, #59	; 0x3b
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff ff62 	bl	8002246 <u8g_call_dev_fn>
}
 8002382:	bf00      	nop
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b084      	sub	sp, #16
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8002394:	f107 030f 	add.w	r3, r7, #15
 8002398:	2246      	movs	r2, #70	; 0x46
 800239a:	6839      	ldr	r1, [r7, #0]
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff52 	bl	8002246 <u8g_call_dev_fn>
  return r;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 80023b6:	f107 030f 	add.w	r3, r7, #15
 80023ba:	2247      	movs	r2, #71	; 0x47
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ff41 	bl	8002246 <u8g_call_dev_fn>
  return r;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80023d8:	2300      	movs	r3, #0
 80023da:	2248      	movs	r2, #72	; 0x48
 80023dc:	6839      	ldr	r1, [r7, #0]
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff31 	bl	8002246 <u8g_call_dev_fn>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ffc4 	bl	800238a <u8g_GetWidthLL>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffcb 	bl	80023ac <u8g_GetHeightLL>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffd2 	bl	80023ce <u8g_GetModeLL>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3338      	adds	r3, #56	; 0x38
 800243a:	2217      	movs	r2, #23
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ff02 	bl	8002246 <u8g_call_dev_fn>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2222      	movs	r2, #34	; 0x22
 8002470:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8002478:	2101      	movs	r1, #1
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f891 	bl	80025a2 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff feb9 	bl	80021f8 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a02      	ldr	r2, [pc, #8]	; (80024bc <u8g_init_data+0x70>)
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34

}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	08002c9f 	.word	0x08002c9f

080024c0 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fecd 	bl	800226e <u8g_InitLL>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <u8g_Begin+0x1e>
    return 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	e003      	b.n	80024e6 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff85 	bl	80023ee <u8g_UpdateDimension>
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7ff ffa6 	bl	800244c <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ffd6 	bl	80024c0 <u8g_Begin>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff febc 	bl	80022aa <u8g_FirstPageLL>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fec8 	bl	80022ee <u8g_NextPageLL>
 800255e:	4603      	mov	r3, r0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	4608      	mov	r0, r1
 8002572:	4611      	mov	r1, r2
 8002574:	461a      	mov	r2, r3
 8002576:	4603      	mov	r3, r0
 8002578:	70fb      	strb	r3, [r7, #3]
 800257a:	460b      	mov	r3, r1
 800257c:	70bb      	strb	r3, [r7, #2]
 800257e:	4613      	mov	r3, r2
 8002580:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	78b8      	ldrb	r0, [r7, #2]
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	7c3b      	ldrb	r3, [r7, #16]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	787b      	ldrb	r3, [r7, #1]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4603      	mov	r3, r0
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fed2 	bl	800233e <u8g_Draw8PixelLL>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	78db      	ldrb	r3, [r3, #3]
 80025dc:	3b01      	subs	r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	711a      	strb	r2, [r3, #4]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 80025f6:	b490      	push	{r4, r7}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	789a      	ldrb	r2, [r3, #2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	789a      	ldrb	r2, [r3, #2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	429a      	cmp	r2, r3
 8002618:	d301      	bcc.n	800261e <u8g_page_Next+0x28>
    return 0;
 800261a:	2300      	movs	r3, #0
 800261c:	e018      	b.n	8002650 <u8g_page_Next+0x5a>
  p->page++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	791b      	ldrb	r3, [r3, #4]
 8002622:	3301      	adds	r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	4423      	add	r3, r4
 8002634:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	429c      	cmp	r4, r3
 800263c:	d304      	bcc.n	8002648 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8002642:	4623      	mov	r3, r4
 8002644:	3b01      	subs	r3, #1
 8002646:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4622      	mov	r2, r4
 800264c:	70da      	strb	r2, [r3, #3]
  
  return 1;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bc90      	pop	{r4, r7}
 8002658:	4770      	bx	lr

0800265a <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	795b      	ldrb	r3, [r3, #5]
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	4413      	add	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60fa      	str	r2, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d1f6      	bne.n	8002678 <u8g_pb_Clear+0x1e>
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
 80026a4:	4613      	mov	r3, r2
 80026a6:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	78db      	ldrb	r3, [r3, #3]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	bf94      	ite	ls
 80026b2:	2301      	movls	r3, #1
 80026b4:	2300      	movhi	r3, #0
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	78ba      	ldrb	r2, [r7, #2]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	bf2c      	ite	cs
 80026c4:	2301      	movcs	r3, #1
 80026c6:	2300      	movcc	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	78bb      	ldrb	r3, [r7, #2]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	bf8c      	ite	hi
 80026d4:	2301      	movhi	r3, #1
 80026d6:	2300      	movls	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	4013      	ands	r3, r2
 80026e6:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 80026e8:	7bba      	ldrb	r2, [r7, #14]
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	4013      	ands	r3, r2
 80026ee:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 80026f0:	7b7a      	ldrb	r2, [r7, #13]
 80026f2:	7b3b      	ldrb	r3, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	7b7b      	ldrb	r3, [r7, #13]
 8002704:	4313      	orrs	r3, r2
 8002706:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	789a      	ldrb	r2, [r3, #2]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	795a      	ldrb	r2, [r3, #5]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	709a      	strb	r2, [r3, #2]
  box->x1--;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	789b      	ldrb	r3, [r3, #2]
 8002740:	3b01      	subs	r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	78da      	ldrb	r2, [r3, #3]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	70da      	strb	r2, [r3, #3]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	78db      	ldrb	r3, [r3, #3]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d813      	bhi.n	80027a0 <u8g_pb_Is8PixelVisible+0x44>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <u8g_pb_Is8PixelVisible+0x24>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027a1 	.word	0x080027a1
 8002784:	08002791 	.word	0x08002791
 8002788:	080027a1 	.word	0x080027a1
 800278c:	08002799 	.word	0x08002799
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	3308      	adds	r3, #8
 8002794:	73bb      	strb	r3, [r7, #14]
      break;
 8002796:	e003      	b.n	80027a0 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	3b08      	subs	r3, #8
 800279c:	73fb      	strb	r3, [r7, #15]
      break;
 800279e:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 80027a0:	7bba      	ldrb	r2, [r7, #14]
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	4619      	mov	r1, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ff76 	bl	8002698 <u8g_pb_IsYIntersection>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop

080027b8 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	795a      	ldrb	r2, [r3, #5]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	68b8      	ldr	r0, [r7, #8]
 80027d0:	f7ff f893 	bl	80018fa <u8g_WriteSequence>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 80027de:	b490      	push	{r4, r7}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	4608      	mov	r0, r1
 80027e8:	4611      	mov	r1, r2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70bb      	strb	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	789b      	ldrb	r3, [r3, #2]
 8002802:	78ba      	ldrb	r2, [r7, #2]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8002808:	2401      	movs	r4, #1
  y &= 0x07;
 800280a:	78bb      	ldrb	r3, [r7, #2]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8002812:	4622      	mov	r2, r4
 8002814:	78bb      	ldrb	r3, [r7, #2]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	b2dc      	uxtb	r4, r3
  ptr += x;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8002824:	787b      	ldrb	r3, [r7, #1]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4323      	orrs	r3, r4
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8002836:	e007      	b.n	8002848 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8002838:	43e3      	mvns	r3, r4
 800283a:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4023      	ands	r3, r4
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bc90      	pop	{r4, r7}
 8002850:	4770      	bx	lr

08002852 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	785a      	ldrb	r2, [r3, #1]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	789b      	ldrb	r3, [r3, #2]
 8002864:	429a      	cmp	r2, r3
 8002866:	d315      	bcc.n	8002894 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	785a      	ldrb	r2, [r3, #1]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	78db      	ldrb	r3, [r3, #3]
 8002870:	429a      	cmp	r2, r3
 8002872:	d811      	bhi.n	8002898 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	795b      	ldrb	r3, [r3, #5]
 800287c:	429a      	cmp	r2, r3
 800287e:	d20d      	bcs.n	800289c <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	7819      	ldrb	r1, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	785a      	ldrb	r2, [r3, #1]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	791b      	ldrb	r3, [r3, #4]
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ffa6 	bl	80027de <u8g_pb8v1_set_pixel>
 8002892:	e004      	b.n	800289e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8002894:	bf00      	nop
 8002896:	e002      	b.n	800289e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800289c:	bf00      	nop
}
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	78db      	ldrb	r3, [r3, #3]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d81c      	bhi.n	80028fc <u8g_pb8v1_Set8PixelOpt2+0x58>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028d9 	.word	0x080028d9
 80028cc:	080028e1 	.word	0x080028e1
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028f1 	.word	0x080028f1
  {
    case 0: dx++; break;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3301      	adds	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	e00d      	b.n	80028fc <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 1: dy++; break;
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	3301      	adds	r3, #1
 80028e4:	73bb      	strb	r3, [r7, #14]
 80028e6:	e009      	b.n	80028fc <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 2: dx--; break;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e005      	b.n	80028fc <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 3: dy--; break;
 80028f0:	7bbb      	ldrb	r3, [r7, #14]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	73bb      	strb	r3, [r7, #14]
 80028f6:	bf00      	nop
 80028f8:	e000      	b.n	80028fc <u8g_pb8v1_Set8PixelOpt2+0x58>
  }
  
  do
 80028fa:	bf00      	nop
  {
    if ( pixel & 128 )
 80028fc:	b263      	sxtb	r3, r4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da03      	bge.n	800290a <u8g_pb8v1_Set8PixelOpt2+0x66>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8002902:	6839      	ldr	r1, [r7, #0]
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffa4 	bl	8002852 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	4413      	add	r3, r2
 8002912:	b2da      	uxtb	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	785a      	ldrb	r2, [r3, #1]
 800291c:	7bbb      	ldrb	r3, [r7, #14]
 800291e:	4413      	add	r3, r2
 8002920:	b2da      	uxtb	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8002926:	0063      	lsls	r3, r4, #1
 8002928:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 800292a:	2c00      	cmp	r4, #0
 800292c:	d1e5      	bne.n	80028fa <u8g_pb8v1_Set8PixelOpt2+0x56>
  
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}

08002938 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	617b      	str	r3, [r7, #20]
  switch(msg)
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	3b0a      	subs	r3, #10
 8002952:	2b3e      	cmp	r3, #62	; 0x3e
 8002954:	f200 80ba 	bhi.w	8002acc <u8g_dev_pb8v1_base_fn+0x194>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <u8g_dev_pb8v1_base_fn+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002acd 	.word	0x08002acd
 8002964:	08002acd 	.word	0x08002acd
 8002968:	08002acd 	.word	0x08002acd
 800296c:	08002acd 	.word	0x08002acd
 8002970:	08002acd 	.word	0x08002acd
 8002974:	08002acd 	.word	0x08002acd
 8002978:	08002acd 	.word	0x08002acd
 800297c:	08002acd 	.word	0x08002acd
 8002980:	08002acd 	.word	0x08002acd
 8002984:	08002acd 	.word	0x08002acd
 8002988:	08002a7f 	.word	0x08002a7f
 800298c:	08002a8f 	.word	0x08002a8f
 8002990:	08002acd 	.word	0x08002acd
 8002994:	08002aa9 	.word	0x08002aa9
 8002998:	08002acd 	.word	0x08002acd
 800299c:	08002acd 	.word	0x08002acd
 80029a0:	08002acd 	.word	0x08002acd
 80029a4:	08002acd 	.word	0x08002acd
 80029a8:	08002acd 	.word	0x08002acd
 80029ac:	08002acd 	.word	0x08002acd
 80029b0:	08002acd 	.word	0x08002acd
 80029b4:	08002acd 	.word	0x08002acd
 80029b8:	08002acd 	.word	0x08002acd
 80029bc:	08002acd 	.word	0x08002acd
 80029c0:	08002acd 	.word	0x08002acd
 80029c4:	08002acd 	.word	0x08002acd
 80029c8:	08002acd 	.word	0x08002acd
 80029cc:	08002acd 	.word	0x08002acd
 80029d0:	08002acd 	.word	0x08002acd
 80029d4:	08002acd 	.word	0x08002acd
 80029d8:	08002acd 	.word	0x08002acd
 80029dc:	08002acd 	.word	0x08002acd
 80029e0:	08002acd 	.word	0x08002acd
 80029e4:	08002acd 	.word	0x08002acd
 80029e8:	08002acd 	.word	0x08002acd
 80029ec:	08002acd 	.word	0x08002acd
 80029f0:	08002acd 	.word	0x08002acd
 80029f4:	08002acd 	.word	0x08002acd
 80029f8:	08002acd 	.word	0x08002acd
 80029fc:	08002acd 	.word	0x08002acd
 8002a00:	08002a75 	.word	0x08002a75
 8002a04:	08002acd 	.word	0x08002acd
 8002a08:	08002acd 	.word	0x08002acd
 8002a0c:	08002acd 	.word	0x08002acd
 8002a10:	08002acd 	.word	0x08002acd
 8002a14:	08002acd 	.word	0x08002acd
 8002a18:	08002acd 	.word	0x08002acd
 8002a1c:	08002acd 	.word	0x08002acd
 8002a20:	08002acd 	.word	0x08002acd
 8002a24:	08002a5d 	.word	0x08002a5d
 8002a28:	08002acd 	.word	0x08002acd
 8002a2c:	08002acd 	.word	0x08002acd
 8002a30:	08002acd 	.word	0x08002acd
 8002a34:	08002acd 	.word	0x08002acd
 8002a38:	08002acd 	.word	0x08002acd
 8002a3c:	08002acd 	.word	0x08002acd
 8002a40:	08002acd 	.word	0x08002acd
 8002a44:	08002acd 	.word	0x08002acd
 8002a48:	08002acd 	.word	0x08002acd
 8002a4c:	08002acd 	.word	0x08002acd
 8002a50:	08002ab3 	.word	0x08002ab3
 8002a54:	08002abd 	.word	0x08002abd
 8002a58:	08002ac7 	.word	0x08002ac7
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8002a5c:	6839      	ldr	r1, [r7, #0]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff fe7c 	bl	800275c <u8g_pb_Is8PixelVisible>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d02f      	beq.n	8002aca <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8002a6a:	6839      	ldr	r1, [r7, #0]
 8002a6c:	6978      	ldr	r0, [r7, #20]
 8002a6e:	f7ff ff19 	bl	80028a4 <u8g_pb8v1_Set8PixelOpt2>
      break;
 8002a72:	e02a      	b.n	8002aca <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff feeb 	bl	8002852 <u8g_pb8v1_SetPixel>
      break;
 8002a7c:	e026      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff fdeb 	bl	800265a <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fd9b 	bl	80025c2 <u8g_page_First>
      break;
 8002a8c:	e01e      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fdb0 	bl	80025f6 <u8g_page_Next>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e016      	b.n	8002ace <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff fdda 	bl	800265a <u8g_pb_Clear>
      break;
 8002aa6:	e011      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff fe36 	bl	800271c <u8g_pb_GetPageBox>
      break;
 8002ab0:	e00c      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	795a      	ldrb	r2, [r3, #5]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	701a      	strb	r2, [r3, #0]
      break;
 8002aba:	e007      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	785a      	ldrb	r2, [r3, #1]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	701a      	strb	r2, [r3, #0]
      break;
 8002ac4:	e002      	b.n	8002acc <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e001      	b.n	8002ace <u8g_dev_pb8v1_base_fn+0x196>
      break;
 8002aca:	bf00      	nop
  }
  return 1;
 8002acc:	2301      	movs	r3, #1
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop

08002ad8 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	70fb      	strb	r3, [r7, #3]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70bb      	strb	r3, [r7, #2]
 8002aee:	4613      	mov	r3, r2
 8002af0:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 8002af2:	23ff      	movs	r3, #255	; 0xff
 8002af4:	73fb      	strb	r3, [r7, #15]
  while( w >= 8 )
 8002af6:	e00d      	b.n	8002b14 <u8g_draw_hline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8002af8:	78ba      	ldrb	r2, [r7, #2]
 8002afa:	78f9      	ldrb	r1, [r7, #3]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	2300      	movs	r3, #0
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fd30 	bl	8002568 <u8g_Draw8Pixel>
    w-=8;
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	3b08      	subs	r3, #8
 8002b0c:	707b      	strb	r3, [r7, #1]
    x+=8;
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	3308      	adds	r3, #8
 8002b12:	70fb      	strb	r3, [r7, #3]
  while( w >= 8 )
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b07      	cmp	r3, #7
 8002b18:	d8ee      	bhi.n	8002af8 <u8g_draw_hline+0x20>
  }
  if ( w != 0 )
 8002b1a:	787b      	ldrb	r3, [r7, #1]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <u8g_draw_hline+0x74>
  {
    w ^=7;
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	f083 0307 	eor.w	r3, r3, #7
 8002b26:	707b      	strb	r3, [r7, #1]
    w++;
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	707b      	strb	r3, [r7, #1]
    pixel <<= w&7;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8002b3c:	78ba      	ldrb	r2, [r7, #2]
 8002b3e:	78f9      	ldrb	r1, [r7, #3]
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fd0e 	bl	8002568 <u8g_Draw8Pixel>
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af02      	add	r7, sp, #8
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	4603      	mov	r3, r0
 8002b64:	70fb      	strb	r3, [r7, #3]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70bb      	strb	r3, [r7, #2]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 8002b6e:	23ff      	movs	r3, #255	; 0xff
 8002b70:	73fb      	strb	r3, [r7, #15]
  while( h >= 8 )
 8002b72:	e00d      	b.n	8002b90 <u8g_draw_vline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8002b74:	78ba      	ldrb	r2, [r7, #2]
 8002b76:	78f9      	ldrb	r1, [r7, #3]
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fcf2 	bl	8002568 <u8g_Draw8Pixel>
    h-=8;
 8002b84:	787b      	ldrb	r3, [r7, #1]
 8002b86:	3b08      	subs	r3, #8
 8002b88:	707b      	strb	r3, [r7, #1]
    y+=8;
 8002b8a:	78bb      	ldrb	r3, [r7, #2]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	70bb      	strb	r3, [r7, #2]
  while( h >= 8 )
 8002b90:	787b      	ldrb	r3, [r7, #1]
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d8ee      	bhi.n	8002b74 <u8g_draw_vline+0x20>
  }
  if ( h != 0 )
 8002b96:	787b      	ldrb	r3, [r7, #1]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <u8g_draw_vline+0x74>
  {
    h ^=7;
 8002b9c:	787b      	ldrb	r3, [r7, #1]
 8002b9e:	f083 0307 	eor.w	r3, r3, #7
 8002ba2:	707b      	strb	r3, [r7, #1]
    h++;
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	707b      	strb	r3, [r7, #1]
    pixel <<= h&7;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8002bb8:	78ba      	ldrb	r2, [r7, #2]
 8002bba:	78f9      	ldrb	r1, [r7, #3]
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff fcd0 	bl	8002568 <u8g_Draw8Pixel>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4603      	mov	r3, r0
 8002be0:	70fb      	strb	r3, [r7, #3]
 8002be2:	460b      	mov	r3, r1
 8002be4:	70bb      	strb	r3, [r7, #2]
 8002be6:	4613      	mov	r3, r2
 8002be8:	707b      	strb	r3, [r7, #1]
  u8g_uint_t xtmp = x;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	73fb      	strb	r3, [r7, #15]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8002bee:	7878      	ldrb	r0, [r7, #1]
 8002bf0:	78ba      	ldrb	r2, [r7, #2]
 8002bf2:	78f9      	ldrb	r1, [r7, #3]
 8002bf4:	7e3b      	ldrb	r3, [r7, #24]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fd98 	bl	8001730 <u8g_IsBBXIntersection>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d026      	beq.n	8002c54 <u8g_DrawFrame+0x84>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
 8002c06:	787b      	ldrb	r3, [r7, #1]
 8002c08:	78ba      	ldrb	r2, [r7, #2]
 8002c0a:	78f9      	ldrb	r1, [r7, #3]
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff63 	bl	8002ad8 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
 8002c12:	7e3b      	ldrb	r3, [r7, #24]
 8002c14:	78ba      	ldrb	r2, [r7, #2]
 8002c16:	78f9      	ldrb	r1, [r7, #3]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff9b 	bl	8002b54 <u8g_draw_vline>
  x+=w;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	787b      	ldrb	r3, [r7, #1]
 8002c22:	4413      	add	r3, r2
 8002c24:	70fb      	strb	r3, [r7, #3]
  x--;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  u8g_draw_vline(u8g, x, y, h);
 8002c2c:	7e3b      	ldrb	r3, [r7, #24]
 8002c2e:	78ba      	ldrb	r2, [r7, #2]
 8002c30:	78f9      	ldrb	r1, [r7, #3]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ff8e 	bl	8002b54 <u8g_draw_vline>
  y+=h;
 8002c38:	78ba      	ldrb	r2, [r7, #2]
 8002c3a:	7e3b      	ldrb	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	70bb      	strb	r3, [r7, #2]
  y--;
 8002c40:	78bb      	ldrb	r3, [r7, #2]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	70bb      	strb	r3, [r7, #2]
  u8g_draw_hline(u8g, xtmp, y, w);
 8002c46:	787b      	ldrb	r3, [r7, #1]
 8002c48:	78ba      	ldrb	r2, [r7, #2]
 8002c4a:	7bf9      	ldrb	r1, [r7, #15]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff ff43 	bl	8002ad8 <u8g_draw_hline>
 8002c52:	e000      	b.n	8002c56 <u8g_DrawFrame+0x86>
    return;
 8002c54:	bf00      	nop
}
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	70fb      	strb	r3, [r7, #3]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70bb      	strb	r3, [r7, #2]
 8002c72:	4613      	mov	r3, r2
 8002c74:	707b      	strb	r3, [r7, #1]
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
 8002c76:	787b      	ldrb	r3, [r7, #1]
 8002c78:	78ba      	ldrb	r2, [r7, #2]
 8002c7a:	78f9      	ldrb	r1, [r7, #3]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff2b 	bl	8002ad8 <u8g_draw_hline>
    y++;    
 8002c82:	78bb      	ldrb	r3, [r7, #2]
 8002c84:	3301      	adds	r3, #1
 8002c86:	70bb      	strb	r3, [r7, #2]
    h--;
 8002c88:	7c3b      	ldrb	r3, [r7, #16]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	743b      	strb	r3, [r7, #16]
  } while( h != 0 );
 8002c8e:	7c3b      	ldrb	r3, [r7, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <u8g_draw_box+0x1a>
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cba:	e003      	b.n	8002cc4 <LoopCopyDataInit>

08002cbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cc2:	3104      	adds	r1, #4

08002cc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002cc4:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002cc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002cca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ccc:	d3f6      	bcc.n	8002cbc <CopyDataInit>
  ldr  r2, =_sbss
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002cd0:	e002      	b.n	8002cd8 <LoopFillZerobss>

08002cd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002cd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cd4:	f842 3b04 	str.w	r3, [r2], #4

08002cd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cdc:	d3f9      	bcc.n	8002cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cde:	f7fe fb69 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ce2:	f003 f9a3 	bl	800602c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ce6:	f7fe f815 	bl	8000d14 <main>
  bx  lr    
 8002cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002cf0:	0800b720 	.word	0x0800b720
  ldr  r0, =_sdata
 8002cf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cf8:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002cfc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002d00:	20000318 	.word	0x20000318

08002d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC_IRQHandler>
	...

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_Init+0x40>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <HAL_Init+0x40>)
 8002d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_Init+0x40>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_Init+0x40>)
 8002d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d24:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_Init+0x40>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a07      	ldr	r2, [pc, #28]	; (8002d48 <HAL_Init+0x40>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d30:	2003      	movs	r0, #3
 8002d32:	f000 fd41 	bl	80037b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f000 f808 	bl	8002d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d3c:	f7fe fa92 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023c00 	.word	0x40023c00

08002d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_InitTick+0x54>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_InitTick+0x58>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fd59 	bl	8003822 <HAL_SYSTICK_Config>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00e      	b.n	8002d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	d80a      	bhi.n	8002d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d80:	2200      	movs	r2, #0
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f000 fd21 	bl	80037ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d8c:	4a06      	ldr	r2, [pc, #24]	; (8002da8 <HAL_InitTick+0x5c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000020 	.word	0x20000020
 8002da8:	2000001c 	.word	0x2000001c

08002dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_IncTick+0x20>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_IncTick+0x24>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_IncTick+0x24>)
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000020 	.word	0x20000020
 8002dd0:	20000304 	.word	0x20000304

08002dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_GetTick+0x14>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000304 	.word	0x20000304

08002dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df4:	f7ff ffee 	bl	8002dd4 <HAL_GetTick>
 8002df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d005      	beq.n	8002e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_Delay+0x44>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e12:	bf00      	nop
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d8f7      	bhi.n	8002e14 <HAL_Delay+0x28>
  {
  }
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000020 	.word	0x20000020

08002e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e033      	b.n	8002eb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fd62 	bl	800091c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e7a:	f023 0302 	bic.w	r3, r3, #2
 8002e7e:	f043 0202 	orr.w	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 fa48 	bl	800331c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ea2:	e001      	b.n	8002ea8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Start_DMA+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e0ce      	b.n	8003078 <HAL_ADC_Start_DMA+0x1bc>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d018      	beq.n	8002f22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f00:	4b5f      	ldr	r3, [pc, #380]	; (8003080 <HAL_ADC_Start_DMA+0x1c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5f      	ldr	r2, [pc, #380]	; (8003084 <HAL_ADC_Start_DMA+0x1c8>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	0c9a      	lsrs	r2, r3, #18
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f14:	e002      	b.n	8002f1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f9      	bne.n	8002f16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f30:	d107      	bne.n	8002f42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 8086 	bne.w	800305e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f90:	d106      	bne.n	8002fa0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	f023 0206 	bic.w	r2, r3, #6
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8002f9e:	e002      	b.n	8002fa6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fae:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_ADC_Start_DMA+0x1cc>)
 8002fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <HAL_ADC_Start_DMA+0x1d0>)
 8002fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4a34      	ldr	r2, [pc, #208]	; (8003090 <HAL_ADC_Start_DMA+0x1d4>)
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	4a33      	ldr	r2, [pc, #204]	; (8003094 <HAL_ADC_Start_DMA+0x1d8>)
 8002fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	334c      	adds	r3, #76	; 0x4c
 8002ffe:	4619      	mov	r1, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f000 fcc8 	bl	8003998 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10f      	bne.n	8003034 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d129      	bne.n	8003076 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e020      	b.n	8003076 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a17      	ldr	r2, [pc, #92]	; (8003098 <HAL_ADC_Start_DMA+0x1dc>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11b      	bne.n	8003076 <HAL_ADC_Start_DMA+0x1ba>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d114      	bne.n	8003076 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e00b      	b.n	8003076 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000000 	.word	0x20000000
 8003084:	431bde83 	.word	0x431bde83
 8003088:	40012300 	.word	0x40012300
 800308c:	08003515 	.word	0x08003515
 8003090:	080035cf 	.word	0x080035cf
 8003094:	080035eb 	.word	0x080035eb
 8003098:	40012000 	.word	0x40012000

0800309c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e105      	b.n	8003300 <HAL_ADC_ConfigChannel+0x228>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b09      	cmp	r3, #9
 8003102:	d925      	bls.n	8003150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	3b1e      	subs	r3, #30
 800311a:	2207      	movs	r2, #7
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43da      	mvns	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	400a      	ands	r2, r1
 8003128:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4618      	mov	r0, r3
 800313c:	4603      	mov	r3, r0
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4403      	add	r3, r0
 8003142:	3b1e      	subs	r3, #30
 8003144:	409a      	lsls	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	e022      	b.n	8003196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	2207      	movs	r2, #7
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	400a      	ands	r2, r1
 8003172:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6919      	ldr	r1, [r3, #16]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	4618      	mov	r0, r3
 8003186:	4603      	mov	r3, r0
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4403      	add	r3, r0
 800318c:	409a      	lsls	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d824      	bhi.n	80031e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	3b05      	subs	r3, #5
 80031b0:	221f      	movs	r2, #31
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	400a      	ands	r2, r1
 80031be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4618      	mov	r0, r3
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b05      	subs	r3, #5
 80031da:	fa00 f203 	lsl.w	r2, r0, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
 80031e6:	e04c      	b.n	8003282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d824      	bhi.n	800323a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	3b23      	subs	r3, #35	; 0x23
 8003202:	221f      	movs	r2, #31
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43da      	mvns	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	400a      	ands	r2, r1
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	4618      	mov	r0, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	3b23      	subs	r3, #35	; 0x23
 800322c:	fa00 f203 	lsl.w	r2, r0, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
 8003238:	e023      	b.n	8003282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b41      	subs	r3, #65	; 0x41
 800324c:	221f      	movs	r2, #31
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b41      	subs	r3, #65	; 0x41
 8003276:	fa00 f203 	lsl.w	r2, r0, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_ADC_ConfigChannel+0x234>)
 8003284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a21      	ldr	r2, [pc, #132]	; (8003310 <HAL_ADC_ConfigChannel+0x238>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1cc>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_ADC_ConfigChannel+0x238>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d123      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x21e>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d003      	beq.n	80032be <HAL_ADC_ConfigChannel+0x1e6>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b11      	cmp	r3, #17
 80032bc:	d11b      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d111      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_ADC_ConfigChannel+0x23c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_ADC_ConfigChannel+0x240>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	0c9a      	lsrs	r2, r3, #18
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032e8:	e002      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f9      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40012300 	.word	0x40012300
 8003310:	40012000 	.word	0x40012000
 8003314:	20000000 	.word	0x20000000
 8003318:	431bde83 	.word	0x431bde83

0800331c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003324:	4b79      	ldr	r3, [pc, #484]	; (800350c <ADC_Init+0x1f0>)
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	4a58      	ldr	r2, [pc, #352]	; (8003510 <ADC_Init+0x1f4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e00f      	b.n	800341a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0202 	bic.w	r2, r2, #2
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e1b      	ldrb	r3, [r3, #24]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	3b01      	subs	r3, #1
 8003474:	035a      	lsls	r2, r3, #13
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e007      	b.n	8003490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	051a      	lsls	r2, r3, #20
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034d2:	025a      	lsls	r2, r3, #9
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6899      	ldr	r1, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	029a      	lsls	r2, r3, #10
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40012300 	.word	0x40012300
 8003510:	0f000001 	.word	0x0f000001

08003514 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800352a:	2b00      	cmp	r3, #0
 800352c:	d13c      	bne.n	80035a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d12b      	bne.n	80035a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800354c:	2b00      	cmp	r3, #0
 800354e:	d127      	bne.n	80035a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d006      	beq.n	800356c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003568:	2b00      	cmp	r3, #0
 800356a:	d119      	bne.n	80035a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0220 	bic.w	r2, r2, #32
 800357a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff fd7b 	bl	800309c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035a6:	e00e      	b.n	80035c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f7ff fd85 	bl	80030c4 <HAL_ADC_ErrorCallback>
}
 80035ba:	e004      	b.n	80035c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	4798      	blx	r3
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd67 	bl	80030b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2240      	movs	r2, #64	; 0x40
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f043 0204 	orr.w	r2, r3, #4
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff fd5a 	bl	80030c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003610:	bf00      	nop
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003634:	4013      	ands	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <__NVIC_GetPriorityGrouping+0x18>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 0307 	and.w	r3, r3, #7
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db0b      	blt.n	80036a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <__NVIC_EnableIRQ+0x38>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2001      	movs	r0, #1
 800369e:	fa00 f202 	lsl.w	r2, r0, r2
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003784:	d301      	bcc.n	800378a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003786:	2301      	movs	r3, #1
 8003788:	e00f      	b.n	80037aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <SysTick_Config+0x40>)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003792:	210f      	movs	r1, #15
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f7ff ff8e 	bl	80036b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <SysTick_Config+0x40>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <SysTick_Config+0x40>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	e000e010 	.word	0xe000e010

080037b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ff29 	bl	8003618 <__NVIC_SetPriorityGrouping>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037e0:	f7ff ff3e 	bl	8003660 <__NVIC_GetPriorityGrouping>
 80037e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	6978      	ldr	r0, [r7, #20]
 80037ec:	f7ff ff8e 	bl	800370c <NVIC_EncodePriority>
 80037f0:	4602      	mov	r2, r0
 80037f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff5d 	bl	80036b8 <__NVIC_SetPriority>
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b082      	sub	sp, #8
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff31 	bl	800367c <__NVIC_EnableIRQ>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ffa2 	bl	8003774 <SysTick_Config>
 8003830:	4603      	mov	r3, r0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff fac4 	bl	8002dd4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e099      	b.n	800398c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003878:	e00f      	b.n	800389a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800387a:	f7ff faab 	bl	8002dd4 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b05      	cmp	r3, #5
 8003886:	d908      	bls.n	800389a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2203      	movs	r2, #3
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e078      	b.n	800398c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e8      	bne.n	800387a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <HAL_DMA_Init+0x158>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	4313      	orrs	r3, r2
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b04      	cmp	r3, #4
 800392c:	d117      	bne.n	800395e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fa6f 	bl	8003e24 <DMA_CheckFifoParam>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2240      	movs	r2, #64	; 0x40
 8003950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800395a:	2301      	movs	r3, #1
 800395c:	e016      	b.n	800398c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa26 	bl	8003db8 <DMA_CalcBaseAndBitshift>
 800396c:	4603      	mov	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	223f      	movs	r2, #63	; 0x3f
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	f010803f 	.word	0xf010803f

08003998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_DMA_Start_IT+0x26>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e040      	b.n	8003a40 <HAL_DMA_Start_IT+0xa8>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d12f      	bne.n	8003a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f9b8 	bl	8003d5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f0:	223f      	movs	r2, #63	; 0x3f
 80039f2:	409a      	lsls	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0216 	orr.w	r2, r2, #22
 8003a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e005      	b.n	8003a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a54:	4b92      	ldr	r3, [pc, #584]	; (8003ca0 <HAL_DMA_IRQHandler+0x258>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a92      	ldr	r2, [pc, #584]	; (8003ca4 <HAL_DMA_IRQHandler+0x25c>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0a9b      	lsrs	r3, r3, #10
 8003a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2208      	movs	r2, #8
 8003a74:	409a      	lsls	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01a      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0204 	bic.w	r2, r2, #4
 8003a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0201 	orr.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	2201      	movs	r2, #1
 8003aba:	409a      	lsls	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0202 	orr.w	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	2204      	movs	r2, #4
 8003af0:	409a      	lsls	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d012      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	2210      	movs	r2, #16
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d043      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d03c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	2210      	movs	r2, #16
 8003b44:	409a      	lsls	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d018      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d024      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	4798      	blx	r3
 8003b76:	e01f      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01b      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e016      	b.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d107      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0208 	bic.w	r2, r2, #8
 8003ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 808e 	beq.w	8003ce6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8086 	beq.w	8003ce6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2220      	movs	r2, #32
 8003be0:	409a      	lsls	r2, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	d136      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0216 	bic.w	r2, r2, #22
 8003c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x1da>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0208 	bic.w	r2, r2, #8
 8003c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	223f      	movs	r2, #63	; 0x3f
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d07d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
        }
        return;
 8003c5e:	e078      	b.n	8003d52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d108      	bne.n	8003c8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d030      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4798      	blx	r3
 8003c8c:	e02b      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d027      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e022      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x29e>
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10f      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0210 	bic.w	r2, r2, #16
 8003cc4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d032      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d022      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d307      	bcc.n	8003d2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f2      	bne.n	8003d12 <HAL_DMA_IRQHandler+0x2ca>
 8003d2c:	e000      	b.n	8003d30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e000      	b.n	8003d54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d52:	bf00      	nop
    }
  }
}
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop

08003d5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d108      	bne.n	8003d9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d9a:	e007      	b.n	8003dac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	60da      	str	r2, [r3, #12]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b10      	subs	r3, #16
 8003dc8:	4a14      	ldr	r2, [pc, #80]	; (8003e1c <DMA_CalcBaseAndBitshift+0x64>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dd2:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <DMA_CalcBaseAndBitshift+0x68>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d909      	bls.n	8003dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	1d1a      	adds	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	; 0x58
 8003df8:	e007      	b.n	8003e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	aaaaaaab 	.word	0xaaaaaaab
 8003e20:	0800b6d4 	.word	0x0800b6d4

08003e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11f      	bne.n	8003e7e <DMA_CheckFifoParam+0x5a>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d856      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xce>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <DMA_CheckFifoParam+0x28>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e6f 	.word	0x08003e6f
 8003e54:	08003e5d 	.word	0x08003e5d
 8003e58:	08003ef3 	.word	0x08003ef3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d046      	beq.n	8003ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6c:	e043      	b.n	8003ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e76:	d140      	bne.n	8003efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e03d      	b.n	8003efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e86:	d121      	bne.n	8003ecc <DMA_CheckFifoParam+0xa8>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d837      	bhi.n	8003efe <DMA_CheckFifoParam+0xda>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <DMA_CheckFifoParam+0x70>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eab 	.word	0x08003eab
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003ebd 	.word	0x08003ebd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea8:	e030      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d025      	beq.n	8003f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eba:	e022      	b.n	8003f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ec4:	d11f      	bne.n	8003f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eca:	e01c      	b.n	8003f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d903      	bls.n	8003eda <DMA_CheckFifoParam+0xb6>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d003      	beq.n	8003ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed8:	e018      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ede:	e015      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e00b      	b.n	8003f0a <DMA_CheckFifoParam+0xe6>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e00a      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e008      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e006      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop

08003f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b089      	sub	sp, #36	; 0x24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	e159      	b.n	80041ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f38:	2201      	movs	r2, #1
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	f040 8148 	bne.w	80041e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d005      	beq.n	8003f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d130      	bne.n	8003fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	2203      	movs	r2, #3
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 0201 	and.w	r2, r3, #1
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d017      	beq.n	800400c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d123      	bne.n	8004060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	08da      	lsrs	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3208      	adds	r2, #8
 8004020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	220f      	movs	r2, #15
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4013      	ands	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	69b9      	ldr	r1, [r7, #24]
 800405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2203      	movs	r2, #3
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 0203 	and.w	r2, r3, #3
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80a2 	beq.w	80041e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	4b57      	ldr	r3, [pc, #348]	; (8004204 <HAL_GPIO_Init+0x2e8>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_GPIO_Init+0x2e8>)
 80040ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b0:	6453      	str	r3, [r2, #68]	; 0x44
 80040b2:	4b54      	ldr	r3, [pc, #336]	; (8004204 <HAL_GPIO_Init+0x2e8>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040be:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_GPIO_Init+0x2ec>)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	3302      	adds	r3, #2
 80040c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	220f      	movs	r2, #15
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43db      	mvns	r3, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4013      	ands	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a49      	ldr	r2, [pc, #292]	; (800420c <HAL_GPIO_Init+0x2f0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d019      	beq.n	800411e <HAL_GPIO_Init+0x202>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a48      	ldr	r2, [pc, #288]	; (8004210 <HAL_GPIO_Init+0x2f4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_GPIO_Init+0x1fe>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a47      	ldr	r2, [pc, #284]	; (8004214 <HAL_GPIO_Init+0x2f8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00d      	beq.n	8004116 <HAL_GPIO_Init+0x1fa>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a46      	ldr	r2, [pc, #280]	; (8004218 <HAL_GPIO_Init+0x2fc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <HAL_GPIO_Init+0x1f6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a45      	ldr	r2, [pc, #276]	; (800421c <HAL_GPIO_Init+0x300>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <HAL_GPIO_Init+0x1f2>
 800410a:	2304      	movs	r3, #4
 800410c:	e008      	b.n	8004120 <HAL_GPIO_Init+0x204>
 800410e:	2307      	movs	r3, #7
 8004110:	e006      	b.n	8004120 <HAL_GPIO_Init+0x204>
 8004112:	2303      	movs	r3, #3
 8004114:	e004      	b.n	8004120 <HAL_GPIO_Init+0x204>
 8004116:	2302      	movs	r3, #2
 8004118:	e002      	b.n	8004120 <HAL_GPIO_Init+0x204>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_GPIO_Init+0x204>
 800411e:	2300      	movs	r3, #0
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	f002 0203 	and.w	r2, r2, #3
 8004126:	0092      	lsls	r2, r2, #2
 8004128:	4093      	lsls	r3, r2
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004130:	4935      	ldr	r1, [pc, #212]	; (8004208 <HAL_GPIO_Init+0x2ec>)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	089b      	lsrs	r3, r3, #2
 8004136:	3302      	adds	r3, #2
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800413e:	4b38      	ldr	r3, [pc, #224]	; (8004220 <HAL_GPIO_Init+0x304>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004162:	4a2f      	ldr	r2, [pc, #188]	; (8004220 <HAL_GPIO_Init+0x304>)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_GPIO_Init+0x304>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	43db      	mvns	r3, r3
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4013      	ands	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418c:	4a24      	ldr	r2, [pc, #144]	; (8004220 <HAL_GPIO_Init+0x304>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004192:	4b23      	ldr	r3, [pc, #140]	; (8004220 <HAL_GPIO_Init+0x304>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	43db      	mvns	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4013      	ands	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041b6:	4a1a      	ldr	r2, [pc, #104]	; (8004220 <HAL_GPIO_Init+0x304>)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041bc:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_GPIO_Init+0x304>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4013      	ands	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041e0:	4a0f      	ldr	r2, [pc, #60]	; (8004220 <HAL_GPIO_Init+0x304>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3301      	adds	r3, #1
 80041ea:	61fb      	str	r3, [r7, #28]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b0f      	cmp	r3, #15
 80041f0:	f67f aea2 	bls.w	8003f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	40013800 	.word	0x40013800
 800420c:	40020000 	.word	0x40020000
 8004210:	40020400 	.word	0x40020400
 8004214:	40020800 	.word	0x40020800
 8004218:	40020c00 	.word	0x40020c00
 800421c:	40021000 	.word	0x40021000
 8004220:	40013c00 	.word	0x40013c00

08004224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e001      	b.n	8004246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004246:	7bfb      	ldrb	r3, [r7, #15]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004270:	e003      	b.n	800427a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	041a      	lsls	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429e:	4a05      	ldr	r2, [pc, #20]	; (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc fa6a 	bl	8000780 <HAL_GPIO_EXTI_Callback>
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40013c00 	.word	0x40013c00

080042b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e12b      	b.n	8004522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fc9c 	bl	8000c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2224      	movs	r2, #36	; 0x24
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0201 	bic.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800430a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800431a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800431c:	f001 f862 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4a81      	ldr	r2, [pc, #516]	; (800452c <HAL_I2C_Init+0x274>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d807      	bhi.n	800433c <HAL_I2C_Init+0x84>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_I2C_Init+0x278>)
 8004330:	4293      	cmp	r3, r2
 8004332:	bf94      	ite	ls
 8004334:	2301      	movls	r3, #1
 8004336:	2300      	movhi	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e006      	b.n	800434a <HAL_I2C_Init+0x92>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <HAL_I2C_Init+0x27c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0e7      	b.n	8004522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a78      	ldr	r2, [pc, #480]	; (8004538 <HAL_I2C_Init+0x280>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9b      	lsrs	r3, r3, #18
 800435c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a6a      	ldr	r2, [pc, #424]	; (800452c <HAL_I2C_Init+0x274>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d802      	bhi.n	800438c <HAL_I2C_Init+0xd4>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	3301      	adds	r3, #1
 800438a:	e009      	b.n	80043a0 <HAL_I2C_Init+0xe8>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	4a69      	ldr	r2, [pc, #420]	; (800453c <HAL_I2C_Init+0x284>)
 8004398:	fba2 2303 	umull	r2, r3, r2, r3
 800439c:	099b      	lsrs	r3, r3, #6
 800439e:	3301      	adds	r3, #1
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	495c      	ldr	r1, [pc, #368]	; (800452c <HAL_I2C_Init+0x274>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d819      	bhi.n	80043f4 <HAL_I2C_Init+0x13c>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1e59      	subs	r1, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043d4:	400b      	ands	r3, r1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_I2C_Init+0x138>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e8:	3301      	adds	r3, #1
 80043ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ee:	e051      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e04f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <HAL_I2C_Init+0x168>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e012      	b.n	8004446 <HAL_I2C_Init+0x18e>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	0099      	lsls	r1, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	fbb0 f3f3 	udiv	r3, r0, r3
 8004436:	3301      	adds	r3, #1
 8004438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800443c:	2b00      	cmp	r3, #0
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Init+0x196>
 800444a:	2301      	movs	r3, #1
 800444c:	e022      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10e      	bne.n	8004474 <HAL_I2C_Init+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1e58      	subs	r0, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	460b      	mov	r3, r1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	440b      	add	r3, r1
 8004464:	fbb0 f3f3 	udiv	r3, r0, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004472:	e00f      	b.n	8004494 <HAL_I2C_Init+0x1dc>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	0099      	lsls	r1, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	6809      	ldr	r1, [r1, #0]
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6911      	ldr	r1, [r2, #16]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68d2      	ldr	r2, [r2, #12]
 80044ce:	4311      	orrs	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	431bde83 	.word	0x431bde83
 800453c:	10624dd3 	.word	0x10624dd3

08004540 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	460b      	mov	r3, r1
 800454e:	817b      	strh	r3, [r7, #10]
 8004550:	4613      	mov	r3, r2
 8004552:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7fe fc3e 	bl	8002dd4 <HAL_GetTick>
 8004558:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b20      	cmp	r3, #32
 8004564:	f040 80e0 	bne.w	8004728 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2319      	movs	r3, #25
 800456e:	2201      	movs	r2, #1
 8004570:	4970      	ldr	r1, [pc, #448]	; (8004734 <HAL_I2C_Master_Transmit+0x1f4>)
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f964 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
 8004580:	e0d3      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_I2C_Master_Transmit+0x50>
 800458c:	2302      	movs	r3, #2
 800458e:	e0cc      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d007      	beq.n	80045b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2210      	movs	r2, #16
 80045d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	893a      	ldrh	r2, [r7, #8]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a50      	ldr	r2, [pc, #320]	; (8004738 <HAL_I2C_Master_Transmit+0x1f8>)
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6a3a      	ldr	r2, [r7, #32]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f89c 	bl	800473c <I2C_MasterRequestWrite>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e08d      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004624:	e066      	b.n	80046f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9de 	bl	80049ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e06b      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d11b      	bne.n	80046c8 <HAL_I2C_Master_Transmit+0x188>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	1c5a      	adds	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	6a39      	ldr	r1, [r7, #32]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f9ce 	bl	8004a6e <I2C_WaitOnBTFFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00d      	beq.n	80046f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d107      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e01a      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d194      	bne.n	8004626 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	00100002 	.word	0x00100002
 8004738:	ffff0000 	.word	0xffff0000

0800473c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	460b      	mov	r3, r1
 800474a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b08      	cmp	r3, #8
 8004756:	d006      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d003      	beq.n	8004766 <I2C_MasterRequestWrite+0x2a>
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004764:	d108      	bne.n	8004778 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	e00b      	b.n	8004790 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f84f 	bl	8004840 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b6:	d103      	bne.n	80047c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e035      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d108      	bne.n	80047e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047dc:	611a      	str	r2, [r3, #16]
 80047de:	e01b      	b.n	8004818 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	11db      	asrs	r3, r3, #7
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0306 	and.w	r3, r3, #6
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f063 030f 	orn	r3, r3, #15
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	490e      	ldr	r1, [pc, #56]	; (8004838 <I2C_MasterRequestWrite+0xfc>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f875 	bl	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e010      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4907      	ldr	r1, [pc, #28]	; (800483c <I2C_MasterRequestWrite+0x100>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f865 	bl	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00010008 	.word	0x00010008
 800483c:	00010002 	.word	0x00010002

08004840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004850:	e025      	b.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004858:	d021      	beq.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485a:	f7fe fabb 	bl	8002dd4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d302      	bcc.n	8004870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d116      	bne.n	800489e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2220      	movs	r2, #32
 800487a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e023      	b.n	80048e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10d      	bne.n	80048c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	43da      	mvns	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4013      	ands	r3, r2
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	e00c      	b.n	80048de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4013      	ands	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d0b6      	beq.n	8004852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048fc:	e051      	b.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490c:	d123      	bne.n	8004956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800491c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e046      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d021      	beq.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fe fa39 	bl	8002dd4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d116      	bne.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2220      	movs	r2, #32
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e020      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10c      	bne.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4013      	ands	r3, r2
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bf14      	ite	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	2300      	moveq	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e00b      	b.n	80049de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	43da      	mvns	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d18d      	bne.n	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f8:	e02d      	b.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 f878 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d021      	beq.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a12:	f7fe f9df 	bl	8002dd4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d302      	bcc.n	8004a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e007      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d1ca      	bne.n	80049fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a7a:	e02d      	b.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f837 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d021      	beq.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	f7fe f99e 	bl	8002dd4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d1ca      	bne.n	8004a7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d11b      	bne.n	8004b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e264      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d075      	beq.n	8004c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6e:	4ba3      	ldr	r3, [pc, #652]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00c      	beq.n	8004b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7a:	4ba0      	ldr	r3, [pc, #640]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b9d      	ldr	r3, [pc, #628]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b99      	ldr	r3, [pc, #612]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05b      	beq.n	8004c58 <HAL_RCC_OscConfig+0x108>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d157      	bne.n	8004c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e23f      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x74>
 8004bb6:	4b91      	ldr	r3, [pc, #580]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a90      	ldr	r2, [pc, #576]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e01d      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x98>
 8004bce:	4b8b      	ldr	r3, [pc, #556]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a8a      	ldr	r2, [pc, #552]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a87      	ldr	r2, [pc, #540]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004be8:	4b84      	ldr	r3, [pc, #528]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b81      	ldr	r3, [pc, #516]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a80      	ldr	r2, [pc, #512]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe f8e4 	bl	8002dd4 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe f8e0 	bl	8002dd4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e204      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0xc0>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe f8d0 	bl	8002dd4 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c38:	f7fe f8cc 	bl	8002dd4 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e1f0      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	4b6c      	ldr	r3, [pc, #432]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0xe8>
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d063      	beq.n	8004d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c66:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c72:	4b62      	ldr	r3, [pc, #392]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7e:	4b5f      	ldr	r3, [pc, #380]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	4b5c      	ldr	r3, [pc, #368]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1c4      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b56      	ldr	r3, [pc, #344]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4952      	ldr	r1, [pc, #328]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	e03a      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc0:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <HAL_RCC_OscConfig+0x2b0>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fe f885 	bl	8002dd4 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fe f881 	bl	8002dd4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e1a5      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b43      	ldr	r3, [pc, #268]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4940      	ldr	r1, [pc, #256]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b3f      	ldr	r3, [pc, #252]	; (8004e00 <HAL_RCC_OscConfig+0x2b0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fe f864 	bl	8002dd4 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d10:	f7fe f860 	bl	8002dd4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e184      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d030      	beq.n	8004d9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d42:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCC_OscConfig+0x2b4>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fe f844 	bl	8002dd4 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fe f840 	bl	8002dd4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e164      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x200>
 8004d6e:	e015      	b.n	8004d9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d70:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCC_OscConfig+0x2b4>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fe f82d 	bl	8002dd4 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fe f829 	bl	8002dd4 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e14d      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80a0 	beq.w	8004eea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dae:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	4a0e      	ldr	r2, [pc, #56]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d121      	bne.n	8004e2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_RCC_OscConfig+0x2b8>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7fd ffef 	bl	8002dd4 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	e011      	b.n	8004e1e <HAL_RCC_OscConfig+0x2ce>
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
 8004e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fd ffe2 	bl	8002dd4 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e106      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b85      	ldr	r3, [pc, #532]	; (8005034 <HAL_RCC_OscConfig+0x4e4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d106      	bne.n	8004e40 <HAL_RCC_OscConfig+0x2f0>
 8004e32:	4b81      	ldr	r3, [pc, #516]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a80      	ldr	r2, [pc, #512]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	e01c      	b.n	8004e7a <HAL_RCC_OscConfig+0x32a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	d10c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x312>
 8004e48:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e4e:	f043 0304 	orr.w	r3, r3, #4
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
 8004e54:	4b78      	ldr	r3, [pc, #480]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a77      	ldr	r2, [pc, #476]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	e00b      	b.n	8004e7a <HAL_RCC_OscConfig+0x32a>
 8004e62:	4b75      	ldr	r3, [pc, #468]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e66:	4a74      	ldr	r2, [pc, #464]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6e:	4b72      	ldr	r3, [pc, #456]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a71      	ldr	r2, [pc, #452]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d015      	beq.n	8004eae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fd ffa7 	bl	8002dd4 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fd ffa3 	bl	8002dd4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0c5      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	4b65      	ldr	r3, [pc, #404]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ee      	beq.n	8004e8a <HAL_RCC_OscConfig+0x33a>
 8004eac:	e014      	b.n	8004ed8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eae:	f7fd ff91 	bl	8002dd4 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fd ff8d 	bl	8002dd4 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0af      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ee      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d105      	bne.n	8004eea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ede:	4b56      	ldr	r3, [pc, #344]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	4a55      	ldr	r2, [pc, #340]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 809b 	beq.w	800502a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ef4:	4b50      	ldr	r3, [pc, #320]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d05c      	beq.n	8004fba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d141      	bne.n	8004f8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f08:	4b4c      	ldr	r3, [pc, #304]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd ff61 	bl	8002dd4 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd ff5d 	bl	8002dd4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e081      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f28:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	019b      	lsls	r3, r3, #6
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	4937      	ldr	r1, [pc, #220]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f5e:	4b37      	ldr	r3, [pc, #220]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd ff36 	bl	8002dd4 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd ff32 	bl	8002dd4 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e056      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7e:	4b2e      	ldr	r3, [pc, #184]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCC_OscConfig+0x41c>
 8004f8a:	e04e      	b.n	800502a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fd ff1f 	bl	8002dd4 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f9a:	f7fd ff1b 	bl	8002dd4 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e03f      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fac:	4b22      	ldr	r3, [pc, #136]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f0      	bne.n	8004f9a <HAL_RCC_OscConfig+0x44a>
 8004fb8:	e037      	b.n	800502a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e032      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_RCC_OscConfig+0x4e8>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d028      	beq.n	8005026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d121      	bne.n	8005026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d11a      	bne.n	8005026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ffc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d111      	bne.n	8005026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	3b01      	subs	r3, #1
 8005010:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005012:	429a      	cmp	r2, r3
 8005014:	d107      	bne.n	8005026 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40007000 	.word	0x40007000
 8005038:	40023800 	.word	0x40023800
 800503c:	42470060 	.word	0x42470060

08005040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cc      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90c      	bls.n	800507c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0b8      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a58      	ldr	r2, [pc, #352]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800509e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	494d      	ldr	r1, [pc, #308]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d044      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d119      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e07f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d003      	beq.n	80050fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e067      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4934      	ldr	r1, [pc, #208]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7fd fe50 	bl	8002dd4 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fd fe4c 	bl	8002dd4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e04f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20c      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e032      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4916      	ldr	r1, [pc, #88]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051c6:	f000 f821 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490a      	ldr	r1, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fd fdb0 	bl	8002d4c <HAL_InitTick>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00
 80051fc:	40023800 	.word	0x40023800
 8005200:	08006974 	.word	0x08006974
 8005204:	20000000 	.word	0x20000000
 8005208:	2000001c 	.word	0x2000001c

0800520c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	2300      	movs	r3, #0
 800521e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005224:	4b67      	ldr	r3, [pc, #412]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d00d      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x40>
 8005230:	2b08      	cmp	r3, #8
 8005232:	f200 80bd 	bhi.w	80053b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x34>
 800523a:	2b04      	cmp	r3, #4
 800523c:	d003      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x3a>
 800523e:	e0b7      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b61      	ldr	r3, [pc, #388]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005242:	60bb      	str	r3, [r7, #8]
       break;
 8005244:	e0b7      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005246:	4b60      	ldr	r3, [pc, #384]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005248:	60bb      	str	r3, [r7, #8]
      break;
 800524a:	e0b4      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800524c:	4b5d      	ldr	r3, [pc, #372]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005254:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005256:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04d      	beq.n	80052fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005262:	4b58      	ldr	r3, [pc, #352]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	461a      	mov	r2, r3
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005272:	f04f 0100 	mov.w	r1, #0
 8005276:	ea02 0800 	and.w	r8, r2, r0
 800527a:	ea03 0901 	and.w	r9, r3, r1
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	014b      	lsls	r3, r1, #5
 800528c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005290:	0142      	lsls	r2, r0, #5
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	ebb0 0008 	subs.w	r0, r0, r8
 800529a:	eb61 0109 	sbc.w	r1, r1, r9
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	018b      	lsls	r3, r1, #6
 80052a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052ac:	0182      	lsls	r2, r0, #6
 80052ae:	1a12      	subs	r2, r2, r0
 80052b0:	eb63 0301 	sbc.w	r3, r3, r1
 80052b4:	f04f 0000 	mov.w	r0, #0
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	00d9      	lsls	r1, r3, #3
 80052be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c2:	00d0      	lsls	r0, r2, #3
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	eb12 0208 	adds.w	r2, r2, r8
 80052cc:	eb43 0309 	adc.w	r3, r3, r9
 80052d0:	f04f 0000 	mov.w	r0, #0
 80052d4:	f04f 0100 	mov.w	r1, #0
 80052d8:	0299      	lsls	r1, r3, #10
 80052da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052de:	0290      	lsls	r0, r2, #10
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	f7fa ffc6 	bl	8000280 <__aeabi_uldivmod>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4613      	mov	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e04a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fe:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	461a      	mov	r2, r3
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800530e:	f04f 0100 	mov.w	r1, #0
 8005312:	ea02 0400 	and.w	r4, r2, r0
 8005316:	ea03 0501 	and.w	r5, r3, r1
 800531a:	4620      	mov	r0, r4
 800531c:	4629      	mov	r1, r5
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	014b      	lsls	r3, r1, #5
 8005328:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800532c:	0142      	lsls	r2, r0, #5
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	1b00      	subs	r0, r0, r4
 8005334:	eb61 0105 	sbc.w	r1, r1, r5
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	018b      	lsls	r3, r1, #6
 8005342:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005346:	0182      	lsls	r2, r0, #6
 8005348:	1a12      	subs	r2, r2, r0
 800534a:	eb63 0301 	sbc.w	r3, r3, r1
 800534e:	f04f 0000 	mov.w	r0, #0
 8005352:	f04f 0100 	mov.w	r1, #0
 8005356:	00d9      	lsls	r1, r3, #3
 8005358:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800535c:	00d0      	lsls	r0, r2, #3
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	1912      	adds	r2, r2, r4
 8005364:	eb45 0303 	adc.w	r3, r5, r3
 8005368:	f04f 0000 	mov.w	r0, #0
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	0299      	lsls	r1, r3, #10
 8005372:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005376:	0290      	lsls	r0, r2, #10
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	f7fa ff7a 	bl	8000280 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	3301      	adds	r3, #1
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	60bb      	str	r3, [r7, #8]
      break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053b2:	60bb      	str	r3, [r7, #8]
      break;
 80053b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b6:	68bb      	ldr	r3, [r7, #8]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	00f42400 	.word	0x00f42400

080053cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000000 	.word	0x20000000

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053e8:	f7ff fff0 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	08006984 	.word	0x08006984

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005410:	f7ff ffdc 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0b5b      	lsrs	r3, r3, #13
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	08006984 	.word	0x08006984

08005434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e041      	b.n	80054ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc f818 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f000 fa22 	bl	80058bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d122      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d11b      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0202 	mvn.w	r2, #2
 80054fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9b2 	bl	800587e <HAL_TIM_IC_CaptureCallback>
 800551a:	e005      	b.n	8005528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f9a4 	bl	800586a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f9b5 	bl	8005892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d122      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d11b      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0204 	mvn.w	r2, #4
 8005552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f988 	bl	800587e <HAL_TIM_IC_CaptureCallback>
 800556e:	e005      	b.n	800557c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f97a 	bl	800586a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f98b 	bl	8005892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b08      	cmp	r3, #8
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0208 	mvn.w	r2, #8
 80055a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f95e 	bl	800587e <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f950 	bl	800586a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f961 	bl	8005892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0210 	mvn.w	r2, #16
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2208      	movs	r2, #8
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f934 	bl	800587e <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f926 	bl	800586a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f937 	bl	8005892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10e      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0201 	mvn.w	r2, #1
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fb f881 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 faaf 	bl	8005be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d10e      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8fc 	bl	80058a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d10e      	bne.n	80056da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d107      	bne.n	80056da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0220 	mvn.w	r2, #32
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fa79 	bl	8005bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_ConfigClockSource+0x18>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0b3      	b.n	8005862 <HAL_TIM_ConfigClockSource+0x180>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005718:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005720:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	d03e      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xd0>
 8005734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005738:	f200 8087 	bhi.w	800584a <HAL_TIM_ConfigClockSource+0x168>
 800573c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005740:	f000 8085 	beq.w	800584e <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005748:	d87f      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 800574a:	2b70      	cmp	r3, #112	; 0x70
 800574c:	d01a      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xa2>
 800574e:	2b70      	cmp	r3, #112	; 0x70
 8005750:	d87b      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 8005752:	2b60      	cmp	r3, #96	; 0x60
 8005754:	d050      	beq.n	80057f8 <HAL_TIM_ConfigClockSource+0x116>
 8005756:	2b60      	cmp	r3, #96	; 0x60
 8005758:	d877      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 800575a:	2b50      	cmp	r3, #80	; 0x50
 800575c:	d03c      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0xf6>
 800575e:	2b50      	cmp	r3, #80	; 0x50
 8005760:	d873      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d058      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0x136>
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d86f      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 800576a:	2b30      	cmp	r3, #48	; 0x30
 800576c:	d064      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x156>
 800576e:	2b30      	cmp	r3, #48	; 0x30
 8005770:	d86b      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 8005772:	2b20      	cmp	r3, #32
 8005774:	d060      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x156>
 8005776:	2b20      	cmp	r3, #32
 8005778:	d867      	bhi.n	800584a <HAL_TIM_ConfigClockSource+0x168>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d05c      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x156>
 800577e:	2b10      	cmp	r3, #16
 8005780:	d05a      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005782:	e062      	b.n	800584a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 f98c 	bl	8005ab0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	609a      	str	r2, [r3, #8]
      break;
 80057b0:	e04e      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6899      	ldr	r1, [r3, #8]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f000 f975 	bl	8005ab0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057d4:	609a      	str	r2, [r3, #8]
      break;
 80057d6:	e03b      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6818      	ldr	r0, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	6859      	ldr	r1, [r3, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	461a      	mov	r2, r3
 80057e6:	f000 f8e9 	bl	80059bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2150      	movs	r1, #80	; 0x50
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f942 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 80057f6:	e02b      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6859      	ldr	r1, [r3, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	461a      	mov	r2, r3
 8005806:	f000 f908 	bl	8005a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2160      	movs	r1, #96	; 0x60
 8005810:	4618      	mov	r0, r3
 8005812:	f000 f932 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005816:	e01b      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	461a      	mov	r2, r3
 8005826:	f000 f8c9 	bl	80059bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2140      	movs	r1, #64	; 0x40
 8005830:	4618      	mov	r0, r3
 8005832:	f000 f922 	bl	8005a7a <TIM_ITRx_SetConfig>
      break;
 8005836:	e00b      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f000 f919 	bl	8005a7a <TIM_ITRx_SetConfig>
        break;
 8005848:	e002      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800584e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
	...

080058bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a34      	ldr	r2, [pc, #208]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d00b      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d007      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a30      	ldr	r2, [pc, #192]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d003      	beq.n	80058f4 <TIM_Base_SetConfig+0x38>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d108      	bne.n	8005906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d01b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d017      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <TIM_Base_SetConfig+0xe8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d013      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <TIM_Base_SetConfig+0xec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00f      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a20      	ldr	r2, [pc, #128]	; (80059ac <TIM_Base_SetConfig+0xf0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d00b      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a1f      	ldr	r2, [pc, #124]	; (80059b0 <TIM_Base_SetConfig+0xf4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d007      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <TIM_Base_SetConfig+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_Base_SetConfig+0x8a>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <TIM_Base_SetConfig+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d108      	bne.n	8005958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <TIM_Base_SetConfig+0xe4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d103      	bne.n	800598c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	615a      	str	r2, [r3, #20]
}
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40014400 	.word	0x40014400
 80059b8:	40014800 	.word	0x40014800

080059bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0201 	bic.w	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 030a 	bic.w	r3, r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0210 	bic.w	r2, r3, #16
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f043 0307 	orr.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	609a      	str	r2, [r3, #8]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	021a      	lsls	r2, r3, #8
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	609a      	str	r2, [r3, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	371c      	adds	r7, #28
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e050      	b.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d013      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10c      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40014000 	.word	0x40014000

08005bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e03f      	b.n	8005c86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d106      	bne.n	8005c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fb fcb2 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2224      	movs	r2, #36	; 0x24
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f829 	bl	8005c90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695a      	ldr	r2, [r3, #20]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	b09f      	sub	sp, #124	; 0x7c
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca6:	68d9      	ldr	r1, [r3, #12]
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	ea40 0301 	orr.w	r3, r0, r1
 8005cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cd4:	f021 010c 	bic.w	r1, r1, #12
 8005cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	6999      	ldr	r1, [r3, #24]
 8005cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	ea40 0301 	orr.w	r3, r0, r1
 8005cf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4bc5      	ldr	r3, [pc, #788]	; (8006014 <UART_SetConfig+0x384>)
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d004      	beq.n	8005d0e <UART_SetConfig+0x7e>
 8005d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4bc3      	ldr	r3, [pc, #780]	; (8006018 <UART_SetConfig+0x388>)
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d103      	bne.n	8005d16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d0e:	f7ff fb7d 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8005d12:	6778      	str	r0, [r7, #116]	; 0x74
 8005d14:	e002      	b.n	8005d1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d16:	f7ff fb65 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8005d1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d24:	f040 80b6 	bne.w	8005e94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2a:	461c      	mov	r4, r3
 8005d2c:	f04f 0500 	mov.w	r5, #0
 8005d30:	4622      	mov	r2, r4
 8005d32:	462b      	mov	r3, r5
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	6439      	str	r1, [r7, #64]	; 0x40
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d40:	1912      	adds	r2, r2, r4
 8005d42:	eb45 0303 	adc.w	r3, r5, r3
 8005d46:	f04f 0000 	mov.w	r0, #0
 8005d4a:	f04f 0100 	mov.w	r1, #0
 8005d4e:	00d9      	lsls	r1, r3, #3
 8005d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d54:	00d0      	lsls	r0, r2, #3
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	1911      	adds	r1, r2, r4
 8005d5c:	6639      	str	r1, [r7, #96]	; 0x60
 8005d5e:	416b      	adcs	r3, r5
 8005d60:	667b      	str	r3, [r7, #100]	; 0x64
 8005d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	1891      	adds	r1, r2, r2
 8005d6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d70:	415b      	adcs	r3, r3
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d7c:	f7fa fa80 	bl	8000280 <__aeabi_uldivmod>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4ba5      	ldr	r3, [pc, #660]	; (800601c <UART_SetConfig+0x38c>)
 8005d86:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	011e      	lsls	r6, r3, #4
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d90:	461c      	mov	r4, r3
 8005d92:	f04f 0500 	mov.w	r5, #0
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
 8005d9a:	1891      	adds	r1, r2, r2
 8005d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d9e:	415b      	adcs	r3, r3
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
 8005da2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005da6:	1912      	adds	r2, r2, r4
 8005da8:	eb45 0303 	adc.w	r3, r5, r3
 8005dac:	f04f 0000 	mov.w	r0, #0
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	00d9      	lsls	r1, r3, #3
 8005db6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dba:	00d0      	lsls	r0, r2, #3
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	1911      	adds	r1, r2, r4
 8005dc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dc4:	416b      	adcs	r3, r5
 8005dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	1891      	adds	r1, r2, r2
 8005dd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005dd6:	415b      	adcs	r3, r3
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005de2:	f7fa fa4d 	bl	8000280 <__aeabi_uldivmod>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	4b8c      	ldr	r3, [pc, #560]	; (800601c <UART_SetConfig+0x38c>)
 8005dec:	fba3 1302 	umull	r1, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	2164      	movs	r1, #100	; 0x64
 8005df4:	fb01 f303 	mul.w	r3, r1, r3
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	3332      	adds	r3, #50	; 0x32
 8005dfe:	4a87      	ldr	r2, [pc, #540]	; (800601c <UART_SetConfig+0x38c>)
 8005e00:	fba2 2303 	umull	r2, r3, r2, r3
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e0c:	441e      	add	r6, r3
 8005e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e10:	4618      	mov	r0, r3
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	1894      	adds	r4, r2, r2
 8005e1c:	623c      	str	r4, [r7, #32]
 8005e1e:	415b      	adcs	r3, r3
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
 8005e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e26:	1812      	adds	r2, r2, r0
 8005e28:	eb41 0303 	adc.w	r3, r1, r3
 8005e2c:	f04f 0400 	mov.w	r4, #0
 8005e30:	f04f 0500 	mov.w	r5, #0
 8005e34:	00dd      	lsls	r5, r3, #3
 8005e36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e3a:	00d4      	lsls	r4, r2, #3
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	1814      	adds	r4, r2, r0
 8005e42:	653c      	str	r4, [r7, #80]	; 0x50
 8005e44:	414b      	adcs	r3, r1
 8005e46:	657b      	str	r3, [r7, #84]	; 0x54
 8005e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	1891      	adds	r1, r2, r2
 8005e54:	61b9      	str	r1, [r7, #24]
 8005e56:	415b      	adcs	r3, r3
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e62:	f7fa fa0d 	bl	8000280 <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4b6c      	ldr	r3, [pc, #432]	; (800601c <UART_SetConfig+0x38c>)
 8005e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	2164      	movs	r1, #100	; 0x64
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	3332      	adds	r3, #50	; 0x32
 8005e7e:	4a67      	ldr	r2, [pc, #412]	; (800601c <UART_SetConfig+0x38c>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f003 0207 	and.w	r2, r3, #7
 8005e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4432      	add	r2, r6
 8005e90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e92:	e0b9      	b.n	8006008 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e96:	461c      	mov	r4, r3
 8005e98:	f04f 0500 	mov.w	r5, #0
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	462b      	mov	r3, r5
 8005ea0:	1891      	adds	r1, r2, r2
 8005ea2:	6139      	str	r1, [r7, #16]
 8005ea4:	415b      	adcs	r3, r3
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005eac:	1912      	adds	r2, r2, r4
 8005eae:	eb45 0303 	adc.w	r3, r5, r3
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	00d9      	lsls	r1, r3, #3
 8005ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec0:	00d0      	lsls	r0, r2, #3
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	eb12 0804 	adds.w	r8, r2, r4
 8005eca:	eb43 0905 	adc.w	r9, r3, r5
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	008b      	lsls	r3, r1, #2
 8005ee2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ee6:	0082      	lsls	r2, r0, #2
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa f9c8 	bl	8000280 <__aeabi_uldivmod>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4b49      	ldr	r3, [pc, #292]	; (800601c <UART_SetConfig+0x38c>)
 8005ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	011e      	lsls	r6, r3, #4
 8005efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f00:	4618      	mov	r0, r3
 8005f02:	f04f 0100 	mov.w	r1, #0
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	1894      	adds	r4, r2, r2
 8005f0c:	60bc      	str	r4, [r7, #8]
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f16:	1812      	adds	r2, r2, r0
 8005f18:	eb41 0303 	adc.w	r3, r1, r3
 8005f1c:	f04f 0400 	mov.w	r4, #0
 8005f20:	f04f 0500 	mov.w	r5, #0
 8005f24:	00dd      	lsls	r5, r3, #3
 8005f26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f2a:	00d4      	lsls	r4, r2, #3
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	1814      	adds	r4, r2, r0
 8005f32:	64bc      	str	r4, [r7, #72]	; 0x48
 8005f34:	414b      	adcs	r3, r1
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	008b      	lsls	r3, r1, #2
 8005f4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f50:	0082      	lsls	r2, r0, #2
 8005f52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f56:	f7fa f993 	bl	8000280 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4b2f      	ldr	r3, [pc, #188]	; (800601c <UART_SetConfig+0x38c>)
 8005f60:	fba3 1302 	umull	r1, r3, r3, r2
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	3332      	adds	r3, #50	; 0x32
 8005f72:	4a2a      	ldr	r2, [pc, #168]	; (800601c <UART_SetConfig+0x38c>)
 8005f74:	fba2 2303 	umull	r2, r3, r2, r3
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f7e:	441e      	add	r6, r3
 8005f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f82:	4618      	mov	r0, r3
 8005f84:	f04f 0100 	mov.w	r1, #0
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	1894      	adds	r4, r2, r2
 8005f8e:	603c      	str	r4, [r7, #0]
 8005f90:	415b      	adcs	r3, r3
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f98:	1812      	adds	r2, r2, r0
 8005f9a:	eb41 0303 	adc.w	r3, r1, r3
 8005f9e:	f04f 0400 	mov.w	r4, #0
 8005fa2:	f04f 0500 	mov.w	r5, #0
 8005fa6:	00dd      	lsls	r5, r3, #3
 8005fa8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fac:	00d4      	lsls	r4, r2, #3
 8005fae:	4622      	mov	r2, r4
 8005fb0:	462b      	mov	r3, r5
 8005fb2:	eb12 0a00 	adds.w	sl, r2, r0
 8005fb6:	eb43 0b01 	adc.w	fp, r3, r1
 8005fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	008b      	lsls	r3, r1, #2
 8005fce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fd2:	0082      	lsls	r2, r0, #2
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa f952 	bl	8000280 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <UART_SetConfig+0x38c>)
 8005fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	2164      	movs	r1, #100	; 0x64
 8005fea:	fb01 f303 	mul.w	r3, r1, r3
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	3332      	adds	r3, #50	; 0x32
 8005ff4:	4a09      	ldr	r2, [pc, #36]	; (800601c <UART_SetConfig+0x38c>)
 8005ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	f003 020f 	and.w	r2, r3, #15
 8006000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4432      	add	r2, r6
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	bf00      	nop
 800600a:	377c      	adds	r7, #124	; 0x7c
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	40011000 	.word	0x40011000
 8006018:	40011400 	.word	0x40011400
 800601c:	51eb851f 	.word	0x51eb851f

08006020 <__errno>:
 8006020:	4b01      	ldr	r3, [pc, #4]	; (8006028 <__errno+0x8>)
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	20000024 	.word	0x20000024

0800602c <__libc_init_array>:
 800602c:	b570      	push	{r4, r5, r6, lr}
 800602e:	4d0d      	ldr	r5, [pc, #52]	; (8006064 <__libc_init_array+0x38>)
 8006030:	4c0d      	ldr	r4, [pc, #52]	; (8006068 <__libc_init_array+0x3c>)
 8006032:	1b64      	subs	r4, r4, r5
 8006034:	10a4      	asrs	r4, r4, #2
 8006036:	2600      	movs	r6, #0
 8006038:	42a6      	cmp	r6, r4
 800603a:	d109      	bne.n	8006050 <__libc_init_array+0x24>
 800603c:	4d0b      	ldr	r5, [pc, #44]	; (800606c <__libc_init_array+0x40>)
 800603e:	4c0c      	ldr	r4, [pc, #48]	; (8006070 <__libc_init_array+0x44>)
 8006040:	f000 fc4e 	bl	80068e0 <_init>
 8006044:	1b64      	subs	r4, r4, r5
 8006046:	10a4      	asrs	r4, r4, #2
 8006048:	2600      	movs	r6, #0
 800604a:	42a6      	cmp	r6, r4
 800604c:	d105      	bne.n	800605a <__libc_init_array+0x2e>
 800604e:	bd70      	pop	{r4, r5, r6, pc}
 8006050:	f855 3b04 	ldr.w	r3, [r5], #4
 8006054:	4798      	blx	r3
 8006056:	3601      	adds	r6, #1
 8006058:	e7ee      	b.n	8006038 <__libc_init_array+0xc>
 800605a:	f855 3b04 	ldr.w	r3, [r5], #4
 800605e:	4798      	blx	r3
 8006060:	3601      	adds	r6, #1
 8006062:	e7f2      	b.n	800604a <__libc_init_array+0x1e>
 8006064:	0800b718 	.word	0x0800b718
 8006068:	0800b718 	.word	0x0800b718
 800606c:	0800b718 	.word	0x0800b718
 8006070:	0800b71c 	.word	0x0800b71c

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <siprintf>:
 8006084:	b40e      	push	{r1, r2, r3}
 8006086:	b500      	push	{lr}
 8006088:	b09c      	sub	sp, #112	; 0x70
 800608a:	ab1d      	add	r3, sp, #116	; 0x74
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	9006      	str	r0, [sp, #24]
 8006090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <siprintf+0x38>)
 8006096:	9107      	str	r1, [sp, #28]
 8006098:	9104      	str	r1, [sp, #16]
 800609a:	4909      	ldr	r1, [pc, #36]	; (80060c0 <siprintf+0x3c>)
 800609c:	f853 2b04 	ldr.w	r2, [r3], #4
 80060a0:	9105      	str	r1, [sp, #20]
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	a902      	add	r1, sp, #8
 80060a8:	f000 f868 	bl	800617c <_svfiprintf_r>
 80060ac:	9b02      	ldr	r3, [sp, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	b01c      	add	sp, #112	; 0x70
 80060b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b8:	b003      	add	sp, #12
 80060ba:	4770      	bx	lr
 80060bc:	20000024 	.word	0x20000024
 80060c0:	ffff0208 	.word	0xffff0208

080060c4 <__ssputs_r>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	688e      	ldr	r6, [r1, #8]
 80060ca:	429e      	cmp	r6, r3
 80060cc:	4682      	mov	sl, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	4690      	mov	r8, r2
 80060d2:	461f      	mov	r7, r3
 80060d4:	d838      	bhi.n	8006148 <__ssputs_r+0x84>
 80060d6:	898a      	ldrh	r2, [r1, #12]
 80060d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060dc:	d032      	beq.n	8006144 <__ssputs_r+0x80>
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	6909      	ldr	r1, [r1, #16]
 80060e2:	eba5 0901 	sub.w	r9, r5, r1
 80060e6:	6965      	ldr	r5, [r4, #20]
 80060e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060f0:	3301      	adds	r3, #1
 80060f2:	444b      	add	r3, r9
 80060f4:	106d      	asrs	r5, r5, #1
 80060f6:	429d      	cmp	r5, r3
 80060f8:	bf38      	it	cc
 80060fa:	461d      	movcc	r5, r3
 80060fc:	0553      	lsls	r3, r2, #21
 80060fe:	d531      	bpl.n	8006164 <__ssputs_r+0xa0>
 8006100:	4629      	mov	r1, r5
 8006102:	f000 fb47 	bl	8006794 <_malloc_r>
 8006106:	4606      	mov	r6, r0
 8006108:	b950      	cbnz	r0, 8006120 <__ssputs_r+0x5c>
 800610a:	230c      	movs	r3, #12
 800610c:	f8ca 3000 	str.w	r3, [sl]
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006116:	81a3      	strh	r3, [r4, #12]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	6921      	ldr	r1, [r4, #16]
 8006122:	464a      	mov	r2, r9
 8006124:	f000 fabe 	bl	80066a4 <memcpy>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800612e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	6126      	str	r6, [r4, #16]
 8006136:	6165      	str	r5, [r4, #20]
 8006138:	444e      	add	r6, r9
 800613a:	eba5 0509 	sub.w	r5, r5, r9
 800613e:	6026      	str	r6, [r4, #0]
 8006140:	60a5      	str	r5, [r4, #8]
 8006142:	463e      	mov	r6, r7
 8006144:	42be      	cmp	r6, r7
 8006146:	d900      	bls.n	800614a <__ssputs_r+0x86>
 8006148:	463e      	mov	r6, r7
 800614a:	4632      	mov	r2, r6
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	4641      	mov	r1, r8
 8006150:	f000 fab6 	bl	80066c0 <memmove>
 8006154:	68a3      	ldr	r3, [r4, #8]
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	1b9b      	subs	r3, r3, r6
 800615a:	4432      	add	r2, r6
 800615c:	60a3      	str	r3, [r4, #8]
 800615e:	6022      	str	r2, [r4, #0]
 8006160:	2000      	movs	r0, #0
 8006162:	e7db      	b.n	800611c <__ssputs_r+0x58>
 8006164:	462a      	mov	r2, r5
 8006166:	f000 fb6f 	bl	8006848 <_realloc_r>
 800616a:	4606      	mov	r6, r0
 800616c:	2800      	cmp	r0, #0
 800616e:	d1e1      	bne.n	8006134 <__ssputs_r+0x70>
 8006170:	6921      	ldr	r1, [r4, #16]
 8006172:	4650      	mov	r0, sl
 8006174:	f000 fabe 	bl	80066f4 <_free_r>
 8006178:	e7c7      	b.n	800610a <__ssputs_r+0x46>
	...

0800617c <_svfiprintf_r>:
 800617c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006180:	4698      	mov	r8, r3
 8006182:	898b      	ldrh	r3, [r1, #12]
 8006184:	061b      	lsls	r3, r3, #24
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	4607      	mov	r7, r0
 800618a:	460d      	mov	r5, r1
 800618c:	4614      	mov	r4, r2
 800618e:	d50e      	bpl.n	80061ae <_svfiprintf_r+0x32>
 8006190:	690b      	ldr	r3, [r1, #16]
 8006192:	b963      	cbnz	r3, 80061ae <_svfiprintf_r+0x32>
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	f000 fafd 	bl	8006794 <_malloc_r>
 800619a:	6028      	str	r0, [r5, #0]
 800619c:	6128      	str	r0, [r5, #16]
 800619e:	b920      	cbnz	r0, 80061aa <_svfiprintf_r+0x2e>
 80061a0:	230c      	movs	r3, #12
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	f04f 30ff 	mov.w	r0, #4294967295
 80061a8:	e0d1      	b.n	800634e <_svfiprintf_r+0x1d2>
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	616b      	str	r3, [r5, #20]
 80061ae:	2300      	movs	r3, #0
 80061b0:	9309      	str	r3, [sp, #36]	; 0x24
 80061b2:	2320      	movs	r3, #32
 80061b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80061bc:	2330      	movs	r3, #48	; 0x30
 80061be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006368 <_svfiprintf_r+0x1ec>
 80061c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061c6:	f04f 0901 	mov.w	r9, #1
 80061ca:	4623      	mov	r3, r4
 80061cc:	469a      	mov	sl, r3
 80061ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d2:	b10a      	cbz	r2, 80061d8 <_svfiprintf_r+0x5c>
 80061d4:	2a25      	cmp	r2, #37	; 0x25
 80061d6:	d1f9      	bne.n	80061cc <_svfiprintf_r+0x50>
 80061d8:	ebba 0b04 	subs.w	fp, sl, r4
 80061dc:	d00b      	beq.n	80061f6 <_svfiprintf_r+0x7a>
 80061de:	465b      	mov	r3, fp
 80061e0:	4622      	mov	r2, r4
 80061e2:	4629      	mov	r1, r5
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ff6d 	bl	80060c4 <__ssputs_r>
 80061ea:	3001      	adds	r0, #1
 80061ec:	f000 80aa 	beq.w	8006344 <_svfiprintf_r+0x1c8>
 80061f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f2:	445a      	add	r2, fp
 80061f4:	9209      	str	r2, [sp, #36]	; 0x24
 80061f6:	f89a 3000 	ldrb.w	r3, [sl]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80a2 	beq.w	8006344 <_svfiprintf_r+0x1c8>
 8006200:	2300      	movs	r3, #0
 8006202:	f04f 32ff 	mov.w	r2, #4294967295
 8006206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620a:	f10a 0a01 	add.w	sl, sl, #1
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	9307      	str	r3, [sp, #28]
 8006212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006216:	931a      	str	r3, [sp, #104]	; 0x68
 8006218:	4654      	mov	r4, sl
 800621a:	2205      	movs	r2, #5
 800621c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006220:	4851      	ldr	r0, [pc, #324]	; (8006368 <_svfiprintf_r+0x1ec>)
 8006222:	f7f9 ffdd 	bl	80001e0 <memchr>
 8006226:	9a04      	ldr	r2, [sp, #16]
 8006228:	b9d8      	cbnz	r0, 8006262 <_svfiprintf_r+0xe6>
 800622a:	06d0      	lsls	r0, r2, #27
 800622c:	bf44      	itt	mi
 800622e:	2320      	movmi	r3, #32
 8006230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006234:	0711      	lsls	r1, r2, #28
 8006236:	bf44      	itt	mi
 8006238:	232b      	movmi	r3, #43	; 0x2b
 800623a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800623e:	f89a 3000 	ldrb.w	r3, [sl]
 8006242:	2b2a      	cmp	r3, #42	; 0x2a
 8006244:	d015      	beq.n	8006272 <_svfiprintf_r+0xf6>
 8006246:	9a07      	ldr	r2, [sp, #28]
 8006248:	4654      	mov	r4, sl
 800624a:	2000      	movs	r0, #0
 800624c:	f04f 0c0a 	mov.w	ip, #10
 8006250:	4621      	mov	r1, r4
 8006252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006256:	3b30      	subs	r3, #48	; 0x30
 8006258:	2b09      	cmp	r3, #9
 800625a:	d94e      	bls.n	80062fa <_svfiprintf_r+0x17e>
 800625c:	b1b0      	cbz	r0, 800628c <_svfiprintf_r+0x110>
 800625e:	9207      	str	r2, [sp, #28]
 8006260:	e014      	b.n	800628c <_svfiprintf_r+0x110>
 8006262:	eba0 0308 	sub.w	r3, r0, r8
 8006266:	fa09 f303 	lsl.w	r3, r9, r3
 800626a:	4313      	orrs	r3, r2
 800626c:	9304      	str	r3, [sp, #16]
 800626e:	46a2      	mov	sl, r4
 8006270:	e7d2      	b.n	8006218 <_svfiprintf_r+0x9c>
 8006272:	9b03      	ldr	r3, [sp, #12]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	9103      	str	r1, [sp, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	bfbb      	ittet	lt
 800627e:	425b      	neglt	r3, r3
 8006280:	f042 0202 	orrlt.w	r2, r2, #2
 8006284:	9307      	strge	r3, [sp, #28]
 8006286:	9307      	strlt	r3, [sp, #28]
 8006288:	bfb8      	it	lt
 800628a:	9204      	strlt	r2, [sp, #16]
 800628c:	7823      	ldrb	r3, [r4, #0]
 800628e:	2b2e      	cmp	r3, #46	; 0x2e
 8006290:	d10c      	bne.n	80062ac <_svfiprintf_r+0x130>
 8006292:	7863      	ldrb	r3, [r4, #1]
 8006294:	2b2a      	cmp	r3, #42	; 0x2a
 8006296:	d135      	bne.n	8006304 <_svfiprintf_r+0x188>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	1d1a      	adds	r2, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9203      	str	r2, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfb8      	it	lt
 80062a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a8:	3402      	adds	r4, #2
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006378 <_svfiprintf_r+0x1fc>
 80062b0:	7821      	ldrb	r1, [r4, #0]
 80062b2:	2203      	movs	r2, #3
 80062b4:	4650      	mov	r0, sl
 80062b6:	f7f9 ff93 	bl	80001e0 <memchr>
 80062ba:	b140      	cbz	r0, 80062ce <_svfiprintf_r+0x152>
 80062bc:	2340      	movs	r3, #64	; 0x40
 80062be:	eba0 000a 	sub.w	r0, r0, sl
 80062c2:	fa03 f000 	lsl.w	r0, r3, r0
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	4303      	orrs	r3, r0
 80062ca:	3401      	adds	r4, #1
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d2:	4826      	ldr	r0, [pc, #152]	; (800636c <_svfiprintf_r+0x1f0>)
 80062d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d8:	2206      	movs	r2, #6
 80062da:	f7f9 ff81 	bl	80001e0 <memchr>
 80062de:	2800      	cmp	r0, #0
 80062e0:	d038      	beq.n	8006354 <_svfiprintf_r+0x1d8>
 80062e2:	4b23      	ldr	r3, [pc, #140]	; (8006370 <_svfiprintf_r+0x1f4>)
 80062e4:	bb1b      	cbnz	r3, 800632e <_svfiprintf_r+0x1b2>
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	3307      	adds	r3, #7
 80062ea:	f023 0307 	bic.w	r3, r3, #7
 80062ee:	3308      	adds	r3, #8
 80062f0:	9303      	str	r3, [sp, #12]
 80062f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f4:	4433      	add	r3, r6
 80062f6:	9309      	str	r3, [sp, #36]	; 0x24
 80062f8:	e767      	b.n	80061ca <_svfiprintf_r+0x4e>
 80062fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80062fe:	460c      	mov	r4, r1
 8006300:	2001      	movs	r0, #1
 8006302:	e7a5      	b.n	8006250 <_svfiprintf_r+0xd4>
 8006304:	2300      	movs	r3, #0
 8006306:	3401      	adds	r4, #1
 8006308:	9305      	str	r3, [sp, #20]
 800630a:	4619      	mov	r1, r3
 800630c:	f04f 0c0a 	mov.w	ip, #10
 8006310:	4620      	mov	r0, r4
 8006312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006316:	3a30      	subs	r2, #48	; 0x30
 8006318:	2a09      	cmp	r2, #9
 800631a:	d903      	bls.n	8006324 <_svfiprintf_r+0x1a8>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0c5      	beq.n	80062ac <_svfiprintf_r+0x130>
 8006320:	9105      	str	r1, [sp, #20]
 8006322:	e7c3      	b.n	80062ac <_svfiprintf_r+0x130>
 8006324:	fb0c 2101 	mla	r1, ip, r1, r2
 8006328:	4604      	mov	r4, r0
 800632a:	2301      	movs	r3, #1
 800632c:	e7f0      	b.n	8006310 <_svfiprintf_r+0x194>
 800632e:	ab03      	add	r3, sp, #12
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	462a      	mov	r2, r5
 8006334:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <_svfiprintf_r+0x1f8>)
 8006336:	a904      	add	r1, sp, #16
 8006338:	4638      	mov	r0, r7
 800633a:	f3af 8000 	nop.w
 800633e:	1c42      	adds	r2, r0, #1
 8006340:	4606      	mov	r6, r0
 8006342:	d1d6      	bne.n	80062f2 <_svfiprintf_r+0x176>
 8006344:	89ab      	ldrh	r3, [r5, #12]
 8006346:	065b      	lsls	r3, r3, #25
 8006348:	f53f af2c 	bmi.w	80061a4 <_svfiprintf_r+0x28>
 800634c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634e:	b01d      	add	sp, #116	; 0x74
 8006350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	462a      	mov	r2, r5
 800635a:	4b06      	ldr	r3, [pc, #24]	; (8006374 <_svfiprintf_r+0x1f8>)
 800635c:	a904      	add	r1, sp, #16
 800635e:	4638      	mov	r0, r7
 8006360:	f000 f87a 	bl	8006458 <_printf_i>
 8006364:	e7eb      	b.n	800633e <_svfiprintf_r+0x1c2>
 8006366:	bf00      	nop
 8006368:	0800b6dc 	.word	0x0800b6dc
 800636c:	0800b6e6 	.word	0x0800b6e6
 8006370:	00000000 	.word	0x00000000
 8006374:	080060c5 	.word	0x080060c5
 8006378:	0800b6e2 	.word	0x0800b6e2

0800637c <_printf_common>:
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	4616      	mov	r6, r2
 8006382:	4699      	mov	r9, r3
 8006384:	688a      	ldr	r2, [r1, #8]
 8006386:	690b      	ldr	r3, [r1, #16]
 8006388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800638c:	4293      	cmp	r3, r2
 800638e:	bfb8      	it	lt
 8006390:	4613      	movlt	r3, r2
 8006392:	6033      	str	r3, [r6, #0]
 8006394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006398:	4607      	mov	r7, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b10a      	cbz	r2, 80063a2 <_printf_common+0x26>
 800639e:	3301      	adds	r3, #1
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	0699      	lsls	r1, r3, #26
 80063a6:	bf42      	ittt	mi
 80063a8:	6833      	ldrmi	r3, [r6, #0]
 80063aa:	3302      	addmi	r3, #2
 80063ac:	6033      	strmi	r3, [r6, #0]
 80063ae:	6825      	ldr	r5, [r4, #0]
 80063b0:	f015 0506 	ands.w	r5, r5, #6
 80063b4:	d106      	bne.n	80063c4 <_printf_common+0x48>
 80063b6:	f104 0a19 	add.w	sl, r4, #25
 80063ba:	68e3      	ldr	r3, [r4, #12]
 80063bc:	6832      	ldr	r2, [r6, #0]
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc26      	bgt.n	8006412 <_printf_common+0x96>
 80063c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c8:	1e13      	subs	r3, r2, #0
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	bf18      	it	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	0692      	lsls	r2, r2, #26
 80063d2:	d42b      	bmi.n	800642c <_printf_common+0xb0>
 80063d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d8:	4649      	mov	r1, r9
 80063da:	4638      	mov	r0, r7
 80063dc:	47c0      	blx	r8
 80063de:	3001      	adds	r0, #1
 80063e0:	d01e      	beq.n	8006420 <_printf_common+0xa4>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	68e5      	ldr	r5, [r4, #12]
 80063e6:	6832      	ldr	r2, [r6, #0]
 80063e8:	f003 0306 	and.w	r3, r3, #6
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	bf08      	it	eq
 80063f0:	1aad      	subeq	r5, r5, r2
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	bf0c      	ite	eq
 80063f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063fc:	2500      	movne	r5, #0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfc4      	itt	gt
 8006402:	1a9b      	subgt	r3, r3, r2
 8006404:	18ed      	addgt	r5, r5, r3
 8006406:	2600      	movs	r6, #0
 8006408:	341a      	adds	r4, #26
 800640a:	42b5      	cmp	r5, r6
 800640c:	d11a      	bne.n	8006444 <_printf_common+0xc8>
 800640e:	2000      	movs	r0, #0
 8006410:	e008      	b.n	8006424 <_printf_common+0xa8>
 8006412:	2301      	movs	r3, #1
 8006414:	4652      	mov	r2, sl
 8006416:	4649      	mov	r1, r9
 8006418:	4638      	mov	r0, r7
 800641a:	47c0      	blx	r8
 800641c:	3001      	adds	r0, #1
 800641e:	d103      	bne.n	8006428 <_printf_common+0xac>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	3501      	adds	r5, #1
 800642a:	e7c6      	b.n	80063ba <_printf_common+0x3e>
 800642c:	18e1      	adds	r1, r4, r3
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	2030      	movs	r0, #48	; 0x30
 8006432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006436:	4422      	add	r2, r4
 8006438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800643c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006440:	3302      	adds	r3, #2
 8006442:	e7c7      	b.n	80063d4 <_printf_common+0x58>
 8006444:	2301      	movs	r3, #1
 8006446:	4622      	mov	r2, r4
 8006448:	4649      	mov	r1, r9
 800644a:	4638      	mov	r0, r7
 800644c:	47c0      	blx	r8
 800644e:	3001      	adds	r0, #1
 8006450:	d0e6      	beq.n	8006420 <_printf_common+0xa4>
 8006452:	3601      	adds	r6, #1
 8006454:	e7d9      	b.n	800640a <_printf_common+0x8e>
	...

08006458 <_printf_i>:
 8006458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	460c      	mov	r4, r1
 800645e:	4691      	mov	r9, r2
 8006460:	7e27      	ldrb	r7, [r4, #24]
 8006462:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4680      	mov	r8, r0
 8006468:	469a      	mov	sl, r3
 800646a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800646e:	d807      	bhi.n	8006480 <_printf_i+0x28>
 8006470:	2f62      	cmp	r7, #98	; 0x62
 8006472:	d80a      	bhi.n	800648a <_printf_i+0x32>
 8006474:	2f00      	cmp	r7, #0
 8006476:	f000 80d8 	beq.w	800662a <_printf_i+0x1d2>
 800647a:	2f58      	cmp	r7, #88	; 0x58
 800647c:	f000 80a3 	beq.w	80065c6 <_printf_i+0x16e>
 8006480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006488:	e03a      	b.n	8006500 <_printf_i+0xa8>
 800648a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800648e:	2b15      	cmp	r3, #21
 8006490:	d8f6      	bhi.n	8006480 <_printf_i+0x28>
 8006492:	a001      	add	r0, pc, #4	; (adr r0, 8006498 <_printf_i+0x40>)
 8006494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006498:	080064f1 	.word	0x080064f1
 800649c:	08006505 	.word	0x08006505
 80064a0:	08006481 	.word	0x08006481
 80064a4:	08006481 	.word	0x08006481
 80064a8:	08006481 	.word	0x08006481
 80064ac:	08006481 	.word	0x08006481
 80064b0:	08006505 	.word	0x08006505
 80064b4:	08006481 	.word	0x08006481
 80064b8:	08006481 	.word	0x08006481
 80064bc:	08006481 	.word	0x08006481
 80064c0:	08006481 	.word	0x08006481
 80064c4:	08006611 	.word	0x08006611
 80064c8:	08006535 	.word	0x08006535
 80064cc:	080065f3 	.word	0x080065f3
 80064d0:	08006481 	.word	0x08006481
 80064d4:	08006481 	.word	0x08006481
 80064d8:	08006633 	.word	0x08006633
 80064dc:	08006481 	.word	0x08006481
 80064e0:	08006535 	.word	0x08006535
 80064e4:	08006481 	.word	0x08006481
 80064e8:	08006481 	.word	0x08006481
 80064ec:	080065fb 	.word	0x080065fb
 80064f0:	680b      	ldr	r3, [r1, #0]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	600a      	str	r2, [r1, #0]
 80064f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006500:	2301      	movs	r3, #1
 8006502:	e0a3      	b.n	800664c <_printf_i+0x1f4>
 8006504:	6825      	ldr	r5, [r4, #0]
 8006506:	6808      	ldr	r0, [r1, #0]
 8006508:	062e      	lsls	r6, r5, #24
 800650a:	f100 0304 	add.w	r3, r0, #4
 800650e:	d50a      	bpl.n	8006526 <_printf_i+0xce>
 8006510:	6805      	ldr	r5, [r0, #0]
 8006512:	600b      	str	r3, [r1, #0]
 8006514:	2d00      	cmp	r5, #0
 8006516:	da03      	bge.n	8006520 <_printf_i+0xc8>
 8006518:	232d      	movs	r3, #45	; 0x2d
 800651a:	426d      	negs	r5, r5
 800651c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006520:	485e      	ldr	r0, [pc, #376]	; (800669c <_printf_i+0x244>)
 8006522:	230a      	movs	r3, #10
 8006524:	e019      	b.n	800655a <_printf_i+0x102>
 8006526:	f015 0f40 	tst.w	r5, #64	; 0x40
 800652a:	6805      	ldr	r5, [r0, #0]
 800652c:	600b      	str	r3, [r1, #0]
 800652e:	bf18      	it	ne
 8006530:	b22d      	sxthne	r5, r5
 8006532:	e7ef      	b.n	8006514 <_printf_i+0xbc>
 8006534:	680b      	ldr	r3, [r1, #0]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	1d18      	adds	r0, r3, #4
 800653a:	6008      	str	r0, [r1, #0]
 800653c:	0628      	lsls	r0, r5, #24
 800653e:	d501      	bpl.n	8006544 <_printf_i+0xec>
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	e002      	b.n	800654a <_printf_i+0xf2>
 8006544:	0669      	lsls	r1, r5, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0xe8>
 8006548:	881d      	ldrh	r5, [r3, #0]
 800654a:	4854      	ldr	r0, [pc, #336]	; (800669c <_printf_i+0x244>)
 800654c:	2f6f      	cmp	r7, #111	; 0x6f
 800654e:	bf0c      	ite	eq
 8006550:	2308      	moveq	r3, #8
 8006552:	230a      	movne	r3, #10
 8006554:	2100      	movs	r1, #0
 8006556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655a:	6866      	ldr	r6, [r4, #4]
 800655c:	60a6      	str	r6, [r4, #8]
 800655e:	2e00      	cmp	r6, #0
 8006560:	bfa2      	ittt	ge
 8006562:	6821      	ldrge	r1, [r4, #0]
 8006564:	f021 0104 	bicge.w	r1, r1, #4
 8006568:	6021      	strge	r1, [r4, #0]
 800656a:	b90d      	cbnz	r5, 8006570 <_printf_i+0x118>
 800656c:	2e00      	cmp	r6, #0
 800656e:	d04d      	beq.n	800660c <_printf_i+0x1b4>
 8006570:	4616      	mov	r6, r2
 8006572:	fbb5 f1f3 	udiv	r1, r5, r3
 8006576:	fb03 5711 	mls	r7, r3, r1, r5
 800657a:	5dc7      	ldrb	r7, [r0, r7]
 800657c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006580:	462f      	mov	r7, r5
 8006582:	42bb      	cmp	r3, r7
 8006584:	460d      	mov	r5, r1
 8006586:	d9f4      	bls.n	8006572 <_printf_i+0x11a>
 8006588:	2b08      	cmp	r3, #8
 800658a:	d10b      	bne.n	80065a4 <_printf_i+0x14c>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	07df      	lsls	r7, r3, #31
 8006590:	d508      	bpl.n	80065a4 <_printf_i+0x14c>
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6861      	ldr	r1, [r4, #4]
 8006596:	4299      	cmp	r1, r3
 8006598:	bfde      	ittt	le
 800659a:	2330      	movle	r3, #48	; 0x30
 800659c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065a4:	1b92      	subs	r2, r2, r6
 80065a6:	6122      	str	r2, [r4, #16]
 80065a8:	f8cd a000 	str.w	sl, [sp]
 80065ac:	464b      	mov	r3, r9
 80065ae:	aa03      	add	r2, sp, #12
 80065b0:	4621      	mov	r1, r4
 80065b2:	4640      	mov	r0, r8
 80065b4:	f7ff fee2 	bl	800637c <_printf_common>
 80065b8:	3001      	adds	r0, #1
 80065ba:	d14c      	bne.n	8006656 <_printf_i+0x1fe>
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	b004      	add	sp, #16
 80065c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c6:	4835      	ldr	r0, [pc, #212]	; (800669c <_printf_i+0x244>)
 80065c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	680e      	ldr	r6, [r1, #0]
 80065d0:	061f      	lsls	r7, r3, #24
 80065d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80065d6:	600e      	str	r6, [r1, #0]
 80065d8:	d514      	bpl.n	8006604 <_printf_i+0x1ac>
 80065da:	07d9      	lsls	r1, r3, #31
 80065dc:	bf44      	itt	mi
 80065de:	f043 0320 	orrmi.w	r3, r3, #32
 80065e2:	6023      	strmi	r3, [r4, #0]
 80065e4:	b91d      	cbnz	r5, 80065ee <_printf_i+0x196>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	f023 0320 	bic.w	r3, r3, #32
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	2310      	movs	r3, #16
 80065f0:	e7b0      	b.n	8006554 <_printf_i+0xfc>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	f043 0320 	orr.w	r3, r3, #32
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	2378      	movs	r3, #120	; 0x78
 80065fc:	4828      	ldr	r0, [pc, #160]	; (80066a0 <_printf_i+0x248>)
 80065fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006602:	e7e3      	b.n	80065cc <_printf_i+0x174>
 8006604:	065e      	lsls	r6, r3, #25
 8006606:	bf48      	it	mi
 8006608:	b2ad      	uxthmi	r5, r5
 800660a:	e7e6      	b.n	80065da <_printf_i+0x182>
 800660c:	4616      	mov	r6, r2
 800660e:	e7bb      	b.n	8006588 <_printf_i+0x130>
 8006610:	680b      	ldr	r3, [r1, #0]
 8006612:	6826      	ldr	r6, [r4, #0]
 8006614:	6960      	ldr	r0, [r4, #20]
 8006616:	1d1d      	adds	r5, r3, #4
 8006618:	600d      	str	r5, [r1, #0]
 800661a:	0635      	lsls	r5, r6, #24
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	d501      	bpl.n	8006624 <_printf_i+0x1cc>
 8006620:	6018      	str	r0, [r3, #0]
 8006622:	e002      	b.n	800662a <_printf_i+0x1d2>
 8006624:	0671      	lsls	r1, r6, #25
 8006626:	d5fb      	bpl.n	8006620 <_printf_i+0x1c8>
 8006628:	8018      	strh	r0, [r3, #0]
 800662a:	2300      	movs	r3, #0
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	4616      	mov	r6, r2
 8006630:	e7ba      	b.n	80065a8 <_printf_i+0x150>
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	1d1a      	adds	r2, r3, #4
 8006636:	600a      	str	r2, [r1, #0]
 8006638:	681e      	ldr	r6, [r3, #0]
 800663a:	6862      	ldr	r2, [r4, #4]
 800663c:	2100      	movs	r1, #0
 800663e:	4630      	mov	r0, r6
 8006640:	f7f9 fdce 	bl	80001e0 <memchr>
 8006644:	b108      	cbz	r0, 800664a <_printf_i+0x1f2>
 8006646:	1b80      	subs	r0, r0, r6
 8006648:	6060      	str	r0, [r4, #4]
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	2300      	movs	r3, #0
 8006650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006654:	e7a8      	b.n	80065a8 <_printf_i+0x150>
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	4632      	mov	r2, r6
 800665a:	4649      	mov	r1, r9
 800665c:	4640      	mov	r0, r8
 800665e:	47d0      	blx	sl
 8006660:	3001      	adds	r0, #1
 8006662:	d0ab      	beq.n	80065bc <_printf_i+0x164>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	079b      	lsls	r3, r3, #30
 8006668:	d413      	bmi.n	8006692 <_printf_i+0x23a>
 800666a:	68e0      	ldr	r0, [r4, #12]
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	4298      	cmp	r0, r3
 8006670:	bfb8      	it	lt
 8006672:	4618      	movlt	r0, r3
 8006674:	e7a4      	b.n	80065c0 <_printf_i+0x168>
 8006676:	2301      	movs	r3, #1
 8006678:	4632      	mov	r2, r6
 800667a:	4649      	mov	r1, r9
 800667c:	4640      	mov	r0, r8
 800667e:	47d0      	blx	sl
 8006680:	3001      	adds	r0, #1
 8006682:	d09b      	beq.n	80065bc <_printf_i+0x164>
 8006684:	3501      	adds	r5, #1
 8006686:	68e3      	ldr	r3, [r4, #12]
 8006688:	9903      	ldr	r1, [sp, #12]
 800668a:	1a5b      	subs	r3, r3, r1
 800668c:	42ab      	cmp	r3, r5
 800668e:	dcf2      	bgt.n	8006676 <_printf_i+0x21e>
 8006690:	e7eb      	b.n	800666a <_printf_i+0x212>
 8006692:	2500      	movs	r5, #0
 8006694:	f104 0619 	add.w	r6, r4, #25
 8006698:	e7f5      	b.n	8006686 <_printf_i+0x22e>
 800669a:	bf00      	nop
 800669c:	0800b6ed 	.word	0x0800b6ed
 80066a0:	0800b6fe 	.word	0x0800b6fe

080066a4 <memcpy>:
 80066a4:	440a      	add	r2, r1
 80066a6:	4291      	cmp	r1, r2
 80066a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ac:	d100      	bne.n	80066b0 <memcpy+0xc>
 80066ae:	4770      	bx	lr
 80066b0:	b510      	push	{r4, lr}
 80066b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ba:	4291      	cmp	r1, r2
 80066bc:	d1f9      	bne.n	80066b2 <memcpy+0xe>
 80066be:	bd10      	pop	{r4, pc}

080066c0 <memmove>:
 80066c0:	4288      	cmp	r0, r1
 80066c2:	b510      	push	{r4, lr}
 80066c4:	eb01 0402 	add.w	r4, r1, r2
 80066c8:	d902      	bls.n	80066d0 <memmove+0x10>
 80066ca:	4284      	cmp	r4, r0
 80066cc:	4623      	mov	r3, r4
 80066ce:	d807      	bhi.n	80066e0 <memmove+0x20>
 80066d0:	1e43      	subs	r3, r0, #1
 80066d2:	42a1      	cmp	r1, r4
 80066d4:	d008      	beq.n	80066e8 <memmove+0x28>
 80066d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066de:	e7f8      	b.n	80066d2 <memmove+0x12>
 80066e0:	4402      	add	r2, r0
 80066e2:	4601      	mov	r1, r0
 80066e4:	428a      	cmp	r2, r1
 80066e6:	d100      	bne.n	80066ea <memmove+0x2a>
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066f2:	e7f7      	b.n	80066e4 <memmove+0x24>

080066f4 <_free_r>:
 80066f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d048      	beq.n	800678c <_free_r+0x98>
 80066fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fe:	9001      	str	r0, [sp, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f1a1 0404 	sub.w	r4, r1, #4
 8006706:	bfb8      	it	lt
 8006708:	18e4      	addlt	r4, r4, r3
 800670a:	f000 f8d3 	bl	80068b4 <__malloc_lock>
 800670e:	4a20      	ldr	r2, [pc, #128]	; (8006790 <_free_r+0x9c>)
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	4615      	mov	r5, r2
 8006716:	b933      	cbnz	r3, 8006726 <_free_r+0x32>
 8006718:	6063      	str	r3, [r4, #4]
 800671a:	6014      	str	r4, [r2, #0]
 800671c:	b003      	add	sp, #12
 800671e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006722:	f000 b8cd 	b.w	80068c0 <__malloc_unlock>
 8006726:	42a3      	cmp	r3, r4
 8006728:	d90b      	bls.n	8006742 <_free_r+0x4e>
 800672a:	6821      	ldr	r1, [r4, #0]
 800672c:	1862      	adds	r2, r4, r1
 800672e:	4293      	cmp	r3, r2
 8006730:	bf04      	itt	eq
 8006732:	681a      	ldreq	r2, [r3, #0]
 8006734:	685b      	ldreq	r3, [r3, #4]
 8006736:	6063      	str	r3, [r4, #4]
 8006738:	bf04      	itt	eq
 800673a:	1852      	addeq	r2, r2, r1
 800673c:	6022      	streq	r2, [r4, #0]
 800673e:	602c      	str	r4, [r5, #0]
 8006740:	e7ec      	b.n	800671c <_free_r+0x28>
 8006742:	461a      	mov	r2, r3
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b10b      	cbz	r3, 800674c <_free_r+0x58>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d9fa      	bls.n	8006742 <_free_r+0x4e>
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	1855      	adds	r5, r2, r1
 8006750:	42a5      	cmp	r5, r4
 8006752:	d10b      	bne.n	800676c <_free_r+0x78>
 8006754:	6824      	ldr	r4, [r4, #0]
 8006756:	4421      	add	r1, r4
 8006758:	1854      	adds	r4, r2, r1
 800675a:	42a3      	cmp	r3, r4
 800675c:	6011      	str	r1, [r2, #0]
 800675e:	d1dd      	bne.n	800671c <_free_r+0x28>
 8006760:	681c      	ldr	r4, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	6053      	str	r3, [r2, #4]
 8006766:	4421      	add	r1, r4
 8006768:	6011      	str	r1, [r2, #0]
 800676a:	e7d7      	b.n	800671c <_free_r+0x28>
 800676c:	d902      	bls.n	8006774 <_free_r+0x80>
 800676e:	230c      	movs	r3, #12
 8006770:	6003      	str	r3, [r0, #0]
 8006772:	e7d3      	b.n	800671c <_free_r+0x28>
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1961      	adds	r1, r4, r5
 8006778:	428b      	cmp	r3, r1
 800677a:	bf04      	itt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	bf04      	itt	eq
 8006784:	1949      	addeq	r1, r1, r5
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	6054      	str	r4, [r2, #4]
 800678a:	e7c7      	b.n	800671c <_free_r+0x28>
 800678c:	b003      	add	sp, #12
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	20000174 	.word	0x20000174

08006794 <_malloc_r>:
 8006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006796:	1ccd      	adds	r5, r1, #3
 8006798:	f025 0503 	bic.w	r5, r5, #3
 800679c:	3508      	adds	r5, #8
 800679e:	2d0c      	cmp	r5, #12
 80067a0:	bf38      	it	cc
 80067a2:	250c      	movcc	r5, #12
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	4606      	mov	r6, r0
 80067a8:	db01      	blt.n	80067ae <_malloc_r+0x1a>
 80067aa:	42a9      	cmp	r1, r5
 80067ac:	d903      	bls.n	80067b6 <_malloc_r+0x22>
 80067ae:	230c      	movs	r3, #12
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	2000      	movs	r0, #0
 80067b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b6:	f000 f87d 	bl	80068b4 <__malloc_lock>
 80067ba:	4921      	ldr	r1, [pc, #132]	; (8006840 <_malloc_r+0xac>)
 80067bc:	680a      	ldr	r2, [r1, #0]
 80067be:	4614      	mov	r4, r2
 80067c0:	b99c      	cbnz	r4, 80067ea <_malloc_r+0x56>
 80067c2:	4f20      	ldr	r7, [pc, #128]	; (8006844 <_malloc_r+0xb0>)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	b923      	cbnz	r3, 80067d2 <_malloc_r+0x3e>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4630      	mov	r0, r6
 80067cc:	f000 f862 	bl	8006894 <_sbrk_r>
 80067d0:	6038      	str	r0, [r7, #0]
 80067d2:	4629      	mov	r1, r5
 80067d4:	4630      	mov	r0, r6
 80067d6:	f000 f85d 	bl	8006894 <_sbrk_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d123      	bne.n	8006826 <_malloc_r+0x92>
 80067de:	230c      	movs	r3, #12
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f86c 	bl	80068c0 <__malloc_unlock>
 80067e8:	e7e3      	b.n	80067b2 <_malloc_r+0x1e>
 80067ea:	6823      	ldr	r3, [r4, #0]
 80067ec:	1b5b      	subs	r3, r3, r5
 80067ee:	d417      	bmi.n	8006820 <_malloc_r+0x8c>
 80067f0:	2b0b      	cmp	r3, #11
 80067f2:	d903      	bls.n	80067fc <_malloc_r+0x68>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	441c      	add	r4, r3
 80067f8:	6025      	str	r5, [r4, #0]
 80067fa:	e004      	b.n	8006806 <_malloc_r+0x72>
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	42a2      	cmp	r2, r4
 8006800:	bf0c      	ite	eq
 8006802:	600b      	streq	r3, [r1, #0]
 8006804:	6053      	strne	r3, [r2, #4]
 8006806:	4630      	mov	r0, r6
 8006808:	f000 f85a 	bl	80068c0 <__malloc_unlock>
 800680c:	f104 000b 	add.w	r0, r4, #11
 8006810:	1d23      	adds	r3, r4, #4
 8006812:	f020 0007 	bic.w	r0, r0, #7
 8006816:	1ac2      	subs	r2, r0, r3
 8006818:	d0cc      	beq.n	80067b4 <_malloc_r+0x20>
 800681a:	1a1b      	subs	r3, r3, r0
 800681c:	50a3      	str	r3, [r4, r2]
 800681e:	e7c9      	b.n	80067b4 <_malloc_r+0x20>
 8006820:	4622      	mov	r2, r4
 8006822:	6864      	ldr	r4, [r4, #4]
 8006824:	e7cc      	b.n	80067c0 <_malloc_r+0x2c>
 8006826:	1cc4      	adds	r4, r0, #3
 8006828:	f024 0403 	bic.w	r4, r4, #3
 800682c:	42a0      	cmp	r0, r4
 800682e:	d0e3      	beq.n	80067f8 <_malloc_r+0x64>
 8006830:	1a21      	subs	r1, r4, r0
 8006832:	4630      	mov	r0, r6
 8006834:	f000 f82e 	bl	8006894 <_sbrk_r>
 8006838:	3001      	adds	r0, #1
 800683a:	d1dd      	bne.n	80067f8 <_malloc_r+0x64>
 800683c:	e7cf      	b.n	80067de <_malloc_r+0x4a>
 800683e:	bf00      	nop
 8006840:	20000174 	.word	0x20000174
 8006844:	20000178 	.word	0x20000178

08006848 <_realloc_r>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	4607      	mov	r7, r0
 800684c:	4614      	mov	r4, r2
 800684e:	460e      	mov	r6, r1
 8006850:	b921      	cbnz	r1, 800685c <_realloc_r+0x14>
 8006852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006856:	4611      	mov	r1, r2
 8006858:	f7ff bf9c 	b.w	8006794 <_malloc_r>
 800685c:	b922      	cbnz	r2, 8006868 <_realloc_r+0x20>
 800685e:	f7ff ff49 	bl	80066f4 <_free_r>
 8006862:	4625      	mov	r5, r4
 8006864:	4628      	mov	r0, r5
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006868:	f000 f830 	bl	80068cc <_malloc_usable_size_r>
 800686c:	42a0      	cmp	r0, r4
 800686e:	d20f      	bcs.n	8006890 <_realloc_r+0x48>
 8006870:	4621      	mov	r1, r4
 8006872:	4638      	mov	r0, r7
 8006874:	f7ff ff8e 	bl	8006794 <_malloc_r>
 8006878:	4605      	mov	r5, r0
 800687a:	2800      	cmp	r0, #0
 800687c:	d0f2      	beq.n	8006864 <_realloc_r+0x1c>
 800687e:	4631      	mov	r1, r6
 8006880:	4622      	mov	r2, r4
 8006882:	f7ff ff0f 	bl	80066a4 <memcpy>
 8006886:	4631      	mov	r1, r6
 8006888:	4638      	mov	r0, r7
 800688a:	f7ff ff33 	bl	80066f4 <_free_r>
 800688e:	e7e9      	b.n	8006864 <_realloc_r+0x1c>
 8006890:	4635      	mov	r5, r6
 8006892:	e7e7      	b.n	8006864 <_realloc_r+0x1c>

08006894 <_sbrk_r>:
 8006894:	b538      	push	{r3, r4, r5, lr}
 8006896:	4d06      	ldr	r5, [pc, #24]	; (80068b0 <_sbrk_r+0x1c>)
 8006898:	2300      	movs	r3, #0
 800689a:	4604      	mov	r4, r0
 800689c:	4608      	mov	r0, r1
 800689e:	602b      	str	r3, [r5, #0]
 80068a0:	f7fa fd52 	bl	8001348 <_sbrk>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d102      	bne.n	80068ae <_sbrk_r+0x1a>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	b103      	cbz	r3, 80068ae <_sbrk_r+0x1a>
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	20000308 	.word	0x20000308

080068b4 <__malloc_lock>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__malloc_lock+0x8>)
 80068b6:	f000 b811 	b.w	80068dc <__retarget_lock_acquire_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000310 	.word	0x20000310

080068c0 <__malloc_unlock>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__malloc_unlock+0x8>)
 80068c2:	f000 b80c 	b.w	80068de <__retarget_lock_release_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000310 	.word	0x20000310

080068cc <_malloc_usable_size_r>:
 80068cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d0:	1f18      	subs	r0, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bfbc      	itt	lt
 80068d6:	580b      	ldrlt	r3, [r1, r0]
 80068d8:	18c0      	addlt	r0, r0, r3
 80068da:	4770      	bx	lr

080068dc <__retarget_lock_acquire_recursive>:
 80068dc:	4770      	bx	lr

080068de <__retarget_lock_release_recursive>:
 80068de:	4770      	bx	lr

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
