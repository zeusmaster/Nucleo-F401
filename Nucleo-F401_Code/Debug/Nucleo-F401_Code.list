
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000520c  0800a0f0  0800a0f0  0001a0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2fc  0800f2fc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2fc  0800f2fc  0001f2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f304  0800f304  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f304  0800f304  0001f304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f308  0800f308  0001f308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001f8  0800f504  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800f504  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b2fc  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c1c  00000000  00000000  0005b524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00060140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016d0  00000000  00000000  00061a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3f7  00000000  00000000  00063108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb22  00000000  00000000  0007e4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2d0b  00000000  00000000  0009b021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013dd2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  0013dd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0d4 	.word	0x0800a0d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a0d4 	.word	0x0800a0d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <I2C_LCD1602_Send_Command>:
#define LCD1_address 		0x4E // A0,A1,A2 OPEN->E

extern I2C_HandleTypeDef hi2c1;

void I2C_LCD1602_Send_Command(unsigned char command)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	char command_MSB, command_LSB;
	uint8_t I2C_cmd[4];
	command_MSB = ( command & 0xf0 );
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f023 030f 	bic.w	r3, r3, #15
 8000f60:	73fb      	strb	r3, [r7, #15]
	command_LSB = ( (command << 4) & 0xf0 ) ;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	73bb      	strb	r3, [r7, #14]

	I2C_cmd[ 0 ] = command_MSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f043 030c 	orr.w	r3, r3, #12
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	723b      	strb	r3, [r7, #8]
	I2C_cmd[ 1 ] = command_MSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	727b      	strb	r3, [r7, #9]
	I2C_cmd[ 2 ] = command_LSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 030c 	orr.w	r3, r3, #12
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	72bb      	strb	r3, [r7, #10]
	I2C_cmd[ 3 ] = command_LSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_cmd, 4, 100 );
 8000f90:	f107 0208 	add.w	r2, r7, #8
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	214e      	movs	r1, #78	; 0x4e
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <I2C_LCD1602_Send_Command+0x5c>)
 8000f9e:	f004 fa97 	bl	80054d0 <HAL_I2C_Master_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000394 	.word	0x20000394

08000fb0 <I2C_LCD1602_Send_Data>:

void I2C_LCD1602_Send_Data(unsigned char data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	char data_MSB, data_LSB;
	uint8_t I2C_data[4];
	data_MSB = ( data & 0xf0 ) ;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	73fb      	strb	r3, [r7, #15]
	data_LSB =  ( (data << 4) & 0xf0 ) ;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	73bb      	strb	r3, [r7, #14]

	I2C_data[ 0 ] = data_MSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f043 030d 	orr.w	r3, r3, #13
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	723b      	strb	r3, [r7, #8]
	I2C_data[ 1 ] = data_MSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 0309 	orr.w	r3, r3, #9
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	727b      	strb	r3, [r7, #9]
	I2C_data[ 2 ] = data_LSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	f043 030d 	orr.w	r3, r3, #13
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	72bb      	strb	r3, [r7, #10]
	I2C_data[ 3 ] = data_LSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f043 0309 	orr.w	r3, r3, #9
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_data, 4, 100 );
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	214e      	movs	r1, #78	; 0x4e
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <I2C_LCD1602_Send_Data+0x5c>)
 8000ffe:	f004 fa67 	bl	80054d0 <HAL_I2C_Master_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000394 	.word	0x20000394

08001010 <I2C_LCD1602_Init>:

void I2C_LCD1602_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f002 feb1 	bl	8003d7c <HAL_Delay>

	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	f7ff ff98 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001020:	2005      	movs	r0, #5
 8001022:	f002 feab 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001026:	2030      	movs	r0, #48	; 0x30
 8001028:	f7ff ff92 	bl	8000f50 <I2C_LCD1602_Send_Command>
 800102c:	2005      	movs	r0, #5
 800102e:	f002 fea5 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001032:	2030      	movs	r0, #48	; 0x30
 8001034:	f7ff ff8c 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001038:	2005      	movs	r0, #5
 800103a:	f002 fe9f 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( MODE4bit ); HAL_Delay(5);
 800103e:	2020      	movs	r0, #32
 8001040:	f7ff ff86 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001044:	2005      	movs	r0, #5
 8001046:	f002 fe99 	bl	8003d7c <HAL_Delay>

	I2C_LCD1602_Send_Command(FUNCTIONSET ); HAL_Delay(5); // 4bit 2line font5x10
 800104a:	202c      	movs	r0, #44	; 0x2c
 800104c:	f7ff ff80 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001050:	2005      	movs	r0, #5
 8001052:	f002 fe93 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( DISPLAYON ); HAL_Delay(5);
 8001056:	200c      	movs	r0, #12
 8001058:	f7ff ff7a 	bl	8000f50 <I2C_LCD1602_Send_Command>
 800105c:	2005      	movs	r0, #5
 800105e:	f002 fe8d 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( ALLCLR ); HAL_Delay(5);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff74 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001068:	2005      	movs	r0, #5
 800106a:	f002 fe87 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command( ENTMODE ); HAL_Delay(5);
 800106e:	2006      	movs	r0, #6
 8001070:	f7ff ff6e 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001074:	2005      	movs	r0, #5
 8001076:	f002 fe81 	bl	8003d7c <HAL_Delay>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <I2C_LCD1602_Send_string>:

void I2C_LCD1602_Send_string( char *string)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	while( * string ) I2C_LCD1602_Send_Data( *string++ );
 8001086:	e006      	b.n	8001096 <I2C_LCD1602_Send_string+0x18>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff8d 	bl	8000fb0 <I2C_LCD1602_Send_Data>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <I2C_LCD1602_Send_string+0xa>
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <I2C_LCD1602_GotoXY>:
void I2C_LCD1602_GotoXY(char x, char y)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	if( !y ) I2C_LCD1602_Send_Command( 0x80 | x );
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <I2C_LCD1602_GotoXY+0x26>
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff42 	bl	8000f50 <I2C_LCD1602_Send_Command>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
}
 80010cc:	e006      	b.n	80010dc <I2C_LCD1602_GotoXY+0x34>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff3a 	bl	8000f50 <I2C_LCD1602_Send_Command>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <I2C_LCD1602_Send_String_XY>:

void I2C_LCD1602_Send_String_XY( char x, char y, char *string )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	603a      	str	r2, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	460b      	mov	r3, r1
 80010f2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD1602_GotoXY( x , y );
 80010f4:	79ba      	ldrb	r2, [r7, #6]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffd4 	bl	80010a8 <I2C_LCD1602_GotoXY>
	I2C_LCD1602_Send_string( string );
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f7ff ffbc 	bl	800107e <I2C_LCD1602_Send_string>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <I2C_LCD1602_Clear>:
void I2C_LCD1602_BlinkOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x01); }
void I2C_LCD1602_CursorOn(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON | 0x02); }
void I2C_LCD1602_CursorOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x02); }

void I2C_LCD1602_Clear()
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
/*	I2C_LCD1602_Send_Command (0x80);
	for (int i=0; i<70; i++)
	{
		I2C_LCD1602_Send_Data (' ');
	}*/
	I2C_LCD1602_Send_Command(ALLCLR); HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ff1c 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001118:	2001      	movs	r0, #1
 800111a:	f002 fe2f 	bl	8003d7c <HAL_Delay>
	I2C_LCD1602_Send_Command(0x80); HAL_Delay(1);
 800111e:	2080      	movs	r0, #128	; 0x80
 8001120:	f7ff ff16 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001124:	2001      	movs	r0, #1
 8001126:	f002 fe29 	bl	8003d7c <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_TIM_PeriodElapsedCallback>:
#include "Zeus_define.h"

float SR04_Echo_HighTime= 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	if( htim->Instance == TIM1 ) 	TIM1->SR =0;   }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d102      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SR04_ECHO_Pin )
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d113      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x38>
	{
		TIM1->CNT =0;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_GPIO_EXTI_Callback+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin( SR04_ECHO_GPIO_Port, SR04_ECHO_Pin) ) {
 800116e:	bf00      	nop
 8001170:	2110      	movs	r1, #16
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <HAL_GPIO_EXTI_Callback+0x44>)
 8001174:	f004 f81e 	bl	80051b4 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f8      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x18>
		}
		SR04_Echo_HighTime = TIM1->CNT ;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_GPIO_EXTI_Callback+0x40>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010000 	.word	0x40010000
 800119c:	40020800 	.word	0x40020800
 80011a0:	20000214 	.word	0x20000214
 80011a4:	00000000 	.word	0x00000000

080011a8 <SR04_Trigger_out>:


float SR04_Trigger_out(char microSec)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	481a      	ldr	r0, [pc, #104]	; (8001220 <SR04_Trigger_out+0x78>)
 80011b8:	f004 f814 	bl	80051e4 <HAL_GPIO_WritePin>
	TIM1->CNT =0;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <SR04_Trigger_out+0x7c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

	while ( TIM1->CNT  < microSec ) {
 80011c2:	e004      	b.n	80011ce <SR04_Trigger_out+0x26>
		HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_SET); // Trigger Pin High for 10u sec
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	4815      	ldr	r0, [pc, #84]	; (8001220 <SR04_Trigger_out+0x78>)
 80011ca:	f004 f80b 	bl	80051e4 <HAL_GPIO_WritePin>
	while ( TIM1->CNT  < microSec ) {
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <SR04_Trigger_out+0x7c>)
 80011d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3f5      	bcc.n	80011c4 <SR04_Trigger_out+0x1c>
	}

	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	4810      	ldr	r0, [pc, #64]	; (8001220 <SR04_Trigger_out+0x78>)
 80011de:	f004 f801 	bl	80051e4 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
 80011e4:	f002 fdca 	bl	8003d7c <HAL_Delay>

	//printf("%6.0f mm\r\n",SR04_Echo_HighTime*0.17 );

	return SR04_Echo_HighTime*0.17;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <SR04_Trigger_out+0x80>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	a309      	add	r3, pc, #36	; (adr r3, 8001218 <SR04_Trigger_out+0x70>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa06 	bl	8000608 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fcd8 	bl	8000bb8 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	5c28f5c3 	.word	0x5c28f5c3
 800121c:	3fc5c28f 	.word	0x3fc5c28f
 8001220:	40020800 	.word	0x40020800
 8001224:	40010000 	.word	0x40010000
 8001228:	20000214 	.word	0x20000214

0800122c <get_SR04_value>:

float get_SR04_value(uint8_t NumCheck, float *distance)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ; i < NumCheck ; i++ ) {
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e01a      	b.n	8001274 <get_SR04_value+0x48>
		distance[i] = SR04_Trigger_out(10);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	18d4      	adds	r4, r2, r3
 8001246:	200a      	movs	r0, #10
 8001248:	f7ff ffae 	bl	80011a8 <SR04_Trigger_out>
 800124c:	eef0 7a40 	vmov.f32	s15, s0
 8001250:	edc4 7a00 	vstr	s15, [r4]
		printf(" %6f", distance[i]);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f97a 	bl	8000558 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4814      	ldr	r0, [pc, #80]	; (80012bc <get_SR04_value+0x90>)
 800126a:	f006 fc7b 	bl	8007b64 <iprintf>
	for(int i = 0 ; i < NumCheck ; i++ ) {
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbe0      	blt.n	800123e <get_SR04_value+0x12>
	}
	printf("\r\n avg dist : %f\r\n",Debouce_Value(NumCheck, 1, &distance[0]) );
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	b29b      	uxth	r3, r3
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	2101      	movs	r1, #1
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f9d5 	bl	8001634 <Debouce_Value>
 800128a:	ee10 3a10 	vmov	r3, s0
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f962 	bl	8000558 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <get_SR04_value+0x94>)
 800129a:	f006 fc63 	bl	8007b64 <iprintf>

	return Debouce_Value(NumCheck, 1, &distance[0]);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	683a      	ldr	r2, [r7, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f9c4 	bl	8001634 <Debouce_Value>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800a0f0 	.word	0x0800a0f0
 80012c0:	0800a0f8 	.word	0x0800a0f8

080012c4 <TM1637_Clk_High>:

#define cmd_write_data	0x40
#define cmd_disp_on		0x88
#define cmd_disp_off	0x80

void TM1637_Clk_High() 	{ HAL_GPIO_WritePin(FND_CLK_GPIO_Port, FND_CLK_Pin, GPIO_PIN_SET); }
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <TM1637_Clk_High+0x14>)
 80012d0:	f003 ff88 	bl	80051e4 <HAL_GPIO_WritePin>
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020000 	.word	0x40020000

080012dc <TM1637_Clk_Low>:
void TM1637_Clk_Low()   { HAL_GPIO_WritePin(FND_CLK_GPIO_Port, FND_CLK_Pin, GPIO_PIN_RESET); }
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e6:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TM1637_Clk_Low+0x14>)
 80012e8:	f003 ff7c 	bl	80051e4 <HAL_GPIO_WritePin>
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40020000 	.word	0x40020000

080012f4 <TM1637_Dio_High>:
void TM1637_Dio_High()	{ HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, GPIO_PIN_SET); }
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fe:	4802      	ldr	r0, [pc, #8]	; (8001308 <TM1637_Dio_High+0x14>)
 8001300:	f003 ff70 	bl	80051e4 <HAL_GPIO_WritePin>
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40020400 	.word	0x40020400

0800130c <TM1637_Dio_Low>:
void TM1637_Dio_Low()	{ HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, GPIO_PIN_RESET); }
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4802      	ldr	r0, [pc, #8]	; (8001320 <TM1637_Dio_Low+0x14>)
 8001318:	f003 ff64 	bl	80051e4 <HAL_GPIO_WritePin>
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40020400 	.word	0x40020400

08001324 <delay_usec>:
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void delay_usec(uint16_t usec)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	volatile uint32_t i,j;
	for( i=0; i < usec*2 ; i++ ) {
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	e00c      	b.n	800134e <delay_usec+0x2a>
		for( j=0 ; j< 84 ; j++) {
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	e003      	b.n	8001342 <delay_usec+0x1e>
			//__asm__ __volatile__("nop\n\t":::"memory");
			asm("NOP");
 800133a:	bf00      	nop
		for( j=0 ; j< 84 ; j++) {
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	3301      	adds	r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2b53      	cmp	r3, #83	; 0x53
 8001346:	d9f8      	bls.n	800133a <delay_usec+0x16>
	for( i=0; i < usec*2 ; i++ ) {
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	429a      	cmp	r2, r3
 8001358:	d8ec      	bhi.n	8001334 <delay_usec+0x10>
		}
	}
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <TM1637_Start>:

void TM1637_Start()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	TM1637_Clk_High();
 800136c:	f7ff ffaa 	bl	80012c4 <TM1637_Clk_High>
	TM1637_Dio_High(); delay_usec(tick);
 8001370:	f7ff ffc0 	bl	80012f4 <TM1637_Dio_High>
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <TM1637_Start+0x30>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffd2 	bl	8001324 <delay_usec>
	TM1637_Dio_Low(); delay_usec(tick);
 8001380:	f7ff ffc4 	bl	800130c <TM1637_Dio_Low>
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <TM1637_Start+0x30>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ffca 	bl	8001324 <delay_usec>
	TM1637_Clk_Low();
 8001390:	f7ff ffa4 	bl	80012dc <TM1637_Clk_Low>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000

0800139c <TM1637_Send_Byte>:

void TM1637_Send_Byte(uint8_t byte)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	for( uint8_t i=0 ; i <8 ; i++ ) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e01f      	b.n	80013ec <TM1637_Send_Byte+0x50>
		TM1637_Clk_Low();
 80013ac:	f7ff ff96 	bl	80012dc <TM1637_Clk_Low>

		if( byte & 0x01 ) {TM1637_Dio_High();}
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <TM1637_Send_Byte+0x24>
 80013ba:	f7ff ff9b 	bl	80012f4 <TM1637_Dio_High>
 80013be:	e001      	b.n	80013c4 <TM1637_Send_Byte+0x28>
		else TM1637_Dio_Low();
 80013c0:	f7ff ffa4 	bl	800130c <TM1637_Dio_Low>

		delay_usec(tick);
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <TM1637_Send_Byte+0x60>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffaa 	bl	8001324 <delay_usec>
		TM1637_Clk_High();
 80013d0:	f7ff ff78 	bl	80012c4 <TM1637_Clk_High>
		delay_usec(tick);
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <TM1637_Send_Byte+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffa2 	bl	8001324 <delay_usec>
		byte >>=1;
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	085b      	lsrs	r3, r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
	for( uint8_t i=0 ; i <8 ; i++ ) {
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3301      	adds	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	d9dc      	bls.n	80013ac <TM1637_Send_Byte+0x10>
	}
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000

08001400 <TM1637_Read_Ack>:

void TM1637_Read_Ack()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	TM1637_Clk_Low();
 8001404:	f7ff ff6a 	bl	80012dc <TM1637_Clk_Low>
	TM1637_Dio_Low(); delay_usec(tick);
 8001408:	f7ff ff80 	bl	800130c <TM1637_Dio_Low>
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <TM1637_Read_Ack+0x2c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff86 	bl	8001324 <delay_usec>
	TM1637_Clk_High(); delay_usec(tick);
 8001418:	f7ff ff54 	bl	80012c4 <TM1637_Clk_High>
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <TM1637_Read_Ack+0x2c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff7e 	bl	8001324 <delay_usec>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000

08001430 <TM1637_Stop>:

void TM1637_Stop()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	TM1637_Clk_Low();
 8001434:	f7ff ff52 	bl	80012dc <TM1637_Clk_Low>
	TM1637_Dio_Low(); delay_usec(tick);
 8001438:	f7ff ff68 	bl	800130c <TM1637_Dio_Low>
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <TM1637_Stop+0x2c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ff6e 	bl	8001324 <delay_usec>
	TM1637_Clk_High(); delay_usec(tick);
 8001448:	f7ff ff3c 	bl	80012c4 <TM1637_Clk_High>
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <TM1637_Stop+0x2c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff66 	bl	8001324 <delay_usec>
}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000000 	.word	0x20000000

08001460 <TM1637_bright>:

void TM1637_bright(uint8_t num)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	TM1637_Start();
 800146a:	f7ff ff7d 	bl	8001368 <TM1637_Start>
	TM1637_Send_Byte(0x87 + num);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3b79      	subs	r3, #121	; 0x79
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff91 	bl	800139c <TM1637_Send_Byte>
	TM1637_Read_Ack();
 800147a:	f7ff ffc1 	bl	8001400 <TM1637_Read_Ack>
	TM1637_Stop();
 800147e:	f7ff ffd7 	bl	8001430 <TM1637_Stop>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <TM1637_Display_4digit>:

void TM1637_Display_4digit(uint16_t num)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
	uint8_t digit[4], i;
	for( i = 0; i < 4 ; i++ ) {
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e01a      	b.n	80014d2 <TM1637_Display_4digit+0x46>
		digit[i] = num %10;
 800149c:	88fa      	ldrh	r2, [r7, #6]
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <TM1637_Display_4digit+0xbc>)
 80014a0:	fba3 1302 	umull	r1, r3, r3, r2
 80014a4:	08d9      	lsrs	r1, r3, #3
 80014a6:	460b      	mov	r3, r1
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	f107 0110 	add.w	r1, r7, #16
 80014ba:	440b      	add	r3, r1
 80014bc:	f803 2c08 	strb.w	r2, [r3, #-8]
		num = num/10;
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <TM1637_Display_4digit+0xbc>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	80fb      	strh	r3, [r7, #6]
	for( i = 0; i < 4 ; i++ ) {
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d9e1      	bls.n	800149c <TM1637_Display_4digit+0x10>
	}
	// command1 => write data
	TM1637_Start();
 80014d8:	f7ff ff46 	bl	8001368 <TM1637_Start>
	TM1637_Send_Byte(cmd_write_data);
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	f7ff ff5d 	bl	800139c <TM1637_Send_Byte>
	TM1637_Read_Ack();
 80014e2:	f7ff ff8d 	bl	8001400 <TM1637_Read_Ack>
	TM1637_Stop();
 80014e6:	f7ff ffa3 	bl	8001430 <TM1637_Stop>

	// command2 => address
	TM1637_Start();
 80014ea:	f7ff ff3d 	bl	8001368 <TM1637_Start>
	TM1637_Send_Byte(0xc0);
 80014ee:	20c0      	movs	r0, #192	; 0xc0
 80014f0:	f7ff ff54 	bl	800139c <TM1637_Send_Byte>
	TM1637_Read_Ack();
 80014f4:	f7ff ff84 	bl	8001400 <TM1637_Read_Ack>

	// data1...data4
	for( i = 0; i < 4 ; i++ ) {
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e014      	b.n	8001528 <TM1637_Display_4digit+0x9c>
		TM1637_Start();
 80014fe:	f7ff ff33 	bl	8001368 <TM1637_Start>
		TM1637_Send_Byte( fnd[ digit[3-i] ]);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f1c3 0303 	rsb	r3, r3, #3
 8001508:	f107 0210 	add.w	r2, r7, #16
 800150c:	4413      	add	r3, r2
 800150e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001512:	461a      	mov	r2, r3
 8001514:	4b0d      	ldr	r3, [pc, #52]	; (800154c <TM1637_Display_4digit+0xc0>)
 8001516:	5c9b      	ldrb	r3, [r3, r2]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff3f 	bl	800139c <TM1637_Send_Byte>
		TM1637_Read_Ack();
 800151e:	f7ff ff6f 	bl	8001400 <TM1637_Read_Ack>
	for( i = 0; i < 4 ; i++ ) {
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	3301      	adds	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d9e7      	bls.n	80014fe <TM1637_Display_4digit+0x72>
	}

	// command3 => control display
	TM1637_Start();
 800152e:	f7ff ff1b 	bl	8001368 <TM1637_Start>
	TM1637_Send_Byte(0x88);
 8001532:	2088      	movs	r0, #136	; 0x88
 8001534:	f7ff ff32 	bl	800139c <TM1637_Send_Byte>
	TM1637_Read_Ack();
 8001538:	f7ff ff62 	bl	8001400 <TM1637_Read_Ack>
	TM1637_Stop();
 800153c:	f7ff ff78 	bl	8001430 <TM1637_Stop>
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	cccccccd 	.word	0xcccccccd
 800154c:	0800a1a0 	.word	0x0800a1a0

08001550 <_write>:


// =================  printf function for debugging ======================
extern UART_HandleTypeDef huart2;
int _write(int file, char *data, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,(uint8_t *)data,len,1000);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <_write+0x34>)
 8001568:	f005 fbbb 	bl	8006ce2 <HAL_UART_Transmit>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK ? len : 0);
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <_write+0x2a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e000      	b.n	800157c <_write+0x2c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000430 	.word	0x20000430

08001588 <Buzzer_OnOff>:

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e012      	b.n	80015bc <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 8001596:	2201      	movs	r2, #1
 8001598:	2102      	movs	r1, #2
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <Buzzer_OnOff+0x48>)
 800159c:	f003 fe22 	bl	80051e4 <HAL_GPIO_WritePin>
 80015a0:	200a      	movs	r0, #10
 80015a2:	f002 fbeb 	bl	8003d7c <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2102      	movs	r1, #2
 80015aa:	4809      	ldr	r0, [pc, #36]	; (80015d0 <Buzzer_OnOff+0x48>)
 80015ac:	f003 fe1a 	bl	80051e4 <HAL_GPIO_WritePin>
 80015b0:	200a      	movs	r0, #10
 80015b2:	f002 fbe3 	bl	8003d7c <HAL_Delay>
	for(int i=0;i< times ; i++)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	dbe8      	blt.n	8001596 <Buzzer_OnOff+0xe>
	}
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020400 	.word	0x40020400

080015d4 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <Key_input+0x58>)
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	f023 030f 	bic.w	r3, r3, #15
 80015e4:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2bf0      	cmp	r3, #240	; 0xf0
 80015ea:	d10d      	bne.n	8001608 <Key_input+0x34>
    { if(key_flag == 0)
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <Key_input+0x5c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <Key_input+0x24>
        return key;
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	e014      	b.n	8001622 <Key_input+0x4e>
      else
        { HAL_Delay(20);
 80015f8:	2014      	movs	r0, #20
 80015fa:	f002 fbbf 	bl	8003d7c <HAL_Delay>
          key_flag = 0;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <Key_input+0x5c>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
          return key;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	e00c      	b.n	8001622 <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <Key_input+0x5c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	e006      	b.n	8001622 <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ffb7 	bl	8001588 <Buzzer_OnOff>
          key_flag = 1;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <Key_input+0x5c>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
          return key;
 8001620:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020400 	.word	0x40020400
 8001630:	20000218 	.word	0x20000218

08001634 <Debouce_Value>:
}
// =================  End of ADC input(Noise clear) ==================

// =================  Debouce input Value(Noise clear) ==================
float Debouce_Value(uint16_t NumSum,uint8_t NumAvg, float *value)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	603a      	str	r2, [r7, #0]
 800163e:	80fb      	strh	r3, [r7, #6]
 8001640:	460b      	mov	r3, r1
 8001642:	717b      	strb	r3, [r7, #5]
	float SumAdc =0, Avg=0;
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
	for(int j=0; j < NumAvg ;j++ ) {
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e02a      	b.n	80016ac <Debouce_Value+0x78>
		for(int i=0; i< NumSum ; i++ ) {
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	e00e      	b.n	800167a <Debouce_Value+0x46>
			SumAdc += value[i];
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	4413      	add	r3, r2
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ed97 7a05 	vldr	s14, [r7, #20]
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	edc7 7a05 	vstr	s15, [r7, #20]
		for(int i=0; i< NumSum ; i++ ) {
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	3301      	adds	r3, #1
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbec      	blt.n	800165c <Debouce_Value+0x28>
		}
		Avg += ( SumAdc / NumSum );
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800168c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001694:	ed97 7a04 	vldr	s14, [r7, #16]
 8001698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169c:	edc7 7a04 	vstr	s15, [r7, #16]
		SumAdc = 0;
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
	for(int j=0; j < NumAvg ;j++ ) {
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbd0      	blt.n	8001656 <Debouce_Value+0x22>
	}
	Avg =(Avg /NumAvg );
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016be:	edd7 6a04 	vldr	s13, [r7, #16]
 80016c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c6:	edc7 7a04 	vstr	s15, [r7, #16]
	return Avg;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	ee07 3a90 	vmov	s15, r3
}
 80016d0:	eeb0 0a67 	vmov.f32	s0, s15
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_ADC1_Init+0x98>)
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <MX_ADC1_Init+0x9c>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_ADC1_Init+0x98>)
 80016fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_ADC1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_ADC1_Init+0x98>)
 800170e:	2201      	movs	r2, #1
 8001710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_ADC1_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_ADC1_Init+0x98>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_ADC1_Init+0xa0>)
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_ADC1_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_ADC1_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_ADC1_Init+0x98>)
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_ADC1_Init+0x98>)
 800173c:	2201      	movs	r2, #1
 800173e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_ADC1_Init+0x98>)
 8001742:	f002 fb3f 	bl	8003dc4 <HAL_ADC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800174c:	f000 fd06 	bl	800215c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001758:	2304      	movs	r3, #4
 800175a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_ADC1_Init+0x98>)
 8001762:	f002 fc81 	bl	8004068 <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800176c:	f000 fcf6 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200002ec 	.word	0x200002ec
 800177c:	40012000 	.word	0x40012000
 8001780:	0f000001 	.word	0x0f000001

08001784 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2f      	ldr	r2, [pc, #188]	; (8001860 <HAL_ADC_MspInit+0xdc>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d157      	bne.n	8001856 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a26      	ldr	r2, [pc, #152]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_ADC_MspInit+0xe0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017de:	2302      	movs	r3, #2
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e2:	2303      	movs	r3, #3
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	481d      	ldr	r0, [pc, #116]	; (8001868 <HAL_ADC_MspInit+0xe4>)
 80017f2:	f003 fb5b 	bl	8004eac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_ADC_MspInit+0xe8>)
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <HAL_ADC_MspInit+0xec>)
 80017fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_ADC_MspInit+0xe8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_ADC_MspInit+0xe8>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001814:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800181c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001824:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800183a:	480c      	ldr	r0, [pc, #48]	; (800186c <HAL_ADC_MspInit+0xe8>)
 800183c:	f002 ffc6 	bl	80047cc <HAL_DMA_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001846:	f000 fc89 	bl	800215c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_ADC_MspInit+0xe8>)
 800184e:	639a      	str	r2, [r3, #56]	; 0x38
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_ADC_MspInit+0xe8>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40012000 	.word	0x40012000
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000
 800186c:	20000334 	.word	0x20000334
 8001870:	40026410 	.word	0x40026410

08001874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_DMA_Init+0x3c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <MX_DMA_Init+0x3c>)
 8001884:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_DMA_Init+0x3c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2038      	movs	r0, #56	; 0x38
 800189c:	f002 ff5f 	bl	800475e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018a0:	2038      	movs	r0, #56	; 0x38
 80018a2:	f002 ff78 	bl	8004796 <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <MX_GPIO_Init+0x164>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <MX_GPIO_Init+0x164>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a43      	ldr	r2, [pc, #268]	; (8001a18 <MX_GPIO_Init+0x164>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <MX_GPIO_Init+0x164>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <MX_GPIO_Init+0x164>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <MX_GPIO_Init+0x164>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <MX_GPIO_Init+0x164>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|FND_CLK_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f248 0120 	movw	r1, #32800	; 0x8020
 8001940:	4836      	ldr	r0, [pc, #216]	; (8001a1c <MX_GPIO_Init+0x168>)
 8001942:	f003 fc4f 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2120      	movs	r1, #32
 800194a:	4835      	ldr	r0, [pc, #212]	; (8001a20 <MX_GPIO_Init+0x16c>)
 800194c:	f003 fc4a 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|FND_DIO_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f240 4102 	movw	r1, #1026	; 0x402
 8001956:	4833      	ldr	r0, [pc, #204]	; (8001a24 <MX_GPIO_Init+0x170>)
 8001958:	f003 fc44 	bl	80051e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <MX_GPIO_Init+0x174>)
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	482b      	ldr	r0, [pc, #172]	; (8001a20 <MX_GPIO_Init+0x16c>)
 8001972:	f003 fa9b 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|FND_CLK_Pin;
 8001976:	f248 0320 	movw	r3, #32800	; 0x8020
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_GPIO_Init+0x168>)
 8001990:	f003 fa8c 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_ECHO_Pin;
 8001994:	2310      	movs	r3, #16
 8001996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <MX_GPIO_Init+0x178>)
 800199a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	481e      	ldr	r0, [pc, #120]	; (8001a20 <MX_GPIO_Init+0x16c>)
 80019a8:	f003 fa80 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_TRIG_Pin;
 80019ac:	2320      	movs	r3, #32
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4817      	ldr	r0, [pc, #92]	; (8001a20 <MX_GPIO_Init+0x16c>)
 80019c4:	f003 fa72 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|FND_DIO_Pin;
 80019c8:	f240 4302 	movw	r3, #1026	; 0x402
 80019cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4810      	ldr	r0, [pc, #64]	; (8001a24 <MX_GPIO_Init+0x170>)
 80019e2:	f003 fa63 	bl	8004eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 80019e6:	23f0      	movs	r3, #240	; 0xf0
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <MX_GPIO_Init+0x170>)
 80019fa:	f003 fa57 	bl	8004eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	200a      	movs	r0, #10
 8001a04:	f002 feab 	bl	800475e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f002 fec4 	bl	8004796 <HAL_NVIC_EnableIRQ>

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	; 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020400 	.word	0x40020400
 8001a28:	10210000 	.word	0x10210000
 8001a2c:	10110000 	.word	0x10110000

08001a30 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a6e:	f003 fbeb 	bl	8005248 <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fb70 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000394 	.word	0x20000394
 8001a84:	40005400 	.word	0x40005400
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_I2C_MspInit+0x84>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d12c      	bne.n	8001b08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a17      	ldr	r2, [pc, #92]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001adc:	2304      	movs	r3, #4
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <HAL_I2C_MspInit+0x8c>)
 8001ae8:	f003 f9e0 	bl	8004eac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_I2C_MspInit+0x88>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40005400 	.word	0x40005400
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020400 	.word	0x40020400

08001b1c <Time_count>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status);
void Time_count()
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	Second++;
 8001b20:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <Time_count+0x5c>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <Time_count+0x5c>)
 8001b2a:	701a      	strb	r2, [r3, #0]
	if( Second > 59 )	{
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <Time_count+0x5c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b3b      	cmp	r3, #59	; 0x3b
 8001b32:	d908      	bls.n	8001b46 <Time_count+0x2a>
	  Minute ++;		Second = 0;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <Time_count+0x60>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <Time_count+0x60>)
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <Time_count+0x5c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
	}
	if (Minute > 59 ) 	{
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <Time_count+0x60>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b3b      	cmp	r3, #59	; 0x3b
 8001b4c:	d908      	bls.n	8001b60 <Time_count+0x44>
	  Hour++;			 Minute =0;
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <Time_count+0x64>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <Time_count+0x64>)
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <Time_count+0x60>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
	}
	if( Hour > 11) Hour = 0;
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <Time_count+0x64>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b0b      	cmp	r3, #11
 8001b66:	d902      	bls.n	8001b6e <Time_count+0x52>
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <Time_count+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	2000025a 	.word	0x2000025a
 8001b7c:	20000259 	.word	0x20000259
 8001b80:	20000258 	.word	0x20000258

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8a:	f002 f885 	bl	8003c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8e:	f000 f8d9 	bl	8001d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b92:	f7ff fe8f 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b96:	f7ff fe6d 	bl	8001874 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b9a:	f000 fc91 	bl	80024c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b9e:	f7ff fd9f 	bl	80016e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ba2:	f7ff ff45 	bl	8001a30 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ba6:	f000 fc13 	bl	80023d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Init\r\n");
 8001baa:	4857      	ldr	r0, [pc, #348]	; (8001d08 <main+0x184>)
 8001bac:	f006 f860 	bl	8007c70 <puts>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 8001bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4854      	ldr	r0, [pc, #336]	; (8001d0c <main+0x188>)
 8001bba:	f002 f947 	bl	8003e4c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001bbe:	4854      	ldr	r0, [pc, #336]	; (8001d10 <main+0x18c>)
 8001bc0:	f004 fc50 	bl	8006464 <HAL_TIM_Base_Start_IT>

  u8g_InitComFn(&u8g,&u8g_dev_ssd1306_128x64_i2c,u8g_com_hw_i2c_fn);
 8001bc4:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <main+0x190>)
 8001bc6:	4954      	ldr	r1, [pc, #336]	; (8001d18 <main+0x194>)
 8001bc8:	4854      	ldr	r0, [pc, #336]	; (8001d1c <main+0x198>)
 8001bca:	f001 fc58 	bl	800347e <u8g_InitComFn>

  I2C_LCD1602_Init();
 8001bce:	f7ff fa1f 	bl	8001010 <I2C_LCD1602_Init>


  I2C_LCD1602_Send_String_XY( 0 , 0, "Welcom Zeus");
 8001bd2:	4a53      	ldr	r2, [pc, #332]	; (8001d20 <main+0x19c>)
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fa84 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
  I2C_LCD1602_Send_String_XY( 0 , 1, "I2C PCF8574");
 8001bdc:	4a51      	ldr	r2, [pc, #324]	; (8001d24 <main+0x1a0>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fa7f 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
  HAL_Delay(2000);
 8001be6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bea:	f002 f8c7 	bl	8003d7c <HAL_Delay>
  I2C_LCD1602_Clear();
 8001bee:	f7ff fa8e 	bl	800110e <I2C_LCD1602_Clear>

  sprintf( str, "start");
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	494c      	ldr	r1, [pc, #304]	; (8001d28 <main+0x1a4>)
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f006 f841 	bl	8007c80 <siprintf>
  I2C_LCD1602_Send_string(str);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa3b 	bl	800107e <I2C_LCD1602_Send_string>

  TM1637_bright(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fc29 	bl	8001460 <TM1637_bright>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fcba 	bl	8001588 <Buzzer_OnOff>

  uint16_t count = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	85fb      	strh	r3, [r7, #46]	; 0x2e

  float distance=0,sr04_value[5];
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  distance = get_SR04_value(3, &sr04_value[0]);
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	2003      	movs	r0, #3
 8001c24:	f7ff fb02 	bl	800122c <get_SR04_value>
 8001c28:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	  sprintf(str, "%4d : %4d ",(int)distance,Adc_Value[0]  );
 8001c2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c36:	f107 0014 	add.w	r0, r7, #20
 8001c3a:	ee17 2a90 	vmov	r2, s15
 8001c3e:	493b      	ldr	r1, [pc, #236]	; (8001d2c <main+0x1a8>)
 8001c40:	f006 f81e 	bl	8007c80 <siprintf>

	  TM1637_bright( Adc_Value[0]/585);
 8001c44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <main+0x1ac>)
 8001c48:	fba3 1302 	umull	r1, r3, r3, r2
 8001c4c:	1ad2      	subs	r2, r2, r3
 8001c4e:	0852      	lsrs	r2, r2, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	0a5b      	lsrs	r3, r3, #9
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fc01 	bl	8001460 <TM1637_bright>
	  TM1637_Display_4digit( (int)distance);
 8001c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c66:	ee17 3a90 	vmov	r3, s15
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fc0d 	bl	800148c <TM1637_Display_4digit>

	  u8g_xyputs( 10, 55, str,count++);
 8001c72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f107 0214 	add.w	r2, r7, #20
 8001c7e:	2137      	movs	r1, #55	; 0x37
 8001c80:	200a      	movs	r0, #10
 8001c82:	f000 f9f7 	bl	8002074 <u8g_xyputs>
  	  Time_count();
 8001c86:	f7ff ff49 	bl	8001b1c <Time_count>
  	  if( count >100 ) count = 0;
 8001c8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <main+0x110>
 8001c90:	2300      	movs	r3, #0
 8001c92:	85fb      	strh	r3, [r7, #46]	; 0x2e

	  u8g_xyputs( 10, 55, &str[0] ,count++);
 8001c94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f107 0214 	add.w	r2, r7, #20
 8001ca0:	2137      	movs	r1, #55	; 0x37
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f000 f9e6 	bl	8002074 <u8g_xyputs>

	  Time_count();
 8001ca8:	f7ff ff38 	bl	8001b1c <Time_count>
	  if( count >100 ) count = 0;
 8001cac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <main+0x132>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

	  //HAL_Delay(500);



	  switch( Key_input() ) {
 8001cb6:	f7ff fc8d 	bl	80015d4 <Key_input>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2be0      	cmp	r3, #224	; 0xe0
 8001cbe:	d00f      	beq.n	8001ce0 <main+0x15c>
 8001cc0:	2be0      	cmp	r3, #224	; 0xe0
 8001cc2:	dc1f      	bgt.n	8001d04 <main+0x180>
 8001cc4:	2bd0      	cmp	r3, #208	; 0xd0
 8001cc6:	d011      	beq.n	8001cec <main+0x168>
 8001cc8:	2bd0      	cmp	r3, #208	; 0xd0
 8001cca:	dc1b      	bgt.n	8001d04 <main+0x180>
 8001ccc:	2b70      	cmp	r3, #112	; 0x70
 8001cce:	d013      	beq.n	8001cf8 <main+0x174>
 8001cd0:	2bb0      	cmp	r3, #176	; 0xb0
 8001cd2:	d117      	bne.n	8001d04 <main+0x180>
	  case KEY_UP:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "UP    pressed");
 8001cd4:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <main+0x1b0>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f7ff fa03 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001cde:	e012      	b.n	8001d06 <main+0x182>

	  case KEY_DOWN:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "DOWN  pressed");
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <main+0x1b4>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff f9fd 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001cea:	e00c      	b.n	8001d06 <main+0x182>

	  case KEY_RIGHT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "RIGHT pressed");
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <main+0x1b8>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f7ff f9f7 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001cf6:	e006      	b.n	8001d06 <main+0x182>

	  case KEY_LEFT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "LEFT  pressed");
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <main+0x1bc>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f7ff f9f1 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001d02:	e000      	b.n	8001d06 <main+0x182>

	  default:
		  break;
 8001d04:	bf00      	nop
	  distance = get_SR04_value(3, &sr04_value[0]);
 8001d06:	e78a      	b.n	8001c1e <main+0x9a>
 8001d08:	0800a10c 	.word	0x0800a10c
 8001d0c:	200002ec 	.word	0x200002ec
 8001d10:	200003e8 	.word	0x200003e8
 8001d14:	080025a5 	.word	0x080025a5
 8001d18:	20000014 	.word	0x20000014
 8001d1c:	2000021c 	.word	0x2000021c
 8001d20:	0800a118 	.word	0x0800a118
 8001d24:	0800a124 	.word	0x0800a124
 8001d28:	0800a130 	.word	0x0800a130
 8001d2c:	0800a138 	.word	0x0800a138
 8001d30:	c01c01c1 	.word	0xc01c01c1
 8001d34:	0800a144 	.word	0x0800a144
 8001d38:	0800a154 	.word	0x0800a154
 8001d3c:	0800a164 	.word	0x0800a164
 8001d40:	0800a174 	.word	0x0800a174

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	; 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	2230      	movs	r2, #48	; 0x30
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f005 fa94 	bl	8007280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	4a27      	ldr	r2, [pc, #156]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d76:	6413      	str	r3, [r2, #64]	; 0x40
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <SystemClock_Config+0xcc>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d90:	4a20      	ldr	r2, [pc, #128]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <SystemClock_Config+0xd0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001da8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001db2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db8:	2308      	movs	r3, #8
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001dbc:	2354      	movs	r3, #84	; 0x54
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fe87 	bl	8005ae0 <HAL_RCC_OscConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001dd8:	f000 f9c0 	bl	800215c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ddc:	230f      	movs	r3, #15
 8001dde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de0:	2302      	movs	r3, #2
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 f8e9 	bl	8005fd0 <HAL_RCC_ClockConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001e04:	f000 f9aa 	bl	800215c <Error_Handler>
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3750      	adds	r7, #80	; 0x50
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <u8g_battery_status>:

/* USER CODE BEGIN 4 */

void u8g_battery_status(uint8_t x, uint8_t y, uint8_t percentage)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	460b      	mov	r3, r1
 8001e24:	71bb      	strb	r3, [r7, #6]
 8001e26:	4613      	mov	r3, r2
 8001e28:	717b      	strb	r3, [r7, #5]
	char str[5];
	u8g_DrawFrame(&u8g, x, y, 18, 7); // battery����
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	79f9      	ldrb	r1, [r7, #7]
 8001e2e:	2307      	movs	r3, #7
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2312      	movs	r3, #18
 8001e34:	488c      	ldr	r0, [pc, #560]	; (8002068 <u8g_battery_status+0x250>)
 8001e36:	f001 fe93 	bl	8003b60 <u8g_DrawFrame>
	u8g_DrawFrame(&u8g, x+18,y+(5/2), 2,3); //battery����ǥ��
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3312      	adds	r3, #18
 8001e3e:	b2d9      	uxtb	r1, r3
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	3302      	adds	r3, #2
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	2303      	movs	r3, #3
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	4886      	ldr	r0, [pc, #536]	; (8002068 <u8g_battery_status+0x250>)
 8001e4e:	f001 fe87 	bl	8003b60 <u8g_DrawFrame>
	uint8_t battery_step = 5;
 8001e52:	2305      	movs	r3, #5
 8001e54:	73fb      	strb	r3, [r7, #15]
	if( percentage > 90 ) 		battery_step =5;
 8001e56:	797b      	ldrb	r3, [r7, #5]
 8001e58:	2b5a      	cmp	r3, #90	; 0x5a
 8001e5a:	d902      	bls.n	8001e62 <u8g_battery_status+0x4a>
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e01c      	b.n	8001e9c <u8g_battery_status+0x84>
	else if (percentage <= 10 )	battery_step =0;
 8001e62:	797b      	ldrb	r3, [r7, #5]
 8001e64:	2b0a      	cmp	r3, #10
 8001e66:	d802      	bhi.n	8001e6e <u8g_battery_status+0x56>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e016      	b.n	8001e9c <u8g_battery_status+0x84>
	else if (percentage <= 20 )	battery_step =1;
 8001e6e:	797b      	ldrb	r3, [r7, #5]
 8001e70:	2b14      	cmp	r3, #20
 8001e72:	d802      	bhi.n	8001e7a <u8g_battery_status+0x62>
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	e010      	b.n	8001e9c <u8g_battery_status+0x84>
	else if (percentage <= 40 )	battery_step =2;
 8001e7a:	797b      	ldrb	r3, [r7, #5]
 8001e7c:	2b28      	cmp	r3, #40	; 0x28
 8001e7e:	d802      	bhi.n	8001e86 <u8g_battery_status+0x6e>
 8001e80:	2302      	movs	r3, #2
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e00a      	b.n	8001e9c <u8g_battery_status+0x84>
	else if (percentage <= 60 )	battery_step =3;
 8001e86:	797b      	ldrb	r3, [r7, #5]
 8001e88:	2b3c      	cmp	r3, #60	; 0x3c
 8001e8a:	d802      	bhi.n	8001e92 <u8g_battery_status+0x7a>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e004      	b.n	8001e9c <u8g_battery_status+0x84>
	else if (percentage <= 80 )	battery_step =4;
 8001e92:	797b      	ldrb	r3, [r7, #5]
 8001e94:	2b50      	cmp	r3, #80	; 0x50
 8001e96:	d801      	bhi.n	8001e9c <u8g_battery_status+0x84>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	73fb      	strb	r3, [r7, #15]

	switch( battery_step )
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	f200 80c6 	bhi.w	8002032 <u8g_battery_status+0x21a>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <u8g_battery_status+0x94>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ec1 	.word	0x08001ec1
 8001eb0:	08001edb 	.word	0x08001edb
 8001eb4:	08001f0d 	.word	0x08001f0d
 8001eb8:	08001f57 	.word	0x08001f57
 8001ebc:	08001fb9 	.word	0x08001fb9
	{
	case 1:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	b2d9      	uxtb	r1, r3
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	2305      	movs	r3, #5
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	4865      	ldr	r0, [pc, #404]	; (8002068 <u8g_battery_status+0x250>)
 8001ed4:	f001 fe8a 	bl	8003bec <u8g_draw_box>
		break;
 8001ed8:	e0ab      	b.n	8002032 <u8g_battery_status+0x21a>
	case 2:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	3302      	adds	r3, #2
 8001ede:	b2d9      	uxtb	r1, r3
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2302      	movs	r3, #2
 8001eec:	485e      	ldr	r0, [pc, #376]	; (8002068 <u8g_battery_status+0x250>)
 8001eee:	f001 fe7d 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	3305      	adds	r3, #5
 8001ef6:	b2d9      	uxtb	r1, r3
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	3301      	adds	r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	2305      	movs	r3, #5
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2302      	movs	r3, #2
 8001f04:	4858      	ldr	r0, [pc, #352]	; (8002068 <u8g_battery_status+0x250>)
 8001f06:	f001 fe71 	bl	8003bec <u8g_draw_box>
		break;
 8001f0a:	e092      	b.n	8002032 <u8g_battery_status+0x21a>
	case 3:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3302      	adds	r3, #2
 8001f10:	b2d9      	uxtb	r1, r3
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	2305      	movs	r3, #5
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	4852      	ldr	r0, [pc, #328]	; (8002068 <u8g_battery_status+0x250>)
 8001f20:	f001 fe64 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	3305      	adds	r3, #5
 8001f28:	b2d9      	uxtb	r1, r3
 8001f2a:	79bb      	ldrb	r3, [r7, #6]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	2305      	movs	r3, #5
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2302      	movs	r3, #2
 8001f36:	484c      	ldr	r0, [pc, #304]	; (8002068 <u8g_battery_status+0x250>)
 8001f38:	f001 fe58 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	b2d9      	uxtb	r1, r3
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	3301      	adds	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	2305      	movs	r3, #5
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	4846      	ldr	r0, [pc, #280]	; (8002068 <u8g_battery_status+0x250>)
 8001f50:	f001 fe4c 	bl	8003bec <u8g_draw_box>
		break;
 8001f54:	e06d      	b.n	8002032 <u8g_battery_status+0x21a>
	case 4:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	b2d9      	uxtb	r1, r3
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	2305      	movs	r3, #5
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2302      	movs	r3, #2
 8001f68:	483f      	ldr	r0, [pc, #252]	; (8002068 <u8g_battery_status+0x250>)
 8001f6a:	f001 fe3f 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	3305      	adds	r3, #5
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	4839      	ldr	r0, [pc, #228]	; (8002068 <u8g_battery_status+0x250>)
 8001f82:	f001 fe33 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	3308      	adds	r3, #8
 8001f8a:	b2d9      	uxtb	r1, r3
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	2305      	movs	r3, #5
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2302      	movs	r3, #2
 8001f98:	4833      	ldr	r0, [pc, #204]	; (8002068 <u8g_battery_status+0x250>)
 8001f9a:	f001 fe27 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	330b      	adds	r3, #11
 8001fa2:	b2d9      	uxtb	r1, r3
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	2305      	movs	r3, #5
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2302      	movs	r3, #2
 8001fb0:	482d      	ldr	r0, [pc, #180]	; (8002068 <u8g_battery_status+0x250>)
 8001fb2:	f001 fe1b 	bl	8003bec <u8g_draw_box>
		break;
 8001fb6:	e03c      	b.n	8002032 <u8g_battery_status+0x21a>
	case 5:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	3302      	adds	r3, #2
 8001fbc:	b2d9      	uxtb	r1, r3
 8001fbe:	79bb      	ldrb	r3, [r7, #6]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2302      	movs	r3, #2
 8001fca:	4827      	ldr	r0, [pc, #156]	; (8002068 <u8g_battery_status+0x250>)
 8001fcc:	f001 fe0e 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	3305      	adds	r3, #5
 8001fd4:	b2d9      	uxtb	r1, r3
 8001fd6:	79bb      	ldrb	r3, [r7, #6]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	2305      	movs	r3, #5
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	4821      	ldr	r0, [pc, #132]	; (8002068 <u8g_battery_status+0x250>)
 8001fe4:	f001 fe02 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	3308      	adds	r3, #8
 8001fec:	b2d9      	uxtb	r1, r3
 8001fee:	79bb      	ldrb	r3, [r7, #6]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	481b      	ldr	r0, [pc, #108]	; (8002068 <u8g_battery_status+0x250>)
 8001ffc:	f001 fdf6 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	330b      	adds	r3, #11
 8002004:	b2d9      	uxtb	r1, r3
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	2305      	movs	r3, #5
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2302      	movs	r3, #2
 8002012:	4815      	ldr	r0, [pc, #84]	; (8002068 <u8g_battery_status+0x250>)
 8002014:	f001 fdea 	bl	8003bec <u8g_draw_box>
		u8g_draw_box(&u8g,x+14,y+1,2,5);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	330e      	adds	r3, #14
 800201c:	b2d9      	uxtb	r1, r3
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	3301      	adds	r3, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	2305      	movs	r3, #5
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <u8g_battery_status+0x250>)
 800202c:	f001 fdde 	bl	8003bec <u8g_draw_box>
		break;
 8002030:	bf00      	nop
	}
	u8g_SetFont( &u8g, u8g_font_courB08 );
 8002032:	490e      	ldr	r1, [pc, #56]	; (800206c <u8g_battery_status+0x254>)
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <u8g_battery_status+0x250>)
 8002036:	f001 f8b7 	bl	80031a8 <u8g_SetFont>
	sprintf( str, "%d%%",percentage);
 800203a:	797a      	ldrb	r2, [r7, #5]
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	490b      	ldr	r1, [pc, #44]	; (8002070 <u8g_battery_status+0x258>)
 8002042:	4618      	mov	r0, r3
 8002044:	f005 fe1c 	bl	8007c80 <siprintf>
	u8g_DrawStr( &u8g,  x-25,  y+7, str );
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	3b19      	subs	r3, #25
 800204c:	b2d9      	uxtb	r1, r3
 800204e:	79bb      	ldrb	r3, [r7, #6]
 8002050:	3307      	adds	r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <u8g_battery_status+0x250>)
 800205a:	f000 ffe0 	bl	800301e <u8g_DrawStr>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000021c 	.word	0x2000021c
 800206c:	0800a214 	.word	0x0800a214
 8002070:	0800a184 	.word	0x0800a184

08002074 <u8g_xyputs>:
void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af02      	add	r7, sp, #8
 800207a:	603a      	str	r2, [r7, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
	char Str_HM[20],Str_Sec[10];
	sprintf( Str_HM, "%02d:%02d", Hour, Minute);
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <u8g_xyputs+0xc4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <u8g_xyputs+0xc8>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f107 0014 	add.w	r0, r7, #20
 8002098:	4929      	ldr	r1, [pc, #164]	; (8002140 <u8g_xyputs+0xcc>)
 800209a:	f005 fdf1 	bl	8007c80 <siprintf>
	sprintf( Str_Sec, "%02d", Second);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <u8g_xyputs+0xd0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	4927      	ldr	r1, [pc, #156]	; (8002148 <u8g_xyputs+0xd4>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f005 fde8 	bl	8007c80 <siprintf>
	u8g_FirstPage(&u8g);
 80020b0:	4826      	ldr	r0, [pc, #152]	; (800214c <u8g_xyputs+0xd8>)
 80020b2:	f001 f9fc 	bl	80034ae <u8g_FirstPage>
	do
	{
		u8g_SetFont( &u8g, u8g_font_courB10 );
 80020b6:	4926      	ldr	r1, [pc, #152]	; (8002150 <u8g_xyputs+0xdc>)
 80020b8:	4824      	ldr	r0, [pc, #144]	; (800214c <u8g_xyputs+0xd8>)
 80020ba:	f001 f875 	bl	80031a8 <u8g_SetFont>
		u8g_DrawStr( &u8g,  x,  y, str );
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	79f9      	ldrb	r1, [r7, #7]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	4821      	ldr	r0, [pc, #132]	; (800214c <u8g_xyputs+0xd8>)
 80020c6:	f000 ffaa 	bl	800301e <u8g_DrawStr>

		//u8g_DrawBitmap(&u8g,10,1,16,52,Zeus_logo);
		u8g_SetFont( &u8g, u8g_font_osb21 );
 80020ca:	4922      	ldr	r1, [pc, #136]	; (8002154 <u8g_xyputs+0xe0>)
 80020cc:	481f      	ldr	r0, [pc, #124]	; (800214c <u8g_xyputs+0xd8>)
 80020ce:	f001 f86b 	bl	80031a8 <u8g_SetFont>
		u8g_DrawStr( &u8g, 35,40,&Str_HM[0]);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	2228      	movs	r2, #40	; 0x28
 80020d8:	2123      	movs	r1, #35	; 0x23
 80020da:	481c      	ldr	r0, [pc, #112]	; (800214c <u8g_xyputs+0xd8>)
 80020dc:	f000 ff9f 	bl	800301e <u8g_DrawStr>

		u8g_SetFont( &u8g, u8g_font_gdb11 );
 80020e0:	491d      	ldr	r1, [pc, #116]	; (8002158 <u8g_xyputs+0xe4>)
 80020e2:	481a      	ldr	r0, [pc, #104]	; (800214c <u8g_xyputs+0xd8>)
 80020e4:	f001 f860 	bl	80031a8 <u8g_SetFont>
		u8g_DrawStr( &u8g, 108,38,&Str_Sec[0]);
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	2226      	movs	r2, #38	; 0x26
 80020ee:	216c      	movs	r1, #108	; 0x6c
 80020f0:	4816      	ldr	r0, [pc, #88]	; (800214c <u8g_xyputs+0xd8>)
 80020f2:	f000 ff94 	bl	800301e <u8g_DrawStr>

		u8g_battery_status(100,6,battery_status);
 80020f6:	797b      	ldrb	r3, [r7, #5]
 80020f8:	461a      	mov	r2, r3
 80020fa:	2106      	movs	r1, #6
 80020fc:	2064      	movs	r0, #100	; 0x64
 80020fe:	f7ff fe8b 	bl	8001e18 <u8g_battery_status>


		u8g_DrawFrame(&u8g,2,2,126,62);
 8002102:	233e      	movs	r3, #62	; 0x3e
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	237e      	movs	r3, #126	; 0x7e
 8002108:	2202      	movs	r2, #2
 800210a:	2102      	movs	r1, #2
 800210c:	480f      	ldr	r0, [pc, #60]	; (800214c <u8g_xyputs+0xd8>)
 800210e:	f001 fd27 	bl	8003b60 <u8g_DrawFrame>
		u8g_DrawFrame(&u8g,1,1,127,63);
 8002112:	233f      	movs	r3, #63	; 0x3f
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	237f      	movs	r3, #127	; 0x7f
 8002118:	2201      	movs	r2, #1
 800211a:	2101      	movs	r1, #1
 800211c:	480b      	ldr	r0, [pc, #44]	; (800214c <u8g_xyputs+0xd8>)
 800211e:	f001 fd1f 	bl	8003b60 <u8g_DrawFrame>
	} while( u8g_NextPage(&u8g));
 8002122:	480a      	ldr	r0, [pc, #40]	; (800214c <u8g_xyputs+0xd8>)
 8002124:	f001 f9d1 	bl	80034ca <u8g_NextPage>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1c3      	bne.n	80020b6 <u8g_xyputs+0x42>
}
 800212e:	bf00      	nop
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000258 	.word	0x20000258
 800213c:	20000259 	.word	0x20000259
 8002140:	0800a18c 	.word	0x0800a18c
 8002144:	2000025a 	.word	0x2000025a
 8002148:	0800a198 	.word	0x0800a198
 800214c:	2000021c 	.word	0x2000021c
 8002150:	0800ab90 	.word	0x0800ab90
 8002154:	0800c988 	.word	0x0800c988
 8002158:	0800b8ac 	.word	0x0800b8ac

0800215c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <HAL_MspInit+0x4c>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_MspInit+0x4c>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	603b      	str	r3, [r7, #0]
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_MspInit+0x4c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_MspInit+0x4c>)
 8002198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 80021aa:	2006      	movs	r0, #6
 80021ac:	f002 facc 	bl	8004748 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800

080021bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ce:	e7fe      	b.n	80021ce <HardFault_Handler+0x4>

080021d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d4:	e7fe      	b.n	80021d4 <MemManage_Handler+0x4>

080021d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021da:	e7fe      	b.n	80021da <BusFault_Handler+0x4>

080021dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <UsageFault_Handler+0x4>

080021e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002210:	f001 fd94 	bl	8003d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800221c:	2010      	movs	r0, #16
 800221e:	f002 fffb 	bl	8005218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800222e:	f004 f97b 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200003e8 	.word	0x200003e8

0800223c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <DMA2_Stream0_IRQHandler+0x10>)
 8002242:	f002 fbc9 	bl	80049d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000334 	.word	0x20000334

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226a:	f004 ffdf 	bl	800722c <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
	return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e00a      	b.n	80022bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a6:	f3af 8000 	nop.w
 80022aa:	4601      	mov	r1, r0
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	60ba      	str	r2, [r7, #8]
 80022b2:	b2ca      	uxtb	r2, r1
 80022b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	dbf0      	blt.n	80022a6 <_read+0x12>
	}

return len;
 80022c4:	687b      	ldr	r3, [r7, #4]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
	return -1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f6:	605a      	str	r2, [r3, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <_isatty>:

int _isatty(int file)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
	return 1;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
	return 0;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	; (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	; (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	; (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f004 ff60 	bl	800722c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20018000 	.word	0x20018000
 8002398:	00000400 	.word	0x00000400
 800239c:	2000025c 	.word	0x2000025c
 80023a0:	20000488 	.word	0x20000488

080023a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <SystemInit+0x28>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <SystemInit+0x28>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <SystemInit+0x28>)
 80023ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023be:	609a      	str	r2, [r3, #8]
#endif
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d6:	f107 0308 	add.w	r3, r7, #8
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	605a      	str	r2, [r3, #4]
 80023e0:	609a      	str	r2, [r3, #8]
 80023e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e4:	463b      	mov	r3, r7
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <MX_TIM1_Init+0x98>)
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <MX_TIM1_Init+0x9c>)
 80023f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <MX_TIM1_Init+0x98>)
 80023f4:	2253      	movs	r2, #83	; 0x53
 80023f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <MX_TIM1_Init+0x98>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <MX_TIM1_Init+0x98>)
 8002400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002404:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <MX_TIM1_Init+0x98>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_TIM1_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <MX_TIM1_Init+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002418:	4813      	ldr	r0, [pc, #76]	; (8002468 <MX_TIM1_Init+0x98>)
 800241a:	f003 ffd3 	bl	80063c4 <HAL_TIM_Base_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002424:	f7ff fe9a 	bl	800215c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4619      	mov	r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <MX_TIM1_Init+0x98>)
 8002436:	f004 f97f 	bl	8006738 <HAL_TIM_ConfigClockSource>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002440:	f7ff fe8c 	bl	800215c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800244c:	463b      	mov	r3, r7
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_TIM1_Init+0x98>)
 8002452:	f004 fb77 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800245c:	f7ff fe7e 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200003e8 	.word	0x200003e8
 800246c:	40010000 	.word	0x40010000

08002470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_TIM_Base_MspInit+0x48>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d115      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_TIM_Base_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_TIM_Base_MspInit+0x4c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_TIM_Base_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2019      	movs	r0, #25
 80024a4:	f002 f95b 	bl	800475e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024a8:	2019      	movs	r0, #25
 80024aa:	f002 f974 	bl	8004796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40023800 	.word	0x40023800

080024c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_USART2_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024f8:	f004 fba6 	bl	8006c48 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f7ff fe2b 	bl	800215c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000430 	.word	0x20000430
 8002510:	40004400 	.word	0x40004400

08002514 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_UART_MspInit+0x84>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12b      	bne.n	800258e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0x88>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_UART_MspInit+0x88>)
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_UART_MspInit+0x88>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a10      	ldr	r2, [pc, #64]	; (800259c <HAL_UART_MspInit+0x88>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <HAL_UART_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800256e:	230c      	movs	r3, #12
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257e:	2307      	movs	r3, #7
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4805      	ldr	r0, [pc, #20]	; (80025a0 <HAL_UART_MspInit+0x8c>)
 800258a:	f002 fc8f 	bl	8004eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004400 	.word	0x40004400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <u8g_com_hw_i2c_fn>:
	 usleep(10);
 }
   
   
 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	f107 040c 	add.w	r4, r7, #12
 80025b0:	6020      	str	r0, [r4, #0]
 80025b2:	4608      	mov	r0, r1
 80025b4:	4611      	mov	r1, r2
 80025b6:	1d3a      	adds	r2, r7, #4
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	f107 030b 	add.w	r3, r7, #11
 80025be:	4602      	mov	r2, r0
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	f107 030a 	add.w	r3, r7, #10
 80025c6:	460a      	mov	r2, r1
 80025c8:	701a      	strb	r2, [r3, #0]
  switch(msg)  
 80025ca:	f107 030b 	add.w	r3, r7, #11
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b07      	cmp	r3, #7
 80025d2:	d86a      	bhi.n	80026aa <u8g_com_hw_i2c_fn+0x106>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <u8g_com_hw_i2c_fn+0x38>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080026ab 	.word	0x080026ab
 80025e0:	080026ab 	.word	0x080026ab
 80025e4:	080025fd 	.word	0x080025fd
 80025e8:	080026ab 	.word	0x080026ab
 80025ec:	080026ab 	.word	0x080026ab
 80025f0:	08002617 	.word	0x08002617
 80025f4:	0800263f 	.word	0x0800263f
 80025f8:	0800263f 	.word	0x0800263f
    break;  
   
   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
	   //HAL_Delay(1);
	   //u8g_10MicroDelay();
    if (arg_val == 0)  
 80025fc:	f107 030a 	add.w	r3, r7, #10
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d103      	bne.n	800260e <u8g_com_hw_i2c_fn+0x6a>
    {  
         control = 0;  
 8002606:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <u8g_com_hw_i2c_fn+0x114>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    }  
    else  
    {  
         control = 0x40;  
    }  
    break;  
 800260c:	e04d      	b.n	80026aa <u8g_com_hw_i2c_fn+0x106>
         control = 0x40;  
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <u8g_com_hw_i2c_fn+0x114>)
 8002610:	2240      	movs	r2, #64	; 0x40
 8002612:	701a      	strb	r2, [r3, #0]
    break;  
 8002614:	e049      	b.n	80026aa <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_BYTE:  
   {  
        uint8_t buffer[2];  
        buffer[0] = control;  
 8002616:	4b28      	ldr	r3, [pc, #160]	; (80026b8 <u8g_com_hw_i2c_fn+0x114>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
        buffer[1] = arg_val;  
 800261e:	f107 030a 	add.w	r3, r7, #10
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);  
 8002628:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800262c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2302      	movs	r3, #2
 8002634:	2178      	movs	r1, #120	; 0x78
 8002636:	4821      	ldr	r0, [pc, #132]	; (80026bc <u8g_com_hw_i2c_fn+0x118>)
 8002638:	f002 ff4a 	bl	80054d0 <HAL_I2C_Master_Transmit>
   }  
        break;  
 800263c:	e035      	b.n	80026aa <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_SEQ:  
   case U8G_COM_MSG_WRITE_SEQ_P:  
   {  
        uint8_t buffer[DATA_BUFFER_SIZE];  
           uint8_t *ptr = arg_ptr;  
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
           buffer[0] = control;  
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <u8g_com_hw_i2c_fn+0x114>)
 8002648:	781a      	ldrb	r2, [r3, #0]
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 8002650:	2301      	movs	r3, #1
 8002652:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002656:	e011      	b.n	800267c <u8g_com_hw_i2c_fn+0xd8>
           {  
                buffer[i] = *(ptr++);
 8002658:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8002662:	7819      	ldrb	r1, [r3, #0]
 8002664:	f107 0214 	add.w	r2, r7, #20
 8002668:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800266c:	4413      	add	r3, r2
 800266e:	460a      	mov	r2, r1
 8002670:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 8002672:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002676:	3301      	adds	r3, #1
 8002678:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800267c:	f107 030a 	add.w	r3, r7, #10
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8002686:	429a      	cmp	r2, r3
 8002688:	dde6      	ble.n	8002658 <u8g_com_hw_i2c_fn+0xb4>
           }  
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val+1, I2C_TIMEOUT);  
 800268a:	f107 030a 	add.w	r3, r7, #10
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	3301      	adds	r3, #1
 8002694:	b29b      	uxth	r3, r3
 8002696:	f107 0214 	add.w	r2, r7, #20
 800269a:	f242 7110 	movw	r1, #10000	; 0x2710
 800269e:	9100      	str	r1, [sp, #0]
 80026a0:	2178      	movs	r1, #120	; 0x78
 80026a2:	4806      	ldr	r0, [pc, #24]	; (80026bc <u8g_com_hw_i2c_fn+0x118>)
 80026a4:	f002 ff14 	bl	80054d0 <HAL_I2C_Master_Transmit>
   }  
   
    break;  
 80026a8:	bf00      	nop
  }  
  return 1;  
 80026aa:	2301      	movs	r3, #1
 }  
 80026ac:	4618      	mov	r0, r3
 80026ae:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000260 	.word	0x20000260
 80026bc:	20000394 	.word	0x20000394

080026c0 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80026c0:	b490      	push	{r4, r7}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	4608      	mov	r0, r1
 80026ca:	4611      	mov	r1, r2
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	70fb      	strb	r3, [r7, #3]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70bb      	strb	r3, [r7, #2]
 80026d6:	4613      	mov	r3, r2
 80026d8:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 80026da:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 80026dc:	7e3b      	ldrb	r3, [r7, #24]
 80026de:	4423      	add	r3, r4
 80026e0:	b2dc      	uxtb	r4, r3
  tmp--;
 80026e2:	4623      	mov	r3, r4
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80026f4:	73fa      	strb	r2, [r7, #15]
 80026f6:	73bb      	strb	r3, [r7, #14]
 80026f8:	78bb      	ldrb	r3, [r7, #2]
 80026fa:	737b      	strb	r3, [r7, #13]
 80026fc:	4623      	mov	r3, r4
 80026fe:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8002700:	7bba      	ldrb	r2, [r7, #14]
 8002702:	7b7b      	ldrb	r3, [r7, #13]
 8002704:	429a      	cmp	r2, r3
 8002706:	d30d      	bcc.n	8002724 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	429a      	cmp	r2, r3
 800270e:	d801      	bhi.n	8002714 <u8g_IsBBXIntersection+0x54>
      return 1;
 8002710:	2301      	movs	r3, #1
 8002712:	e014      	b.n	800273e <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8002714:	7b7a      	ldrb	r2, [r7, #13]
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d901      	bls.n	8002720 <u8g_IsBBXIntersection+0x60>
	return 1;
 800271c:	2301      	movs	r3, #1
 800271e:	e00e      	b.n	800273e <u8g_IsBBXIntersection+0x7e>
	return 0;
 8002720:	2300      	movs	r3, #0
 8002722:	e00c      	b.n	800273e <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d807      	bhi.n	800273c <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 800272c:	7b7a      	ldrb	r2, [r7, #13]
 800272e:	7b3b      	ldrb	r3, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d901      	bls.n	8002738 <u8g_IsBBXIntersection+0x78>
	return 1;
 8002734:	2301      	movs	r3, #1
 8002736:	e002      	b.n	800273e <u8g_IsBBXIntersection+0x7e>
	return 0;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <u8g_IsBBXIntersection+0x7e>
      return 0;
 800273c:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8002742:	2300      	movs	r3, #0
 8002744:	e032      	b.n	80027ac <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8002746:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	4423      	add	r3, r4
 800274c:	b2dc      	uxtb	r4, r3
  tmp--;
 800274e:	4623      	mov	r3, r4
 8002750:	3b01      	subs	r3, #1
 8002752:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002760:	72fa      	strb	r2, [r7, #11]
 8002762:	72bb      	strb	r3, [r7, #10]
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	727b      	strb	r3, [r7, #9]
 8002768:	4623      	mov	r3, r4
 800276a:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 800276c:	7aba      	ldrb	r2, [r7, #10]
 800276e:	7a7b      	ldrb	r3, [r7, #9]
 8002770:	429a      	cmp	r2, r3
 8002772:	d30d      	bcc.n	8002790 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8002774:	7afa      	ldrb	r2, [r7, #11]
 8002776:	7a3b      	ldrb	r3, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	d801      	bhi.n	8002780 <u8g_IsBBXIntersection+0xc0>
      return 1;
 800277c:	2301      	movs	r3, #1
 800277e:	e014      	b.n	80027aa <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8002780:	7a7a      	ldrb	r2, [r7, #9]
 8002782:	7a3b      	ldrb	r3, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	d901      	bls.n	800278c <u8g_IsBBXIntersection+0xcc>
	return 1;
 8002788:	2301      	movs	r3, #1
 800278a:	e00e      	b.n	80027aa <u8g_IsBBXIntersection+0xea>
	return 0;
 800278c:	2300      	movs	r3, #0
 800278e:	e00c      	b.n	80027aa <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8002790:	7afa      	ldrb	r2, [r7, #11]
 8002792:	7a3b      	ldrb	r3, [r7, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d807      	bhi.n	80027a8 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8002798:	7a7a      	ldrb	r2, [r7, #9]
 800279a:	7a3b      	ldrb	r3, [r7, #8]
 800279c:	429a      	cmp	r2, r3
 800279e:	d901      	bls.n	80027a4 <u8g_IsBBXIntersection+0xe4>
	return 1;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e002      	b.n	80027aa <u8g_IsBBXIntersection+0xea>
	return 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <u8g_IsBBXIntersection+0xea>
      return 0;
 80027a8:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 80027aa:	bf00      	nop
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc90      	pop	{r4, r7}
 80027b4:	4770      	bx	lr

080027b6 <u8g_InitCom>:
#include "u8g_arm.h"

extern void u8g_Delay(uint16_t val);

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 80027b6:	b590      	push	{r4, r7, lr}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	689c      	ldr	r4, [r3, #8]
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	2300      	movs	r3, #0
 80027cc:	2101      	movs	r1, #1
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	47a0      	blx	r4
 80027d2:	4603      	mov	r3, r0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	4613      	mov	r3, r2
 80027e8:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	689c      	ldr	r4, [r3, #8]
 80027ee:	79fa      	ldrb	r2, [r7, #7]
 80027f0:	2300      	movs	r3, #0
 80027f2:	2103      	movs	r1, #3
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	47a0      	blx	r4
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}

08002800 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689c      	ldr	r4, [r3, #8]
 800280e:	2300      	movs	r3, #0
 8002810:	2200      	movs	r2, #0
 8002812:	2104      	movs	r1, #4
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	47a0      	blx	r4
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bd90      	pop	{r4, r7, pc}

08002820 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	689c      	ldr	r4, [r3, #8]
 800282e:	2300      	movs	r3, #0
 8002830:	2201      	movs	r2, #1
 8002832:	2104      	movs	r1, #4
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	47a0      	blx	r4
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}

08002840 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	4613      	mov	r3, r2
 800284c:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	689c      	ldr	r4, [r3, #8]
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	2300      	movs	r3, #0
 8002856:	2102      	movs	r1, #2
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	47a0      	blx	r4
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bd90      	pop	{r4, r7, pc}

08002864 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	689c      	ldr	r4, [r3, #8]
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	2300      	movs	r3, #0
 800287a:	2105      	movs	r1, #5
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	47a0      	blx	r4
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}

0800288a <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	689c      	ldr	r4, [r3, #8]
 800289e:	79fa      	ldrb	r2, [r7, #7]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2106      	movs	r1, #6
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	47a0      	blx	r4
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d110      	bne.n	80028f0 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 80028ce:	7dbb      	ldrb	r3, [r7, #22]
 80028d0:	2bff      	cmp	r3, #255	; 0xff
 80028d2:	d00a      	beq.n	80028ea <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 80028d4:	7dbb      	ldrb	r3, [r7, #22]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ffc2 	bl	8002864 <u8g_WriteByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d15d      	bne.n	80029a2 <u8g_WriteEscSeqP+0xf0>
          return 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e061      	b.n	80029ae <u8g_WriteEscSeqP+0xfc>
      }
      else
      {
        is_escape = 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
 80028ee:	e058      	b.n	80029a2 <u8g_WriteEscSeqP+0xf0>
      }
    }
    else
    {
      if ( value == 255 )
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	2bff      	cmp	r3, #255	; 0xff
 80028f4:	d10a      	bne.n	800290c <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 80028f6:	7dbb      	ldrb	r3, [r7, #22]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68b9      	ldr	r1, [r7, #8]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f7ff ffb1 	bl	8002864 <u8g_WriteByte>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d14a      	bne.n	800299e <u8g_WriteEscSeqP+0xec>
          return 0;
 8002908:	2300      	movs	r3, #0
 800290a:	e050      	b.n	80029ae <u8g_WriteEscSeqP+0xfc>
      }
      else if ( value == 254 )
 800290c:	7dbb      	ldrb	r3, [r7, #22]
 800290e:	2bfe      	cmp	r3, #254	; 0xfe
 8002910:	d04b      	beq.n	80029aa <u8g_WriteEscSeqP+0xf8>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8002912:	7dbb      	ldrb	r3, [r7, #22]
 8002914:	2bef      	cmp	r3, #239	; 0xef
 8002916:	d842      	bhi.n	800299e <u8g_WriteEscSeqP+0xec>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8002918:	7dbb      	ldrb	r3, [r7, #22]
 800291a:	2bdf      	cmp	r3, #223	; 0xdf
 800291c:	d909      	bls.n	8002932 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 800291e:	7dbb      	ldrb	r3, [r7, #22]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	b2db      	uxtb	r3, r3
 8002926:	461a      	mov	r2, r3
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff ff88 	bl	8002840 <u8g_SetAddress>
 8002930:	e035      	b.n	800299e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xd0 )
 8002932:	7dbb      	ldrb	r3, [r7, #22]
 8002934:	2bcf      	cmp	r3, #207	; 0xcf
 8002936:	d909      	bls.n	800294c <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002938:	7dbb      	ldrb	r3, [r7, #22]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff ff49 	bl	80027dc <u8g_SetChipSelect>
 800294a:	e028      	b.n	800299e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xc0 )
 800294c:	7dbb      	ldrb	r3, [r7, #22]
 800294e:	2bbf      	cmp	r3, #191	; 0xbf
 8002950:	d91a      	bls.n	8002988 <u8g_WriteEscSeqP+0xd6>
      {
        u8g_SetResetLow(u8g, dev);
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff53 	bl	8002800 <u8g_SetResetLow>
        value &= 0x0f;
 800295a:	7dbb      	ldrb	r3, [r7, #22]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8002962:	7dbb      	ldrb	r3, [r7, #22]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8002968:	7dbb      	ldrb	r3, [r7, #22]
 800296a:	3302      	adds	r3, #2
 800296c:	75bb      	strb	r3, [r7, #22]
        HAL_Delay(value);
 800296e:	7dbb      	ldrb	r3, [r7, #22]
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fa03 	bl	8003d7c <HAL_Delay>
        u8g_SetResetHigh(u8g, dev);
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ff51 	bl	8002820 <u8g_SetResetHigh>
        HAL_Delay(value);
 800297e:	7dbb      	ldrb	r3, [r7, #22]
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9fb 	bl	8003d7c <HAL_Delay>
 8002986:	e00a      	b.n	800299e <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xbe )
 8002988:	7dbb      	ldrb	r3, [r7, #22]
 800298a:	2bbd      	cmp	r3, #189	; 0xbd
 800298c:	d807      	bhi.n	800299e <u8g_WriteEscSeqP+0xec>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 800298e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db03      	blt.n	800299e <u8g_WriteEscSeqP+0xec>
      {
    	  HAL_Delay(value);
 8002996:	7dbb      	ldrb	r3, [r7, #22]
 8002998:	4618      	mov	r0, r3
 800299a:	f001 f9ef 	bl	8003d7c <HAL_Delay>
      }
      is_escape = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3301      	adds	r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 80029a8:	e78b      	b.n	80028c2 <u8g_WriteEscSeqP+0x10>
        break;
 80029aa:	bf00      	nop
  }
  return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607b      	str	r3, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	72fb      	strb	r3, [r7, #11]
 80029c6:	4613      	mov	r3, r2
 80029c8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80029ca:	7afb      	ldrb	r3, [r7, #11]
 80029cc:	2b06      	cmp	r3, #6
 80029ce:	d811      	bhi.n	80029f4 <u8g_com_null_fn+0x3c>
 80029d0:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <u8g_com_null_fn+0x20>)
 80029d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d6:	bf00      	nop
 80029d8:	080029f5 	.word	0x080029f5
 80029dc:	080029f5 	.word	0x080029f5
 80029e0:	080029f5 	.word	0x080029f5
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	080029f5 	.word	0x080029f5
 80029ec:	080029f5 	.word	0x080029f5
 80029f0:	080029f5 	.word	0x080029f5
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 80029f4:	2301      	movs	r3, #1
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	4613      	mov	r3, r2
 8002a12:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	3b0a      	subs	r3, #10
 8002a18:	2b0b      	cmp	r3, #11
 8002a1a:	d85b      	bhi.n	8002ad4 <u8g_dev_ssd1306_128x64_fn+0xd0>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <u8g_dev_ssd1306_128x64_fn+0x20>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a55 	.word	0x08002a55
 8002a28:	08002ad5 	.word	0x08002ad5
 8002a2c:	08002ad5 	.word	0x08002ad5
 8002a30:	08002ad5 	.word	0x08002ad5
 8002a34:	08002ad5 	.word	0x08002ad5
 8002a38:	08002ad5 	.word	0x08002ad5
 8002a3c:	08002ab9 	.word	0x08002ab9
 8002a40:	08002ac7 	.word	0x08002ac7
 8002a44:	08002ad5 	.word	0x08002ad5
 8002a48:	08002ad5 	.word	0x08002ad5
 8002a4c:	08002ad5 	.word	0x08002ad5
 8002a50:	08002a6b 	.word	0x08002a6b
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8002a54:	2202      	movs	r2, #2
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff feac 	bl	80027b6 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8002a5e:	4a23      	ldr	r2, [pc, #140]	; (8002aec <u8g_dev_ssd1306_128x64_fn+0xe8>)
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff ff25 	bl	80028b2 <u8g_WriteEscSeqP>
      break;
 8002a68:	e034      	b.n	8002ad4 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8002a70:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <u8g_dev_ssd1306_128x64_fn+0xec>)
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff ff1c 	bl	80028b2 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	791b      	ldrb	r3, [r3, #4]
 8002a7e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff feeb 	bl	8002864 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8002a8e:	2201      	movs	r2, #1
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f7ff fed4 	bl	8002840 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	68f9      	ldr	r1, [r7, #12]
 8002a9c:	6978      	ldr	r0, [r7, #20]
 8002a9e:	f000 fe53 	bl	8003748 <u8g_pb_WriteBuffer>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e01a      	b.n	8002ae2 <u8g_dev_ssd1306_128x64_fn+0xde>
        u8g_SetChipSelect(u8g, dev, 0);
 8002aac:	2200      	movs	r2, #0
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f7ff fe93 	bl	80027dc <u8g_SetChipSelect>
      }
      break;
 8002ab6:	e00d      	b.n	8002ad4 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <u8g_dev_ssd1306_128x64_fn+0xf0>)
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff fef8 	bl	80028b2 <u8g_WriteEscSeqP>
      return 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00d      	b.n	8002ae2 <u8g_dev_ssd1306_128x64_fn+0xde>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002ac6:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <u8g_dev_ssd1306_128x64_fn+0xf4>)
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff fef1 	bl	80028b2 <u8g_WriteEscSeqP>
      return 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e006      	b.n	8002ae2 <u8g_dev_ssd1306_128x64_fn+0xde>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8002ad4:	79fa      	ldrb	r2, [r7, #7]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fef4 	bl	80038c8 <u8g_dev_pb8v1_base_fn>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	0800a1cc 	.word	0x0800a1cc
 8002af0:	0800a1f4 	.word	0x0800a1f4
 8002af4:	0800a1fc 	.word	0x0800a1fc
 8002af8:	0800a208 	.word	0x0800a208

08002afc <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	781b      	ldrb	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4413      	add	r3, r2
 8002b32:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	81fb      	strh	r3, [r7, #14]
    font++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002b40:	89fb      	ldrh	r3, [r7, #14]
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	89fb      	ldrh	r3, [r7, #14]
 8002b4e:	4413      	add	r3, r2
 8002b50:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002b52:	89fb      	ldrh	r3, [r7, #14]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffc6 	bl	8002afc <u8g_font_get_byte>
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffec 	bl	8002b60 <u8g_font_GetFormat>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d00a      	beq.n	8002ba4 <u8g_font_GetFontGlyphStructureSize+0x2a>
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	dc0a      	bgt.n	8002ba8 <u8g_font_GetFontGlyphStructureSize+0x2e>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <u8g_font_GetFontGlyphStructureSize+0x22>
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <u8g_font_GetFontGlyphStructureSize+0x26>
 8002b9a:	e005      	b.n	8002ba8 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	e004      	b.n	8002baa <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e002      	b.n	8002baa <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 8002ba4:	2306      	movs	r3, #6
 8002ba6:	e000      	b.n	8002baa <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8002ba8:	2303      	movs	r3, #3
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8002bba:	2105      	movs	r1, #5
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff9d 	bl	8002afc <u8g_font_get_byte>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 8002bd4:	2106      	movs	r1, #6
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa2 	bl	8002b20 <u8g_font_get_word>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8002bee:	2108      	movs	r1, #8
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff95 	bl	8002b20 <u8g_font_get_word>
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8002c08:	210a      	movs	r1, #10
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ff76 	bl	8002afc <u8g_font_get_byte>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 8002c22:	210b      	movs	r1, #11
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff69 	bl	8002afc <u8g_font_get_byte>
 8002c2a:	4603      	mov	r3, r0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8002c3c:	210c      	movs	r1, #12
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff5c 	bl	8002afc <u8g_font_get_byte>
 8002c44:	4603      	mov	r3, r0
 8002c46:	b25b      	sxtb	r3, r3
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 8002c58:	210d      	movs	r1, #13
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff ff4e 	bl	8002afc <u8g_font_get_byte>
 8002c60:	4603      	mov	r3, r0
 8002c62:	b25b      	sxtb	r3, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8002c74:	210e      	movs	r1, #14
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7ff ff40 	bl	8002afc <u8g_font_get_byte>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b25b      	sxtb	r3, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 8002c90:	210f      	movs	r1, #15
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff32 	bl	8002afc <u8g_font_get_byte>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	b25b      	sxtb	r3, r3
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8002cac:	2110      	movs	r1, #16
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff24 	bl	8002afc <u8g_font_get_byte>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	b25b      	sxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff ff55 	bl	8002b7a <u8g_font_GetFontGlyphStructureSize>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4413      	add	r3, r2
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff36 	bl	8002b60 <u8g_font_GetFormat>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <u8g_CopyGlyphDataToCache+0x1e>
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d11b      	bne.n	8002d36 <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	785a      	ldrb	r2, [r3, #1]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3303      	adds	r3, #3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b25a      	sxtb	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3305      	adds	r3, #5
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	779a      	strb	r2, [r3, #30]
      break;
 8002d34:	e034      	b.n	8002da0 <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8002d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	b25a      	sxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3b02      	subs	r3, #2
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8002d62:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	785b      	ldrb	r3, [r3, #1]
 8002d6e:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	789b      	ldrb	r3, [r3, #2]
 8002d8e:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 8002d96:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	771a      	strb	r2, [r3, #28]
    
      
      break;
 8002d9e:	bf00      	nop
  }
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	779a      	strb	r2, [r3, #30]
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff feb4 	bl	8002b60 <u8g_font_GetFormat>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff feba 	bl	8002b7a <u8g_font_GetFontGlyphStructureSize>
 8002e06:	4603      	mov	r3, r0
 8002e08:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8002e0a:	23ff      	movs	r3, #255	; 0xff
 8002e0c:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8002e0e:	7c3b      	ldrb	r3, [r7, #16]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <u8g_GetGlyph+0x3c>
    mask = 15;
 8002e14:	230f      	movs	r3, #15
 8002e16:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff feef 	bl	8002c00 <u8g_font_GetFontStartEncoding>
 8002e22:	4603      	mov	r3, r0
 8002e24:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fef5 	bl	8002c1a <u8g_font_GetFontEndEncoding>
 8002e30:	4603      	mov	r3, r0
 8002e32:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fed4 	bl	8002be6 <u8g_font_GetEncoding97Pos>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	2b60      	cmp	r3, #96	; 0x60
 8002e46:	d909      	bls.n	8002e5c <u8g_GetGlyph+0x80>
 8002e48:	89bb      	ldrh	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8002e4e:	89bb      	ldrh	r3, [r7, #12]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
    start = 97;
 8002e56:	2361      	movs	r3, #97	; 0x61
 8002e58:	74fb      	strb	r3, [r7, #19]
 8002e5a:	e016      	b.n	8002e8a <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff feb3 	bl	8002bcc <u8g_font_GetEncoding65Pos>
 8002e66:	4603      	mov	r3, r0
 8002e68:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d909      	bls.n	8002e84 <u8g_GetGlyph+0xa8>
 8002e70:	89bb      	ldrh	r3, [r7, #12]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8002e76:	89bb      	ldrh	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
      start = 65;
 8002e7e:	2341      	movs	r3, #65	; 0x41
 8002e80:	74fb      	strb	r3, [r7, #19]
 8002e82:	e002      	b.n	8002e8a <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3311      	adds	r3, #17
 8002e88:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	7bbb      	ldrb	r3, [r7, #14]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d904      	bls.n	8002e9c <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff88 	bl	8002da8 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e032      	b.n	8002f02 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8002ea0:	7cba      	ldrb	r2, [r7, #18]
 8002ea2:	7bbb      	ldrb	r3, [r7, #14]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d828      	bhi.n	8002efa <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2bff      	cmp	r3, #255	; 0xff
 8002eae:	d103      	bne.n	8002eb8 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e017      	b.n	8002ee8 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8002eb8:	7cba      	ldrb	r2, [r7, #18]
 8002eba:	78fb      	ldrb	r3, [r7, #3]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d105      	bne.n	8002ecc <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff0c 	bl	8002ce0 <u8g_CopyGlyphDataToCache>
          return p;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	e01a      	b.n	8002f02 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3302      	adds	r3, #2
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	7c7b      	ldrb	r3, [r7, #17]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	4413      	add	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8002ee8:	7cba      	ldrb	r2, [r7, #18]
 8002eea:	7bbb      	ldrb	r3, [r7, #14]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d003      	beq.n	8002ef8 <u8g_GetGlyph+0x11c>
        break;
      i++;
 8002ef0:	7cbb      	ldrb	r3, [r7, #18]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002ef6:	e7d7      	b.n	8002ea8 <u8g_GetGlyph+0xcc>
        break;
 8002ef8:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ff54 	bl	8002da8 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b088      	sub	sp, #32
 8002f0e:	af02      	add	r7, sp, #8
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	461a      	mov	r2, r3
 8002f18:	4603      	mov	r3, r0
 8002f1a:	70fb      	strb	r3, [r7, #3]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70bb      	strb	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff57 	bl	8002ddc <u8g_GetGlyph>
 8002f2e:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <u8g_draw_glyph+0x30>
      return 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e06d      	b.n	8003016 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	68f9      	ldr	r1, [r7, #12]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff febd 	bl	8002cc0 <u8g_font_GetGlyphDataStart>
 8002f46:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7fdb      	ldrb	r3, [r3, #31]
 8002f4c:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f54:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	4413      	add	r3, r2
 8002f62:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	78ba      	ldrb	r2, [r7, #2]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	70bb      	strb	r3, [r7, #2]
  y--;
 8002f72:	78bb      	ldrb	r3, [r7, #2]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002f78:	78ba      	ldrb	r2, [r7, #2]
 8002f7a:	7abb      	ldrb	r3, [r7, #10]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3301      	adds	r3, #1
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	7af8      	ldrb	r0, [r7, #11]
 8002f86:	78f9      	ldrb	r1, [r7, #3]
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fb96 	bl	80026c0 <u8g_IsBBXIntersection>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d103      	bne.n	8002fa2 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002fa0:	e039      	b.n	8003016 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	3307      	adds	r3, #7
 8002fa6:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8002fa8:	7afb      	ldrb	r3, [r7, #11]
 8002faa:	08db      	lsrs	r3, r3, #3
 8002fac:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8002fb2:	7c3a      	ldrb	r2, [r7, #16]
 8002fb4:	7abb      	ldrb	r3, [r7, #10]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	743b      	strb	r3, [r7, #16]
  iy++;
 8002fba:	7c3b      	ldrb	r3, [r7, #16]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	74bb      	strb	r3, [r7, #18]
 8002fc4:	e020      	b.n	8003008 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002fca:	2300      	movs	r3, #0
 8002fcc:	74fb      	strb	r3, [r7, #19]
 8002fce:	e011      	b.n	8002ff4 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	7c3a      	ldrb	r2, [r7, #16]
 8002fd6:	7c79      	ldrb	r1, [r7, #17]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa8b 	bl	80034f8 <u8g_Draw8Pixel>
      data++;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	617b      	str	r3, [r7, #20]
      ix+=8;
 8002fe8:	7c7b      	ldrb	r3, [r7, #17]
 8002fea:	3308      	adds	r3, #8
 8002fec:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002fee:	7cfb      	ldrb	r3, [r7, #19]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	74fb      	strb	r3, [r7, #19]
 8002ff4:	7cfa      	ldrb	r2, [r7, #19]
 8002ff6:	7afb      	ldrb	r3, [r7, #11]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3e9      	bcc.n	8002fd0 <u8g_draw_glyph+0xc6>
    }
    iy++;
 8002ffc:	7c3b      	ldrb	r3, [r7, #16]
 8002ffe:	3301      	adds	r3, #1
 8003000:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8003002:	7cbb      	ldrb	r3, [r7, #18]
 8003004:	3301      	adds	r3, #1
 8003006:	74bb      	strb	r3, [r7, #18]
 8003008:	7cba      	ldrb	r2, [r7, #18]
 800300a:	7abb      	ldrb	r3, [r7, #10]
 800300c:	429a      	cmp	r2, r3
 800300e:	d3da      	bcc.n	8002fc6 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	72fb      	strb	r3, [r7, #11]
 800302c:	4613      	mov	r3, r2
 800302e:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	4798      	blx	r3
 800303c:	4603      	mov	r3, r0
 800303e:	461a      	mov	r2, r3
 8003040:	7abb      	ldrb	r3, [r7, #10]
 8003042:	4413      	add	r3, r2
 8003044:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 8003046:	e013      	b.n	8003070 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	7aba      	ldrb	r2, [r7, #10]
 800304e:	7af9      	ldrb	r1, [r7, #11]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ff5a 	bl	8002f0a <u8g_draw_glyph>
 8003056:	4603      	mov	r3, r0
 8003058:	75bb      	strb	r3, [r7, #22]
    x += d;
 800305a:	7dba      	ldrb	r2, [r7, #22]
 800305c:	7afb      	ldrb	r3, [r7, #11]
 800305e:	4413      	add	r3, r2
 8003060:	72fb      	strb	r3, [r7, #11]
    t += d;
 8003062:	7dba      	ldrb	r2, [r7, #22]
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	4413      	add	r3, r2
 8003068:	75fb      	strb	r3, [r7, #23]
    s++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3301      	adds	r3, #1
 800306e:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e7      	bne.n	8003048 <u8g_DrawStr+0x2a>
  }
  return t;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06b      	beq.n	800316a <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003098:	2b00      	cmp	r3, #0
 800309a:	d114      	bne.n	80030c6 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd86 	bl	8002bb2 <u8g_font_GetCapitalAHeight>
 80030a6:	4603      	mov	r3, r0
 80030a8:	b25a      	sxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fdbd 	bl	8002c34 <u8g_font_GetLowerGDescent>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80030c4:	e02d      	b.n	8003122 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d114      	bne.n	80030fa <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fdd7 	bl	8002c88 <u8g_font_GetFontXAscent>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fddb 	bl	8002ca4 <u8g_font_GetFontXDescent>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80030f8:	e013      	b.n	8003122 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fda6 	bl	8002c50 <u8g_font_GetFontAscent>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fdaa 	bl	8002c6c <u8g_font_GetFontDescent>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8003128:	b21a      	sxth	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8003130:	b21b      	sxth	r3, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	b21b      	sxth	r3, r3
 8003136:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d00d      	beq.n	800315e <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8003142:	89fb      	ldrh	r3, [r7, #14]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800314e:	b29b      	uxth	r3, r3
 8003150:	89fa      	ldrh	r2, [r7, #14]
 8003152:	fb12 f303 	smulbb	r3, r2, r3
 8003156:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 8003158:	89fb      	ldrh	r3, [r7, #14]
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 800315e:	89fb      	ldrh	r3, [r7, #14]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003168:	e000      	b.n	800316c <u8g_UpdateRefHeight+0xea>
    return;
 800316a:	bf00      	nop
}
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return 0;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a04      	ldr	r2, [pc, #16]	; (80031a4 <u8g_SetFontPosBaseline+0x1c>)
 8003194:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	08003173 	.word	0x08003173

080031a8 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d008      	beq.n	80031ce <u8g_SetFont+0x26>
  {
    u8g->font = font;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff5d 	bl	8003082 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ffdd 	bl	8003188 <u8g_SetFontPosBaseline>
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80031d6:	b590      	push	{r4, r7, lr}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	681c      	ldr	r4, [r3, #0]
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68b9      	ldr	r1, [r7, #8]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	47a0      	blx	r4
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}

080031fe <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	2002      	movs	r0, #2
 800320e:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8003210:	2300      	movs	r3, #0
 8003212:	220a      	movs	r2, #10
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ffdd 	bl	80031d6 <u8g_call_dev_fn>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003224:	2003      	movs	r0, #3
 8003226:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	2000      	movs	r0, #0
 800322e:	4798      	blx	r3
  return r;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800323a:	b580      	push	{r7, lr}
 800323c:	b082      	sub	sp, #8
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	2002      	movs	r0, #2
 800324a:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	2001      	movs	r0, #1
 8003252:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8003254:	2300      	movs	r3, #0
 8003256:	2214      	movs	r2, #20
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffbb 	bl	80031d6 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3338      	adds	r3, #56	; 0x38
 8003264:	2217      	movs	r2, #23
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ffb4 	bl	80031d6 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	2000      	movs	r0, #0
 8003274:	4798      	blx	r3
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	2002      	movs	r0, #2
 800328e:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003294:	2001      	movs	r0, #1
 8003296:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8003298:	2300      	movs	r3, #0
 800329a:	2215      	movs	r2, #21
 800329c:	6839      	ldr	r1, [r7, #0]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff99 	bl	80031d6 <u8g_call_dev_fn>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3338      	adds	r3, #56	; 0x38
 80032b2:	2217      	movs	r2, #23
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff8d 	bl	80031d6 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	2000      	movs	r0, #0
 80032c2:	4798      	blx	r3
  return r;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	4611      	mov	r1, r2
 80032da:	461a      	mov	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	71fb      	strb	r3, [r7, #7]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	332d      	adds	r3, #45	; 0x2d
 80032e8:	617b      	str	r3, [r7, #20]
  arg->x = x;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	79ba      	ldrb	r2, [r7, #6]
 80032f4:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032fc:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003304:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	223b      	movs	r2, #59	; 0x3b
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff62 	bl	80031d6 <u8g_call_dev_fn>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b084      	sub	sp, #16
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8003324:	f107 030f 	add.w	r3, r7, #15
 8003328:	2246      	movs	r2, #70	; 0x46
 800332a:	6839      	ldr	r1, [r7, #0]
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ff52 	bl	80031d6 <u8g_call_dev_fn>
  return r;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8003346:	f107 030f 	add.w	r3, r7, #15
 800334a:	2247      	movs	r2, #71	; 0x47
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff41 	bl	80031d6 <u8g_call_dev_fn>
  return r;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8003368:	2300      	movs	r3, #0
 800336a:	2248      	movs	r2, #72	; 0x48
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ff31 	bl	80031d6 <u8g_call_dev_fn>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4619      	mov	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffc4 	bl	800331a <u8g_GetWidthLL>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffcb 	bl	800333c <u8g_GetHeightLL>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ffd2 	bl	800335e <u8g_GetModeLL>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3338      	adds	r3, #56	; 0x38
 80033ca:	2217      	movs	r2, #23
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff02 	bl	80031d6 <u8g_call_dev_fn>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2222      	movs	r2, #34	; 0x22
 8003400:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8003408:	2101      	movs	r1, #1
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f891 	bl	8003532 <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff feb9 	bl	8003188 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2240      	movs	r2, #64	; 0x40
 8003432:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a02      	ldr	r2, [pc, #8]	; (800344c <u8g_init_data+0x70>)
 8003442:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08003c2f 	.word	0x08003c2f

08003450 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fecd 	bl	80031fe <u8g_InitLL>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <u8g_Begin+0x1e>
    return 0;
 800346a:	2300      	movs	r3, #0
 800346c:	e003      	b.n	8003476 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff85 	bl	800337e <u8g_UpdateDimension>
  return 1;
 8003474:	2301      	movs	r3, #1
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ffa6 	bl	80033dc <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f7ff ffd6 	bl	8003450 <u8g_Begin>
 80034a4:	4603      	mov	r3, r0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff febc 	bl	800323a <u8g_FirstPageLL>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff fec8 	bl	800327e <u8g_NextPageLL>
 80034ee:	4603      	mov	r3, r0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	70fb      	strb	r3, [r7, #3]
 800350a:	460b      	mov	r3, r1
 800350c:	70bb      	strb	r3, [r7, #2]
 800350e:	4613      	mov	r3, r2
 8003510:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	78b8      	ldrb	r0, [r7, #2]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	7c3b      	ldrb	r3, [r7, #16]
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	4603      	mov	r3, r0
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff fed2 	bl	80032ce <u8g_Draw8PixelLL>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	78db      	ldrb	r3, [r3, #3]
 800356c:	3b01      	subs	r3, #1
 800356e:	b2da      	uxtb	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	711a      	strb	r2, [r3, #4]
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8003586:	b490      	push	{r4, r7}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	789a      	ldrb	r2, [r3, #2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4413      	add	r3, r2
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	789a      	ldrb	r2, [r3, #2]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d301      	bcc.n	80035ae <u8g_page_Next+0x28>
    return 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e018      	b.n	80035e0 <u8g_page_Next+0x5a>
  p->page++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	791b      	ldrb	r3, [r3, #4]
 80035b2:	3301      	adds	r3, #1
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	4423      	add	r3, r4
 80035c4:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	785b      	ldrb	r3, [r3, #1]
 80035ca:	429c      	cmp	r4, r3
 80035cc:	d304      	bcc.n	80035d8 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	785c      	ldrb	r4, [r3, #1]
    y1--;
 80035d2:	4623      	mov	r3, r4
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4622      	mov	r2, r4
 80035dc:	70da      	strb	r2, [r3, #3]
  
  return 1;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc90      	pop	{r4, r7}
 80035e8:	4770      	bx	lr

080035ea <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	795b      	ldrb	r3, [r3, #5]
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4413      	add	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	60fa      	str	r2, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d1f6      	bne.n	8003608 <u8g_pb_Clear+0x1e>
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	70fb      	strb	r3, [r7, #3]
 8003634:	4613      	mov	r3, r2
 8003636:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	78db      	ldrb	r3, [r3, #3]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	429a      	cmp	r2, r3
 8003640:	bf94      	ite	ls
 8003642:	2301      	movls	r3, #1
 8003644:	2300      	movhi	r3, #0
 8003646:	b2db      	uxtb	r3, r3
 8003648:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	789b      	ldrb	r3, [r3, #2]
 800364e:	78ba      	ldrb	r2, [r7, #2]
 8003650:	429a      	cmp	r2, r3
 8003652:	bf2c      	ite	cs
 8003654:	2301      	movcs	r3, #1
 8003656:	2300      	movcc	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	78bb      	ldrb	r3, [r7, #2]
 8003660:	429a      	cmp	r2, r3
 8003662:	bf8c      	ite	hi
 8003664:	2301      	movhi	r3, #1
 8003666:	2300      	movls	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	4013      	ands	r3, r2
 8003676:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8003678:	7bba      	ldrb	r2, [r7, #14]
 800367a:	7b7b      	ldrb	r3, [r7, #13]
 800367c:	4013      	ands	r3, r2
 800367e:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8003680:	7b7a      	ldrb	r2, [r7, #13]
 8003682:	7b3b      	ldrb	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8003688:	7bfa      	ldrb	r2, [r7, #15]
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	4313      	orrs	r3, r2
 800368e:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	7b7b      	ldrb	r3, [r7, #13]
 8003694:	4313      	orrs	r3, r2
 8003696:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	789a      	ldrb	r2, [r3, #2]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	795a      	ldrb	r2, [r3, #5]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	709a      	strb	r2, [r3, #2]
  box->x1--;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	78da      	ldrb	r2, [r3, #3]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	70da      	strb	r2, [r3, #3]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	78db      	ldrb	r3, [r3, #3]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d813      	bhi.n	8003730 <u8g_pb_Is8PixelVisible+0x44>
 8003708:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <u8g_pb_Is8PixelVisible+0x24>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003731 	.word	0x08003731
 8003714:	08003721 	.word	0x08003721
 8003718:	08003731 	.word	0x08003731
 800371c:	08003729 	.word	0x08003729
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8003720:	7bbb      	ldrb	r3, [r7, #14]
 8003722:	3308      	adds	r3, #8
 8003724:	73bb      	strb	r3, [r7, #14]
      break;
 8003726:	e003      	b.n	8003730 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3b08      	subs	r3, #8
 800372c:	73fb      	strb	r3, [r7, #15]
      break;
 800372e:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8003730:	7bba      	ldrb	r2, [r7, #14]
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ff76 	bl	8003628 <u8g_pb_IsYIntersection>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop

08003748 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	795a      	ldrb	r2, [r3, #5]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	68b8      	ldr	r0, [r7, #8]
 8003760:	f7ff f893 	bl	800288a <u8g_WriteSequence>
 8003764:	4603      	mov	r3, r0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 800376e:	b490      	push	{r4, r7}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	461a      	mov	r2, r3
 800377c:	4603      	mov	r3, r0
 800377e:	70fb      	strb	r3, [r7, #3]
 8003780:	460b      	mov	r3, r1
 8003782:	70bb      	strb	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	789b      	ldrb	r3, [r3, #2]
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8003798:	2401      	movs	r4, #1
  y &= 0x07;
 800379a:	78bb      	ldrb	r3, [r7, #2]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 80037a2:	4622      	mov	r2, r4
 80037a4:	78bb      	ldrb	r3, [r7, #2]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	b2dc      	uxtb	r4, r3
  ptr += x;
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 80037b4:	787b      	ldrb	r3, [r7, #1]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d006      	beq.n	80037c8 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	4323      	orrs	r3, r4
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 80037c6:	e007      	b.n	80037d8 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 80037c8:	43e3      	mvns	r3, r4
 80037ca:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	4023      	ands	r3, r4
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	701a      	strb	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc90      	pop	{r4, r7}
 80037e0:	4770      	bx	lr

080037e2 <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	785a      	ldrb	r2, [r3, #1]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	789b      	ldrb	r3, [r3, #2]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d315      	bcc.n	8003824 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	785a      	ldrb	r2, [r3, #1]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	78db      	ldrb	r3, [r3, #3]
 8003800:	429a      	cmp	r2, r3
 8003802:	d811      	bhi.n	8003828 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	795b      	ldrb	r3, [r3, #5]
 800380c:	429a      	cmp	r2, r3
 800380e:	d20d      	bcs.n	800382c <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	7819      	ldrb	r1, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	785a      	ldrb	r2, [r3, #1]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7ff ffa6 	bl	800376e <u8g_pb8v1_set_pixel>
 8003822:	e004      	b.n	800382e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003824:	bf00      	nop
 8003826:	e002      	b.n	800382e <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003828:	bf00      	nop
 800382a:	e000      	b.n	800382e <u8g_pb8v1_SetPixel+0x4c>
    return;
 800382c:	bf00      	nop
}
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d81c      	bhi.n	800388c <u8g_pb8v1_Set8PixelOpt2+0x58>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	08003869 	.word	0x08003869
 800385c:	08003871 	.word	0x08003871
 8003860:	08003879 	.word	0x08003879
 8003864:	08003881 	.word	0x08003881
  {
    case 0: dx++; break;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	3301      	adds	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e00d      	b.n	800388c <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 1: dy++; break;
 8003870:	7bbb      	ldrb	r3, [r7, #14]
 8003872:	3301      	adds	r3, #1
 8003874:	73bb      	strb	r3, [r7, #14]
 8003876:	e009      	b.n	800388c <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 2: dx--; break;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	3b01      	subs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e005      	b.n	800388c <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 3: dy--; break;
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	3b01      	subs	r3, #1
 8003884:	73bb      	strb	r3, [r7, #14]
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <u8g_pb8v1_Set8PixelOpt2+0x58>
  }
  
  do
 800388a:	bf00      	nop
  {
    if ( pixel & 128 )
 800388c:	b263      	sxtb	r3, r4
 800388e:	2b00      	cmp	r3, #0
 8003890:	da03      	bge.n	800389a <u8g_pb8v1_Set8PixelOpt2+0x66>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffa4 	bl	80037e2 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	4413      	add	r3, r2
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	785a      	ldrb	r2, [r3, #1]
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	4413      	add	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 80038b6:	0063      	lsls	r3, r4, #1
 80038b8:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 80038ba:	2c00      	cmp	r4, #0
 80038bc:	d1e5      	bne.n	800388a <u8g_pb8v1_Set8PixelOpt2+0x56>
  
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd90      	pop	{r4, r7, pc}

080038c8 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	617b      	str	r3, [r7, #20]
  switch(msg)
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	3b0a      	subs	r3, #10
 80038e2:	2b3e      	cmp	r3, #62	; 0x3e
 80038e4:	f200 80ba 	bhi.w	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <u8g_dev_pb8v1_base_fn+0x28>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003a5d 	.word	0x08003a5d
 80038f4:	08003a5d 	.word	0x08003a5d
 80038f8:	08003a5d 	.word	0x08003a5d
 80038fc:	08003a5d 	.word	0x08003a5d
 8003900:	08003a5d 	.word	0x08003a5d
 8003904:	08003a5d 	.word	0x08003a5d
 8003908:	08003a5d 	.word	0x08003a5d
 800390c:	08003a5d 	.word	0x08003a5d
 8003910:	08003a5d 	.word	0x08003a5d
 8003914:	08003a5d 	.word	0x08003a5d
 8003918:	08003a0f 	.word	0x08003a0f
 800391c:	08003a1f 	.word	0x08003a1f
 8003920:	08003a5d 	.word	0x08003a5d
 8003924:	08003a39 	.word	0x08003a39
 8003928:	08003a5d 	.word	0x08003a5d
 800392c:	08003a5d 	.word	0x08003a5d
 8003930:	08003a5d 	.word	0x08003a5d
 8003934:	08003a5d 	.word	0x08003a5d
 8003938:	08003a5d 	.word	0x08003a5d
 800393c:	08003a5d 	.word	0x08003a5d
 8003940:	08003a5d 	.word	0x08003a5d
 8003944:	08003a5d 	.word	0x08003a5d
 8003948:	08003a5d 	.word	0x08003a5d
 800394c:	08003a5d 	.word	0x08003a5d
 8003950:	08003a5d 	.word	0x08003a5d
 8003954:	08003a5d 	.word	0x08003a5d
 8003958:	08003a5d 	.word	0x08003a5d
 800395c:	08003a5d 	.word	0x08003a5d
 8003960:	08003a5d 	.word	0x08003a5d
 8003964:	08003a5d 	.word	0x08003a5d
 8003968:	08003a5d 	.word	0x08003a5d
 800396c:	08003a5d 	.word	0x08003a5d
 8003970:	08003a5d 	.word	0x08003a5d
 8003974:	08003a5d 	.word	0x08003a5d
 8003978:	08003a5d 	.word	0x08003a5d
 800397c:	08003a5d 	.word	0x08003a5d
 8003980:	08003a5d 	.word	0x08003a5d
 8003984:	08003a5d 	.word	0x08003a5d
 8003988:	08003a5d 	.word	0x08003a5d
 800398c:	08003a5d 	.word	0x08003a5d
 8003990:	08003a05 	.word	0x08003a05
 8003994:	08003a5d 	.word	0x08003a5d
 8003998:	08003a5d 	.word	0x08003a5d
 800399c:	08003a5d 	.word	0x08003a5d
 80039a0:	08003a5d 	.word	0x08003a5d
 80039a4:	08003a5d 	.word	0x08003a5d
 80039a8:	08003a5d 	.word	0x08003a5d
 80039ac:	08003a5d 	.word	0x08003a5d
 80039b0:	08003a5d 	.word	0x08003a5d
 80039b4:	080039ed 	.word	0x080039ed
 80039b8:	08003a5d 	.word	0x08003a5d
 80039bc:	08003a5d 	.word	0x08003a5d
 80039c0:	08003a5d 	.word	0x08003a5d
 80039c4:	08003a5d 	.word	0x08003a5d
 80039c8:	08003a5d 	.word	0x08003a5d
 80039cc:	08003a5d 	.word	0x08003a5d
 80039d0:	08003a5d 	.word	0x08003a5d
 80039d4:	08003a5d 	.word	0x08003a5d
 80039d8:	08003a5d 	.word	0x08003a5d
 80039dc:	08003a5d 	.word	0x08003a5d
 80039e0:	08003a43 	.word	0x08003a43
 80039e4:	08003a4d 	.word	0x08003a4d
 80039e8:	08003a57 	.word	0x08003a57
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 80039ec:	6839      	ldr	r1, [r7, #0]
 80039ee:	6978      	ldr	r0, [r7, #20]
 80039f0:	f7ff fe7c 	bl	80036ec <u8g_pb_Is8PixelVisible>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d02f      	beq.n	8003a5a <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f7ff ff19 	bl	8003834 <u8g_pb8v1_Set8PixelOpt2>
      break;
 8003a02:	e02a      	b.n	8003a5a <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	6978      	ldr	r0, [r7, #20]
 8003a08:	f7ff feeb 	bl	80037e2 <u8g_pb8v1_SetPixel>
      break;
 8003a0c:	e026      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8003a0e:	6978      	ldr	r0, [r7, #20]
 8003a10:	f7ff fdeb 	bl	80035ea <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fd9b 	bl	8003552 <u8g_page_First>
      break;
 8003a1c:	e01e      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fdb0 	bl	8003586 <u8g_page_Next>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e016      	b.n	8003a5e <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 8003a30:	6978      	ldr	r0, [r7, #20]
 8003a32:	f7ff fdda 	bl	80035ea <u8g_pb_Clear>
      break;
 8003a36:	e011      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff fe36 	bl	80036ac <u8g_pb_GetPageBox>
      break;
 8003a40:	e00c      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	795a      	ldrb	r2, [r3, #5]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	701a      	strb	r2, [r3, #0]
      break;
 8003a4a:	e007      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	785a      	ldrb	r2, [r3, #1]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	701a      	strb	r2, [r3, #0]
      break;
 8003a54:	e002      	b.n	8003a5c <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e001      	b.n	8003a5e <u8g_dev_pb8v1_base_fn+0x196>
      break;
 8003a5a:	bf00      	nop
  }
  return 1;
 8003a5c:	2301      	movs	r3, #1
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop

08003a68 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70bb      	strb	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 8003a82:	23ff      	movs	r3, #255	; 0xff
 8003a84:	73fb      	strb	r3, [r7, #15]
  while( w >= 8 )
 8003a86:	e00d      	b.n	8003aa4 <u8g_draw_hline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003a88:	78ba      	ldrb	r2, [r7, #2]
 8003a8a:	78f9      	ldrb	r1, [r7, #3]
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fd30 	bl	80034f8 <u8g_Draw8Pixel>
    w-=8;
 8003a98:	787b      	ldrb	r3, [r7, #1]
 8003a9a:	3b08      	subs	r3, #8
 8003a9c:	707b      	strb	r3, [r7, #1]
    x+=8;
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	70fb      	strb	r3, [r7, #3]
  while( w >= 8 )
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d8ee      	bhi.n	8003a88 <u8g_draw_hline+0x20>
  }
  if ( w != 0 )
 8003aaa:	787b      	ldrb	r3, [r7, #1]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <u8g_draw_hline+0x74>
  {
    w ^=7;
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	f083 0307 	eor.w	r3, r3, #7
 8003ab6:	707b      	strb	r3, [r7, #1]
    w++;
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	3301      	adds	r3, #1
 8003abc:	707b      	strb	r3, [r7, #1]
    pixel <<= w&7;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	787b      	ldrb	r3, [r7, #1]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003acc:	78ba      	ldrb	r2, [r7, #2]
 8003ace:	78f9      	ldrb	r1, [r7, #3]
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fd0e 	bl	80034f8 <u8g_Draw8Pixel>
  }
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	4608      	mov	r0, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	4603      	mov	r3, r0
 8003af4:	70fb      	strb	r3, [r7, #3]
 8003af6:	460b      	mov	r3, r1
 8003af8:	70bb      	strb	r3, [r7, #2]
 8003afa:	4613      	mov	r3, r2
 8003afc:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 8003afe:	23ff      	movs	r3, #255	; 0xff
 8003b00:	73fb      	strb	r3, [r7, #15]
  while( h >= 8 )
 8003b02:	e00d      	b.n	8003b20 <u8g_draw_vline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8003b04:	78ba      	ldrb	r2, [r7, #2]
 8003b06:	78f9      	ldrb	r1, [r7, #3]
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff fcf2 	bl	80034f8 <u8g_Draw8Pixel>
    h-=8;
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	3b08      	subs	r3, #8
 8003b18:	707b      	strb	r3, [r7, #1]
    y+=8;
 8003b1a:	78bb      	ldrb	r3, [r7, #2]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	70bb      	strb	r3, [r7, #2]
  while( h >= 8 )
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b07      	cmp	r3, #7
 8003b24:	d8ee      	bhi.n	8003b04 <u8g_draw_vline+0x20>
  }
  if ( h != 0 )
 8003b26:	787b      	ldrb	r3, [r7, #1]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <u8g_draw_vline+0x74>
  {
    h ^=7;
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	f083 0307 	eor.w	r3, r3, #7
 8003b32:	707b      	strb	r3, [r7, #1]
    h++;
 8003b34:	787b      	ldrb	r3, [r7, #1]
 8003b36:	3301      	adds	r3, #1
 8003b38:	707b      	strb	r3, [r7, #1]
    pixel <<= h&7;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	787b      	ldrb	r3, [r7, #1]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8003b48:	78ba      	ldrb	r2, [r7, #2]
 8003b4a:	78f9      	ldrb	r1, [r7, #3]
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2301      	movs	r3, #1
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fcd0 	bl	80034f8 <u8g_Draw8Pixel>
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	70fb      	strb	r3, [r7, #3]
 8003b72:	460b      	mov	r3, r1
 8003b74:	70bb      	strb	r3, [r7, #2]
 8003b76:	4613      	mov	r3, r2
 8003b78:	707b      	strb	r3, [r7, #1]
  u8g_uint_t xtmp = x;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	73fb      	strb	r3, [r7, #15]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 8003b7e:	7878      	ldrb	r0, [r7, #1]
 8003b80:	78ba      	ldrb	r2, [r7, #2]
 8003b82:	78f9      	ldrb	r1, [r7, #3]
 8003b84:	7e3b      	ldrb	r3, [r7, #24]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fe fd98 	bl	80026c0 <u8g_IsBBXIntersection>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d026      	beq.n	8003be4 <u8g_DrawFrame+0x84>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
 8003b96:	787b      	ldrb	r3, [r7, #1]
 8003b98:	78ba      	ldrb	r2, [r7, #2]
 8003b9a:	78f9      	ldrb	r1, [r7, #3]
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff ff63 	bl	8003a68 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
 8003ba2:	7e3b      	ldrb	r3, [r7, #24]
 8003ba4:	78ba      	ldrb	r2, [r7, #2]
 8003ba6:	78f9      	ldrb	r1, [r7, #3]
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff9b 	bl	8003ae4 <u8g_draw_vline>
  x+=w;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	70fb      	strb	r3, [r7, #3]
  x--;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	70fb      	strb	r3, [r7, #3]
  u8g_draw_vline(u8g, x, y, h);
 8003bbc:	7e3b      	ldrb	r3, [r7, #24]
 8003bbe:	78ba      	ldrb	r2, [r7, #2]
 8003bc0:	78f9      	ldrb	r1, [r7, #3]
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ff8e 	bl	8003ae4 <u8g_draw_vline>
  y+=h;
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	7e3b      	ldrb	r3, [r7, #24]
 8003bcc:	4413      	add	r3, r2
 8003bce:	70bb      	strb	r3, [r7, #2]
  y--;
 8003bd0:	78bb      	ldrb	r3, [r7, #2]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	70bb      	strb	r3, [r7, #2]
  u8g_draw_hline(u8g, xtmp, y, w);
 8003bd6:	787b      	ldrb	r3, [r7, #1]
 8003bd8:	78ba      	ldrb	r2, [r7, #2]
 8003bda:	7bf9      	ldrb	r1, [r7, #15]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ff43 	bl	8003a68 <u8g_draw_hline>
 8003be2:	e000      	b.n	8003be6 <u8g_DrawFrame+0x86>
    return;
 8003be4:	bf00      	nop
}
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	70fb      	strb	r3, [r7, #3]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	70bb      	strb	r3, [r7, #2]
 8003c02:	4613      	mov	r3, r2
 8003c04:	707b      	strb	r3, [r7, #1]
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
 8003c06:	787b      	ldrb	r3, [r7, #1]
 8003c08:	78ba      	ldrb	r2, [r7, #2]
 8003c0a:	78f9      	ldrb	r1, [r7, #3]
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff2b 	bl	8003a68 <u8g_draw_hline>
    y++;    
 8003c12:	78bb      	ldrb	r3, [r7, #2]
 8003c14:	3301      	adds	r3, #1
 8003c16:	70bb      	strb	r3, [r7, #2]
    h--;
 8003c18:	7c3b      	ldrb	r3, [r7, #16]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	743b      	strb	r3, [r7, #16]
  } while( h != 0 );
 8003c1e:	7c3b      	ldrb	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <u8g_draw_box+0x1a>
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c4a:	e003      	b.n	8003c54 <LoopCopyDataInit>

08003c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c52:	3104      	adds	r1, #4

08003c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c54:	480b      	ldr	r0, [pc, #44]	; (8003c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c5c:	d3f6      	bcc.n	8003c4c <CopyDataInit>
  ldr  r2, =_sbss
 8003c5e:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c60:	e002      	b.n	8003c68 <LoopFillZerobss>

08003c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c64:	f842 3b04 	str.w	r3, [r2], #4

08003c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c6c:	d3f9      	bcc.n	8003c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c6e:	f7fe fb99 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c72:	f003 fae1 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c76:	f7fd ff85 	bl	8001b84 <main>
  bx  lr    
 8003c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c7c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003c80:	0800f30c 	.word	0x0800f30c
  ldr  r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c88:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8003c8c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8003c90:	20000488 	.word	0x20000488

08003c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC_IRQHandler>
	...

08003c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <HAL_Init+0x40>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <HAL_Init+0x40>)
 8003ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_Init+0x40>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <HAL_Init+0x40>)
 8003cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_Init+0x40>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a07      	ldr	r2, [pc, #28]	; (8003cd8 <HAL_Init+0x40>)
 8003cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc0:	2003      	movs	r0, #3
 8003cc2:	f000 fd41 	bl	8004748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f000 f808 	bl	8003cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ccc:	f7fe fa4e 	bl	800216c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ce4:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_InitTick+0x54>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_InitTick+0x58>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fd59 	bl	80047b2 <HAL_SYSTICK_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00e      	b.n	8003d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d80a      	bhi.n	8003d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d10:	2200      	movs	r2, #0
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	f000 fd21 	bl	800475e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <HAL_InitTick+0x5c>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000004 	.word	0x20000004
 8003d34:	20000024 	.word	0x20000024
 8003d38:	20000020 	.word	0x20000020

08003d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_IncTick+0x20>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_IncTick+0x24>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <HAL_IncTick+0x24>)
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000024 	.word	0x20000024
 8003d60:	20000474 	.word	0x20000474

08003d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return uwTick;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_GetTick+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000474 	.word	0x20000474

08003d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d84:	f7ff ffee 	bl	8003d64 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d005      	beq.n	8003da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_Delay+0x44>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003da2:	bf00      	nop
 8003da4:	f7ff ffde 	bl	8003d64 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d8f7      	bhi.n	8003da4 <HAL_Delay+0x28>
  {
  }
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000024 	.word	0x20000024

08003dc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e033      	b.n	8003e42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd fcce 	bl	8001784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e0a:	f023 0302 	bic.w	r3, r3, #2
 8003e0e:	f043 0202 	orr.w	r2, r3, #2
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa48 	bl	80042ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
 8003e32:	e001      	b.n	8003e38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_ADC_Start_DMA+0x1e>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0ce      	b.n	8004008 <HAL_ADC_Start_DMA+0x1bc>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d018      	beq.n	8003eb2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e90:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <HAL_ADC_Start_DMA+0x1c4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a5f      	ldr	r2, [pc, #380]	; (8004014 <HAL_ADC_Start_DMA+0x1c8>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0c9a      	lsrs	r2, r3, #18
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	4413      	add	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ea4:	e002      	b.n	8003eac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f9      	bne.n	8003ea6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec0:	d107      	bne.n	8003ed2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ed0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 8086 	bne.w	8003fee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f20:	d106      	bne.n	8003f30 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f023 0206 	bic.w	r2, r3, #6
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f2e:	e002      	b.n	8003f36 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_ADC_Start_DMA+0x1cc>)
 8003f40:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4a35      	ldr	r2, [pc, #212]	; (800401c <HAL_ADC_Start_DMA+0x1d0>)
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_ADC_Start_DMA+0x1d4>)
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	4a33      	ldr	r2, [pc, #204]	; (8004024 <HAL_ADC_Start_DMA+0x1d8>)
 8003f58:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f72:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f82:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	334c      	adds	r3, #76	; 0x4c
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f000 fcc8 	bl	8004928 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10f      	bne.n	8003fc4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d129      	bne.n	8004006 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e020      	b.n	8004006 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <HAL_ADC_Start_DMA+0x1dc>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d11b      	bne.n	8004006 <HAL_ADC_Start_DMA+0x1ba>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d114      	bne.n	8004006 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fea:	609a      	str	r2, [r3, #8]
 8003fec:	e00b      	b.n	8004006 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0210 	orr.w	r2, r3, #16
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f043 0201 	orr.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000004 	.word	0x20000004
 8004014:	431bde83 	.word	0x431bde83
 8004018:	40012300 	.word	0x40012300
 800401c:	080044a5 	.word	0x080044a5
 8004020:	0800455f 	.word	0x0800455f
 8004024:	0800457b 	.word	0x0800457b
 8004028:	40012000 	.word	0x40012000

0800402c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x1c>
 8004080:	2302      	movs	r3, #2
 8004082:	e105      	b.n	8004290 <HAL_ADC_ConfigChannel+0x228>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b09      	cmp	r3, #9
 8004092:	d925      	bls.n	80040e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68d9      	ldr	r1, [r3, #12]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	2207      	movs	r2, #7
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43da      	mvns	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	400a      	ands	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	4603      	mov	r3, r0
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4403      	add	r3, r0
 80040d2:	3b1e      	subs	r3, #30
 80040d4:	409a      	lsls	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	e022      	b.n	8004126 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	4613      	mov	r3, r2
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	4413      	add	r3, r2
 80040f4:	2207      	movs	r2, #7
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6919      	ldr	r1, [r3, #16]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	4618      	mov	r0, r3
 8004116:	4603      	mov	r3, r0
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4403      	add	r3, r0
 800411c:	409a      	lsls	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b06      	cmp	r3, #6
 800412c:	d824      	bhi.n	8004178 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	3b05      	subs	r3, #5
 8004140:	221f      	movs	r2, #31
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	400a      	ands	r2, r1
 800414e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	b29b      	uxth	r3, r3
 800415c:	4618      	mov	r0, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	3b05      	subs	r3, #5
 800416a:	fa00 f203 	lsl.w	r2, r0, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	635a      	str	r2, [r3, #52]	; 0x34
 8004176:	e04c      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d824      	bhi.n	80041ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	3b23      	subs	r3, #35	; 0x23
 8004192:	221f      	movs	r2, #31
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43da      	mvns	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	400a      	ands	r2, r1
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	4618      	mov	r0, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	3b23      	subs	r3, #35	; 0x23
 80041bc:	fa00 f203 	lsl.w	r2, r0, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
 80041c8:	e023      	b.n	8004212 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	3b41      	subs	r3, #65	; 0x41
 80041dc:	221f      	movs	r2, #31
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43da      	mvns	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	400a      	ands	r2, r1
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	3b41      	subs	r3, #65	; 0x41
 8004206:	fa00 f203 	lsl.w	r2, r0, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_ADC_ConfigChannel+0x234>)
 8004214:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_ADC_ConfigChannel+0x238>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1cc>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b12      	cmp	r3, #18
 8004226:	d105      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <HAL_ADC_ConfigChannel+0x238>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d123      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d003      	beq.n	800424e <HAL_ADC_ConfigChannel+0x1e6>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b11      	cmp	r3, #17
 800424c:	d11b      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d111      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004262:	4b10      	ldr	r3, [pc, #64]	; (80042a4 <HAL_ADC_ConfigChannel+0x23c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a10      	ldr	r2, [pc, #64]	; (80042a8 <HAL_ADC_ConfigChannel+0x240>)
 8004268:	fba2 2303 	umull	r2, r3, r2, r3
 800426c:	0c9a      	lsrs	r2, r3, #18
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004278:	e002      	b.n	8004280 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3b01      	subs	r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f9      	bne.n	800427a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40012300 	.word	0x40012300
 80042a0:	40012000 	.word	0x40012000
 80042a4:	20000004 	.word	0x20000004
 80042a8:	431bde83 	.word	0x431bde83

080042ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b4:	4b79      	ldr	r3, [pc, #484]	; (800449c <ADC_Init+0x1f0>)
 80042b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a58      	ldr	r2, [pc, #352]	; (80044a0 <ADC_Init+0x1f4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	e00f      	b.n	80043aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0202 	bic.w	r2, r2, #2
 80043b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	3b01      	subs	r3, #1
 8004404:	035a      	lsls	r2, r3, #13
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e007      	b.n	8004420 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	3b01      	subs	r3, #1
 800443c:	051a      	lsls	r2, r3, #20
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004462:	025a      	lsls	r2, r3, #9
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	029a      	lsls	r2, r3, #10
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012300 	.word	0x40012300
 80044a0:	0f000001 	.word	0x0f000001

080044a4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d13c      	bne.n	8004538 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d12b      	bne.n	8004530 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d127      	bne.n	8004530 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d119      	bne.n	8004530 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0220 	bic.w	r2, r2, #32
 800450a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fd7b 	bl	800402c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004536:	e00e      	b.n	8004556 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff fd85 	bl	8004054 <HAL_ADC_ErrorCallback>
}
 800454a:	e004      	b.n	8004556 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fd67 	bl	8004040 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b084      	sub	sp, #16
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2240      	movs	r2, #64	; 0x40
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f043 0204 	orr.w	r2, r3, #4
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f7ff fd5a 	bl	8004054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c4:	4013      	ands	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	60d3      	str	r3, [r2, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <__NVIC_GetPriorityGrouping+0x18>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 0307 	and.w	r3, r3, #7
}
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db0b      	blt.n	8004636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	4907      	ldr	r1, [pc, #28]	; (8004644 <__NVIC_EnableIRQ+0x38>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2001      	movs	r0, #1
 800462e:	fa00 f202 	lsl.w	r2, r0, r2
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	; (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	; (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	bf28      	it	cs
 80046ba:	2304      	movcs	r3, #4
 80046bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d902      	bls.n	80046cc <NVIC_EncodePriority+0x30>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3b03      	subs	r3, #3
 80046ca:	e000      	b.n	80046ce <NVIC_EncodePriority+0x32>
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	401a      	ands	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e4:	f04f 31ff 	mov.w	r1, #4294967295
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	4313      	orrs	r3, r2
         );
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	; 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004714:	d301      	bcc.n	800471a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <SysTick_Config+0x40>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004722:	210f      	movs	r1, #15
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	f7ff ff8e 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <SysTick_Config+0x40>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <SysTick_Config+0x40>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	e000e010 	.word	0xe000e010

08004748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff29 	bl	80045a8 <__NVIC_SetPriorityGrouping>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004770:	f7ff ff3e 	bl	80045f0 <__NVIC_GetPriorityGrouping>
 8004774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	6978      	ldr	r0, [r7, #20]
 800477c:	f7ff ff8e 	bl	800469c <NVIC_EncodePriority>
 8004780:	4602      	mov	r2, r0
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff5d 	bl	8004648 <__NVIC_SetPriority>
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff31 	bl	800460c <__NVIC_EnableIRQ>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff ffa2 	bl	8004704 <SysTick_Config>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047d8:	f7ff fac4 	bl	8003d64 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e099      	b.n	800491c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004808:	e00f      	b.n	800482a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800480a:	f7ff faab 	bl	8003d64 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b05      	cmp	r3, #5
 8004816:	d908      	bls.n	800482a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2203      	movs	r2, #3
 8004822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e078      	b.n	800491c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e8      	bne.n	800480a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	4b38      	ldr	r3, [pc, #224]	; (8004924 <HAL_DMA_Init+0x158>)
 8004844:	4013      	ands	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	2b04      	cmp	r3, #4
 8004882:	d107      	bne.n	8004894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	4313      	orrs	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d117      	bne.n	80048ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fa6f 	bl	8004db4 <DMA_CheckFifoParam>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2240      	movs	r2, #64	; 0x40
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048ea:	2301      	movs	r3, #1
 80048ec:	e016      	b.n	800491c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa26 	bl	8004d48 <DMA_CalcBaseAndBitshift>
 80048fc:	4603      	mov	r3, r0
 80048fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	223f      	movs	r2, #63	; 0x3f
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	f010803f 	.word	0xf010803f

08004928 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_DMA_Start_IT+0x26>
 800494a:	2302      	movs	r3, #2
 800494c:	e040      	b.n	80049d0 <HAL_DMA_Start_IT+0xa8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b01      	cmp	r3, #1
 8004960:	d12f      	bne.n	80049c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2202      	movs	r2, #2
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f9b8 	bl	8004cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	223f      	movs	r2, #63	; 0x3f
 8004982:	409a      	lsls	r2, r3
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0216 	orr.w	r2, r2, #22
 8004996:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0208 	orr.w	r2, r2, #8
 80049ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	e005      	b.n	80049ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
 80049cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3718      	adds	r7, #24
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049e4:	4b92      	ldr	r3, [pc, #584]	; (8004c30 <HAL_DMA_IRQHandler+0x258>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a92      	ldr	r2, [pc, #584]	; (8004c34 <HAL_DMA_IRQHandler+0x25c>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	2208      	movs	r2, #8
 8004a04:	409a      	lsls	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01a      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0204 	bic.w	r2, r2, #4
 8004a2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	2208      	movs	r2, #8
 8004a32:	409a      	lsls	r2, r3
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d012      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f043 0202 	orr.w	r2, r3, #2
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	2204      	movs	r2, #4
 8004a80:	409a      	lsls	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d012      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa8:	f043 0204 	orr.w	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d043      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03c      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d024      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
 8004b06:	e01f      	b.n	8004b48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
 8004b18:	e016      	b.n	8004b48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d107      	bne.n	8004b38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0208 	bic.w	r2, r2, #8
 8004b36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 808e 	beq.w	8004c76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8086 	beq.w	8004c76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2220      	movs	r2, #32
 8004b70:	409a      	lsls	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b05      	cmp	r3, #5
 8004b80:	d136      	bne.n	8004bf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0216 	bic.w	r2, r2, #22
 8004b90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ba0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <HAL_DMA_IRQHandler+0x1da>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d007      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0208 	bic.w	r2, r2, #8
 8004bc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	223f      	movs	r2, #63	; 0x3f
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d07d      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
        }
        return;
 8004bee:	e078      	b.n	8004ce2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01c      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d108      	bne.n	8004c1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d030      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
 8004c1c:	e02b      	b.n	8004c76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d027      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	4798      	blx	r3
 8004c2e:	e022      	b.n	8004c76 <HAL_DMA_IRQHandler+0x29e>
 8004c30:	20000004 	.word	0x20000004
 8004c34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10f      	bne.n	8004c66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0210 	bic.w	r2, r2, #16
 8004c54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d032      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d022      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d307      	bcc.n	8004cbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f2      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x2ca>
 8004cbc:	e000      	b.n	8004cc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004cbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
 8004ce0:	e000      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ce2:	bf00      	nop
    }
  }
}
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop

08004cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b40      	cmp	r3, #64	; 0x40
 8004d18:	d108      	bne.n	8004d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d2a:	e007      	b.n	8004d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	3b10      	subs	r3, #16
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <DMA_CalcBaseAndBitshift+0x64>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d909      	bls.n	8004d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d7e:	f023 0303 	bic.w	r3, r3, #3
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	659a      	str	r2, [r3, #88]	; 0x58
 8004d88:	e007      	b.n	8004d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	aaaaaaab 	.word	0xaaaaaaab
 8004db0:	0800ef14 	.word	0x0800ef14

08004db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11f      	bne.n	8004e0e <DMA_CheckFifoParam+0x5a>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d856      	bhi.n	8004e82 <DMA_CheckFifoParam+0xce>
 8004dd4:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <DMA_CheckFifoParam+0x28>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08004dff 	.word	0x08004dff
 8004de4:	08004ded 	.word	0x08004ded
 8004de8:	08004e83 	.word	0x08004e83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d046      	beq.n	8004e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfc:	e043      	b.n	8004e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e06:	d140      	bne.n	8004e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0c:	e03d      	b.n	8004e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e16:	d121      	bne.n	8004e5c <DMA_CheckFifoParam+0xa8>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d837      	bhi.n	8004e8e <DMA_CheckFifoParam+0xda>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <DMA_CheckFifoParam+0x70>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e3b 	.word	0x08004e3b
 8004e2c:	08004e35 	.word	0x08004e35
 8004e30:	08004e4d 	.word	0x08004e4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	73fb      	strb	r3, [r7, #15]
      break;
 8004e38:	e030      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d025      	beq.n	8004e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4a:	e022      	b.n	8004e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e54:	d11f      	bne.n	8004e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e5a:	e01c      	b.n	8004e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d903      	bls.n	8004e6a <DMA_CheckFifoParam+0xb6>
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d003      	beq.n	8004e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e68:	e018      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e6e:	e015      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00e      	beq.n	8004e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e00b      	b.n	8004e9a <DMA_CheckFifoParam+0xe6>
      break;
 8004e82:	bf00      	nop
 8004e84:	e00a      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;
 8004e86:	bf00      	nop
 8004e88:	e008      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e006      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e004      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;
 8004e92:	bf00      	nop
 8004e94:	e002      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e96:	bf00      	nop
 8004e98:	e000      	b.n	8004e9c <DMA_CheckFifoParam+0xe8>
      break;
 8004e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop

08004eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b089      	sub	sp, #36	; 0x24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	e159      	b.n	800517c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ec8:	2201      	movs	r2, #1
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	f040 8148 	bne.w	8005176 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d005      	beq.n	8004efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d130      	bne.n	8004f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	2203      	movs	r2, #3
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4013      	ands	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f34:	2201      	movs	r2, #1
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 0201 	and.w	r2, r3, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d017      	beq.n	8004f9c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	2203      	movs	r2, #3
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d123      	bne.n	8004ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	08da      	lsrs	r2, r3, #3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3208      	adds	r2, #8
 8004fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	220f      	movs	r2, #15
 8004fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc4:	43db      	mvns	r3, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	08da      	lsrs	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3208      	adds	r2, #8
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0203 	and.w	r2, r3, #3
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a2 	beq.w	8005176 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	4b57      	ldr	r3, [pc, #348]	; (8005194 <HAL_GPIO_Init+0x2e8>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	4a56      	ldr	r2, [pc, #344]	; (8005194 <HAL_GPIO_Init+0x2e8>)
 800503c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005040:	6453      	str	r3, [r2, #68]	; 0x44
 8005042:	4b54      	ldr	r3, [pc, #336]	; (8005194 <HAL_GPIO_Init+0x2e8>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800504e:	4a52      	ldr	r2, [pc, #328]	; (8005198 <HAL_GPIO_Init+0x2ec>)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	3302      	adds	r3, #2
 8005056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	220f      	movs	r2, #15
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a49      	ldr	r2, [pc, #292]	; (800519c <HAL_GPIO_Init+0x2f0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d019      	beq.n	80050ae <HAL_GPIO_Init+0x202>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a48      	ldr	r2, [pc, #288]	; (80051a0 <HAL_GPIO_Init+0x2f4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <HAL_GPIO_Init+0x1fe>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a47      	ldr	r2, [pc, #284]	; (80051a4 <HAL_GPIO_Init+0x2f8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00d      	beq.n	80050a6 <HAL_GPIO_Init+0x1fa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a46      	ldr	r2, [pc, #280]	; (80051a8 <HAL_GPIO_Init+0x2fc>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d007      	beq.n	80050a2 <HAL_GPIO_Init+0x1f6>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a45      	ldr	r2, [pc, #276]	; (80051ac <HAL_GPIO_Init+0x300>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_GPIO_Init+0x1f2>
 800509a:	2304      	movs	r3, #4
 800509c:	e008      	b.n	80050b0 <HAL_GPIO_Init+0x204>
 800509e:	2307      	movs	r3, #7
 80050a0:	e006      	b.n	80050b0 <HAL_GPIO_Init+0x204>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e004      	b.n	80050b0 <HAL_GPIO_Init+0x204>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e002      	b.n	80050b0 <HAL_GPIO_Init+0x204>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <HAL_GPIO_Init+0x204>
 80050ae:	2300      	movs	r3, #0
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	f002 0203 	and.w	r2, r2, #3
 80050b6:	0092      	lsls	r2, r2, #2
 80050b8:	4093      	lsls	r3, r2
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050c0:	4935      	ldr	r1, [pc, #212]	; (8005198 <HAL_GPIO_Init+0x2ec>)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	3302      	adds	r3, #2
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050ce:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <HAL_GPIO_Init+0x304>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050f2:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_GPIO_Init+0x304>)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050f8:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_GPIO_Init+0x304>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <HAL_GPIO_Init+0x304>)
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <HAL_GPIO_Init+0x304>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	43db      	mvns	r3, r3
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4013      	ands	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005146:	4a1a      	ldr	r2, [pc, #104]	; (80051b0 <HAL_GPIO_Init+0x304>)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800514c:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <HAL_GPIO_Init+0x304>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005170:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <HAL_GPIO_Init+0x304>)
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b0f      	cmp	r3, #15
 8005180:	f67f aea2 	bls.w	8004ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	3724      	adds	r7, #36	; 0x24
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800
 8005198:	40013800 	.word	0x40013800
 800519c:	40020000 	.word	0x40020000
 80051a0:	40020400 	.word	0x40020400
 80051a4:	40020800 	.word	0x40020800
 80051a8:	40020c00 	.word	0x40020c00
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40013c00 	.word	0x40013c00

080051b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d002      	beq.n	80051d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e001      	b.n	80051d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
 80051f0:	4613      	mov	r3, r2
 80051f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f4:	787b      	ldrb	r3, [r7, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fa:	887a      	ldrh	r2, [r7, #2]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005200:	e003      	b.n	800520a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	041a      	lsls	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	619a      	str	r2, [r3, #24]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d006      	beq.n	800523c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800522e:	4a05      	ldr	r2, [pc, #20]	; (8005244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb ff8e 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40013c00 	.word	0x40013c00

08005248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e12b      	b.n	80054b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fc fc0c 	bl	8001a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2224      	movs	r2, #36	; 0x24
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0201 	bic.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800529a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052ac:	f001 f862 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 80052b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	4a81      	ldr	r2, [pc, #516]	; (80054bc <HAL_I2C_Init+0x274>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d807      	bhi.n	80052cc <HAL_I2C_Init+0x84>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a80      	ldr	r2, [pc, #512]	; (80054c0 <HAL_I2C_Init+0x278>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bf94      	ite	ls
 80052c4:	2301      	movls	r3, #1
 80052c6:	2300      	movhi	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e006      	b.n	80052da <HAL_I2C_Init+0x92>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a7d      	ldr	r2, [pc, #500]	; (80054c4 <HAL_I2C_Init+0x27c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bf94      	ite	ls
 80052d4:	2301      	movls	r3, #1
 80052d6:	2300      	movhi	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0e7      	b.n	80054b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a78      	ldr	r2, [pc, #480]	; (80054c8 <HAL_I2C_Init+0x280>)
 80052e6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ea:	0c9b      	lsrs	r3, r3, #18
 80052ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4a6a      	ldr	r2, [pc, #424]	; (80054bc <HAL_I2C_Init+0x274>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d802      	bhi.n	800531c <HAL_I2C_Init+0xd4>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	3301      	adds	r3, #1
 800531a:	e009      	b.n	8005330 <HAL_I2C_Init+0xe8>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	4a69      	ldr	r2, [pc, #420]	; (80054cc <HAL_I2C_Init+0x284>)
 8005328:	fba2 2303 	umull	r2, r3, r2, r3
 800532c:	099b      	lsrs	r3, r3, #6
 800532e:	3301      	adds	r3, #1
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	430b      	orrs	r3, r1
 8005336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	495c      	ldr	r1, [pc, #368]	; (80054bc <HAL_I2C_Init+0x274>)
 800534c:	428b      	cmp	r3, r1
 800534e:	d819      	bhi.n	8005384 <HAL_I2C_Init+0x13c>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e59      	subs	r1, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	fbb1 f3f3 	udiv	r3, r1, r3
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005364:	400b      	ands	r3, r1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_I2C_Init+0x138>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1e59      	subs	r1, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	fbb1 f3f3 	udiv	r3, r1, r3
 8005378:	3301      	adds	r3, #1
 800537a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537e:	e051      	b.n	8005424 <HAL_I2C_Init+0x1dc>
 8005380:	2304      	movs	r3, #4
 8005382:	e04f      	b.n	8005424 <HAL_I2C_Init+0x1dc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d111      	bne.n	80053b0 <HAL_I2C_Init+0x168>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	1e58      	subs	r0, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	440b      	add	r3, r1
 800539a:	fbb0 f3f3 	udiv	r3, r0, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e012      	b.n	80053d6 <HAL_I2C_Init+0x18e>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e58      	subs	r0, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	0099      	lsls	r1, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Init+0x196>
 80053da:	2301      	movs	r3, #1
 80053dc:	e022      	b.n	8005424 <HAL_I2C_Init+0x1dc>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10e      	bne.n	8005404 <HAL_I2C_Init+0x1bc>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1e58      	subs	r0, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6859      	ldr	r1, [r3, #4]
 80053ee:	460b      	mov	r3, r1
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	440b      	add	r3, r1
 80053f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80053f8:	3301      	adds	r3, #1
 80053fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005402:	e00f      	b.n	8005424 <HAL_I2C_Init+0x1dc>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1e58      	subs	r0, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6859      	ldr	r1, [r3, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	0099      	lsls	r1, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	fbb0 f3f3 	udiv	r3, r0, r3
 800541a:	3301      	adds	r3, #1
 800541c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	6809      	ldr	r1, [r1, #0]
 8005428:	4313      	orrs	r3, r2
 800542a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6911      	ldr	r1, [r2, #16]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	68d2      	ldr	r2, [r2, #12]
 800545e:	4311      	orrs	r1, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	430b      	orrs	r3, r1
 8005466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	000186a0 	.word	0x000186a0
 80054c0:	001e847f 	.word	0x001e847f
 80054c4:	003d08ff 	.word	0x003d08ff
 80054c8:	431bde83 	.word	0x431bde83
 80054cc:	10624dd3 	.word	0x10624dd3

080054d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	607a      	str	r2, [r7, #4]
 80054da:	461a      	mov	r2, r3
 80054dc:	460b      	mov	r3, r1
 80054de:	817b      	strh	r3, [r7, #10]
 80054e0:	4613      	mov	r3, r2
 80054e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7fe fc3e 	bl	8003d64 <HAL_GetTick>
 80054e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	f040 80e0 	bne.w	80056b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2319      	movs	r3, #25
 80054fe:	2201      	movs	r2, #1
 8005500:	4970      	ldr	r1, [pc, #448]	; (80056c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f964 	bl	80057d0 <I2C_WaitOnFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800550e:	2302      	movs	r3, #2
 8005510:	e0d3      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_I2C_Master_Transmit+0x50>
 800551c:	2302      	movs	r3, #2
 800551e:	e0cc      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d007      	beq.n	8005546 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005554:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2221      	movs	r2, #33	; 0x21
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2210      	movs	r2, #16
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	893a      	ldrh	r2, [r7, #8]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a50      	ldr	r2, [pc, #320]	; (80056c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005586:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005588:	8979      	ldrh	r1, [r7, #10]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	6a3a      	ldr	r2, [r7, #32]
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f89c 	bl	80056cc <I2C_MasterRequestWrite>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e08d      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	613b      	str	r3, [r7, #16]
 80055b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055b4:	e066      	b.n	8005684 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6a39      	ldr	r1, [r7, #32]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f9de 	bl	800597c <I2C_WaitOnTXEFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d107      	bne.n	80055de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e06b      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b04      	cmp	r3, #4
 800561e:	d11b      	bne.n	8005658 <HAL_I2C_Master_Transmit+0x188>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	6a39      	ldr	r1, [r7, #32]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f9ce 	bl	80059fe <I2C_WaitOnBTFFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b04      	cmp	r3, #4
 800566e:	d107      	bne.n	8005680 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e01a      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005688:	2b00      	cmp	r3, #0
 800568a:	d194      	bne.n	80055b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	00100002 	.word	0x00100002
 80056c8:	ffff0000 	.word	0xffff0000

080056cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	460b      	mov	r3, r1
 80056da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2b08      	cmp	r3, #8
 80056e6:	d006      	beq.n	80056f6 <I2C_MasterRequestWrite+0x2a>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d003      	beq.n	80056f6 <I2C_MasterRequestWrite+0x2a>
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056f4:	d108      	bne.n	8005708 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e00b      	b.n	8005720 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b12      	cmp	r3, #18
 800570e:	d107      	bne.n	8005720 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800571e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f84f 	bl	80057d0 <I2C_WaitOnFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00d      	beq.n	8005754 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d103      	bne.n	8005750 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e035      	b.n	80057c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575c:	d108      	bne.n	8005770 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800575e:	897b      	ldrh	r3, [r7, #10]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	e01b      	b.n	80057a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005770:	897b      	ldrh	r3, [r7, #10]
 8005772:	11db      	asrs	r3, r3, #7
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 0306 	and.w	r3, r3, #6
 800577a:	b2db      	uxtb	r3, r3
 800577c:	f063 030f 	orn	r3, r3, #15
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	490e      	ldr	r1, [pc, #56]	; (80057c8 <I2C_MasterRequestWrite+0xfc>)
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f875 	bl	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e010      	b.n	80057c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	4907      	ldr	r1, [pc, #28]	; (80057cc <I2C_MasterRequestWrite+0x100>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f865 	bl	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	00010008 	.word	0x00010008
 80057cc:	00010002 	.word	0x00010002

080057d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057e0:	e025      	b.n	800582e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d021      	beq.n	800582e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fabb 	bl	8003d64 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d116      	bne.n	800582e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e023      	b.n	8005876 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10d      	bne.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf0c      	ite	eq
 800584a:	2301      	moveq	r3, #1
 800584c:	2300      	movne	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	461a      	mov	r2, r3
 8005852:	e00c      	b.n	800586e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	43da      	mvns	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4013      	ands	r3, r2
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf0c      	ite	eq
 8005866:	2301      	moveq	r3, #1
 8005868:	2300      	movne	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	429a      	cmp	r2, r3
 8005872:	d0b6      	beq.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800588c:	e051      	b.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d123      	bne.n	80058e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f043 0204 	orr.w	r2, r3, #4
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e046      	b.n	8005974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d021      	beq.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fe fa39 	bl	8003d64 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d116      	bne.n	8005932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e020      	b.n	8005974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10c      	bne.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	43da      	mvns	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4013      	ands	r3, r2
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e00b      	b.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	43da      	mvns	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	4013      	ands	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf14      	ite	ne
 8005968:	2301      	movne	r3, #1
 800596a:	2300      	moveq	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d18d      	bne.n	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005988:	e02d      	b.n	80059e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f878 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e02d      	b.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d021      	beq.n	80059e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a2:	f7fe f9df 	bl	8003d64 <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d302      	bcc.n	80059b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d116      	bne.n	80059e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e007      	b.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d1ca      	bne.n	800598a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a0a:	e02d      	b.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f837 	bl	8005a80 <I2C_IsAcknowledgeFailed>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e02d      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d021      	beq.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a24:	f7fe f99e 	bl	8003d64 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d302      	bcc.n	8005a3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d116      	bne.n	8005a68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e007      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d1ca      	bne.n	8005a0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a96:	d11b      	bne.n	8005ad0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e264      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d075      	beq.n	8005bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005afe:	4ba3      	ldr	r3, [pc, #652]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d00c      	beq.n	8005b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b0a:	4ba0      	ldr	r3, [pc, #640]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d112      	bne.n	8005b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b16:	4b9d      	ldr	r3, [pc, #628]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b22:	d10b      	bne.n	8005b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b24:	4b99      	ldr	r3, [pc, #612]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d05b      	beq.n	8005be8 <HAL_RCC_OscConfig+0x108>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d157      	bne.n	8005be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e23f      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b44:	d106      	bne.n	8005b54 <HAL_RCC_OscConfig+0x74>
 8005b46:	4b91      	ldr	r3, [pc, #580]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a90      	ldr	r2, [pc, #576]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	e01d      	b.n	8005b90 <HAL_RCC_OscConfig+0xb0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x98>
 8005b5e:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a8a      	ldr	r2, [pc, #552]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	4b88      	ldr	r3, [pc, #544]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a87      	ldr	r2, [pc, #540]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0xb0>
 8005b78:	4b84      	ldr	r3, [pc, #528]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a83      	ldr	r2, [pc, #524]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a80      	ldr	r2, [pc, #512]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d013      	beq.n	8005bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b98:	f7fe f8e4 	bl	8003d64 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ba0:	f7fe f8e0 	bl	8003d64 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b64      	cmp	r3, #100	; 0x64
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e204      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bb2:	4b76      	ldr	r3, [pc, #472]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0xc0>
 8005bbe:	e014      	b.n	8005bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc0:	f7fe f8d0 	bl	8003d64 <HAL_GetTick>
 8005bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bc8:	f7fe f8cc 	bl	8003d64 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b64      	cmp	r3, #100	; 0x64
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e1f0      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bda:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0xe8>
 8005be6:	e000      	b.n	8005bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d063      	beq.n	8005cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bf6:	4b65      	ldr	r3, [pc, #404]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 030c 	and.w	r3, r3, #12
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c02:	4b62      	ldr	r3, [pc, #392]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d11c      	bne.n	8005c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d116      	bne.n	8005c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c1a:	4b5c      	ldr	r3, [pc, #368]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_RCC_OscConfig+0x152>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e1c4      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c32:	4b56      	ldr	r3, [pc, #344]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4952      	ldr	r1, [pc, #328]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c46:	e03a      	b.n	8005cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d020      	beq.n	8005c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c50:	4b4f      	ldr	r3, [pc, #316]	; (8005d90 <HAL_RCC_OscConfig+0x2b0>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fe f885 	bl	8003d64 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fe f881 	bl	8003d64 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e1a5      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c70:	4b46      	ldr	r3, [pc, #280]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b43      	ldr	r3, [pc, #268]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4940      	ldr	r1, [pc, #256]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	600b      	str	r3, [r1, #0]
 8005c90:	e015      	b.n	8005cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c92:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <HAL_RCC_OscConfig+0x2b0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c98:	f7fe f864 	bl	8003d64 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9e:	e008      	b.n	8005cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca0:	f7fe f860 	bl	8003d64 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e184      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cb2:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d030      	beq.n	8005d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d016      	beq.n	8005d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd2:	4b30      	ldr	r3, [pc, #192]	; (8005d94 <HAL_RCC_OscConfig+0x2b4>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd8:	f7fe f844 	bl	8003d64 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ce0:	f7fe f840 	bl	8003d64 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e164      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x200>
 8005cfe:	e015      	b.n	8005d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d00:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_RCC_OscConfig+0x2b4>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d06:	f7fe f82d 	bl	8003d64 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d0e:	f7fe f829 	bl	8003d64 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e14d      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a0 	beq.w	8005e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	4a0e      	ldr	r2, [pc, #56]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d58:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_OscConfig+0x2b8>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d121      	bne.n	8005dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <HAL_RCC_OscConfig+0x2b8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <HAL_RCC_OscConfig+0x2b8>)
 8005d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d82:	f7fd ffef 	bl	8003d64 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d88:	e011      	b.n	8005dae <HAL_RCC_OscConfig+0x2ce>
 8005d8a:	bf00      	nop
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	42470000 	.word	0x42470000
 8005d94:	42470e80 	.word	0x42470e80
 8005d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d9c:	f7fd ffe2 	bl	8003d64 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e106      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dae:	4b85      	ldr	r3, [pc, #532]	; (8005fc4 <HAL_RCC_OscConfig+0x4e4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d106      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x2f0>
 8005dc2:	4b81      	ldr	r3, [pc, #516]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	4a80      	ldr	r2, [pc, #512]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dce:	e01c      	b.n	8005e0a <HAL_RCC_OscConfig+0x32a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	d10c      	bne.n	8005df2 <HAL_RCC_OscConfig+0x312>
 8005dd8:	4b7b      	ldr	r3, [pc, #492]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	4a7a      	ldr	r2, [pc, #488]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005dde:	f043 0304 	orr.w	r3, r3, #4
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70
 8005de4:	4b78      	ldr	r3, [pc, #480]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4a77      	ldr	r2, [pc, #476]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
 8005df0:	e00b      	b.n	8005e0a <HAL_RCC_OscConfig+0x32a>
 8005df2:	4b75      	ldr	r3, [pc, #468]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	4a74      	ldr	r2, [pc, #464]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dfe:	4b72      	ldr	r3, [pc, #456]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a71      	ldr	r2, [pc, #452]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d015      	beq.n	8005e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e12:	f7fd ffa7 	bl	8003d64 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fd ffa3 	bl	8003d64 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0c5      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e30:	4b65      	ldr	r3, [pc, #404]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ee      	beq.n	8005e1a <HAL_RCC_OscConfig+0x33a>
 8005e3c:	e014      	b.n	8005e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e3e:	f7fd ff91 	bl	8003d64 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e46:	f7fd ff8d 	bl	8003d64 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e0af      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ee      	bne.n	8005e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d105      	bne.n	8005e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e6e:	4b56      	ldr	r3, [pc, #344]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	4a55      	ldr	r2, [pc, #340]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 809b 	beq.w	8005fba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e84:	4b50      	ldr	r3, [pc, #320]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 030c 	and.w	r3, r3, #12
 8005e8c:	2b08      	cmp	r3, #8
 8005e8e:	d05c      	beq.n	8005f4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d141      	bne.n	8005f1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e98:	4b4c      	ldr	r3, [pc, #304]	; (8005fcc <HAL_RCC_OscConfig+0x4ec>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fd ff61 	bl	8003d64 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd ff5d 	bl	8003d64 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e081      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eb8:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1f0      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	019b      	lsls	r3, r3, #6
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	3b01      	subs	r3, #1
 8005ede:	041b      	lsls	r3, r3, #16
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	061b      	lsls	r3, r3, #24
 8005ee8:	4937      	ldr	r1, [pc, #220]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <HAL_RCC_OscConfig+0x4ec>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef4:	f7fd ff36 	bl	8003d64 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efc:	f7fd ff32 	bl	8003d64 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e056      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0e:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x41c>
 8005f1a:	e04e      	b.n	8005fba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_RCC_OscConfig+0x4ec>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fd ff1f 	bl	8003d64 <HAL_GetTick>
 8005f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f28:	e008      	b.n	8005f3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f2a:	f7fd ff1b 	bl	8003d64 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e03f      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f3c:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <HAL_RCC_OscConfig+0x44a>
 8005f48:	e037      	b.n	8005fba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e032      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f56:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <HAL_RCC_OscConfig+0x4e8>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d028      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d121      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d11a      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f86:	4013      	ands	r3, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d111      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d001      	beq.n	8005fba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40007000 	.word	0x40007000
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	42470060 	.word	0x42470060

08005fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0cc      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b68      	ldr	r3, [pc, #416]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d90c      	bls.n	800600c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b65      	ldr	r3, [pc, #404]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	4b63      	ldr	r3, [pc, #396]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0b8      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006024:	4b59      	ldr	r3, [pc, #356]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a58      	ldr	r2, [pc, #352]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800602e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	2b00      	cmp	r3, #0
 800603a:	d005      	beq.n	8006048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800603c:	4b53      	ldr	r3, [pc, #332]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	4a52      	ldr	r2, [pc, #328]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006048:	4b50      	ldr	r3, [pc, #320]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	494d      	ldr	r1, [pc, #308]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	4313      	orrs	r3, r2
 8006058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d044      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d119      	bne.n	80060ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e07f      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d003      	beq.n	800608e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800608a:	2b03      	cmp	r3, #3
 800608c:	d107      	bne.n	800609e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608e:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e06f      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800609e:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e067      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ae:	4b37      	ldr	r3, [pc, #220]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 0203 	bic.w	r2, r3, #3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4934      	ldr	r1, [pc, #208]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060c0:	f7fd fe50 	bl	8003d64 <HAL_GetTick>
 80060c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c6:	e00a      	b.n	80060de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060c8:	f7fd fe4c 	bl	8003d64 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e04f      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060de:	4b2b      	ldr	r3, [pc, #172]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 020c 	and.w	r2, r3, #12
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d1eb      	bne.n	80060c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060f0:	4b25      	ldr	r3, [pc, #148]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d20c      	bcs.n	8006118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060fe:	4b22      	ldr	r3, [pc, #136]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	4b20      	ldr	r3, [pc, #128]	; (8006188 <HAL_RCC_ClockConfig+0x1b8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	429a      	cmp	r2, r3
 8006112:	d001      	beq.n	8006118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e032      	b.n	800617e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006124:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4916      	ldr	r1, [pc, #88]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0308 	and.w	r3, r3, #8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006142:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	490e      	ldr	r1, [pc, #56]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	4313      	orrs	r3, r2
 8006154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006156:	f000 f821 	bl	800619c <HAL_RCC_GetSysClockFreq>
 800615a:	4602      	mov	r2, r0
 800615c:	4b0b      	ldr	r3, [pc, #44]	; (800618c <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	490a      	ldr	r1, [pc, #40]	; (8006190 <HAL_RCC_ClockConfig+0x1c0>)
 8006168:	5ccb      	ldrb	r3, [r1, r3]
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <HAL_RCC_ClockConfig+0x1c4>)
 8006170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <HAL_RCC_ClockConfig+0x1c8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7fd fdb0 	bl	8003cdc <HAL_InitTick>

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3710      	adds	r7, #16
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40023c00 	.word	0x40023c00
 800618c:	40023800 	.word	0x40023800
 8006190:	0800a1b4 	.word	0x0800a1b4
 8006194:	20000004 	.word	0x20000004
 8006198:	20000020 	.word	0x20000020

0800619c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800619c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	2300      	movs	r3, #0
 80061ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061b4:	4b67      	ldr	r3, [pc, #412]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 030c 	and.w	r3, r3, #12
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d00d      	beq.n	80061dc <HAL_RCC_GetSysClockFreq+0x40>
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	f200 80bd 	bhi.w	8006340 <HAL_RCC_GetSysClockFreq+0x1a4>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x34>
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d003      	beq.n	80061d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ce:	e0b7      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061d0:	4b61      	ldr	r3, [pc, #388]	; (8006358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061d2:	60bb      	str	r3, [r7, #8]
       break;
 80061d4:	e0b7      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061d6:	4b60      	ldr	r3, [pc, #384]	; (8006358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061d8:	60bb      	str	r3, [r7, #8]
      break;
 80061da:	e0b4      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061dc:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061e6:	4b5b      	ldr	r3, [pc, #364]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d04d      	beq.n	800628e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f2:	4b58      	ldr	r3, [pc, #352]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	461a      	mov	r2, r3
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	ea02 0800 	and.w	r8, r2, r0
 800620a:	ea03 0901 	and.w	r9, r3, r1
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	014b      	lsls	r3, r1, #5
 800621c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006220:	0142      	lsls	r2, r0, #5
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	ebb0 0008 	subs.w	r0, r0, r8
 800622a:	eb61 0109 	sbc.w	r1, r1, r9
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	018b      	lsls	r3, r1, #6
 8006238:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800623c:	0182      	lsls	r2, r0, #6
 800623e:	1a12      	subs	r2, r2, r0
 8006240:	eb63 0301 	sbc.w	r3, r3, r1
 8006244:	f04f 0000 	mov.w	r0, #0
 8006248:	f04f 0100 	mov.w	r1, #0
 800624c:	00d9      	lsls	r1, r3, #3
 800624e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006252:	00d0      	lsls	r0, r2, #3
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	eb12 0208 	adds.w	r2, r2, r8
 800625c:	eb43 0309 	adc.w	r3, r3, r9
 8006260:	f04f 0000 	mov.w	r0, #0
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	0299      	lsls	r1, r3, #10
 800626a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800626e:	0290      	lsls	r0, r2, #10
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4610      	mov	r0, r2
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	f7fa fcea 	bl	8000c58 <__aeabi_uldivmod>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4613      	mov	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e04a      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	099b      	lsrs	r3, r3, #6
 8006294:	461a      	mov	r2, r3
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800629e:	f04f 0100 	mov.w	r1, #0
 80062a2:	ea02 0400 	and.w	r4, r2, r0
 80062a6:	ea03 0501 	and.w	r5, r3, r1
 80062aa:	4620      	mov	r0, r4
 80062ac:	4629      	mov	r1, r5
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	014b      	lsls	r3, r1, #5
 80062b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062bc:	0142      	lsls	r2, r0, #5
 80062be:	4610      	mov	r0, r2
 80062c0:	4619      	mov	r1, r3
 80062c2:	1b00      	subs	r0, r0, r4
 80062c4:	eb61 0105 	sbc.w	r1, r1, r5
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	018b      	lsls	r3, r1, #6
 80062d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062d6:	0182      	lsls	r2, r0, #6
 80062d8:	1a12      	subs	r2, r2, r0
 80062da:	eb63 0301 	sbc.w	r3, r3, r1
 80062de:	f04f 0000 	mov.w	r0, #0
 80062e2:	f04f 0100 	mov.w	r1, #0
 80062e6:	00d9      	lsls	r1, r3, #3
 80062e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ec:	00d0      	lsls	r0, r2, #3
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	1912      	adds	r2, r2, r4
 80062f4:	eb45 0303 	adc.w	r3, r5, r3
 80062f8:	f04f 0000 	mov.w	r0, #0
 80062fc:	f04f 0100 	mov.w	r1, #0
 8006300:	0299      	lsls	r1, r3, #10
 8006302:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006306:	0290      	lsls	r0, r2, #10
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
 800630c:	4610      	mov	r0, r2
 800630e:	4619      	mov	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	461a      	mov	r2, r3
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	f7fa fc9e 	bl	8000c58 <__aeabi_uldivmod>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4613      	mov	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006324:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	0c1b      	lsrs	r3, r3, #16
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	3301      	adds	r3, #1
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	fbb2 f3f3 	udiv	r3, r2, r3
 800633c:	60bb      	str	r3, [r7, #8]
      break;
 800633e:	e002      	b.n	8006346 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006342:	60bb      	str	r3, [r7, #8]
      break;
 8006344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006346:	68bb      	ldr	r3, [r7, #8]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006352:	bf00      	nop
 8006354:	40023800 	.word	0x40023800
 8006358:	00f42400 	.word	0x00f42400

0800635c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <HAL_RCC_GetHCLKFreq+0x14>)
 8006362:	681b      	ldr	r3, [r3, #0]
}
 8006364:	4618      	mov	r0, r3
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20000004 	.word	0x20000004

08006374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006378:	f7ff fff0 	bl	800635c <HAL_RCC_GetHCLKFreq>
 800637c:	4602      	mov	r2, r0
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	0a9b      	lsrs	r3, r3, #10
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	4903      	ldr	r1, [pc, #12]	; (8006398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800638a:	5ccb      	ldrb	r3, [r1, r3]
 800638c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006390:	4618      	mov	r0, r3
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40023800 	.word	0x40023800
 8006398:	0800a1c4 	.word	0x0800a1c4

0800639c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063a0:	f7ff ffdc 	bl	800635c <HAL_RCC_GetHCLKFreq>
 80063a4:	4602      	mov	r2, r0
 80063a6:	4b05      	ldr	r3, [pc, #20]	; (80063bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	0b5b      	lsrs	r3, r3, #13
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	4903      	ldr	r1, [pc, #12]	; (80063c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063b2:	5ccb      	ldrb	r3, [r1, r3]
 80063b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40023800 	.word	0x40023800
 80063c0:	0800a1c4 	.word	0x0800a1c4

080063c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e041      	b.n	800645a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fc f840 	bl	8002470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 fa84 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	d001      	beq.n	800647c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e044      	b.n	8006506 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <HAL_TIM_Base_Start_IT+0xb0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x6c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a6:	d013      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x6c>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <HAL_TIM_Base_Start_IT+0xb4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x6c>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a19      	ldr	r2, [pc, #100]	; (800651c <HAL_TIM_Base_Start_IT+0xb8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x6c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a17      	ldr	r2, [pc, #92]	; (8006520 <HAL_TIM_Base_Start_IT+0xbc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_TIM_Base_Start_IT+0x6c>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a16      	ldr	r2, [pc, #88]	; (8006524 <HAL_TIM_Base_Start_IT+0xc0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d111      	bne.n	80064f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b06      	cmp	r3, #6
 80064e0:	d010      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f042 0201 	orr.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f2:	e007      	b.n	8006504 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40010000 	.word	0x40010000
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000

08006528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0202 	mvn.w	r2, #2
 8006554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9b2 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9a4 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f9b5 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b04      	cmp	r3, #4
 8006590:	d122      	bne.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b04      	cmp	r3, #4
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0204 	mvn.w	r2, #4
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f988 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f97a 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f98b 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d122      	bne.n	800662c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d11b      	bne.n	800662c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0208 	mvn.w	r2, #8
 80065fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2204      	movs	r2, #4
 8006602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f95e 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f950 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f961 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b10      	cmp	r3, #16
 8006638:	d122      	bne.n	8006680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b10      	cmp	r3, #16
 8006646:	d11b      	bne.n	8006680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0210 	mvn.w	r2, #16
 8006650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2208      	movs	r2, #8
 8006656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f934 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 800666c:	e005      	b.n	800667a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f926 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f937 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d10e      	bne.n	80066ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0201 	mvn.w	r2, #1
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fa fd42 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d10e      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d107      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 faae 	bl	8006c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d10e      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8fc 	bl	80068fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b20      	cmp	r3, #32
 8006710:	d10e      	bne.n	8006730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d107      	bne.n	8006730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0220 	mvn.w	r2, #32
 8006728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa78 	bl	8006c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_TIM_ConfigClockSource+0x18>
 800674c:	2302      	movs	r3, #2
 800674e:	e0b3      	b.n	80068b8 <HAL_TIM_ConfigClockSource+0x180>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800676e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006788:	d03e      	beq.n	8006808 <HAL_TIM_ConfigClockSource+0xd0>
 800678a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678e:	f200 8087 	bhi.w	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	f000 8085 	beq.w	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d87f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067a0:	2b70      	cmp	r3, #112	; 0x70
 80067a2:	d01a      	beq.n	80067da <HAL_TIM_ConfigClockSource+0xa2>
 80067a4:	2b70      	cmp	r3, #112	; 0x70
 80067a6:	d87b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067a8:	2b60      	cmp	r3, #96	; 0x60
 80067aa:	d050      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x116>
 80067ac:	2b60      	cmp	r3, #96	; 0x60
 80067ae:	d877      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d03c      	beq.n	800682e <HAL_TIM_ConfigClockSource+0xf6>
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d873      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d058      	beq.n	800686e <HAL_TIM_ConfigClockSource+0x136>
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d86f      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067c0:	2b30      	cmp	r3, #48	; 0x30
 80067c2:	d064      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067c4:	2b30      	cmp	r3, #48	; 0x30
 80067c6:	d86b      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d060      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d867      	bhi.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d05c      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
 80067d4:	2b10      	cmp	r3, #16
 80067d6:	d05a      	beq.n	800688e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067d8:	e062      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	6899      	ldr	r1, [r3, #8]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f000 f98b 	bl	8006b04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	609a      	str	r2, [r3, #8]
      break;
 8006806:	e04e      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6899      	ldr	r1, [r3, #8]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 f974 	bl	8006b04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682a:	609a      	str	r2, [r3, #8]
      break;
 800682c:	e03b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	461a      	mov	r2, r3
 800683c:	f000 f8e8 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2150      	movs	r1, #80	; 0x50
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f941 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800684c:	e02b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	461a      	mov	r2, r3
 800685c:	f000 f907 	bl	8006a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2160      	movs	r1, #96	; 0x60
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f931 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800686c:	e01b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6818      	ldr	r0, [r3, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6859      	ldr	r1, [r3, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	461a      	mov	r2, r3
 800687c:	f000 f8c8 	bl	8006a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f921 	bl	8006ace <TIM_ITRx_SetConfig>
      break;
 800688c:	e00b      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f000 f918 	bl	8006ace <TIM_ITRx_SetConfig>
        break;
 800689e:	e002      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80068a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a34      	ldr	r2, [pc, #208]	; (80069f4 <TIM_Base_SetConfig+0xe4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00f      	beq.n	8006948 <TIM_Base_SetConfig+0x38>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d00b      	beq.n	8006948 <TIM_Base_SetConfig+0x38>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a31      	ldr	r2, [pc, #196]	; (80069f8 <TIM_Base_SetConfig+0xe8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d007      	beq.n	8006948 <TIM_Base_SetConfig+0x38>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a30      	ldr	r2, [pc, #192]	; (80069fc <TIM_Base_SetConfig+0xec>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <TIM_Base_SetConfig+0x38>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a2f      	ldr	r2, [pc, #188]	; (8006a00 <TIM_Base_SetConfig+0xf0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d108      	bne.n	800695a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a25      	ldr	r2, [pc, #148]	; (80069f4 <TIM_Base_SetConfig+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d01b      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d017      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <TIM_Base_SetConfig+0xe8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_Base_SetConfig+0xec>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <TIM_Base_SetConfig+0xf0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <TIM_Base_SetConfig+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <TIM_Base_SetConfig+0xf8>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_Base_SetConfig+0x8a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_Base_SetConfig+0xfc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d108      	bne.n	80069ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a08      	ldr	r2, [pc, #32]	; (80069f4 <TIM_Base_SetConfig+0xe4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d103      	bne.n	80069e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	615a      	str	r2, [r3, #20]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f023 0201 	bic.w	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f023 030a 	bic.w	r3, r3, #10
 8006a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f023 0210 	bic.w	r2, r3, #16
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	031b      	lsls	r3, r3, #12
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	011b      	lsls	r3, r3, #4
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f043 0307 	orr.w	r3, r3, #7
 8006af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	609a      	str	r2, [r3, #8]
}
 8006af8:	bf00      	nop
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e050      	b.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d013      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d10c      	bne.n	8006bec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40014000 	.word	0x40014000

08006c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e03f      	b.n	8006cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7fb fc50 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f905 	bl	8006e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b08a      	sub	sp, #40	; 0x28
 8006ce6:	af02      	add	r7, sp, #8
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b20      	cmp	r3, #32
 8006d00:	d17c      	bne.n	8006dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_UART_Transmit+0x2c>
 8006d08:	88fb      	ldrh	r3, [r7, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e075      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UART_Transmit+0x3e>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e06e      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d36:	f7fd f815 	bl	8003d64 <HAL_GetTick>
 8006d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88fa      	ldrh	r2, [r7, #6]
 8006d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	88fa      	ldrh	r2, [r7, #6]
 8006d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d50:	d108      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e003      	b.n	8006d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d74:	e02a      	b.n	8006dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2180      	movs	r1, #128	; 0x80
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 f840 	bl	8006e06 <UART_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e036      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10b      	bne.n	8006dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3302      	adds	r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e007      	b.n	8006dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1cf      	bne.n	8006d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2140      	movs	r1, #64	; 0x40
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 f810 	bl	8006e06 <UART_WaitOnFlagUntilTimeout>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e006      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3720      	adds	r7, #32
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e16:	e02c      	b.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d028      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e26:	f7fc ff9d 	bl	8003d64 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d21d      	bcs.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695a      	ldr	r2, [r3, #20]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2220      	movs	r2, #32
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e00f      	b.n	8006e92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	bf0c      	ite	eq
 8006e82:	2301      	moveq	r3, #1
 8006e84:	2300      	movne	r3, #0
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	461a      	mov	r2, r3
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d0c3      	beq.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
	...

08006e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	b09f      	sub	sp, #124	; 0x7c
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	68d9      	ldr	r1, [r3, #12]
 8006eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	ea40 0301 	orr.w	r3, r0, r1
 8006ebc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	431a      	orrs	r2, r3
 8006ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ee0:	f021 010c 	bic.w	r1, r1, #12
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eea:	430b      	orrs	r3, r1
 8006eec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efa:	6999      	ldr	r1, [r3, #24]
 8006efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	ea40 0301 	orr.w	r3, r0, r1
 8006f04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4bc5      	ldr	r3, [pc, #788]	; (8007220 <UART_SetConfig+0x384>)
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d004      	beq.n	8006f1a <UART_SetConfig+0x7e>
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	4bc3      	ldr	r3, [pc, #780]	; (8007224 <UART_SetConfig+0x388>)
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d103      	bne.n	8006f22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f1a:	f7ff fa3f 	bl	800639c <HAL_RCC_GetPCLK2Freq>
 8006f1e:	6778      	str	r0, [r7, #116]	; 0x74
 8006f20:	e002      	b.n	8006f28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f22:	f7ff fa27 	bl	8006374 <HAL_RCC_GetPCLK1Freq>
 8006f26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	f040 80b6 	bne.w	80070a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f36:	461c      	mov	r4, r3
 8006f38:	f04f 0500 	mov.w	r5, #0
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	462b      	mov	r3, r5
 8006f40:	1891      	adds	r1, r2, r2
 8006f42:	6439      	str	r1, [r7, #64]	; 0x40
 8006f44:	415b      	adcs	r3, r3
 8006f46:	647b      	str	r3, [r7, #68]	; 0x44
 8006f48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f4c:	1912      	adds	r2, r2, r4
 8006f4e:	eb45 0303 	adc.w	r3, r5, r3
 8006f52:	f04f 0000 	mov.w	r0, #0
 8006f56:	f04f 0100 	mov.w	r1, #0
 8006f5a:	00d9      	lsls	r1, r3, #3
 8006f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f60:	00d0      	lsls	r0, r2, #3
 8006f62:	4602      	mov	r2, r0
 8006f64:	460b      	mov	r3, r1
 8006f66:	1911      	adds	r1, r2, r4
 8006f68:	6639      	str	r1, [r7, #96]	; 0x60
 8006f6a:	416b      	adcs	r3, r5
 8006f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	1891      	adds	r1, r2, r2
 8006f7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f7c:	415b      	adcs	r3, r3
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f88:	f7f9 fe66 	bl	8000c58 <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4ba5      	ldr	r3, [pc, #660]	; (8007228 <UART_SetConfig+0x38c>)
 8006f92:	fba3 2302 	umull	r2, r3, r3, r2
 8006f96:	095b      	lsrs	r3, r3, #5
 8006f98:	011e      	lsls	r6, r3, #4
 8006f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9c:	461c      	mov	r4, r3
 8006f9e:	f04f 0500 	mov.w	r5, #0
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	1891      	adds	r1, r2, r2
 8006fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8006faa:	415b      	adcs	r3, r3
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
 8006fae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fb2:	1912      	adds	r2, r2, r4
 8006fb4:	eb45 0303 	adc.w	r3, r5, r3
 8006fb8:	f04f 0000 	mov.w	r0, #0
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	00d9      	lsls	r1, r3, #3
 8006fc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fc6:	00d0      	lsls	r0, r2, #3
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	1911      	adds	r1, r2, r4
 8006fce:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fd0:	416b      	adcs	r3, r5
 8006fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	1891      	adds	r1, r2, r2
 8006fe0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fe2:	415b      	adcs	r3, r3
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006fee:	f7f9 fe33 	bl	8000c58 <__aeabi_uldivmod>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4b8c      	ldr	r3, [pc, #560]	; (8007228 <UART_SetConfig+0x38c>)
 8006ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	2164      	movs	r1, #100	; 0x64
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	3332      	adds	r3, #50	; 0x32
 800700a:	4a87      	ldr	r2, [pc, #540]	; (8007228 <UART_SetConfig+0x38c>)
 800700c:	fba2 2303 	umull	r2, r3, r2, r3
 8007010:	095b      	lsrs	r3, r3, #5
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007018:	441e      	add	r6, r3
 800701a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800701c:	4618      	mov	r0, r3
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	1894      	adds	r4, r2, r2
 8007028:	623c      	str	r4, [r7, #32]
 800702a:	415b      	adcs	r3, r3
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007032:	1812      	adds	r2, r2, r0
 8007034:	eb41 0303 	adc.w	r3, r1, r3
 8007038:	f04f 0400 	mov.w	r4, #0
 800703c:	f04f 0500 	mov.w	r5, #0
 8007040:	00dd      	lsls	r5, r3, #3
 8007042:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007046:	00d4      	lsls	r4, r2, #3
 8007048:	4622      	mov	r2, r4
 800704a:	462b      	mov	r3, r5
 800704c:	1814      	adds	r4, r2, r0
 800704e:	653c      	str	r4, [r7, #80]	; 0x50
 8007050:	414b      	adcs	r3, r1
 8007052:	657b      	str	r3, [r7, #84]	; 0x54
 8007054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	461a      	mov	r2, r3
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	1891      	adds	r1, r2, r2
 8007060:	61b9      	str	r1, [r7, #24]
 8007062:	415b      	adcs	r3, r3
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800706a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800706e:	f7f9 fdf3 	bl	8000c58 <__aeabi_uldivmod>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4b6c      	ldr	r3, [pc, #432]	; (8007228 <UART_SetConfig+0x38c>)
 8007078:	fba3 1302 	umull	r1, r3, r3, r2
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	2164      	movs	r1, #100	; 0x64
 8007080:	fb01 f303 	mul.w	r3, r1, r3
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	3332      	adds	r3, #50	; 0x32
 800708a:	4a67      	ldr	r2, [pc, #412]	; (8007228 <UART_SetConfig+0x38c>)
 800708c:	fba2 2303 	umull	r2, r3, r2, r3
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	f003 0207 	and.w	r2, r3, #7
 8007096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4432      	add	r2, r6
 800709c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800709e:	e0b9      	b.n	8007214 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a2:	461c      	mov	r4, r3
 80070a4:	f04f 0500 	mov.w	r5, #0
 80070a8:	4622      	mov	r2, r4
 80070aa:	462b      	mov	r3, r5
 80070ac:	1891      	adds	r1, r2, r2
 80070ae:	6139      	str	r1, [r7, #16]
 80070b0:	415b      	adcs	r3, r3
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070b8:	1912      	adds	r2, r2, r4
 80070ba:	eb45 0303 	adc.w	r3, r5, r3
 80070be:	f04f 0000 	mov.w	r0, #0
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	00d9      	lsls	r1, r3, #3
 80070c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070cc:	00d0      	lsls	r0, r2, #3
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	eb12 0804 	adds.w	r8, r2, r4
 80070d6:	eb43 0905 	adc.w	r9, r3, r5
 80070da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4618      	mov	r0, r3
 80070e0:	f04f 0100 	mov.w	r1, #0
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	008b      	lsls	r3, r1, #2
 80070ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070f2:	0082      	lsls	r2, r0, #2
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 fdae 	bl	8000c58 <__aeabi_uldivmod>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4b49      	ldr	r3, [pc, #292]	; (8007228 <UART_SetConfig+0x38c>)
 8007102:	fba3 2302 	umull	r2, r3, r3, r2
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	011e      	lsls	r6, r3, #4
 800710a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800710c:	4618      	mov	r0, r3
 800710e:	f04f 0100 	mov.w	r1, #0
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	1894      	adds	r4, r2, r2
 8007118:	60bc      	str	r4, [r7, #8]
 800711a:	415b      	adcs	r3, r3
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007122:	1812      	adds	r2, r2, r0
 8007124:	eb41 0303 	adc.w	r3, r1, r3
 8007128:	f04f 0400 	mov.w	r4, #0
 800712c:	f04f 0500 	mov.w	r5, #0
 8007130:	00dd      	lsls	r5, r3, #3
 8007132:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007136:	00d4      	lsls	r4, r2, #3
 8007138:	4622      	mov	r2, r4
 800713a:	462b      	mov	r3, r5
 800713c:	1814      	adds	r4, r2, r0
 800713e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007140:	414b      	adcs	r3, r1
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	f04f 0100 	mov.w	r1, #0
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	f04f 0300 	mov.w	r3, #0
 8007156:	008b      	lsls	r3, r1, #2
 8007158:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800715c:	0082      	lsls	r2, r0, #2
 800715e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007162:	f7f9 fd79 	bl	8000c58 <__aeabi_uldivmod>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <UART_SetConfig+0x38c>)
 800716c:	fba3 1302 	umull	r1, r3, r3, r2
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	2164      	movs	r1, #100	; 0x64
 8007174:	fb01 f303 	mul.w	r3, r1, r3
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	011b      	lsls	r3, r3, #4
 800717c:	3332      	adds	r3, #50	; 0x32
 800717e:	4a2a      	ldr	r2, [pc, #168]	; (8007228 <UART_SetConfig+0x38c>)
 8007180:	fba2 2303 	umull	r2, r3, r2, r3
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800718a:	441e      	add	r6, r3
 800718c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800718e:	4618      	mov	r0, r3
 8007190:	f04f 0100 	mov.w	r1, #0
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	1894      	adds	r4, r2, r2
 800719a:	603c      	str	r4, [r7, #0]
 800719c:	415b      	adcs	r3, r3
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a4:	1812      	adds	r2, r2, r0
 80071a6:	eb41 0303 	adc.w	r3, r1, r3
 80071aa:	f04f 0400 	mov.w	r4, #0
 80071ae:	f04f 0500 	mov.w	r5, #0
 80071b2:	00dd      	lsls	r5, r3, #3
 80071b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071b8:	00d4      	lsls	r4, r2, #3
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	eb12 0a00 	adds.w	sl, r2, r0
 80071c2:	eb43 0b01 	adc.w	fp, r3, r1
 80071c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f04f 0100 	mov.w	r1, #0
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	008b      	lsls	r3, r1, #2
 80071da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071de:	0082      	lsls	r2, r0, #2
 80071e0:	4650      	mov	r0, sl
 80071e2:	4659      	mov	r1, fp
 80071e4:	f7f9 fd38 	bl	8000c58 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <UART_SetConfig+0x38c>)
 80071ee:	fba3 1302 	umull	r1, r3, r3, r2
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	2164      	movs	r1, #100	; 0x64
 80071f6:	fb01 f303 	mul.w	r3, r1, r3
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	3332      	adds	r3, #50	; 0x32
 8007200:	4a09      	ldr	r2, [pc, #36]	; (8007228 <UART_SetConfig+0x38c>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	f003 020f 	and.w	r2, r3, #15
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4432      	add	r2, r6
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	377c      	adds	r7, #124	; 0x7c
 8007218:	46bd      	mov	sp, r7
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	bf00      	nop
 8007220:	40011000 	.word	0x40011000
 8007224:	40011400 	.word	0x40011400
 8007228:	51eb851f 	.word	0x51eb851f

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000028 	.word	0x20000028

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	; (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	; (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	; (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	; (800727c <__libc_init_array+0x44>)
 800724c:	f002 ff42 	bl	800a0d4 <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	0800f304 	.word	0x0800f304
 8007274:	0800f304 	.word	0x0800f304
 8007278:	0800f304 	.word	0x0800f304
 800727c:	0800f308 	.word	0x0800f308

08007280 <memset>:
 8007280:	4402      	add	r2, r0
 8007282:	4603      	mov	r3, r0
 8007284:	4293      	cmp	r3, r2
 8007286:	d100      	bne.n	800728a <memset+0xa>
 8007288:	4770      	bx	lr
 800728a:	f803 1b01 	strb.w	r1, [r3], #1
 800728e:	e7f9      	b.n	8007284 <memset+0x4>

08007290 <__cvt>:
 8007290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007294:	ec55 4b10 	vmov	r4, r5, d0
 8007298:	2d00      	cmp	r5, #0
 800729a:	460e      	mov	r6, r1
 800729c:	4619      	mov	r1, r3
 800729e:	462b      	mov	r3, r5
 80072a0:	bfbb      	ittet	lt
 80072a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072a6:	461d      	movlt	r5, r3
 80072a8:	2300      	movge	r3, #0
 80072aa:	232d      	movlt	r3, #45	; 0x2d
 80072ac:	700b      	strb	r3, [r1, #0]
 80072ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072b4:	4691      	mov	r9, r2
 80072b6:	f023 0820 	bic.w	r8, r3, #32
 80072ba:	bfbc      	itt	lt
 80072bc:	4622      	movlt	r2, r4
 80072be:	4614      	movlt	r4, r2
 80072c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072c4:	d005      	beq.n	80072d2 <__cvt+0x42>
 80072c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ca:	d100      	bne.n	80072ce <__cvt+0x3e>
 80072cc:	3601      	adds	r6, #1
 80072ce:	2102      	movs	r1, #2
 80072d0:	e000      	b.n	80072d4 <__cvt+0x44>
 80072d2:	2103      	movs	r1, #3
 80072d4:	ab03      	add	r3, sp, #12
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	ab02      	add	r3, sp, #8
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	ec45 4b10 	vmov	d0, r4, r5
 80072e0:	4653      	mov	r3, sl
 80072e2:	4632      	mov	r2, r6
 80072e4:	f000 fe38 	bl	8007f58 <_dtoa_r>
 80072e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072ec:	4607      	mov	r7, r0
 80072ee:	d102      	bne.n	80072f6 <__cvt+0x66>
 80072f0:	f019 0f01 	tst.w	r9, #1
 80072f4:	d022      	beq.n	800733c <__cvt+0xac>
 80072f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072fa:	eb07 0906 	add.w	r9, r7, r6
 80072fe:	d110      	bne.n	8007322 <__cvt+0x92>
 8007300:	783b      	ldrb	r3, [r7, #0]
 8007302:	2b30      	cmp	r3, #48	; 0x30
 8007304:	d10a      	bne.n	800731c <__cvt+0x8c>
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007312:	b918      	cbnz	r0, 800731c <__cvt+0x8c>
 8007314:	f1c6 0601 	rsb	r6, r6, #1
 8007318:	f8ca 6000 	str.w	r6, [sl]
 800731c:	f8da 3000 	ldr.w	r3, [sl]
 8007320:	4499      	add	r9, r3
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f9 fbd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800732e:	b108      	cbz	r0, 8007334 <__cvt+0xa4>
 8007330:	f8cd 900c 	str.w	r9, [sp, #12]
 8007334:	2230      	movs	r2, #48	; 0x30
 8007336:	9b03      	ldr	r3, [sp, #12]
 8007338:	454b      	cmp	r3, r9
 800733a:	d307      	bcc.n	800734c <__cvt+0xbc>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007340:	1bdb      	subs	r3, r3, r7
 8007342:	4638      	mov	r0, r7
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	b004      	add	sp, #16
 8007348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	9103      	str	r1, [sp, #12]
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	e7f0      	b.n	8007336 <__cvt+0xa6>

08007354 <__exponent>:
 8007354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007356:	4603      	mov	r3, r0
 8007358:	2900      	cmp	r1, #0
 800735a:	bfb8      	it	lt
 800735c:	4249      	neglt	r1, r1
 800735e:	f803 2b02 	strb.w	r2, [r3], #2
 8007362:	bfb4      	ite	lt
 8007364:	222d      	movlt	r2, #45	; 0x2d
 8007366:	222b      	movge	r2, #43	; 0x2b
 8007368:	2909      	cmp	r1, #9
 800736a:	7042      	strb	r2, [r0, #1]
 800736c:	dd2a      	ble.n	80073c4 <__exponent+0x70>
 800736e:	f10d 0407 	add.w	r4, sp, #7
 8007372:	46a4      	mov	ip, r4
 8007374:	270a      	movs	r7, #10
 8007376:	46a6      	mov	lr, r4
 8007378:	460a      	mov	r2, r1
 800737a:	fb91 f6f7 	sdiv	r6, r1, r7
 800737e:	fb07 1516 	mls	r5, r7, r6, r1
 8007382:	3530      	adds	r5, #48	; 0x30
 8007384:	2a63      	cmp	r2, #99	; 0x63
 8007386:	f104 34ff 	add.w	r4, r4, #4294967295
 800738a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800738e:	4631      	mov	r1, r6
 8007390:	dcf1      	bgt.n	8007376 <__exponent+0x22>
 8007392:	3130      	adds	r1, #48	; 0x30
 8007394:	f1ae 0502 	sub.w	r5, lr, #2
 8007398:	f804 1c01 	strb.w	r1, [r4, #-1]
 800739c:	1c44      	adds	r4, r0, #1
 800739e:	4629      	mov	r1, r5
 80073a0:	4561      	cmp	r1, ip
 80073a2:	d30a      	bcc.n	80073ba <__exponent+0x66>
 80073a4:	f10d 0209 	add.w	r2, sp, #9
 80073a8:	eba2 020e 	sub.w	r2, r2, lr
 80073ac:	4565      	cmp	r5, ip
 80073ae:	bf88      	it	hi
 80073b0:	2200      	movhi	r2, #0
 80073b2:	4413      	add	r3, r2
 80073b4:	1a18      	subs	r0, r3, r0
 80073b6:	b003      	add	sp, #12
 80073b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073c2:	e7ed      	b.n	80073a0 <__exponent+0x4c>
 80073c4:	2330      	movs	r3, #48	; 0x30
 80073c6:	3130      	adds	r1, #48	; 0x30
 80073c8:	7083      	strb	r3, [r0, #2]
 80073ca:	70c1      	strb	r1, [r0, #3]
 80073cc:	1d03      	adds	r3, r0, #4
 80073ce:	e7f1      	b.n	80073b4 <__exponent+0x60>

080073d0 <_printf_float>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ed2d 8b02 	vpush	{d8}
 80073d8:	b08d      	sub	sp, #52	; 0x34
 80073da:	460c      	mov	r4, r1
 80073dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073e0:	4616      	mov	r6, r2
 80073e2:	461f      	mov	r7, r3
 80073e4:	4605      	mov	r5, r0
 80073e6:	f001 fd5b 	bl	8008ea0 <_localeconv_r>
 80073ea:	f8d0 a000 	ldr.w	sl, [r0]
 80073ee:	4650      	mov	r0, sl
 80073f0:	f7f8 fef6 	bl	80001e0 <strlen>
 80073f4:	2300      	movs	r3, #0
 80073f6:	930a      	str	r3, [sp, #40]	; 0x28
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007400:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007404:	3307      	adds	r3, #7
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	f103 0208 	add.w	r2, r3, #8
 800740e:	f8c8 2000 	str.w	r2, [r8]
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800741a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800741e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007422:	9307      	str	r3, [sp, #28]
 8007424:	f8cd 8018 	str.w	r8, [sp, #24]
 8007428:	ee08 0a10 	vmov	s16, r0
 800742c:	4b9f      	ldr	r3, [pc, #636]	; (80076ac <_printf_float+0x2dc>)
 800742e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	f7f9 fb81 	bl	8000b3c <__aeabi_dcmpun>
 800743a:	bb88      	cbnz	r0, 80074a0 <_printf_float+0xd0>
 800743c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007440:	4b9a      	ldr	r3, [pc, #616]	; (80076ac <_printf_float+0x2dc>)
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	f7f9 fb5b 	bl	8000b00 <__aeabi_dcmple>
 800744a:	bb48      	cbnz	r0, 80074a0 <_printf_float+0xd0>
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7f9 fb4a 	bl	8000aec <__aeabi_dcmplt>
 8007458:	b110      	cbz	r0, 8007460 <_printf_float+0x90>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	4b93      	ldr	r3, [pc, #588]	; (80076b0 <_printf_float+0x2e0>)
 8007462:	4894      	ldr	r0, [pc, #592]	; (80076b4 <_printf_float+0x2e4>)
 8007464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007468:	bf94      	ite	ls
 800746a:	4698      	movls	r8, r3
 800746c:	4680      	movhi	r8, r0
 800746e:	2303      	movs	r3, #3
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	9b05      	ldr	r3, [sp, #20]
 8007474:	f023 0204 	bic.w	r2, r3, #4
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	9700      	str	r7, [sp, #0]
 8007480:	4633      	mov	r3, r6
 8007482:	aa0b      	add	r2, sp, #44	; 0x2c
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f9d8 	bl	800783c <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	f040 8090 	bne.w	80075b2 <_printf_float+0x1e2>
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	b00d      	add	sp, #52	; 0x34
 8007498:	ecbd 8b02 	vpop	{d8}
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7f9 fb48 	bl	8000b3c <__aeabi_dcmpun>
 80074ac:	b140      	cbz	r0, 80074c0 <_printf_float+0xf0>
 80074ae:	464b      	mov	r3, r9
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfbc      	itt	lt
 80074b4:	232d      	movlt	r3, #45	; 0x2d
 80074b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074ba:	487f      	ldr	r0, [pc, #508]	; (80076b8 <_printf_float+0x2e8>)
 80074bc:	4b7f      	ldr	r3, [pc, #508]	; (80076bc <_printf_float+0x2ec>)
 80074be:	e7d1      	b.n	8007464 <_printf_float+0x94>
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074c6:	9206      	str	r2, [sp, #24]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	d13f      	bne.n	800754c <_printf_float+0x17c>
 80074cc:	2306      	movs	r3, #6
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	6861      	ldr	r1, [r4, #4]
 80074d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074d8:	2300      	movs	r3, #0
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	ab0a      	add	r3, sp, #40	; 0x28
 80074de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074e2:	ab09      	add	r3, sp, #36	; 0x24
 80074e4:	ec49 8b10 	vmov	d0, r8, r9
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff fecd 	bl	8007290 <__cvt>
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fa:	2b47      	cmp	r3, #71	; 0x47
 80074fc:	4680      	mov	r8, r0
 80074fe:	d108      	bne.n	8007512 <_printf_float+0x142>
 8007500:	1cc8      	adds	r0, r1, #3
 8007502:	db02      	blt.n	800750a <_printf_float+0x13a>
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	4299      	cmp	r1, r3
 8007508:	dd41      	ble.n	800758e <_printf_float+0x1be>
 800750a:	f1ab 0b02 	sub.w	fp, fp, #2
 800750e:	fa5f fb8b 	uxtb.w	fp, fp
 8007512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007516:	d820      	bhi.n	800755a <_printf_float+0x18a>
 8007518:	3901      	subs	r1, #1
 800751a:	465a      	mov	r2, fp
 800751c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007520:	9109      	str	r1, [sp, #36]	; 0x24
 8007522:	f7ff ff17 	bl	8007354 <__exponent>
 8007526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007528:	1813      	adds	r3, r2, r0
 800752a:	2a01      	cmp	r2, #1
 800752c:	4681      	mov	r9, r0
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	dc02      	bgt.n	8007538 <_printf_float+0x168>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	07d2      	lsls	r2, r2, #31
 8007536:	d501      	bpl.n	800753c <_printf_float+0x16c>
 8007538:	3301      	adds	r3, #1
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007540:	2b00      	cmp	r3, #0
 8007542:	d09c      	beq.n	800747e <_printf_float+0xae>
 8007544:	232d      	movs	r3, #45	; 0x2d
 8007546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754a:	e798      	b.n	800747e <_printf_float+0xae>
 800754c:	9a06      	ldr	r2, [sp, #24]
 800754e:	2a47      	cmp	r2, #71	; 0x47
 8007550:	d1be      	bne.n	80074d0 <_printf_float+0x100>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1bc      	bne.n	80074d0 <_printf_float+0x100>
 8007556:	2301      	movs	r3, #1
 8007558:	e7b9      	b.n	80074ce <_printf_float+0xfe>
 800755a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800755e:	d118      	bne.n	8007592 <_printf_float+0x1c2>
 8007560:	2900      	cmp	r1, #0
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	dd0b      	ble.n	800757e <_printf_float+0x1ae>
 8007566:	6121      	str	r1, [r4, #16]
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x1a0>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d0      	lsls	r0, r2, #31
 800756e:	d502      	bpl.n	8007576 <_printf_float+0x1a6>
 8007570:	3301      	adds	r3, #1
 8007572:	440b      	add	r3, r1
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	65a1      	str	r1, [r4, #88]	; 0x58
 8007578:	f04f 0900 	mov.w	r9, #0
 800757c:	e7de      	b.n	800753c <_printf_float+0x16c>
 800757e:	b913      	cbnz	r3, 8007586 <_printf_float+0x1b6>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x1ba>
 8007586:	3302      	adds	r3, #2
 8007588:	e7f4      	b.n	8007574 <_printf_float+0x1a4>
 800758a:	2301      	movs	r3, #1
 800758c:	e7f2      	b.n	8007574 <_printf_float+0x1a4>
 800758e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	4299      	cmp	r1, r3
 8007596:	db05      	blt.n	80075a4 <_printf_float+0x1d4>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	6121      	str	r1, [r4, #16]
 800759c:	07d8      	lsls	r0, r3, #31
 800759e:	d5ea      	bpl.n	8007576 <_printf_float+0x1a6>
 80075a0:	1c4b      	adds	r3, r1, #1
 80075a2:	e7e7      	b.n	8007574 <_printf_float+0x1a4>
 80075a4:	2900      	cmp	r1, #0
 80075a6:	bfd4      	ite	le
 80075a8:	f1c1 0202 	rsble	r2, r1, #2
 80075ac:	2201      	movgt	r2, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	e7e0      	b.n	8007574 <_printf_float+0x1a4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	055a      	lsls	r2, r3, #21
 80075b6:	d407      	bmi.n	80075c8 <_printf_float+0x1f8>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	4642      	mov	r2, r8
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	d12c      	bne.n	8007620 <_printf_float+0x250>
 80075c6:	e764      	b.n	8007492 <_printf_float+0xc2>
 80075c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075cc:	f240 80e0 	bls.w	8007790 <_printf_float+0x3c0>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	f7f9 fa7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d034      	beq.n	800764a <_printf_float+0x27a>
 80075e0:	4a37      	ldr	r2, [pc, #220]	; (80076c0 <_printf_float+0x2f0>)
 80075e2:	2301      	movs	r3, #1
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af51 	beq.w	8007492 <_printf_float+0xc2>
 80075f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f4:	429a      	cmp	r2, r3
 80075f6:	db02      	blt.n	80075fe <_printf_float+0x22e>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d510      	bpl.n	8007620 <_printf_float+0x250>
 80075fe:	ee18 3a10 	vmov	r3, s16
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f af41 	beq.w	8007492 <_printf_float+0xc2>
 8007610:	f04f 0800 	mov.w	r8, #0
 8007614:	f104 091a 	add.w	r9, r4, #26
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	3b01      	subs	r3, #1
 800761c:	4543      	cmp	r3, r8
 800761e:	dc09      	bgt.n	8007634 <_printf_float+0x264>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	f100 8105 	bmi.w	8007832 <_printf_float+0x462>
 8007628:	68e0      	ldr	r0, [r4, #12]
 800762a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762c:	4298      	cmp	r0, r3
 800762e:	bfb8      	it	lt
 8007630:	4618      	movlt	r0, r3
 8007632:	e730      	b.n	8007496 <_printf_float+0xc6>
 8007634:	2301      	movs	r3, #1
 8007636:	464a      	mov	r2, r9
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af27 	beq.w	8007492 <_printf_float+0xc2>
 8007644:	f108 0801 	add.w	r8, r8, #1
 8007648:	e7e6      	b.n	8007618 <_printf_float+0x248>
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc39      	bgt.n	80076c4 <_printf_float+0x2f4>
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <_printf_float+0x2f0>)
 8007652:	2301      	movs	r3, #1
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af19 	beq.w	8007492 <_printf_float+0xc2>
 8007660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007664:	4313      	orrs	r3, r2
 8007666:	d102      	bne.n	800766e <_printf_float+0x29e>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d5d8      	bpl.n	8007620 <_printf_float+0x250>
 800766e:	ee18 3a10 	vmov	r3, s16
 8007672:	4652      	mov	r2, sl
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af09 	beq.w	8007492 <_printf_float+0xc2>
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	f104 0a1a 	add.w	sl, r4, #26
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	425b      	negs	r3, r3
 800768c:	454b      	cmp	r3, r9
 800768e:	dc01      	bgt.n	8007694 <_printf_float+0x2c4>
 8007690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007692:	e792      	b.n	80075ba <_printf_float+0x1ea>
 8007694:	2301      	movs	r3, #1
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f aef7 	beq.w	8007492 <_printf_float+0xc2>
 80076a4:	f109 0901 	add.w	r9, r9, #1
 80076a8:	e7ee      	b.n	8007688 <_printf_float+0x2b8>
 80076aa:	bf00      	nop
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	0800ef20 	.word	0x0800ef20
 80076b4:	0800ef24 	.word	0x0800ef24
 80076b8:	0800ef2c 	.word	0x0800ef2c
 80076bc:	0800ef28 	.word	0x0800ef28
 80076c0:	0800ef30 	.word	0x0800ef30
 80076c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c8:	429a      	cmp	r2, r3
 80076ca:	bfa8      	it	ge
 80076cc:	461a      	movge	r2, r3
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	4691      	mov	r9, r2
 80076d2:	dc37      	bgt.n	8007744 <_printf_float+0x374>
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076dc:	f104 021a 	add.w	r2, r4, #26
 80076e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076e2:	9305      	str	r3, [sp, #20]
 80076e4:	eba3 0309 	sub.w	r3, r3, r9
 80076e8:	455b      	cmp	r3, fp
 80076ea:	dc33      	bgt.n	8007754 <_printf_float+0x384>
 80076ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f0:	429a      	cmp	r2, r3
 80076f2:	db3b      	blt.n	800776c <_printf_float+0x39c>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	07da      	lsls	r2, r3, #31
 80076f8:	d438      	bmi.n	800776c <_printf_float+0x39c>
 80076fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	eba2 0901 	sub.w	r9, r2, r1
 8007706:	4599      	cmp	r9, r3
 8007708:	bfa8      	it	ge
 800770a:	4699      	movge	r9, r3
 800770c:	f1b9 0f00 	cmp.w	r9, #0
 8007710:	dc35      	bgt.n	800777e <_printf_float+0x3ae>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800771a:	f104 0a1a 	add.w	sl, r4, #26
 800771e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	eba3 0309 	sub.w	r3, r3, r9
 8007728:	4543      	cmp	r3, r8
 800772a:	f77f af79 	ble.w	8007620 <_printf_float+0x250>
 800772e:	2301      	movs	r3, #1
 8007730:	4652      	mov	r2, sl
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f aeaa 	beq.w	8007492 <_printf_float+0xc2>
 800773e:	f108 0801 	add.w	r8, r8, #1
 8007742:	e7ec      	b.n	800771e <_printf_float+0x34e>
 8007744:	4613      	mov	r3, r2
 8007746:	4631      	mov	r1, r6
 8007748:	4642      	mov	r2, r8
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d1c0      	bne.n	80076d4 <_printf_float+0x304>
 8007752:	e69e      	b.n	8007492 <_printf_float+0xc2>
 8007754:	2301      	movs	r3, #1
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	9205      	str	r2, [sp, #20]
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f ae97 	beq.w	8007492 <_printf_float+0xc2>
 8007764:	9a05      	ldr	r2, [sp, #20]
 8007766:	f10b 0b01 	add.w	fp, fp, #1
 800776a:	e7b9      	b.n	80076e0 <_printf_float+0x310>
 800776c:	ee18 3a10 	vmov	r3, s16
 8007770:	4652      	mov	r2, sl
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d1be      	bne.n	80076fa <_printf_float+0x32a>
 800777c:	e689      	b.n	8007492 <_printf_float+0xc2>
 800777e:	9a05      	ldr	r2, [sp, #20]
 8007780:	464b      	mov	r3, r9
 8007782:	4442      	add	r2, r8
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	d1c1      	bne.n	8007712 <_printf_float+0x342>
 800778e:	e680      	b.n	8007492 <_printf_float+0xc2>
 8007790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007792:	2a01      	cmp	r2, #1
 8007794:	dc01      	bgt.n	800779a <_printf_float+0x3ca>
 8007796:	07db      	lsls	r3, r3, #31
 8007798:	d538      	bpl.n	800780c <_printf_float+0x43c>
 800779a:	2301      	movs	r3, #1
 800779c:	4642      	mov	r2, r8
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	f43f ae74 	beq.w	8007492 <_printf_float+0xc2>
 80077aa:	ee18 3a10 	vmov	r3, s16
 80077ae:	4652      	mov	r2, sl
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae6b 	beq.w	8007492 <_printf_float+0xc2>
 80077bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f7f9 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 80077c8:	b9d8      	cbnz	r0, 8007802 <_printf_float+0x432>
 80077ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077cc:	f108 0201 	add.w	r2, r8, #1
 80077d0:	3b01      	subs	r3, #1
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	d10e      	bne.n	80077fa <_printf_float+0x42a>
 80077dc:	e659      	b.n	8007492 <_printf_float+0xc2>
 80077de:	2301      	movs	r3, #1
 80077e0:	4652      	mov	r2, sl
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b8      	blx	r7
 80077e8:	3001      	adds	r0, #1
 80077ea:	f43f ae52 	beq.w	8007492 <_printf_float+0xc2>
 80077ee:	f108 0801 	add.w	r8, r8, #1
 80077f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4543      	cmp	r3, r8
 80077f8:	dcf1      	bgt.n	80077de <_printf_float+0x40e>
 80077fa:	464b      	mov	r3, r9
 80077fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007800:	e6dc      	b.n	80075bc <_printf_float+0x1ec>
 8007802:	f04f 0800 	mov.w	r8, #0
 8007806:	f104 0a1a 	add.w	sl, r4, #26
 800780a:	e7f2      	b.n	80077f2 <_printf_float+0x422>
 800780c:	2301      	movs	r3, #1
 800780e:	4642      	mov	r2, r8
 8007810:	e7df      	b.n	80077d2 <_printf_float+0x402>
 8007812:	2301      	movs	r3, #1
 8007814:	464a      	mov	r2, r9
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	f43f ae38 	beq.w	8007492 <_printf_float+0xc2>
 8007822:	f108 0801 	add.w	r8, r8, #1
 8007826:	68e3      	ldr	r3, [r4, #12]
 8007828:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782a:	1a5b      	subs	r3, r3, r1
 800782c:	4543      	cmp	r3, r8
 800782e:	dcf0      	bgt.n	8007812 <_printf_float+0x442>
 8007830:	e6fa      	b.n	8007628 <_printf_float+0x258>
 8007832:	f04f 0800 	mov.w	r8, #0
 8007836:	f104 0919 	add.w	r9, r4, #25
 800783a:	e7f4      	b.n	8007826 <_printf_float+0x456>

0800783c <_printf_common>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	4616      	mov	r6, r2
 8007842:	4699      	mov	r9, r3
 8007844:	688a      	ldr	r2, [r1, #8]
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784c:	4293      	cmp	r3, r2
 800784e:	bfb8      	it	lt
 8007850:	4613      	movlt	r3, r2
 8007852:	6033      	str	r3, [r6, #0]
 8007854:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007858:	4607      	mov	r7, r0
 800785a:	460c      	mov	r4, r1
 800785c:	b10a      	cbz	r2, 8007862 <_printf_common+0x26>
 800785e:	3301      	adds	r3, #1
 8007860:	6033      	str	r3, [r6, #0]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	0699      	lsls	r1, r3, #26
 8007866:	bf42      	ittt	mi
 8007868:	6833      	ldrmi	r3, [r6, #0]
 800786a:	3302      	addmi	r3, #2
 800786c:	6033      	strmi	r3, [r6, #0]
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	f015 0506 	ands.w	r5, r5, #6
 8007874:	d106      	bne.n	8007884 <_printf_common+0x48>
 8007876:	f104 0a19 	add.w	sl, r4, #25
 800787a:	68e3      	ldr	r3, [r4, #12]
 800787c:	6832      	ldr	r2, [r6, #0]
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	42ab      	cmp	r3, r5
 8007882:	dc26      	bgt.n	80078d2 <_printf_common+0x96>
 8007884:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007888:	1e13      	subs	r3, r2, #0
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	bf18      	it	ne
 800788e:	2301      	movne	r3, #1
 8007890:	0692      	lsls	r2, r2, #26
 8007892:	d42b      	bmi.n	80078ec <_printf_common+0xb0>
 8007894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007898:	4649      	mov	r1, r9
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	3001      	adds	r0, #1
 80078a0:	d01e      	beq.n	80078e0 <_printf_common+0xa4>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	68e5      	ldr	r5, [r4, #12]
 80078a6:	6832      	ldr	r2, [r6, #0]
 80078a8:	f003 0306 	and.w	r3, r3, #6
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	bf08      	it	eq
 80078b0:	1aad      	subeq	r5, r5, r2
 80078b2:	68a3      	ldr	r3, [r4, #8]
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	bf0c      	ite	eq
 80078b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078bc:	2500      	movne	r5, #0
 80078be:	4293      	cmp	r3, r2
 80078c0:	bfc4      	itt	gt
 80078c2:	1a9b      	subgt	r3, r3, r2
 80078c4:	18ed      	addgt	r5, r5, r3
 80078c6:	2600      	movs	r6, #0
 80078c8:	341a      	adds	r4, #26
 80078ca:	42b5      	cmp	r5, r6
 80078cc:	d11a      	bne.n	8007904 <_printf_common+0xc8>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e008      	b.n	80078e4 <_printf_common+0xa8>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4652      	mov	r2, sl
 80078d6:	4649      	mov	r1, r9
 80078d8:	4638      	mov	r0, r7
 80078da:	47c0      	blx	r8
 80078dc:	3001      	adds	r0, #1
 80078de:	d103      	bne.n	80078e8 <_printf_common+0xac>
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295
 80078e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e8:	3501      	adds	r5, #1
 80078ea:	e7c6      	b.n	800787a <_printf_common+0x3e>
 80078ec:	18e1      	adds	r1, r4, r3
 80078ee:	1c5a      	adds	r2, r3, #1
 80078f0:	2030      	movs	r0, #48	; 0x30
 80078f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078f6:	4422      	add	r2, r4
 80078f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007900:	3302      	adds	r3, #2
 8007902:	e7c7      	b.n	8007894 <_printf_common+0x58>
 8007904:	2301      	movs	r3, #1
 8007906:	4622      	mov	r2, r4
 8007908:	4649      	mov	r1, r9
 800790a:	4638      	mov	r0, r7
 800790c:	47c0      	blx	r8
 800790e:	3001      	adds	r0, #1
 8007910:	d0e6      	beq.n	80078e0 <_printf_common+0xa4>
 8007912:	3601      	adds	r6, #1
 8007914:	e7d9      	b.n	80078ca <_printf_common+0x8e>
	...

08007918 <_printf_i>:
 8007918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800791c:	460c      	mov	r4, r1
 800791e:	4691      	mov	r9, r2
 8007920:	7e27      	ldrb	r7, [r4, #24]
 8007922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007924:	2f78      	cmp	r7, #120	; 0x78
 8007926:	4680      	mov	r8, r0
 8007928:	469a      	mov	sl, r3
 800792a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792e:	d807      	bhi.n	8007940 <_printf_i+0x28>
 8007930:	2f62      	cmp	r7, #98	; 0x62
 8007932:	d80a      	bhi.n	800794a <_printf_i+0x32>
 8007934:	2f00      	cmp	r7, #0
 8007936:	f000 80d8 	beq.w	8007aea <_printf_i+0x1d2>
 800793a:	2f58      	cmp	r7, #88	; 0x58
 800793c:	f000 80a3 	beq.w	8007a86 <_printf_i+0x16e>
 8007940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007948:	e03a      	b.n	80079c0 <_printf_i+0xa8>
 800794a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800794e:	2b15      	cmp	r3, #21
 8007950:	d8f6      	bhi.n	8007940 <_printf_i+0x28>
 8007952:	a001      	add	r0, pc, #4	; (adr r0, 8007958 <_printf_i+0x40>)
 8007954:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007958:	080079b1 	.word	0x080079b1
 800795c:	080079c5 	.word	0x080079c5
 8007960:	08007941 	.word	0x08007941
 8007964:	08007941 	.word	0x08007941
 8007968:	08007941 	.word	0x08007941
 800796c:	08007941 	.word	0x08007941
 8007970:	080079c5 	.word	0x080079c5
 8007974:	08007941 	.word	0x08007941
 8007978:	08007941 	.word	0x08007941
 800797c:	08007941 	.word	0x08007941
 8007980:	08007941 	.word	0x08007941
 8007984:	08007ad1 	.word	0x08007ad1
 8007988:	080079f5 	.word	0x080079f5
 800798c:	08007ab3 	.word	0x08007ab3
 8007990:	08007941 	.word	0x08007941
 8007994:	08007941 	.word	0x08007941
 8007998:	08007af3 	.word	0x08007af3
 800799c:	08007941 	.word	0x08007941
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007941 	.word	0x08007941
 80079a8:	08007941 	.word	0x08007941
 80079ac:	08007abb 	.word	0x08007abb
 80079b0:	680b      	ldr	r3, [r1, #0]
 80079b2:	1d1a      	adds	r2, r3, #4
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	600a      	str	r2, [r1, #0]
 80079b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0a3      	b.n	8007b0c <_printf_i+0x1f4>
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	6808      	ldr	r0, [r1, #0]
 80079c8:	062e      	lsls	r6, r5, #24
 80079ca:	f100 0304 	add.w	r3, r0, #4
 80079ce:	d50a      	bpl.n	80079e6 <_printf_i+0xce>
 80079d0:	6805      	ldr	r5, [r0, #0]
 80079d2:	600b      	str	r3, [r1, #0]
 80079d4:	2d00      	cmp	r5, #0
 80079d6:	da03      	bge.n	80079e0 <_printf_i+0xc8>
 80079d8:	232d      	movs	r3, #45	; 0x2d
 80079da:	426d      	negs	r5, r5
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	485e      	ldr	r0, [pc, #376]	; (8007b5c <_printf_i+0x244>)
 80079e2:	230a      	movs	r3, #10
 80079e4:	e019      	b.n	8007a1a <_printf_i+0x102>
 80079e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80079ea:	6805      	ldr	r5, [r0, #0]
 80079ec:	600b      	str	r3, [r1, #0]
 80079ee:	bf18      	it	ne
 80079f0:	b22d      	sxthne	r5, r5
 80079f2:	e7ef      	b.n	80079d4 <_printf_i+0xbc>
 80079f4:	680b      	ldr	r3, [r1, #0]
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	1d18      	adds	r0, r3, #4
 80079fa:	6008      	str	r0, [r1, #0]
 80079fc:	0628      	lsls	r0, r5, #24
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0xec>
 8007a00:	681d      	ldr	r5, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0xf2>
 8007a04:	0669      	lsls	r1, r5, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0xe8>
 8007a08:	881d      	ldrh	r5, [r3, #0]
 8007a0a:	4854      	ldr	r0, [pc, #336]	; (8007b5c <_printf_i+0x244>)
 8007a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a0e:	bf0c      	ite	eq
 8007a10:	2308      	moveq	r3, #8
 8007a12:	230a      	movne	r3, #10
 8007a14:	2100      	movs	r1, #0
 8007a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1a:	6866      	ldr	r6, [r4, #4]
 8007a1c:	60a6      	str	r6, [r4, #8]
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	bfa2      	ittt	ge
 8007a22:	6821      	ldrge	r1, [r4, #0]
 8007a24:	f021 0104 	bicge.w	r1, r1, #4
 8007a28:	6021      	strge	r1, [r4, #0]
 8007a2a:	b90d      	cbnz	r5, 8007a30 <_printf_i+0x118>
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	d04d      	beq.n	8007acc <_printf_i+0x1b4>
 8007a30:	4616      	mov	r6, r2
 8007a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a36:	fb03 5711 	mls	r7, r3, r1, r5
 8007a3a:	5dc7      	ldrb	r7, [r0, r7]
 8007a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a40:	462f      	mov	r7, r5
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	460d      	mov	r5, r1
 8007a46:	d9f4      	bls.n	8007a32 <_printf_i+0x11a>
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10b      	bne.n	8007a64 <_printf_i+0x14c>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	07df      	lsls	r7, r3, #31
 8007a50:	d508      	bpl.n	8007a64 <_printf_i+0x14c>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4299      	cmp	r1, r3
 8007a58:	bfde      	ittt	le
 8007a5a:	2330      	movle	r3, #48	; 0x30
 8007a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a64:	1b92      	subs	r2, r2, r6
 8007a66:	6122      	str	r2, [r4, #16]
 8007a68:	f8cd a000 	str.w	sl, [sp]
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	aa03      	add	r2, sp, #12
 8007a70:	4621      	mov	r1, r4
 8007a72:	4640      	mov	r0, r8
 8007a74:	f7ff fee2 	bl	800783c <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d14c      	bne.n	8007b16 <_printf_i+0x1fe>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	b004      	add	sp, #16
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	4835      	ldr	r0, [pc, #212]	; (8007b5c <_printf_i+0x244>)
 8007a88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	680e      	ldr	r6, [r1, #0]
 8007a90:	061f      	lsls	r7, r3, #24
 8007a92:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a96:	600e      	str	r6, [r1, #0]
 8007a98:	d514      	bpl.n	8007ac4 <_printf_i+0x1ac>
 8007a9a:	07d9      	lsls	r1, r3, #31
 8007a9c:	bf44      	itt	mi
 8007a9e:	f043 0320 	orrmi.w	r3, r3, #32
 8007aa2:	6023      	strmi	r3, [r4, #0]
 8007aa4:	b91d      	cbnz	r5, 8007aae <_printf_i+0x196>
 8007aa6:	6823      	ldr	r3, [r4, #0]
 8007aa8:	f023 0320 	bic.w	r3, r3, #32
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	2310      	movs	r3, #16
 8007ab0:	e7b0      	b.n	8007a14 <_printf_i+0xfc>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	2378      	movs	r3, #120	; 0x78
 8007abc:	4828      	ldr	r0, [pc, #160]	; (8007b60 <_printf_i+0x248>)
 8007abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ac2:	e7e3      	b.n	8007a8c <_printf_i+0x174>
 8007ac4:	065e      	lsls	r6, r3, #25
 8007ac6:	bf48      	it	mi
 8007ac8:	b2ad      	uxthmi	r5, r5
 8007aca:	e7e6      	b.n	8007a9a <_printf_i+0x182>
 8007acc:	4616      	mov	r6, r2
 8007ace:	e7bb      	b.n	8007a48 <_printf_i+0x130>
 8007ad0:	680b      	ldr	r3, [r1, #0]
 8007ad2:	6826      	ldr	r6, [r4, #0]
 8007ad4:	6960      	ldr	r0, [r4, #20]
 8007ad6:	1d1d      	adds	r5, r3, #4
 8007ad8:	600d      	str	r5, [r1, #0]
 8007ada:	0635      	lsls	r5, r6, #24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	d501      	bpl.n	8007ae4 <_printf_i+0x1cc>
 8007ae0:	6018      	str	r0, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <_printf_i+0x1d2>
 8007ae4:	0671      	lsls	r1, r6, #25
 8007ae6:	d5fb      	bpl.n	8007ae0 <_printf_i+0x1c8>
 8007ae8:	8018      	strh	r0, [r3, #0]
 8007aea:	2300      	movs	r3, #0
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	4616      	mov	r6, r2
 8007af0:	e7ba      	b.n	8007a68 <_printf_i+0x150>
 8007af2:	680b      	ldr	r3, [r1, #0]
 8007af4:	1d1a      	adds	r2, r3, #4
 8007af6:	600a      	str	r2, [r1, #0]
 8007af8:	681e      	ldr	r6, [r3, #0]
 8007afa:	6862      	ldr	r2, [r4, #4]
 8007afc:	2100      	movs	r1, #0
 8007afe:	4630      	mov	r0, r6
 8007b00:	f7f8 fb76 	bl	80001f0 <memchr>
 8007b04:	b108      	cbz	r0, 8007b0a <_printf_i+0x1f2>
 8007b06:	1b80      	subs	r0, r0, r6
 8007b08:	6060      	str	r0, [r4, #4]
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	6123      	str	r3, [r4, #16]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b14:	e7a8      	b.n	8007a68 <_printf_i+0x150>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	47d0      	blx	sl
 8007b20:	3001      	adds	r0, #1
 8007b22:	d0ab      	beq.n	8007a7c <_printf_i+0x164>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	079b      	lsls	r3, r3, #30
 8007b28:	d413      	bmi.n	8007b52 <_printf_i+0x23a>
 8007b2a:	68e0      	ldr	r0, [r4, #12]
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	4298      	cmp	r0, r3
 8007b30:	bfb8      	it	lt
 8007b32:	4618      	movlt	r0, r3
 8007b34:	e7a4      	b.n	8007a80 <_printf_i+0x168>
 8007b36:	2301      	movs	r3, #1
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	4640      	mov	r0, r8
 8007b3e:	47d0      	blx	sl
 8007b40:	3001      	adds	r0, #1
 8007b42:	d09b      	beq.n	8007a7c <_printf_i+0x164>
 8007b44:	3501      	adds	r5, #1
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	9903      	ldr	r1, [sp, #12]
 8007b4a:	1a5b      	subs	r3, r3, r1
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dcf2      	bgt.n	8007b36 <_printf_i+0x21e>
 8007b50:	e7eb      	b.n	8007b2a <_printf_i+0x212>
 8007b52:	2500      	movs	r5, #0
 8007b54:	f104 0619 	add.w	r6, r4, #25
 8007b58:	e7f5      	b.n	8007b46 <_printf_i+0x22e>
 8007b5a:	bf00      	nop
 8007b5c:	0800ef32 	.word	0x0800ef32
 8007b60:	0800ef43 	.word	0x0800ef43

08007b64 <iprintf>:
 8007b64:	b40f      	push	{r0, r1, r2, r3}
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <iprintf+0x2c>)
 8007b68:	b513      	push	{r0, r1, r4, lr}
 8007b6a:	681c      	ldr	r4, [r3, #0]
 8007b6c:	b124      	cbz	r4, 8007b78 <iprintf+0x14>
 8007b6e:	69a3      	ldr	r3, [r4, #24]
 8007b70:	b913      	cbnz	r3, 8007b78 <iprintf+0x14>
 8007b72:	4620      	mov	r0, r4
 8007b74:	f001 f8f6 	bl	8008d64 <__sinit>
 8007b78:	ab05      	add	r3, sp, #20
 8007b7a:	9a04      	ldr	r2, [sp, #16]
 8007b7c:	68a1      	ldr	r1, [r4, #8]
 8007b7e:	9301      	str	r3, [sp, #4]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f001 ffcd 	bl	8009b20 <_vfiprintf_r>
 8007b86:	b002      	add	sp, #8
 8007b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b8c:	b004      	add	sp, #16
 8007b8e:	4770      	bx	lr
 8007b90:	20000028 	.word	0x20000028

08007b94 <_puts_r>:
 8007b94:	b570      	push	{r4, r5, r6, lr}
 8007b96:	460e      	mov	r6, r1
 8007b98:	4605      	mov	r5, r0
 8007b9a:	b118      	cbz	r0, 8007ba4 <_puts_r+0x10>
 8007b9c:	6983      	ldr	r3, [r0, #24]
 8007b9e:	b90b      	cbnz	r3, 8007ba4 <_puts_r+0x10>
 8007ba0:	f001 f8e0 	bl	8008d64 <__sinit>
 8007ba4:	69ab      	ldr	r3, [r5, #24]
 8007ba6:	68ac      	ldr	r4, [r5, #8]
 8007ba8:	b913      	cbnz	r3, 8007bb0 <_puts_r+0x1c>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f001 f8da 	bl	8008d64 <__sinit>
 8007bb0:	4b2c      	ldr	r3, [pc, #176]	; (8007c64 <_puts_r+0xd0>)
 8007bb2:	429c      	cmp	r4, r3
 8007bb4:	d120      	bne.n	8007bf8 <_puts_r+0x64>
 8007bb6:	686c      	ldr	r4, [r5, #4]
 8007bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bba:	07db      	lsls	r3, r3, #31
 8007bbc:	d405      	bmi.n	8007bca <_puts_r+0x36>
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	0598      	lsls	r0, r3, #22
 8007bc2:	d402      	bmi.n	8007bca <_puts_r+0x36>
 8007bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc6:	f001 f970 	bl	8008eaa <__retarget_lock_acquire_recursive>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	0719      	lsls	r1, r3, #28
 8007bce:	d51d      	bpl.n	8007c0c <_puts_r+0x78>
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	b1db      	cbz	r3, 8007c0c <_puts_r+0x78>
 8007bd4:	3e01      	subs	r6, #1
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	bb39      	cbnz	r1, 8007c32 <_puts_r+0x9e>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da38      	bge.n	8007c58 <_puts_r+0xc4>
 8007be6:	4622      	mov	r2, r4
 8007be8:	210a      	movs	r1, #10
 8007bea:	4628      	mov	r0, r5
 8007bec:	f000 f868 	bl	8007cc0 <__swbuf_r>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d011      	beq.n	8007c18 <_puts_r+0x84>
 8007bf4:	250a      	movs	r5, #10
 8007bf6:	e011      	b.n	8007c1c <_puts_r+0x88>
 8007bf8:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <_puts_r+0xd4>)
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d101      	bne.n	8007c02 <_puts_r+0x6e>
 8007bfe:	68ac      	ldr	r4, [r5, #8]
 8007c00:	e7da      	b.n	8007bb8 <_puts_r+0x24>
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <_puts_r+0xd8>)
 8007c04:	429c      	cmp	r4, r3
 8007c06:	bf08      	it	eq
 8007c08:	68ec      	ldreq	r4, [r5, #12]
 8007c0a:	e7d5      	b.n	8007bb8 <_puts_r+0x24>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f8a8 	bl	8007d64 <__swsetup_r>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	d0dd      	beq.n	8007bd4 <_puts_r+0x40>
 8007c18:	f04f 35ff 	mov.w	r5, #4294967295
 8007c1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_puts_r+0x9a>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	059b      	lsls	r3, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_puts_r+0x9a>
 8007c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2a:	f001 f93f 	bl	8008eac <__retarget_lock_release_recursive>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da04      	bge.n	8007c40 <_puts_r+0xac>
 8007c36:	69a2      	ldr	r2, [r4, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	dc06      	bgt.n	8007c4a <_puts_r+0xb6>
 8007c3c:	290a      	cmp	r1, #10
 8007c3e:	d004      	beq.n	8007c4a <_puts_r+0xb6>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	e7c5      	b.n	8007bd6 <_puts_r+0x42>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 f837 	bl	8007cc0 <__swbuf_r>
 8007c52:	3001      	adds	r0, #1
 8007c54:	d1bf      	bne.n	8007bd6 <_puts_r+0x42>
 8007c56:	e7df      	b.n	8007c18 <_puts_r+0x84>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	250a      	movs	r5, #10
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	6022      	str	r2, [r4, #0]
 8007c60:	701d      	strb	r5, [r3, #0]
 8007c62:	e7db      	b.n	8007c1c <_puts_r+0x88>
 8007c64:	0800f008 	.word	0x0800f008
 8007c68:	0800f028 	.word	0x0800f028
 8007c6c:	0800efe8 	.word	0x0800efe8

08007c70 <puts>:
 8007c70:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <puts+0xc>)
 8007c72:	4601      	mov	r1, r0
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	f7ff bf8d 	b.w	8007b94 <_puts_r>
 8007c7a:	bf00      	nop
 8007c7c:	20000028 	.word	0x20000028

08007c80 <siprintf>:
 8007c80:	b40e      	push	{r1, r2, r3}
 8007c82:	b500      	push	{lr}
 8007c84:	b09c      	sub	sp, #112	; 0x70
 8007c86:	ab1d      	add	r3, sp, #116	; 0x74
 8007c88:	9002      	str	r0, [sp, #8]
 8007c8a:	9006      	str	r0, [sp, #24]
 8007c8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c90:	4809      	ldr	r0, [pc, #36]	; (8007cb8 <siprintf+0x38>)
 8007c92:	9107      	str	r1, [sp, #28]
 8007c94:	9104      	str	r1, [sp, #16]
 8007c96:	4909      	ldr	r1, [pc, #36]	; (8007cbc <siprintf+0x3c>)
 8007c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9c:	9105      	str	r1, [sp, #20]
 8007c9e:	6800      	ldr	r0, [r0, #0]
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	a902      	add	r1, sp, #8
 8007ca4:	f001 fe12 	bl	80098cc <_svfiprintf_r>
 8007ca8:	9b02      	ldr	r3, [sp, #8]
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	b01c      	add	sp, #112	; 0x70
 8007cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cb4:	b003      	add	sp, #12
 8007cb6:	4770      	bx	lr
 8007cb8:	20000028 	.word	0x20000028
 8007cbc:	ffff0208 	.word	0xffff0208

08007cc0 <__swbuf_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	b118      	cbz	r0, 8007cd2 <__swbuf_r+0x12>
 8007cca:	6983      	ldr	r3, [r0, #24]
 8007ccc:	b90b      	cbnz	r3, 8007cd2 <__swbuf_r+0x12>
 8007cce:	f001 f849 	bl	8008d64 <__sinit>
 8007cd2:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <__swbuf_r+0x98>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	d12b      	bne.n	8007d30 <__swbuf_r+0x70>
 8007cd8:	686c      	ldr	r4, [r5, #4]
 8007cda:	69a3      	ldr	r3, [r4, #24]
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	071a      	lsls	r2, r3, #28
 8007ce2:	d52f      	bpl.n	8007d44 <__swbuf_r+0x84>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	b36b      	cbz	r3, 8007d44 <__swbuf_r+0x84>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	1ac0      	subs	r0, r0, r3
 8007cee:	6963      	ldr	r3, [r4, #20]
 8007cf0:	b2f6      	uxtb	r6, r6
 8007cf2:	4283      	cmp	r3, r0
 8007cf4:	4637      	mov	r7, r6
 8007cf6:	dc04      	bgt.n	8007d02 <__swbuf_r+0x42>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 ff9e 	bl	8008c3c <_fflush_r>
 8007d00:	bb30      	cbnz	r0, 8007d50 <__swbuf_r+0x90>
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	60a3      	str	r3, [r4, #8]
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	6022      	str	r2, [r4, #0]
 8007d0e:	701e      	strb	r6, [r3, #0]
 8007d10:	6963      	ldr	r3, [r4, #20]
 8007d12:	3001      	adds	r0, #1
 8007d14:	4283      	cmp	r3, r0
 8007d16:	d004      	beq.n	8007d22 <__swbuf_r+0x62>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	07db      	lsls	r3, r3, #31
 8007d1c:	d506      	bpl.n	8007d2c <__swbuf_r+0x6c>
 8007d1e:	2e0a      	cmp	r6, #10
 8007d20:	d104      	bne.n	8007d2c <__swbuf_r+0x6c>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 ff89 	bl	8008c3c <_fflush_r>
 8007d2a:	b988      	cbnz	r0, 8007d50 <__swbuf_r+0x90>
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <__swbuf_r+0x9c>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <__swbuf_r+0x7a>
 8007d36:	68ac      	ldr	r4, [r5, #8]
 8007d38:	e7cf      	b.n	8007cda <__swbuf_r+0x1a>
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <__swbuf_r+0xa0>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68ec      	ldreq	r4, [r5, #12]
 8007d42:	e7ca      	b.n	8007cda <__swbuf_r+0x1a>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f80c 	bl	8007d64 <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0cb      	beq.n	8007ce8 <__swbuf_r+0x28>
 8007d50:	f04f 37ff 	mov.w	r7, #4294967295
 8007d54:	e7ea      	b.n	8007d2c <__swbuf_r+0x6c>
 8007d56:	bf00      	nop
 8007d58:	0800f008 	.word	0x0800f008
 8007d5c:	0800f028 	.word	0x0800f028
 8007d60:	0800efe8 	.word	0x0800efe8

08007d64 <__swsetup_r>:
 8007d64:	4b32      	ldr	r3, [pc, #200]	; (8007e30 <__swsetup_r+0xcc>)
 8007d66:	b570      	push	{r4, r5, r6, lr}
 8007d68:	681d      	ldr	r5, [r3, #0]
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	b125      	cbz	r5, 8007d7a <__swsetup_r+0x16>
 8007d70:	69ab      	ldr	r3, [r5, #24]
 8007d72:	b913      	cbnz	r3, 8007d7a <__swsetup_r+0x16>
 8007d74:	4628      	mov	r0, r5
 8007d76:	f000 fff5 	bl	8008d64 <__sinit>
 8007d7a:	4b2e      	ldr	r3, [pc, #184]	; (8007e34 <__swsetup_r+0xd0>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	d10f      	bne.n	8007da0 <__swsetup_r+0x3c>
 8007d80:	686c      	ldr	r4, [r5, #4]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d88:	0719      	lsls	r1, r3, #28
 8007d8a:	d42c      	bmi.n	8007de6 <__swsetup_r+0x82>
 8007d8c:	06dd      	lsls	r5, r3, #27
 8007d8e:	d411      	bmi.n	8007db4 <__swsetup_r+0x50>
 8007d90:	2309      	movs	r3, #9
 8007d92:	6033      	str	r3, [r6, #0]
 8007d94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9e:	e03e      	b.n	8007e1e <__swsetup_r+0xba>
 8007da0:	4b25      	ldr	r3, [pc, #148]	; (8007e38 <__swsetup_r+0xd4>)
 8007da2:	429c      	cmp	r4, r3
 8007da4:	d101      	bne.n	8007daa <__swsetup_r+0x46>
 8007da6:	68ac      	ldr	r4, [r5, #8]
 8007da8:	e7eb      	b.n	8007d82 <__swsetup_r+0x1e>
 8007daa:	4b24      	ldr	r3, [pc, #144]	; (8007e3c <__swsetup_r+0xd8>)
 8007dac:	429c      	cmp	r4, r3
 8007dae:	bf08      	it	eq
 8007db0:	68ec      	ldreq	r4, [r5, #12]
 8007db2:	e7e6      	b.n	8007d82 <__swsetup_r+0x1e>
 8007db4:	0758      	lsls	r0, r3, #29
 8007db6:	d512      	bpl.n	8007dde <__swsetup_r+0x7a>
 8007db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dba:	b141      	cbz	r1, 8007dce <__swsetup_r+0x6a>
 8007dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dc0:	4299      	cmp	r1, r3
 8007dc2:	d002      	beq.n	8007dca <__swsetup_r+0x66>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f001 fc7b 	bl	80096c0 <_free_r>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6063      	str	r3, [r4, #4]
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f043 0308 	orr.w	r3, r3, #8
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	b94b      	cbnz	r3, 8007dfe <__swsetup_r+0x9a>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df4:	d003      	beq.n	8007dfe <__swsetup_r+0x9a>
 8007df6:	4621      	mov	r1, r4
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f001 f87d 	bl	8008ef8 <__smakebuf_r>
 8007dfe:	89a0      	ldrh	r0, [r4, #12]
 8007e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e04:	f010 0301 	ands.w	r3, r0, #1
 8007e08:	d00a      	beq.n	8007e20 <__swsetup_r+0xbc>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60a3      	str	r3, [r4, #8]
 8007e0e:	6963      	ldr	r3, [r4, #20]
 8007e10:	425b      	negs	r3, r3
 8007e12:	61a3      	str	r3, [r4, #24]
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	b943      	cbnz	r3, 8007e2a <__swsetup_r+0xc6>
 8007e18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e1c:	d1ba      	bne.n	8007d94 <__swsetup_r+0x30>
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
 8007e20:	0781      	lsls	r1, r0, #30
 8007e22:	bf58      	it	pl
 8007e24:	6963      	ldrpl	r3, [r4, #20]
 8007e26:	60a3      	str	r3, [r4, #8]
 8007e28:	e7f4      	b.n	8007e14 <__swsetup_r+0xb0>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e7f7      	b.n	8007e1e <__swsetup_r+0xba>
 8007e2e:	bf00      	nop
 8007e30:	20000028 	.word	0x20000028
 8007e34:	0800f008 	.word	0x0800f008
 8007e38:	0800f028 	.word	0x0800f028
 8007e3c:	0800efe8 	.word	0x0800efe8

08007e40 <quorem>:
 8007e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	6903      	ldr	r3, [r0, #16]
 8007e46:	690c      	ldr	r4, [r1, #16]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	4607      	mov	r7, r0
 8007e4c:	f2c0 8081 	blt.w	8007f52 <quorem+0x112>
 8007e50:	3c01      	subs	r4, #1
 8007e52:	f101 0814 	add.w	r8, r1, #20
 8007e56:	f100 0514 	add.w	r5, r0, #20
 8007e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e78:	d331      	bcc.n	8007ede <quorem+0x9e>
 8007e7a:	f04f 0e00 	mov.w	lr, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	46ac      	mov	ip, r5
 8007e82:	46f2      	mov	sl, lr
 8007e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e88:	b293      	uxth	r3, r2
 8007e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ebaa 0303 	sub.w	r3, sl, r3
 8007e98:	0c12      	lsrs	r2, r2, #16
 8007e9a:	f8dc a000 	ldr.w	sl, [ip]
 8007e9e:	fb06 e202 	mla	r2, r6, r2, lr
 8007ea2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eaa:	fa1f fa82 	uxth.w	sl, r2
 8007eae:	f8dc 2000 	ldr.w	r2, [ip]
 8007eb2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007eb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ec0:	4581      	cmp	r9, r0
 8007ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007eca:	d2db      	bcs.n	8007e84 <quorem+0x44>
 8007ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ed0:	b92b      	cbnz	r3, 8007ede <quorem+0x9e>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	429d      	cmp	r5, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	d32e      	bcc.n	8007f3a <quorem+0xfa>
 8007edc:	613c      	str	r4, [r7, #16]
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f001 fade 	bl	80094a0 <__mcmp>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	db24      	blt.n	8007f32 <quorem+0xf2>
 8007ee8:	3601      	adds	r6, #1
 8007eea:	4628      	mov	r0, r5
 8007eec:	f04f 0c00 	mov.w	ip, #0
 8007ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ef8:	b293      	uxth	r3, r2
 8007efa:	ebac 0303 	sub.w	r3, ip, r3
 8007efe:	0c12      	lsrs	r2, r2, #16
 8007f00:	fa13 f38e 	uxtah	r3, r3, lr
 8007f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f12:	45c1      	cmp	r9, r8
 8007f14:	f840 3b04 	str.w	r3, [r0], #4
 8007f18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f1c:	d2e8      	bcs.n	8007ef0 <quorem+0xb0>
 8007f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f26:	b922      	cbnz	r2, 8007f32 <quorem+0xf2>
 8007f28:	3b04      	subs	r3, #4
 8007f2a:	429d      	cmp	r5, r3
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	d30a      	bcc.n	8007f46 <quorem+0x106>
 8007f30:	613c      	str	r4, [r7, #16]
 8007f32:	4630      	mov	r0, r6
 8007f34:	b003      	add	sp, #12
 8007f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f3a:	6812      	ldr	r2, [r2, #0]
 8007f3c:	3b04      	subs	r3, #4
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d1cc      	bne.n	8007edc <quorem+0x9c>
 8007f42:	3c01      	subs	r4, #1
 8007f44:	e7c7      	b.n	8007ed6 <quorem+0x96>
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1f0      	bne.n	8007f30 <quorem+0xf0>
 8007f4e:	3c01      	subs	r4, #1
 8007f50:	e7eb      	b.n	8007f2a <quorem+0xea>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e7ee      	b.n	8007f34 <quorem+0xf4>
	...

08007f58 <_dtoa_r>:
 8007f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f5c:	ed2d 8b02 	vpush	{d8}
 8007f60:	ec57 6b10 	vmov	r6, r7, d0
 8007f64:	b095      	sub	sp, #84	; 0x54
 8007f66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f6c:	9105      	str	r1, [sp, #20]
 8007f6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f72:	4604      	mov	r4, r0
 8007f74:	9209      	str	r2, [sp, #36]	; 0x24
 8007f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f78:	b975      	cbnz	r5, 8007f98 <_dtoa_r+0x40>
 8007f7a:	2010      	movs	r0, #16
 8007f7c:	f000 fffc 	bl	8008f78 <malloc>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6260      	str	r0, [r4, #36]	; 0x24
 8007f84:	b920      	cbnz	r0, 8007f90 <_dtoa_r+0x38>
 8007f86:	4bb2      	ldr	r3, [pc, #712]	; (8008250 <_dtoa_r+0x2f8>)
 8007f88:	21ea      	movs	r1, #234	; 0xea
 8007f8a:	48b2      	ldr	r0, [pc, #712]	; (8008254 <_dtoa_r+0x2fc>)
 8007f8c:	f001 ff5e 	bl	8009e4c <__assert_func>
 8007f90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f94:	6005      	str	r5, [r0, #0]
 8007f96:	60c5      	str	r5, [r0, #12]
 8007f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f9a:	6819      	ldr	r1, [r3, #0]
 8007f9c:	b151      	cbz	r1, 8007fb4 <_dtoa_r+0x5c>
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	604a      	str	r2, [r1, #4]
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	608b      	str	r3, [r1, #8]
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f001 f83b 	bl	8009024 <_Bfree>
 8007fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	1e3b      	subs	r3, r7, #0
 8007fb6:	bfb9      	ittee	lt
 8007fb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fbc:	9303      	strlt	r3, [sp, #12]
 8007fbe:	2300      	movge	r3, #0
 8007fc0:	f8c8 3000 	strge.w	r3, [r8]
 8007fc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007fc8:	4ba3      	ldr	r3, [pc, #652]	; (8008258 <_dtoa_r+0x300>)
 8007fca:	bfbc      	itt	lt
 8007fcc:	2201      	movlt	r2, #1
 8007fce:	f8c8 2000 	strlt.w	r2, [r8]
 8007fd2:	ea33 0309 	bics.w	r3, r3, r9
 8007fd6:	d11b      	bne.n	8008010 <_dtoa_r+0xb8>
 8007fd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007fda:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fe4:	4333      	orrs	r3, r6
 8007fe6:	f000 857a 	beq.w	8008ade <_dtoa_r+0xb86>
 8007fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fec:	b963      	cbnz	r3, 8008008 <_dtoa_r+0xb0>
 8007fee:	4b9b      	ldr	r3, [pc, #620]	; (800825c <_dtoa_r+0x304>)
 8007ff0:	e024      	b.n	800803c <_dtoa_r+0xe4>
 8007ff2:	4b9b      	ldr	r3, [pc, #620]	; (8008260 <_dtoa_r+0x308>)
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	9800      	ldr	r0, [sp, #0]
 8007ffe:	b015      	add	sp, #84	; 0x54
 8008000:	ecbd 8b02 	vpop	{d8}
 8008004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008008:	4b94      	ldr	r3, [pc, #592]	; (800825c <_dtoa_r+0x304>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	3303      	adds	r3, #3
 800800e:	e7f3      	b.n	8007ff8 <_dtoa_r+0xa0>
 8008010:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008014:	2200      	movs	r2, #0
 8008016:	ec51 0b17 	vmov	r0, r1, d7
 800801a:	2300      	movs	r3, #0
 800801c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008020:	f7f8 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008024:	4680      	mov	r8, r0
 8008026:	b158      	cbz	r0, 8008040 <_dtoa_r+0xe8>
 8008028:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800802a:	2301      	movs	r3, #1
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8551 	beq.w	8008ad8 <_dtoa_r+0xb80>
 8008036:	488b      	ldr	r0, [pc, #556]	; (8008264 <_dtoa_r+0x30c>)
 8008038:	6018      	str	r0, [r3, #0]
 800803a:	1e43      	subs	r3, r0, #1
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	e7dd      	b.n	8007ffc <_dtoa_r+0xa4>
 8008040:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008044:	aa12      	add	r2, sp, #72	; 0x48
 8008046:	a913      	add	r1, sp, #76	; 0x4c
 8008048:	4620      	mov	r0, r4
 800804a:	f001 facd 	bl	80095e8 <__d2b>
 800804e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008052:	4683      	mov	fp, r0
 8008054:	2d00      	cmp	r5, #0
 8008056:	d07c      	beq.n	8008152 <_dtoa_r+0x1fa>
 8008058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800805e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008062:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008066:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800806a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800806e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008072:	4b7d      	ldr	r3, [pc, #500]	; (8008268 <_dtoa_r+0x310>)
 8008074:	2200      	movs	r2, #0
 8008076:	4630      	mov	r0, r6
 8008078:	4639      	mov	r1, r7
 800807a:	f7f8 f90d 	bl	8000298 <__aeabi_dsub>
 800807e:	a36e      	add	r3, pc, #440	; (adr r3, 8008238 <_dtoa_r+0x2e0>)
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	f7f8 fac0 	bl	8000608 <__aeabi_dmul>
 8008088:	a36d      	add	r3, pc, #436	; (adr r3, 8008240 <_dtoa_r+0x2e8>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 f905 	bl	800029c <__adddf3>
 8008092:	4606      	mov	r6, r0
 8008094:	4628      	mov	r0, r5
 8008096:	460f      	mov	r7, r1
 8008098:	f7f8 fa4c 	bl	8000534 <__aeabi_i2d>
 800809c:	a36a      	add	r3, pc, #424	; (adr r3, 8008248 <_dtoa_r+0x2f0>)
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f8f5 	bl	800029c <__adddf3>
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	f7f8 fd57 	bl	8000b68 <__aeabi_d2iz>
 80080ba:	2200      	movs	r2, #0
 80080bc:	4682      	mov	sl, r0
 80080be:	2300      	movs	r3, #0
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 fd12 	bl	8000aec <__aeabi_dcmplt>
 80080c8:	b148      	cbz	r0, 80080de <_dtoa_r+0x186>
 80080ca:	4650      	mov	r0, sl
 80080cc:	f7f8 fa32 	bl	8000534 <__aeabi_i2d>
 80080d0:	4632      	mov	r2, r6
 80080d2:	463b      	mov	r3, r7
 80080d4:	f7f8 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 80080d8:	b908      	cbnz	r0, 80080de <_dtoa_r+0x186>
 80080da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080de:	f1ba 0f16 	cmp.w	sl, #22
 80080e2:	d854      	bhi.n	800818e <_dtoa_r+0x236>
 80080e4:	4b61      	ldr	r3, [pc, #388]	; (800826c <_dtoa_r+0x314>)
 80080e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080f2:	f7f8 fcfb 	bl	8000aec <__aeabi_dcmplt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d04b      	beq.n	8008192 <_dtoa_r+0x23a>
 80080fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080fe:	2300      	movs	r3, #0
 8008100:	930e      	str	r3, [sp, #56]	; 0x38
 8008102:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008104:	1b5d      	subs	r5, r3, r5
 8008106:	1e6b      	subs	r3, r5, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	bf43      	ittte	mi
 800810c:	2300      	movmi	r3, #0
 800810e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008112:	9304      	strmi	r3, [sp, #16]
 8008114:	f04f 0800 	movpl.w	r8, #0
 8008118:	f1ba 0f00 	cmp.w	sl, #0
 800811c:	db3b      	blt.n	8008196 <_dtoa_r+0x23e>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008124:	4453      	add	r3, sl
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	2300      	movs	r3, #0
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	9b05      	ldr	r3, [sp, #20]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d869      	bhi.n	8008206 <_dtoa_r+0x2ae>
 8008132:	2b05      	cmp	r3, #5
 8008134:	bfc4      	itt	gt
 8008136:	3b04      	subgt	r3, #4
 8008138:	9305      	strgt	r3, [sp, #20]
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	f1a3 0302 	sub.w	r3, r3, #2
 8008140:	bfcc      	ite	gt
 8008142:	2500      	movgt	r5, #0
 8008144:	2501      	movle	r5, #1
 8008146:	2b03      	cmp	r3, #3
 8008148:	d869      	bhi.n	800821e <_dtoa_r+0x2c6>
 800814a:	e8df f003 	tbb	[pc, r3]
 800814e:	4e2c      	.short	0x4e2c
 8008150:	5a4c      	.short	0x5a4c
 8008152:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008156:	441d      	add	r5, r3
 8008158:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800815c:	2b20      	cmp	r3, #32
 800815e:	bfc1      	itttt	gt
 8008160:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008164:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008168:	fa09 f303 	lslgt.w	r3, r9, r3
 800816c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008170:	bfda      	itte	le
 8008172:	f1c3 0320 	rsble	r3, r3, #32
 8008176:	fa06 f003 	lslle.w	r0, r6, r3
 800817a:	4318      	orrgt	r0, r3
 800817c:	f7f8 f9ca 	bl	8000514 <__aeabi_ui2d>
 8008180:	2301      	movs	r3, #1
 8008182:	4606      	mov	r6, r0
 8008184:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008188:	3d01      	subs	r5, #1
 800818a:	9310      	str	r3, [sp, #64]	; 0x40
 800818c:	e771      	b.n	8008072 <_dtoa_r+0x11a>
 800818e:	2301      	movs	r3, #1
 8008190:	e7b6      	b.n	8008100 <_dtoa_r+0x1a8>
 8008192:	900e      	str	r0, [sp, #56]	; 0x38
 8008194:	e7b5      	b.n	8008102 <_dtoa_r+0x1aa>
 8008196:	f1ca 0300 	rsb	r3, sl, #0
 800819a:	9306      	str	r3, [sp, #24]
 800819c:	2300      	movs	r3, #0
 800819e:	eba8 080a 	sub.w	r8, r8, sl
 80081a2:	930d      	str	r3, [sp, #52]	; 0x34
 80081a4:	e7c2      	b.n	800812c <_dtoa_r+0x1d4>
 80081a6:	2300      	movs	r3, #0
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dc39      	bgt.n	8008224 <_dtoa_r+0x2cc>
 80081b0:	f04f 0901 	mov.w	r9, #1
 80081b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80081b8:	464b      	mov	r3, r9
 80081ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081c0:	2200      	movs	r2, #0
 80081c2:	6042      	str	r2, [r0, #4]
 80081c4:	2204      	movs	r2, #4
 80081c6:	f102 0614 	add.w	r6, r2, #20
 80081ca:	429e      	cmp	r6, r3
 80081cc:	6841      	ldr	r1, [r0, #4]
 80081ce:	d92f      	bls.n	8008230 <_dtoa_r+0x2d8>
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fee7 	bl	8008fa4 <_Balloc>
 80081d6:	9000      	str	r0, [sp, #0]
 80081d8:	2800      	cmp	r0, #0
 80081da:	d14b      	bne.n	8008274 <_dtoa_r+0x31c>
 80081dc:	4b24      	ldr	r3, [pc, #144]	; (8008270 <_dtoa_r+0x318>)
 80081de:	4602      	mov	r2, r0
 80081e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081e4:	e6d1      	b.n	8007f8a <_dtoa_r+0x32>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e7de      	b.n	80081a8 <_dtoa_r+0x250>
 80081ea:	2300      	movs	r3, #0
 80081ec:	9308      	str	r3, [sp, #32]
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	eb0a 0903 	add.w	r9, sl, r3
 80081f4:	f109 0301 	add.w	r3, r9, #1
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	bfb8      	it	lt
 80081fe:	2301      	movlt	r3, #1
 8008200:	e7dd      	b.n	80081be <_dtoa_r+0x266>
 8008202:	2301      	movs	r3, #1
 8008204:	e7f2      	b.n	80081ec <_dtoa_r+0x294>
 8008206:	2501      	movs	r5, #1
 8008208:	2300      	movs	r3, #0
 800820a:	9305      	str	r3, [sp, #20]
 800820c:	9508      	str	r5, [sp, #32]
 800820e:	f04f 39ff 	mov.w	r9, #4294967295
 8008212:	2200      	movs	r2, #0
 8008214:	f8cd 9004 	str.w	r9, [sp, #4]
 8008218:	2312      	movs	r3, #18
 800821a:	9209      	str	r2, [sp, #36]	; 0x24
 800821c:	e7cf      	b.n	80081be <_dtoa_r+0x266>
 800821e:	2301      	movs	r3, #1
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	e7f4      	b.n	800820e <_dtoa_r+0x2b6>
 8008224:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008228:	f8cd 9004 	str.w	r9, [sp, #4]
 800822c:	464b      	mov	r3, r9
 800822e:	e7c6      	b.n	80081be <_dtoa_r+0x266>
 8008230:	3101      	adds	r1, #1
 8008232:	6041      	str	r1, [r0, #4]
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	e7c6      	b.n	80081c6 <_dtoa_r+0x26e>
 8008238:	636f4361 	.word	0x636f4361
 800823c:	3fd287a7 	.word	0x3fd287a7
 8008240:	8b60c8b3 	.word	0x8b60c8b3
 8008244:	3fc68a28 	.word	0x3fc68a28
 8008248:	509f79fb 	.word	0x509f79fb
 800824c:	3fd34413 	.word	0x3fd34413
 8008250:	0800ef61 	.word	0x0800ef61
 8008254:	0800ef78 	.word	0x0800ef78
 8008258:	7ff00000 	.word	0x7ff00000
 800825c:	0800ef5d 	.word	0x0800ef5d
 8008260:	0800ef54 	.word	0x0800ef54
 8008264:	0800ef31 	.word	0x0800ef31
 8008268:	3ff80000 	.word	0x3ff80000
 800826c:	0800f0d0 	.word	0x0800f0d0
 8008270:	0800efd7 	.word	0x0800efd7
 8008274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008276:	9a00      	ldr	r2, [sp, #0]
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	2b0e      	cmp	r3, #14
 800827e:	f200 80ad 	bhi.w	80083dc <_dtoa_r+0x484>
 8008282:	2d00      	cmp	r5, #0
 8008284:	f000 80aa 	beq.w	80083dc <_dtoa_r+0x484>
 8008288:	f1ba 0f00 	cmp.w	sl, #0
 800828c:	dd36      	ble.n	80082fc <_dtoa_r+0x3a4>
 800828e:	4ac3      	ldr	r2, [pc, #780]	; (800859c <_dtoa_r+0x644>)
 8008290:	f00a 030f 	and.w	r3, sl, #15
 8008294:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008298:	ed93 7b00 	vldr	d7, [r3]
 800829c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082a4:	eeb0 8a47 	vmov.f32	s16, s14
 80082a8:	eef0 8a67 	vmov.f32	s17, s15
 80082ac:	d016      	beq.n	80082dc <_dtoa_r+0x384>
 80082ae:	4bbc      	ldr	r3, [pc, #752]	; (80085a0 <_dtoa_r+0x648>)
 80082b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082b8:	f7f8 fad0 	bl	800085c <__aeabi_ddiv>
 80082bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082c0:	f007 070f 	and.w	r7, r7, #15
 80082c4:	2503      	movs	r5, #3
 80082c6:	4eb6      	ldr	r6, [pc, #728]	; (80085a0 <_dtoa_r+0x648>)
 80082c8:	b957      	cbnz	r7, 80082e0 <_dtoa_r+0x388>
 80082ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ce:	ec53 2b18 	vmov	r2, r3, d8
 80082d2:	f7f8 fac3 	bl	800085c <__aeabi_ddiv>
 80082d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082da:	e029      	b.n	8008330 <_dtoa_r+0x3d8>
 80082dc:	2502      	movs	r5, #2
 80082de:	e7f2      	b.n	80082c6 <_dtoa_r+0x36e>
 80082e0:	07f9      	lsls	r1, r7, #31
 80082e2:	d508      	bpl.n	80082f6 <_dtoa_r+0x39e>
 80082e4:	ec51 0b18 	vmov	r0, r1, d8
 80082e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082ec:	f7f8 f98c 	bl	8000608 <__aeabi_dmul>
 80082f0:	ec41 0b18 	vmov	d8, r0, r1
 80082f4:	3501      	adds	r5, #1
 80082f6:	107f      	asrs	r7, r7, #1
 80082f8:	3608      	adds	r6, #8
 80082fa:	e7e5      	b.n	80082c8 <_dtoa_r+0x370>
 80082fc:	f000 80a6 	beq.w	800844c <_dtoa_r+0x4f4>
 8008300:	f1ca 0600 	rsb	r6, sl, #0
 8008304:	4ba5      	ldr	r3, [pc, #660]	; (800859c <_dtoa_r+0x644>)
 8008306:	4fa6      	ldr	r7, [pc, #664]	; (80085a0 <_dtoa_r+0x648>)
 8008308:	f006 020f 	and.w	r2, r6, #15
 800830c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008320:	1136      	asrs	r6, r6, #4
 8008322:	2300      	movs	r3, #0
 8008324:	2502      	movs	r5, #2
 8008326:	2e00      	cmp	r6, #0
 8008328:	f040 8085 	bne.w	8008436 <_dtoa_r+0x4de>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1d2      	bne.n	80082d6 <_dtoa_r+0x37e>
 8008330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 808c 	beq.w	8008450 <_dtoa_r+0x4f8>
 8008338:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800833c:	4b99      	ldr	r3, [pc, #612]	; (80085a4 <_dtoa_r+0x64c>)
 800833e:	2200      	movs	r2, #0
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fbd2 	bl	8000aec <__aeabi_dcmplt>
 8008348:	2800      	cmp	r0, #0
 800834a:	f000 8081 	beq.w	8008450 <_dtoa_r+0x4f8>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d07d      	beq.n	8008450 <_dtoa_r+0x4f8>
 8008354:	f1b9 0f00 	cmp.w	r9, #0
 8008358:	dd3c      	ble.n	80083d4 <_dtoa_r+0x47c>
 800835a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800835e:	9307      	str	r3, [sp, #28]
 8008360:	2200      	movs	r2, #0
 8008362:	4b91      	ldr	r3, [pc, #580]	; (80085a8 <_dtoa_r+0x650>)
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f8 f94e 	bl	8000608 <__aeabi_dmul>
 800836c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008370:	3501      	adds	r5, #1
 8008372:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008376:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800837a:	4628      	mov	r0, r5
 800837c:	f7f8 f8da 	bl	8000534 <__aeabi_i2d>
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <_dtoa_r+0x654>)
 800838a:	2200      	movs	r2, #0
 800838c:	f7f7 ff86 	bl	800029c <__adddf3>
 8008390:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	9303      	str	r3, [sp, #12]
 800839a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800839c:	2b00      	cmp	r3, #0
 800839e:	d15c      	bne.n	800845a <_dtoa_r+0x502>
 80083a0:	4b83      	ldr	r3, [pc, #524]	; (80085b0 <_dtoa_r+0x658>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f7 ff76 	bl	8000298 <__aeabi_dsub>
 80083ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b0:	4606      	mov	r6, r0
 80083b2:	460f      	mov	r7, r1
 80083b4:	f7f8 fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f040 8296 	bne.w	80088ea <_dtoa_r+0x992>
 80083be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083c2:	4630      	mov	r0, r6
 80083c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 fb8f 	bl	8000aec <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	f040 8288 	bne.w	80088e4 <_dtoa_r+0x98c>
 80083d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f2c0 8158 	blt.w	8008694 <_dtoa_r+0x73c>
 80083e4:	f1ba 0f0e 	cmp.w	sl, #14
 80083e8:	f300 8154 	bgt.w	8008694 <_dtoa_r+0x73c>
 80083ec:	4b6b      	ldr	r3, [pc, #428]	; (800859c <_dtoa_r+0x644>)
 80083ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f280 80e3 	bge.w	80085c4 <_dtoa_r+0x66c>
 80083fe:	9b01      	ldr	r3, [sp, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f300 80df 	bgt.w	80085c4 <_dtoa_r+0x66c>
 8008406:	f040 826d 	bne.w	80088e4 <_dtoa_r+0x98c>
 800840a:	4b69      	ldr	r3, [pc, #420]	; (80085b0 <_dtoa_r+0x658>)
 800840c:	2200      	movs	r2, #0
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 f8f9 	bl	8000608 <__aeabi_dmul>
 8008416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800841a:	f7f8 fb7b 	bl	8000b14 <__aeabi_dcmpge>
 800841e:	9e01      	ldr	r6, [sp, #4]
 8008420:	4637      	mov	r7, r6
 8008422:	2800      	cmp	r0, #0
 8008424:	f040 8243 	bne.w	80088ae <_dtoa_r+0x956>
 8008428:	9d00      	ldr	r5, [sp, #0]
 800842a:	2331      	movs	r3, #49	; 0x31
 800842c:	f805 3b01 	strb.w	r3, [r5], #1
 8008430:	f10a 0a01 	add.w	sl, sl, #1
 8008434:	e23f      	b.n	80088b6 <_dtoa_r+0x95e>
 8008436:	07f2      	lsls	r2, r6, #31
 8008438:	d505      	bpl.n	8008446 <_dtoa_r+0x4ee>
 800843a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800843e:	f7f8 f8e3 	bl	8000608 <__aeabi_dmul>
 8008442:	3501      	adds	r5, #1
 8008444:	2301      	movs	r3, #1
 8008446:	1076      	asrs	r6, r6, #1
 8008448:	3708      	adds	r7, #8
 800844a:	e76c      	b.n	8008326 <_dtoa_r+0x3ce>
 800844c:	2502      	movs	r5, #2
 800844e:	e76f      	b.n	8008330 <_dtoa_r+0x3d8>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	f8cd a01c 	str.w	sl, [sp, #28]
 8008456:	930c      	str	r3, [sp, #48]	; 0x30
 8008458:	e78d      	b.n	8008376 <_dtoa_r+0x41e>
 800845a:	9900      	ldr	r1, [sp, #0]
 800845c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800845e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008460:	4b4e      	ldr	r3, [pc, #312]	; (800859c <_dtoa_r+0x644>)
 8008462:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008466:	4401      	add	r1, r0
 8008468:	9102      	str	r1, [sp, #8]
 800846a:	9908      	ldr	r1, [sp, #32]
 800846c:	eeb0 8a47 	vmov.f32	s16, s14
 8008470:	eef0 8a67 	vmov.f32	s17, s15
 8008474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008478:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800847c:	2900      	cmp	r1, #0
 800847e:	d045      	beq.n	800850c <_dtoa_r+0x5b4>
 8008480:	494c      	ldr	r1, [pc, #304]	; (80085b4 <_dtoa_r+0x65c>)
 8008482:	2000      	movs	r0, #0
 8008484:	f7f8 f9ea 	bl	800085c <__aeabi_ddiv>
 8008488:	ec53 2b18 	vmov	r2, r3, d8
 800848c:	f7f7 ff04 	bl	8000298 <__aeabi_dsub>
 8008490:	9d00      	ldr	r5, [sp, #0]
 8008492:	ec41 0b18 	vmov	d8, r0, r1
 8008496:	4639      	mov	r1, r7
 8008498:	4630      	mov	r0, r6
 800849a:	f7f8 fb65 	bl	8000b68 <__aeabi_d2iz>
 800849e:	900c      	str	r0, [sp, #48]	; 0x30
 80084a0:	f7f8 f848 	bl	8000534 <__aeabi_i2d>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b2:	3330      	adds	r3, #48	; 0x30
 80084b4:	f805 3b01 	strb.w	r3, [r5], #1
 80084b8:	ec53 2b18 	vmov	r2, r3, d8
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	f7f8 fb14 	bl	8000aec <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d165      	bne.n	8008594 <_dtoa_r+0x63c>
 80084c8:	4632      	mov	r2, r6
 80084ca:	463b      	mov	r3, r7
 80084cc:	4935      	ldr	r1, [pc, #212]	; (80085a4 <_dtoa_r+0x64c>)
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f7 fee2 	bl	8000298 <__aeabi_dsub>
 80084d4:	ec53 2b18 	vmov	r2, r3, d8
 80084d8:	f7f8 fb08 	bl	8000aec <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 80b9 	bne.w	8008654 <_dtoa_r+0x6fc>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	429d      	cmp	r5, r3
 80084e6:	f43f af75 	beq.w	80083d4 <_dtoa_r+0x47c>
 80084ea:	4b2f      	ldr	r3, [pc, #188]	; (80085a8 <_dtoa_r+0x650>)
 80084ec:	ec51 0b18 	vmov	r0, r1, d8
 80084f0:	2200      	movs	r2, #0
 80084f2:	f7f8 f889 	bl	8000608 <__aeabi_dmul>
 80084f6:	4b2c      	ldr	r3, [pc, #176]	; (80085a8 <_dtoa_r+0x650>)
 80084f8:	ec41 0b18 	vmov	d8, r0, r1
 80084fc:	2200      	movs	r2, #0
 80084fe:	4630      	mov	r0, r6
 8008500:	4639      	mov	r1, r7
 8008502:	f7f8 f881 	bl	8000608 <__aeabi_dmul>
 8008506:	4606      	mov	r6, r0
 8008508:	460f      	mov	r7, r1
 800850a:	e7c4      	b.n	8008496 <_dtoa_r+0x53e>
 800850c:	ec51 0b17 	vmov	r0, r1, d7
 8008510:	f7f8 f87a 	bl	8000608 <__aeabi_dmul>
 8008514:	9b02      	ldr	r3, [sp, #8]
 8008516:	9d00      	ldr	r5, [sp, #0]
 8008518:	930c      	str	r3, [sp, #48]	; 0x30
 800851a:	ec41 0b18 	vmov	d8, r0, r1
 800851e:	4639      	mov	r1, r7
 8008520:	4630      	mov	r0, r6
 8008522:	f7f8 fb21 	bl	8000b68 <__aeabi_d2iz>
 8008526:	9011      	str	r0, [sp, #68]	; 0x44
 8008528:	f7f8 f804 	bl	8000534 <__aeabi_i2d>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f7 feb0 	bl	8000298 <__aeabi_dsub>
 8008538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800853a:	3330      	adds	r3, #48	; 0x30
 800853c:	f805 3b01 	strb.w	r3, [r5], #1
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	429d      	cmp	r5, r3
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	d134      	bne.n	80085b8 <_dtoa_r+0x660>
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <_dtoa_r+0x65c>)
 8008550:	ec51 0b18 	vmov	r0, r1, d8
 8008554:	f7f7 fea2 	bl	800029c <__adddf3>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4630      	mov	r0, r6
 800855e:	4639      	mov	r1, r7
 8008560:	f7f8 fae2 	bl	8000b28 <__aeabi_dcmpgt>
 8008564:	2800      	cmp	r0, #0
 8008566:	d175      	bne.n	8008654 <_dtoa_r+0x6fc>
 8008568:	ec53 2b18 	vmov	r2, r3, d8
 800856c:	4911      	ldr	r1, [pc, #68]	; (80085b4 <_dtoa_r+0x65c>)
 800856e:	2000      	movs	r0, #0
 8008570:	f7f7 fe92 	bl	8000298 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4630      	mov	r0, r6
 800857a:	4639      	mov	r1, r7
 800857c:	f7f8 fab6 	bl	8000aec <__aeabi_dcmplt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f af27 	beq.w	80083d4 <_dtoa_r+0x47c>
 8008586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008588:	1e6b      	subs	r3, r5, #1
 800858a:	930c      	str	r3, [sp, #48]	; 0x30
 800858c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d0f8      	beq.n	8008586 <_dtoa_r+0x62e>
 8008594:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008598:	e04a      	b.n	8008630 <_dtoa_r+0x6d8>
 800859a:	bf00      	nop
 800859c:	0800f0d0 	.word	0x0800f0d0
 80085a0:	0800f0a8 	.word	0x0800f0a8
 80085a4:	3ff00000 	.word	0x3ff00000
 80085a8:	40240000 	.word	0x40240000
 80085ac:	401c0000 	.word	0x401c0000
 80085b0:	40140000 	.word	0x40140000
 80085b4:	3fe00000 	.word	0x3fe00000
 80085b8:	4baf      	ldr	r3, [pc, #700]	; (8008878 <_dtoa_r+0x920>)
 80085ba:	f7f8 f825 	bl	8000608 <__aeabi_dmul>
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	e7ac      	b.n	800851e <_dtoa_r+0x5c6>
 80085c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085c8:	9d00      	ldr	r5, [sp, #0]
 80085ca:	4642      	mov	r2, r8
 80085cc:	464b      	mov	r3, r9
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 f943 	bl	800085c <__aeabi_ddiv>
 80085d6:	f7f8 fac7 	bl	8000b68 <__aeabi_d2iz>
 80085da:	9002      	str	r0, [sp, #8]
 80085dc:	f7f7 ffaa 	bl	8000534 <__aeabi_i2d>
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4630      	mov	r0, r6
 80085ee:	4639      	mov	r1, r7
 80085f0:	f7f7 fe52 	bl	8000298 <__aeabi_dsub>
 80085f4:	9e02      	ldr	r6, [sp, #8]
 80085f6:	9f01      	ldr	r7, [sp, #4]
 80085f8:	3630      	adds	r6, #48	; 0x30
 80085fa:	f805 6b01 	strb.w	r6, [r5], #1
 80085fe:	9e00      	ldr	r6, [sp, #0]
 8008600:	1bae      	subs	r6, r5, r6
 8008602:	42b7      	cmp	r7, r6
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	d137      	bne.n	800867a <_dtoa_r+0x722>
 800860a:	f7f7 fe47 	bl	800029c <__adddf3>
 800860e:	4642      	mov	r2, r8
 8008610:	464b      	mov	r3, r9
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	f7f8 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800861a:	b9c8      	cbnz	r0, 8008650 <_dtoa_r+0x6f8>
 800861c:	4642      	mov	r2, r8
 800861e:	464b      	mov	r3, r9
 8008620:	4630      	mov	r0, r6
 8008622:	4639      	mov	r1, r7
 8008624:	f7f8 fa58 	bl	8000ad8 <__aeabi_dcmpeq>
 8008628:	b110      	cbz	r0, 8008630 <_dtoa_r+0x6d8>
 800862a:	9b02      	ldr	r3, [sp, #8]
 800862c:	07d9      	lsls	r1, r3, #31
 800862e:	d40f      	bmi.n	8008650 <_dtoa_r+0x6f8>
 8008630:	4620      	mov	r0, r4
 8008632:	4659      	mov	r1, fp
 8008634:	f000 fcf6 	bl	8009024 <_Bfree>
 8008638:	2300      	movs	r3, #0
 800863a:	702b      	strb	r3, [r5, #0]
 800863c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800863e:	f10a 0001 	add.w	r0, sl, #1
 8008642:	6018      	str	r0, [r3, #0]
 8008644:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008646:	2b00      	cmp	r3, #0
 8008648:	f43f acd8 	beq.w	8007ffc <_dtoa_r+0xa4>
 800864c:	601d      	str	r5, [r3, #0]
 800864e:	e4d5      	b.n	8007ffc <_dtoa_r+0xa4>
 8008650:	f8cd a01c 	str.w	sl, [sp, #28]
 8008654:	462b      	mov	r3, r5
 8008656:	461d      	mov	r5, r3
 8008658:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800865c:	2a39      	cmp	r2, #57	; 0x39
 800865e:	d108      	bne.n	8008672 <_dtoa_r+0x71a>
 8008660:	9a00      	ldr	r2, [sp, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d1f7      	bne.n	8008656 <_dtoa_r+0x6fe>
 8008666:	9a07      	ldr	r2, [sp, #28]
 8008668:	9900      	ldr	r1, [sp, #0]
 800866a:	3201      	adds	r2, #1
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	2230      	movs	r2, #48	; 0x30
 8008670:	700a      	strb	r2, [r1, #0]
 8008672:	781a      	ldrb	r2, [r3, #0]
 8008674:	3201      	adds	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]
 8008678:	e78c      	b.n	8008594 <_dtoa_r+0x63c>
 800867a:	4b7f      	ldr	r3, [pc, #508]	; (8008878 <_dtoa_r+0x920>)
 800867c:	2200      	movs	r2, #0
 800867e:	f7f7 ffc3 	bl	8000608 <__aeabi_dmul>
 8008682:	2200      	movs	r2, #0
 8008684:	2300      	movs	r3, #0
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	f7f8 fa25 	bl	8000ad8 <__aeabi_dcmpeq>
 800868e:	2800      	cmp	r0, #0
 8008690:	d09b      	beq.n	80085ca <_dtoa_r+0x672>
 8008692:	e7cd      	b.n	8008630 <_dtoa_r+0x6d8>
 8008694:	9a08      	ldr	r2, [sp, #32]
 8008696:	2a00      	cmp	r2, #0
 8008698:	f000 80c4 	beq.w	8008824 <_dtoa_r+0x8cc>
 800869c:	9a05      	ldr	r2, [sp, #20]
 800869e:	2a01      	cmp	r2, #1
 80086a0:	f300 80a8 	bgt.w	80087f4 <_dtoa_r+0x89c>
 80086a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	f000 80a0 	beq.w	80087ec <_dtoa_r+0x894>
 80086ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086b0:	9e06      	ldr	r6, [sp, #24]
 80086b2:	4645      	mov	r5, r8
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	2101      	movs	r1, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	4620      	mov	r0, r4
 80086bc:	4498      	add	r8, r3
 80086be:	9204      	str	r2, [sp, #16]
 80086c0:	f000 fd6c 	bl	800919c <__i2b>
 80086c4:	4607      	mov	r7, r0
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	dd0b      	ble.n	80086e2 <_dtoa_r+0x78a>
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	dd08      	ble.n	80086e2 <_dtoa_r+0x78a>
 80086d0:	42ab      	cmp	r3, r5
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	bfa8      	it	ge
 80086d6:	462b      	movge	r3, r5
 80086d8:	eba8 0803 	sub.w	r8, r8, r3
 80086dc:	1aed      	subs	r5, r5, r3
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	9b06      	ldr	r3, [sp, #24]
 80086e4:	b1fb      	cbz	r3, 8008726 <_dtoa_r+0x7ce>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 809f 	beq.w	800882c <_dtoa_r+0x8d4>
 80086ee:	2e00      	cmp	r6, #0
 80086f0:	dd11      	ble.n	8008716 <_dtoa_r+0x7be>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4632      	mov	r2, r6
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fe0c 	bl	8009314 <__pow5mult>
 80086fc:	465a      	mov	r2, fp
 80086fe:	4601      	mov	r1, r0
 8008700:	4607      	mov	r7, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fd60 	bl	80091c8 <__multiply>
 8008708:	4659      	mov	r1, fp
 800870a:	9007      	str	r0, [sp, #28]
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fc89 	bl	8009024 <_Bfree>
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	469b      	mov	fp, r3
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	1b9a      	subs	r2, r3, r6
 800871a:	d004      	beq.n	8008726 <_dtoa_r+0x7ce>
 800871c:	4659      	mov	r1, fp
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fdf8 	bl	8009314 <__pow5mult>
 8008724:	4683      	mov	fp, r0
 8008726:	2101      	movs	r1, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fd37 	bl	800919c <__i2b>
 800872e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008730:	2b00      	cmp	r3, #0
 8008732:	4606      	mov	r6, r0
 8008734:	dd7c      	ble.n	8008830 <_dtoa_r+0x8d8>
 8008736:	461a      	mov	r2, r3
 8008738:	4601      	mov	r1, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f000 fdea 	bl	8009314 <__pow5mult>
 8008740:	9b05      	ldr	r3, [sp, #20]
 8008742:	2b01      	cmp	r3, #1
 8008744:	4606      	mov	r6, r0
 8008746:	dd76      	ble.n	8008836 <_dtoa_r+0x8de>
 8008748:	2300      	movs	r3, #0
 800874a:	9306      	str	r3, [sp, #24]
 800874c:	6933      	ldr	r3, [r6, #16]
 800874e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008752:	6918      	ldr	r0, [r3, #16]
 8008754:	f000 fcd2 	bl	80090fc <__hi0bits>
 8008758:	f1c0 0020 	rsb	r0, r0, #32
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	4418      	add	r0, r3
 8008760:	f010 001f 	ands.w	r0, r0, #31
 8008764:	f000 8086 	beq.w	8008874 <_dtoa_r+0x91c>
 8008768:	f1c0 0320 	rsb	r3, r0, #32
 800876c:	2b04      	cmp	r3, #4
 800876e:	dd7f      	ble.n	8008870 <_dtoa_r+0x918>
 8008770:	f1c0 001c 	rsb	r0, r0, #28
 8008774:	9b04      	ldr	r3, [sp, #16]
 8008776:	4403      	add	r3, r0
 8008778:	4480      	add	r8, r0
 800877a:	4405      	add	r5, r0
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	dd05      	ble.n	8008790 <_dtoa_r+0x838>
 8008784:	4659      	mov	r1, fp
 8008786:	4642      	mov	r2, r8
 8008788:	4620      	mov	r0, r4
 800878a:	f000 fe1d 	bl	80093c8 <__lshift>
 800878e:	4683      	mov	fp, r0
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	dd05      	ble.n	80087a2 <_dtoa_r+0x84a>
 8008796:	4631      	mov	r1, r6
 8008798:	461a      	mov	r2, r3
 800879a:	4620      	mov	r0, r4
 800879c:	f000 fe14 	bl	80093c8 <__lshift>
 80087a0:	4606      	mov	r6, r0
 80087a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d069      	beq.n	800887c <_dtoa_r+0x924>
 80087a8:	4631      	mov	r1, r6
 80087aa:	4658      	mov	r0, fp
 80087ac:	f000 fe78 	bl	80094a0 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	da63      	bge.n	800887c <_dtoa_r+0x924>
 80087b4:	2300      	movs	r3, #0
 80087b6:	4659      	mov	r1, fp
 80087b8:	220a      	movs	r2, #10
 80087ba:	4620      	mov	r0, r4
 80087bc:	f000 fc54 	bl	8009068 <__multadd>
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087c6:	4683      	mov	fp, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 818f 	beq.w	8008aec <_dtoa_r+0xb94>
 80087ce:	4639      	mov	r1, r7
 80087d0:	2300      	movs	r3, #0
 80087d2:	220a      	movs	r2, #10
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fc47 	bl	8009068 <__multadd>
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	4607      	mov	r7, r0
 80087e0:	f300 808e 	bgt.w	8008900 <_dtoa_r+0x9a8>
 80087e4:	9b05      	ldr	r3, [sp, #20]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	dc50      	bgt.n	800888c <_dtoa_r+0x934>
 80087ea:	e089      	b.n	8008900 <_dtoa_r+0x9a8>
 80087ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087f2:	e75d      	b.n	80086b0 <_dtoa_r+0x758>
 80087f4:	9b01      	ldr	r3, [sp, #4]
 80087f6:	1e5e      	subs	r6, r3, #1
 80087f8:	9b06      	ldr	r3, [sp, #24]
 80087fa:	42b3      	cmp	r3, r6
 80087fc:	bfbf      	itttt	lt
 80087fe:	9b06      	ldrlt	r3, [sp, #24]
 8008800:	9606      	strlt	r6, [sp, #24]
 8008802:	1af2      	sublt	r2, r6, r3
 8008804:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008806:	bfb6      	itet	lt
 8008808:	189b      	addlt	r3, r3, r2
 800880a:	1b9e      	subge	r6, r3, r6
 800880c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	bfb8      	it	lt
 8008812:	2600      	movlt	r6, #0
 8008814:	2b00      	cmp	r3, #0
 8008816:	bfb5      	itete	lt
 8008818:	eba8 0503 	sublt.w	r5, r8, r3
 800881c:	9b01      	ldrge	r3, [sp, #4]
 800881e:	2300      	movlt	r3, #0
 8008820:	4645      	movge	r5, r8
 8008822:	e747      	b.n	80086b4 <_dtoa_r+0x75c>
 8008824:	9e06      	ldr	r6, [sp, #24]
 8008826:	9f08      	ldr	r7, [sp, #32]
 8008828:	4645      	mov	r5, r8
 800882a:	e74c      	b.n	80086c6 <_dtoa_r+0x76e>
 800882c:	9a06      	ldr	r2, [sp, #24]
 800882e:	e775      	b.n	800871c <_dtoa_r+0x7c4>
 8008830:	9b05      	ldr	r3, [sp, #20]
 8008832:	2b01      	cmp	r3, #1
 8008834:	dc18      	bgt.n	8008868 <_dtoa_r+0x910>
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	b9b3      	cbnz	r3, 8008868 <_dtoa_r+0x910>
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008840:	b9a3      	cbnz	r3, 800886c <_dtoa_r+0x914>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008848:	0d1b      	lsrs	r3, r3, #20
 800884a:	051b      	lsls	r3, r3, #20
 800884c:	b12b      	cbz	r3, 800885a <_dtoa_r+0x902>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	3301      	adds	r3, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	f108 0801 	add.w	r8, r8, #1
 8008858:	2301      	movs	r3, #1
 800885a:	9306      	str	r3, [sp, #24]
 800885c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885e:	2b00      	cmp	r3, #0
 8008860:	f47f af74 	bne.w	800874c <_dtoa_r+0x7f4>
 8008864:	2001      	movs	r0, #1
 8008866:	e779      	b.n	800875c <_dtoa_r+0x804>
 8008868:	2300      	movs	r3, #0
 800886a:	e7f6      	b.n	800885a <_dtoa_r+0x902>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	e7f4      	b.n	800885a <_dtoa_r+0x902>
 8008870:	d085      	beq.n	800877e <_dtoa_r+0x826>
 8008872:	4618      	mov	r0, r3
 8008874:	301c      	adds	r0, #28
 8008876:	e77d      	b.n	8008774 <_dtoa_r+0x81c>
 8008878:	40240000 	.word	0x40240000
 800887c:	9b01      	ldr	r3, [sp, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	dc38      	bgt.n	80088f4 <_dtoa_r+0x99c>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	2b02      	cmp	r3, #2
 8008886:	dd35      	ble.n	80088f4 <_dtoa_r+0x99c>
 8008888:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d10d      	bne.n	80088ae <_dtoa_r+0x956>
 8008892:	4631      	mov	r1, r6
 8008894:	464b      	mov	r3, r9
 8008896:	2205      	movs	r2, #5
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fbe5 	bl	8009068 <__multadd>
 800889e:	4601      	mov	r1, r0
 80088a0:	4606      	mov	r6, r0
 80088a2:	4658      	mov	r0, fp
 80088a4:	f000 fdfc 	bl	80094a0 <__mcmp>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	f73f adbd 	bgt.w	8008428 <_dtoa_r+0x4d0>
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	9d00      	ldr	r5, [sp, #0]
 80088b2:	ea6f 0a03 	mvn.w	sl, r3
 80088b6:	f04f 0800 	mov.w	r8, #0
 80088ba:	4631      	mov	r1, r6
 80088bc:	4620      	mov	r0, r4
 80088be:	f000 fbb1 	bl	8009024 <_Bfree>
 80088c2:	2f00      	cmp	r7, #0
 80088c4:	f43f aeb4 	beq.w	8008630 <_dtoa_r+0x6d8>
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	d005      	beq.n	80088da <_dtoa_r+0x982>
 80088ce:	45b8      	cmp	r8, r7
 80088d0:	d003      	beq.n	80088da <_dtoa_r+0x982>
 80088d2:	4641      	mov	r1, r8
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fba5 	bl	8009024 <_Bfree>
 80088da:	4639      	mov	r1, r7
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fba1 	bl	8009024 <_Bfree>
 80088e2:	e6a5      	b.n	8008630 <_dtoa_r+0x6d8>
 80088e4:	2600      	movs	r6, #0
 80088e6:	4637      	mov	r7, r6
 80088e8:	e7e1      	b.n	80088ae <_dtoa_r+0x956>
 80088ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80088f0:	4637      	mov	r7, r6
 80088f2:	e599      	b.n	8008428 <_dtoa_r+0x4d0>
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80fd 	beq.w	8008afa <_dtoa_r+0xba2>
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x9b8>
 8008904:	4639      	mov	r1, r7
 8008906:	462a      	mov	r2, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fd5d 	bl	80093c8 <__lshift>
 800890e:	4607      	mov	r7, r0
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d05c      	beq.n	80089d0 <_dtoa_r+0xa78>
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fb43 	bl	8008fa4 <_Balloc>
 800891e:	4605      	mov	r5, r0
 8008920:	b928      	cbnz	r0, 800892e <_dtoa_r+0x9d6>
 8008922:	4b80      	ldr	r3, [pc, #512]	; (8008b24 <_dtoa_r+0xbcc>)
 8008924:	4602      	mov	r2, r0
 8008926:	f240 21ea 	movw	r1, #746	; 0x2ea
 800892a:	f7ff bb2e 	b.w	8007f8a <_dtoa_r+0x32>
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	3202      	adds	r2, #2
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	f107 010c 	add.w	r1, r7, #12
 8008938:	300c      	adds	r0, #12
 800893a:	f000 fb25 	bl	8008f88 <memcpy>
 800893e:	2201      	movs	r2, #1
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fd40 	bl	80093c8 <__lshift>
 8008948:	9b00      	ldr	r3, [sp, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	444b      	add	r3, r9
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	9b02      	ldr	r3, [sp, #8]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	46b8      	mov	r8, r7
 800895c:	9306      	str	r3, [sp, #24]
 800895e:	4607      	mov	r7, r0
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	4631      	mov	r1, r6
 8008964:	3b01      	subs	r3, #1
 8008966:	4658      	mov	r0, fp
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	f7ff fa69 	bl	8007e40 <quorem>
 800896e:	4603      	mov	r3, r0
 8008970:	3330      	adds	r3, #48	; 0x30
 8008972:	9004      	str	r0, [sp, #16]
 8008974:	4641      	mov	r1, r8
 8008976:	4658      	mov	r0, fp
 8008978:	9308      	str	r3, [sp, #32]
 800897a:	f000 fd91 	bl	80094a0 <__mcmp>
 800897e:	463a      	mov	r2, r7
 8008980:	4681      	mov	r9, r0
 8008982:	4631      	mov	r1, r6
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fda7 	bl	80094d8 <__mdiff>
 800898a:	68c2      	ldr	r2, [r0, #12]
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	4605      	mov	r5, r0
 8008990:	bb02      	cbnz	r2, 80089d4 <_dtoa_r+0xa7c>
 8008992:	4601      	mov	r1, r0
 8008994:	4658      	mov	r0, fp
 8008996:	f000 fd83 	bl	80094a0 <__mcmp>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	4602      	mov	r2, r0
 800899e:	4629      	mov	r1, r5
 80089a0:	4620      	mov	r0, r4
 80089a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089a6:	f000 fb3d 	bl	8009024 <_Bfree>
 80089aa:	9b05      	ldr	r3, [sp, #20]
 80089ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ae:	9d01      	ldr	r5, [sp, #4]
 80089b0:	ea43 0102 	orr.w	r1, r3, r2
 80089b4:	9b06      	ldr	r3, [sp, #24]
 80089b6:	430b      	orrs	r3, r1
 80089b8:	9b08      	ldr	r3, [sp, #32]
 80089ba:	d10d      	bne.n	80089d8 <_dtoa_r+0xa80>
 80089bc:	2b39      	cmp	r3, #57	; 0x39
 80089be:	d029      	beq.n	8008a14 <_dtoa_r+0xabc>
 80089c0:	f1b9 0f00 	cmp.w	r9, #0
 80089c4:	dd01      	ble.n	80089ca <_dtoa_r+0xa72>
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	3331      	adds	r3, #49	; 0x31
 80089ca:	9a02      	ldr	r2, [sp, #8]
 80089cc:	7013      	strb	r3, [r2, #0]
 80089ce:	e774      	b.n	80088ba <_dtoa_r+0x962>
 80089d0:	4638      	mov	r0, r7
 80089d2:	e7b9      	b.n	8008948 <_dtoa_r+0x9f0>
 80089d4:	2201      	movs	r2, #1
 80089d6:	e7e2      	b.n	800899e <_dtoa_r+0xa46>
 80089d8:	f1b9 0f00 	cmp.w	r9, #0
 80089dc:	db06      	blt.n	80089ec <_dtoa_r+0xa94>
 80089de:	9905      	ldr	r1, [sp, #20]
 80089e0:	ea41 0909 	orr.w	r9, r1, r9
 80089e4:	9906      	ldr	r1, [sp, #24]
 80089e6:	ea59 0101 	orrs.w	r1, r9, r1
 80089ea:	d120      	bne.n	8008a2e <_dtoa_r+0xad6>
 80089ec:	2a00      	cmp	r2, #0
 80089ee:	ddec      	ble.n	80089ca <_dtoa_r+0xa72>
 80089f0:	4659      	mov	r1, fp
 80089f2:	2201      	movs	r2, #1
 80089f4:	4620      	mov	r0, r4
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f000 fce6 	bl	80093c8 <__lshift>
 80089fc:	4631      	mov	r1, r6
 80089fe:	4683      	mov	fp, r0
 8008a00:	f000 fd4e 	bl	80094a0 <__mcmp>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	9b01      	ldr	r3, [sp, #4]
 8008a08:	dc02      	bgt.n	8008a10 <_dtoa_r+0xab8>
 8008a0a:	d1de      	bne.n	80089ca <_dtoa_r+0xa72>
 8008a0c:	07da      	lsls	r2, r3, #31
 8008a0e:	d5dc      	bpl.n	80089ca <_dtoa_r+0xa72>
 8008a10:	2b39      	cmp	r3, #57	; 0x39
 8008a12:	d1d8      	bne.n	80089c6 <_dtoa_r+0xa6e>
 8008a14:	9a02      	ldr	r2, [sp, #8]
 8008a16:	2339      	movs	r3, #57	; 0x39
 8008a18:	7013      	strb	r3, [r2, #0]
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	461d      	mov	r5, r3
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a24:	2a39      	cmp	r2, #57	; 0x39
 8008a26:	d050      	beq.n	8008aca <_dtoa_r+0xb72>
 8008a28:	3201      	adds	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	e745      	b.n	80088ba <_dtoa_r+0x962>
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	dd03      	ble.n	8008a3a <_dtoa_r+0xae2>
 8008a32:	2b39      	cmp	r3, #57	; 0x39
 8008a34:	d0ee      	beq.n	8008a14 <_dtoa_r+0xabc>
 8008a36:	3301      	adds	r3, #1
 8008a38:	e7c7      	b.n	80089ca <_dtoa_r+0xa72>
 8008a3a:	9a01      	ldr	r2, [sp, #4]
 8008a3c:	9907      	ldr	r1, [sp, #28]
 8008a3e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a42:	428a      	cmp	r2, r1
 8008a44:	d02a      	beq.n	8008a9c <_dtoa_r+0xb44>
 8008a46:	4659      	mov	r1, fp
 8008a48:	2300      	movs	r3, #0
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fb0b 	bl	8009068 <__multadd>
 8008a52:	45b8      	cmp	r8, r7
 8008a54:	4683      	mov	fp, r0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	f04f 020a 	mov.w	r2, #10
 8008a5e:	4641      	mov	r1, r8
 8008a60:	4620      	mov	r0, r4
 8008a62:	d107      	bne.n	8008a74 <_dtoa_r+0xb1c>
 8008a64:	f000 fb00 	bl	8009068 <__multadd>
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	e775      	b.n	8008960 <_dtoa_r+0xa08>
 8008a74:	f000 faf8 	bl	8009068 <__multadd>
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4680      	mov	r8, r0
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	220a      	movs	r2, #10
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 faf1 	bl	8009068 <__multadd>
 8008a86:	4607      	mov	r7, r0
 8008a88:	e7f0      	b.n	8008a6c <_dtoa_r+0xb14>
 8008a8a:	f1b9 0f00 	cmp.w	r9, #0
 8008a8e:	9a00      	ldr	r2, [sp, #0]
 8008a90:	bfcc      	ite	gt
 8008a92:	464d      	movgt	r5, r9
 8008a94:	2501      	movle	r5, #1
 8008a96:	4415      	add	r5, r2
 8008a98:	f04f 0800 	mov.w	r8, #0
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	f000 fc90 	bl	80093c8 <__lshift>
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4683      	mov	fp, r0
 8008aac:	f000 fcf8 	bl	80094a0 <__mcmp>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	dcb2      	bgt.n	8008a1a <_dtoa_r+0xac2>
 8008ab4:	d102      	bne.n	8008abc <_dtoa_r+0xb64>
 8008ab6:	9b01      	ldr	r3, [sp, #4]
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d4ae      	bmi.n	8008a1a <_dtoa_r+0xac2>
 8008abc:	462b      	mov	r3, r5
 8008abe:	461d      	mov	r5, r3
 8008ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ac4:	2a30      	cmp	r2, #48	; 0x30
 8008ac6:	d0fa      	beq.n	8008abe <_dtoa_r+0xb66>
 8008ac8:	e6f7      	b.n	80088ba <_dtoa_r+0x962>
 8008aca:	9a00      	ldr	r2, [sp, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d1a5      	bne.n	8008a1c <_dtoa_r+0xac4>
 8008ad0:	f10a 0a01 	add.w	sl, sl, #1
 8008ad4:	2331      	movs	r3, #49	; 0x31
 8008ad6:	e779      	b.n	80089cc <_dtoa_r+0xa74>
 8008ad8:	4b13      	ldr	r3, [pc, #76]	; (8008b28 <_dtoa_r+0xbd0>)
 8008ada:	f7ff baaf 	b.w	800803c <_dtoa_r+0xe4>
 8008ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f47f aa86 	bne.w	8007ff2 <_dtoa_r+0x9a>
 8008ae6:	4b11      	ldr	r3, [pc, #68]	; (8008b2c <_dtoa_r+0xbd4>)
 8008ae8:	f7ff baa8 	b.w	800803c <_dtoa_r+0xe4>
 8008aec:	f1b9 0f00 	cmp.w	r9, #0
 8008af0:	dc03      	bgt.n	8008afa <_dtoa_r+0xba2>
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f73f aec9 	bgt.w	800888c <_dtoa_r+0x934>
 8008afa:	9d00      	ldr	r5, [sp, #0]
 8008afc:	4631      	mov	r1, r6
 8008afe:	4658      	mov	r0, fp
 8008b00:	f7ff f99e 	bl	8007e40 <quorem>
 8008b04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b08:	f805 3b01 	strb.w	r3, [r5], #1
 8008b0c:	9a00      	ldr	r2, [sp, #0]
 8008b0e:	1aaa      	subs	r2, r5, r2
 8008b10:	4591      	cmp	r9, r2
 8008b12:	ddba      	ble.n	8008a8a <_dtoa_r+0xb32>
 8008b14:	4659      	mov	r1, fp
 8008b16:	2300      	movs	r3, #0
 8008b18:	220a      	movs	r2, #10
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 faa4 	bl	8009068 <__multadd>
 8008b20:	4683      	mov	fp, r0
 8008b22:	e7eb      	b.n	8008afc <_dtoa_r+0xba4>
 8008b24:	0800efd7 	.word	0x0800efd7
 8008b28:	0800ef30 	.word	0x0800ef30
 8008b2c:	0800ef54 	.word	0x0800ef54

08008b30 <__sflush_r>:
 8008b30:	898a      	ldrh	r2, [r1, #12]
 8008b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b36:	4605      	mov	r5, r0
 8008b38:	0710      	lsls	r0, r2, #28
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	d458      	bmi.n	8008bf0 <__sflush_r+0xc0>
 8008b3e:	684b      	ldr	r3, [r1, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	dc05      	bgt.n	8008b50 <__sflush_r+0x20>
 8008b44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	dc02      	bgt.n	8008b50 <__sflush_r+0x20>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b52:	2e00      	cmp	r6, #0
 8008b54:	d0f9      	beq.n	8008b4a <__sflush_r+0x1a>
 8008b56:	2300      	movs	r3, #0
 8008b58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b5c:	682f      	ldr	r7, [r5, #0]
 8008b5e:	602b      	str	r3, [r5, #0]
 8008b60:	d032      	beq.n	8008bc8 <__sflush_r+0x98>
 8008b62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	075a      	lsls	r2, r3, #29
 8008b68:	d505      	bpl.n	8008b76 <__sflush_r+0x46>
 8008b6a:	6863      	ldr	r3, [r4, #4]
 8008b6c:	1ac0      	subs	r0, r0, r3
 8008b6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b70:	b10b      	cbz	r3, 8008b76 <__sflush_r+0x46>
 8008b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b74:	1ac0      	subs	r0, r0, r3
 8008b76:	2300      	movs	r3, #0
 8008b78:	4602      	mov	r2, r0
 8008b7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7c:	6a21      	ldr	r1, [r4, #32]
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b0      	blx	r6
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	d106      	bne.n	8008b96 <__sflush_r+0x66>
 8008b88:	6829      	ldr	r1, [r5, #0]
 8008b8a:	291d      	cmp	r1, #29
 8008b8c:	d82c      	bhi.n	8008be8 <__sflush_r+0xb8>
 8008b8e:	4a2a      	ldr	r2, [pc, #168]	; (8008c38 <__sflush_r+0x108>)
 8008b90:	40ca      	lsrs	r2, r1
 8008b92:	07d6      	lsls	r6, r2, #31
 8008b94:	d528      	bpl.n	8008be8 <__sflush_r+0xb8>
 8008b96:	2200      	movs	r2, #0
 8008b98:	6062      	str	r2, [r4, #4]
 8008b9a:	04d9      	lsls	r1, r3, #19
 8008b9c:	6922      	ldr	r2, [r4, #16]
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	d504      	bpl.n	8008bac <__sflush_r+0x7c>
 8008ba2:	1c42      	adds	r2, r0, #1
 8008ba4:	d101      	bne.n	8008baa <__sflush_r+0x7a>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	b903      	cbnz	r3, 8008bac <__sflush_r+0x7c>
 8008baa:	6560      	str	r0, [r4, #84]	; 0x54
 8008bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bae:	602f      	str	r7, [r5, #0]
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	d0ca      	beq.n	8008b4a <__sflush_r+0x1a>
 8008bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	d002      	beq.n	8008bc2 <__sflush_r+0x92>
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 fd7f 	bl	80096c0 <_free_r>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	6360      	str	r0, [r4, #52]	; 0x34
 8008bc6:	e7c1      	b.n	8008b4c <__sflush_r+0x1c>
 8008bc8:	6a21      	ldr	r1, [r4, #32]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b0      	blx	r6
 8008bd0:	1c41      	adds	r1, r0, #1
 8008bd2:	d1c7      	bne.n	8008b64 <__sflush_r+0x34>
 8008bd4:	682b      	ldr	r3, [r5, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0c4      	beq.n	8008b64 <__sflush_r+0x34>
 8008bda:	2b1d      	cmp	r3, #29
 8008bdc:	d001      	beq.n	8008be2 <__sflush_r+0xb2>
 8008bde:	2b16      	cmp	r3, #22
 8008be0:	d101      	bne.n	8008be6 <__sflush_r+0xb6>
 8008be2:	602f      	str	r7, [r5, #0]
 8008be4:	e7b1      	b.n	8008b4a <__sflush_r+0x1a>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	e7ad      	b.n	8008b4c <__sflush_r+0x1c>
 8008bf0:	690f      	ldr	r7, [r1, #16]
 8008bf2:	2f00      	cmp	r7, #0
 8008bf4:	d0a9      	beq.n	8008b4a <__sflush_r+0x1a>
 8008bf6:	0793      	lsls	r3, r2, #30
 8008bf8:	680e      	ldr	r6, [r1, #0]
 8008bfa:	bf08      	it	eq
 8008bfc:	694b      	ldreq	r3, [r1, #20]
 8008bfe:	600f      	str	r7, [r1, #0]
 8008c00:	bf18      	it	ne
 8008c02:	2300      	movne	r3, #0
 8008c04:	eba6 0807 	sub.w	r8, r6, r7
 8008c08:	608b      	str	r3, [r1, #8]
 8008c0a:	f1b8 0f00 	cmp.w	r8, #0
 8008c0e:	dd9c      	ble.n	8008b4a <__sflush_r+0x1a>
 8008c10:	6a21      	ldr	r1, [r4, #32]
 8008c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c14:	4643      	mov	r3, r8
 8008c16:	463a      	mov	r2, r7
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b0      	blx	r6
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	dc06      	bgt.n	8008c2e <__sflush_r+0xfe>
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	e78e      	b.n	8008b4c <__sflush_r+0x1c>
 8008c2e:	4407      	add	r7, r0
 8008c30:	eba8 0800 	sub.w	r8, r8, r0
 8008c34:	e7e9      	b.n	8008c0a <__sflush_r+0xda>
 8008c36:	bf00      	nop
 8008c38:	20400001 	.word	0x20400001

08008c3c <_fflush_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	690b      	ldr	r3, [r1, #16]
 8008c40:	4605      	mov	r5, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	b913      	cbnz	r3, 8008c4c <_fflush_r+0x10>
 8008c46:	2500      	movs	r5, #0
 8008c48:	4628      	mov	r0, r5
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	b118      	cbz	r0, 8008c56 <_fflush_r+0x1a>
 8008c4e:	6983      	ldr	r3, [r0, #24]
 8008c50:	b90b      	cbnz	r3, 8008c56 <_fflush_r+0x1a>
 8008c52:	f000 f887 	bl	8008d64 <__sinit>
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <_fflush_r+0x6c>)
 8008c58:	429c      	cmp	r4, r3
 8008c5a:	d11b      	bne.n	8008c94 <_fflush_r+0x58>
 8008c5c:	686c      	ldr	r4, [r5, #4]
 8008c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0ef      	beq.n	8008c46 <_fflush_r+0xa>
 8008c66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c68:	07d0      	lsls	r0, r2, #31
 8008c6a:	d404      	bmi.n	8008c76 <_fflush_r+0x3a>
 8008c6c:	0599      	lsls	r1, r3, #22
 8008c6e:	d402      	bmi.n	8008c76 <_fflush_r+0x3a>
 8008c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c72:	f000 f91a 	bl	8008eaa <__retarget_lock_acquire_recursive>
 8008c76:	4628      	mov	r0, r5
 8008c78:	4621      	mov	r1, r4
 8008c7a:	f7ff ff59 	bl	8008b30 <__sflush_r>
 8008c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c80:	07da      	lsls	r2, r3, #31
 8008c82:	4605      	mov	r5, r0
 8008c84:	d4e0      	bmi.n	8008c48 <_fflush_r+0xc>
 8008c86:	89a3      	ldrh	r3, [r4, #12]
 8008c88:	059b      	lsls	r3, r3, #22
 8008c8a:	d4dd      	bmi.n	8008c48 <_fflush_r+0xc>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8e:	f000 f90d 	bl	8008eac <__retarget_lock_release_recursive>
 8008c92:	e7d9      	b.n	8008c48 <_fflush_r+0xc>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <_fflush_r+0x70>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	d101      	bne.n	8008c9e <_fflush_r+0x62>
 8008c9a:	68ac      	ldr	r4, [r5, #8]
 8008c9c:	e7df      	b.n	8008c5e <_fflush_r+0x22>
 8008c9e:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <_fflush_r+0x74>)
 8008ca0:	429c      	cmp	r4, r3
 8008ca2:	bf08      	it	eq
 8008ca4:	68ec      	ldreq	r4, [r5, #12]
 8008ca6:	e7da      	b.n	8008c5e <_fflush_r+0x22>
 8008ca8:	0800f008 	.word	0x0800f008
 8008cac:	0800f028 	.word	0x0800f028
 8008cb0:	0800efe8 	.word	0x0800efe8

08008cb4 <std>:
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	4604      	mov	r4, r0
 8008cba:	e9c0 3300 	strd	r3, r3, [r0]
 8008cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cc2:	6083      	str	r3, [r0, #8]
 8008cc4:	8181      	strh	r1, [r0, #12]
 8008cc6:	6643      	str	r3, [r0, #100]	; 0x64
 8008cc8:	81c2      	strh	r2, [r0, #14]
 8008cca:	6183      	str	r3, [r0, #24]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	2208      	movs	r2, #8
 8008cd0:	305c      	adds	r0, #92	; 0x5c
 8008cd2:	f7fe fad5 	bl	8007280 <memset>
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <std+0x38>)
 8008cd8:	6263      	str	r3, [r4, #36]	; 0x24
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <std+0x3c>)
 8008cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <std+0x40>)
 8008ce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <std+0x44>)
 8008ce4:	6224      	str	r4, [r4, #32]
 8008ce6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	bf00      	nop
 8008cec:	08009da1 	.word	0x08009da1
 8008cf0:	08009dc3 	.word	0x08009dc3
 8008cf4:	08009dfb 	.word	0x08009dfb
 8008cf8:	08009e1f 	.word	0x08009e1f

08008cfc <_cleanup_r>:
 8008cfc:	4901      	ldr	r1, [pc, #4]	; (8008d04 <_cleanup_r+0x8>)
 8008cfe:	f000 b8af 	b.w	8008e60 <_fwalk_reent>
 8008d02:	bf00      	nop
 8008d04:	08008c3d 	.word	0x08008c3d

08008d08 <__sfmoreglue>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	1e4a      	subs	r2, r1, #1
 8008d0c:	2568      	movs	r5, #104	; 0x68
 8008d0e:	4355      	muls	r5, r2
 8008d10:	460e      	mov	r6, r1
 8008d12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d16:	f000 fd23 	bl	8009760 <_malloc_r>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	b140      	cbz	r0, 8008d30 <__sfmoreglue+0x28>
 8008d1e:	2100      	movs	r1, #0
 8008d20:	e9c0 1600 	strd	r1, r6, [r0]
 8008d24:	300c      	adds	r0, #12
 8008d26:	60a0      	str	r0, [r4, #8]
 8008d28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d2c:	f7fe faa8 	bl	8007280 <memset>
 8008d30:	4620      	mov	r0, r4
 8008d32:	bd70      	pop	{r4, r5, r6, pc}

08008d34 <__sfp_lock_acquire>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__sfp_lock_acquire+0x8>)
 8008d36:	f000 b8b8 	b.w	8008eaa <__retarget_lock_acquire_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20000480 	.word	0x20000480

08008d40 <__sfp_lock_release>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__sfp_lock_release+0x8>)
 8008d42:	f000 b8b3 	b.w	8008eac <__retarget_lock_release_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000480 	.word	0x20000480

08008d4c <__sinit_lock_acquire>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sinit_lock_acquire+0x8>)
 8008d4e:	f000 b8ac 	b.w	8008eaa <__retarget_lock_acquire_recursive>
 8008d52:	bf00      	nop
 8008d54:	2000047b 	.word	0x2000047b

08008d58 <__sinit_lock_release>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sinit_lock_release+0x8>)
 8008d5a:	f000 b8a7 	b.w	8008eac <__retarget_lock_release_recursive>
 8008d5e:	bf00      	nop
 8008d60:	2000047b 	.word	0x2000047b

08008d64 <__sinit>:
 8008d64:	b510      	push	{r4, lr}
 8008d66:	4604      	mov	r4, r0
 8008d68:	f7ff fff0 	bl	8008d4c <__sinit_lock_acquire>
 8008d6c:	69a3      	ldr	r3, [r4, #24]
 8008d6e:	b11b      	cbz	r3, 8008d78 <__sinit+0x14>
 8008d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d74:	f7ff bff0 	b.w	8008d58 <__sinit_lock_release>
 8008d78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d7c:	6523      	str	r3, [r4, #80]	; 0x50
 8008d7e:	4b13      	ldr	r3, [pc, #76]	; (8008dcc <__sinit+0x68>)
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <__sinit+0x6c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d86:	42a3      	cmp	r3, r4
 8008d88:	bf04      	itt	eq
 8008d8a:	2301      	moveq	r3, #1
 8008d8c:	61a3      	streq	r3, [r4, #24]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f820 	bl	8008dd4 <__sfp>
 8008d94:	6060      	str	r0, [r4, #4]
 8008d96:	4620      	mov	r0, r4
 8008d98:	f000 f81c 	bl	8008dd4 <__sfp>
 8008d9c:	60a0      	str	r0, [r4, #8]
 8008d9e:	4620      	mov	r0, r4
 8008da0:	f000 f818 	bl	8008dd4 <__sfp>
 8008da4:	2200      	movs	r2, #0
 8008da6:	60e0      	str	r0, [r4, #12]
 8008da8:	2104      	movs	r1, #4
 8008daa:	6860      	ldr	r0, [r4, #4]
 8008dac:	f7ff ff82 	bl	8008cb4 <std>
 8008db0:	68a0      	ldr	r0, [r4, #8]
 8008db2:	2201      	movs	r2, #1
 8008db4:	2109      	movs	r1, #9
 8008db6:	f7ff ff7d 	bl	8008cb4 <std>
 8008dba:	68e0      	ldr	r0, [r4, #12]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	2112      	movs	r1, #18
 8008dc0:	f7ff ff78 	bl	8008cb4 <std>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	61a3      	str	r3, [r4, #24]
 8008dc8:	e7d2      	b.n	8008d70 <__sinit+0xc>
 8008dca:	bf00      	nop
 8008dcc:	0800ef1c 	.word	0x0800ef1c
 8008dd0:	08008cfd 	.word	0x08008cfd

08008dd4 <__sfp>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	f7ff ffac 	bl	8008d34 <__sfp_lock_acquire>
 8008ddc:	4b1e      	ldr	r3, [pc, #120]	; (8008e58 <__sfp+0x84>)
 8008dde:	681e      	ldr	r6, [r3, #0]
 8008de0:	69b3      	ldr	r3, [r6, #24]
 8008de2:	b913      	cbnz	r3, 8008dea <__sfp+0x16>
 8008de4:	4630      	mov	r0, r6
 8008de6:	f7ff ffbd 	bl	8008d64 <__sinit>
 8008dea:	3648      	adds	r6, #72	; 0x48
 8008dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	d503      	bpl.n	8008dfc <__sfp+0x28>
 8008df4:	6833      	ldr	r3, [r6, #0]
 8008df6:	b30b      	cbz	r3, 8008e3c <__sfp+0x68>
 8008df8:	6836      	ldr	r6, [r6, #0]
 8008dfa:	e7f7      	b.n	8008dec <__sfp+0x18>
 8008dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e00:	b9d5      	cbnz	r5, 8008e38 <__sfp+0x64>
 8008e02:	4b16      	ldr	r3, [pc, #88]	; (8008e5c <__sfp+0x88>)
 8008e04:	60e3      	str	r3, [r4, #12]
 8008e06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e0a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e0c:	f000 f84c 	bl	8008ea8 <__retarget_lock_init_recursive>
 8008e10:	f7ff ff96 	bl	8008d40 <__sfp_lock_release>
 8008e14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e1c:	6025      	str	r5, [r4, #0]
 8008e1e:	61a5      	str	r5, [r4, #24]
 8008e20:	2208      	movs	r2, #8
 8008e22:	4629      	mov	r1, r5
 8008e24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e28:	f7fe fa2a 	bl	8007280 <memset>
 8008e2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e34:	4620      	mov	r0, r4
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e38:	3468      	adds	r4, #104	; 0x68
 8008e3a:	e7d9      	b.n	8008df0 <__sfp+0x1c>
 8008e3c:	2104      	movs	r1, #4
 8008e3e:	4638      	mov	r0, r7
 8008e40:	f7ff ff62 	bl	8008d08 <__sfmoreglue>
 8008e44:	4604      	mov	r4, r0
 8008e46:	6030      	str	r0, [r6, #0]
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d1d5      	bne.n	8008df8 <__sfp+0x24>
 8008e4c:	f7ff ff78 	bl	8008d40 <__sfp_lock_release>
 8008e50:	230c      	movs	r3, #12
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	e7ee      	b.n	8008e34 <__sfp+0x60>
 8008e56:	bf00      	nop
 8008e58:	0800ef1c 	.word	0x0800ef1c
 8008e5c:	ffff0001 	.word	0xffff0001

08008e60 <_fwalk_reent>:
 8008e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e64:	4606      	mov	r6, r0
 8008e66:	4688      	mov	r8, r1
 8008e68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e6c:	2700      	movs	r7, #0
 8008e6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e72:	f1b9 0901 	subs.w	r9, r9, #1
 8008e76:	d505      	bpl.n	8008e84 <_fwalk_reent+0x24>
 8008e78:	6824      	ldr	r4, [r4, #0]
 8008e7a:	2c00      	cmp	r4, #0
 8008e7c:	d1f7      	bne.n	8008e6e <_fwalk_reent+0xe>
 8008e7e:	4638      	mov	r0, r7
 8008e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e84:	89ab      	ldrh	r3, [r5, #12]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d907      	bls.n	8008e9a <_fwalk_reent+0x3a>
 8008e8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	d003      	beq.n	8008e9a <_fwalk_reent+0x3a>
 8008e92:	4629      	mov	r1, r5
 8008e94:	4630      	mov	r0, r6
 8008e96:	47c0      	blx	r8
 8008e98:	4307      	orrs	r7, r0
 8008e9a:	3568      	adds	r5, #104	; 0x68
 8008e9c:	e7e9      	b.n	8008e72 <_fwalk_reent+0x12>
	...

08008ea0 <_localeconv_r>:
 8008ea0:	4800      	ldr	r0, [pc, #0]	; (8008ea4 <_localeconv_r+0x4>)
 8008ea2:	4770      	bx	lr
 8008ea4:	2000017c 	.word	0x2000017c

08008ea8 <__retarget_lock_init_recursive>:
 8008ea8:	4770      	bx	lr

08008eaa <__retarget_lock_acquire_recursive>:
 8008eaa:	4770      	bx	lr

08008eac <__retarget_lock_release_recursive>:
 8008eac:	4770      	bx	lr

08008eae <__swhatbuf_r>:
 8008eae:	b570      	push	{r4, r5, r6, lr}
 8008eb0:	460e      	mov	r6, r1
 8008eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	b096      	sub	sp, #88	; 0x58
 8008eba:	4614      	mov	r4, r2
 8008ebc:	461d      	mov	r5, r3
 8008ebe:	da07      	bge.n	8008ed0 <__swhatbuf_r+0x22>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	602b      	str	r3, [r5, #0]
 8008ec4:	89b3      	ldrh	r3, [r6, #12]
 8008ec6:	061a      	lsls	r2, r3, #24
 8008ec8:	d410      	bmi.n	8008eec <__swhatbuf_r+0x3e>
 8008eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ece:	e00e      	b.n	8008eee <__swhatbuf_r+0x40>
 8008ed0:	466a      	mov	r2, sp
 8008ed2:	f000 fffb 	bl	8009ecc <_fstat_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	dbf2      	blt.n	8008ec0 <__swhatbuf_r+0x12>
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ee4:	425a      	negs	r2, r3
 8008ee6:	415a      	adcs	r2, r3
 8008ee8:	602a      	str	r2, [r5, #0]
 8008eea:	e7ee      	b.n	8008eca <__swhatbuf_r+0x1c>
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	2000      	movs	r0, #0
 8008ef0:	6023      	str	r3, [r4, #0]
 8008ef2:	b016      	add	sp, #88	; 0x58
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ef8 <__smakebuf_r>:
 8008ef8:	898b      	ldrh	r3, [r1, #12]
 8008efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008efc:	079d      	lsls	r5, r3, #30
 8008efe:	4606      	mov	r6, r0
 8008f00:	460c      	mov	r4, r1
 8008f02:	d507      	bpl.n	8008f14 <__smakebuf_r+0x1c>
 8008f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	b002      	add	sp, #8
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	ab01      	add	r3, sp, #4
 8008f16:	466a      	mov	r2, sp
 8008f18:	f7ff ffc9 	bl	8008eae <__swhatbuf_r>
 8008f1c:	9900      	ldr	r1, [sp, #0]
 8008f1e:	4605      	mov	r5, r0
 8008f20:	4630      	mov	r0, r6
 8008f22:	f000 fc1d 	bl	8009760 <_malloc_r>
 8008f26:	b948      	cbnz	r0, 8008f3c <__smakebuf_r+0x44>
 8008f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2c:	059a      	lsls	r2, r3, #22
 8008f2e:	d4ef      	bmi.n	8008f10 <__smakebuf_r+0x18>
 8008f30:	f023 0303 	bic.w	r3, r3, #3
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	81a3      	strh	r3, [r4, #12]
 8008f3a:	e7e3      	b.n	8008f04 <__smakebuf_r+0xc>
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <__smakebuf_r+0x7c>)
 8008f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f40:	89a3      	ldrh	r3, [r4, #12]
 8008f42:	6020      	str	r0, [r4, #0]
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	81a3      	strh	r3, [r4, #12]
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	6163      	str	r3, [r4, #20]
 8008f4e:	9b01      	ldr	r3, [sp, #4]
 8008f50:	6120      	str	r0, [r4, #16]
 8008f52:	b15b      	cbz	r3, 8008f6c <__smakebuf_r+0x74>
 8008f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 ffc9 	bl	8009ef0 <_isatty_r>
 8008f5e:	b128      	cbz	r0, 8008f6c <__smakebuf_r+0x74>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	f023 0303 	bic.w	r3, r3, #3
 8008f66:	f043 0301 	orr.w	r3, r3, #1
 8008f6a:	81a3      	strh	r3, [r4, #12]
 8008f6c:	89a0      	ldrh	r0, [r4, #12]
 8008f6e:	4305      	orrs	r5, r0
 8008f70:	81a5      	strh	r5, [r4, #12]
 8008f72:	e7cd      	b.n	8008f10 <__smakebuf_r+0x18>
 8008f74:	08008cfd 	.word	0x08008cfd

08008f78 <malloc>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <malloc+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f000 bbef 	b.w	8009760 <_malloc_r>
 8008f82:	bf00      	nop
 8008f84:	20000028 	.word	0x20000028

08008f88 <memcpy>:
 8008f88:	440a      	add	r2, r1
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f90:	d100      	bne.n	8008f94 <memcpy+0xc>
 8008f92:	4770      	bx	lr
 8008f94:	b510      	push	{r4, lr}
 8008f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9e:	4291      	cmp	r1, r2
 8008fa0:	d1f9      	bne.n	8008f96 <memcpy+0xe>
 8008fa2:	bd10      	pop	{r4, pc}

08008fa4 <_Balloc>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Balloc+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7ff ffe2 	bl	8008f78 <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Balloc+0x20>
 8008fba:	4b18      	ldr	r3, [pc, #96]	; (800901c <_Balloc+0x78>)
 8008fbc:	4818      	ldr	r0, [pc, #96]	; (8009020 <_Balloc+0x7c>)
 8008fbe:	2166      	movs	r1, #102	; 0x66
 8008fc0:	f000 ff44 	bl	8009e4c <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fce:	68f3      	ldr	r3, [r6, #12]
 8008fd0:	b183      	cbz	r3, 8008ff4 <_Balloc+0x50>
 8008fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fda:	b9b8      	cbnz	r0, 800900c <_Balloc+0x68>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe2:	1d72      	adds	r2, r6, #5
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fb5a 	bl	80096a0 <_calloc_r>
 8008fec:	b160      	cbz	r0, 8009008 <_Balloc+0x64>
 8008fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff2:	e00e      	b.n	8009012 <_Balloc+0x6e>
 8008ff4:	2221      	movs	r2, #33	; 0x21
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fb51 	bl	80096a0 <_calloc_r>
 8008ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009000:	60f0      	str	r0, [r6, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <_Balloc+0x2e>
 8009008:	2000      	movs	r0, #0
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009012:	2300      	movs	r3, #0
 8009014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009018:	e7f7      	b.n	800900a <_Balloc+0x66>
 800901a:	bf00      	nop
 800901c:	0800ef61 	.word	0x0800ef61
 8009020:	0800f048 	.word	0x0800f048

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b976      	cbnz	r6, 800904c <_Bfree+0x28>
 800902e:	2010      	movs	r0, #16
 8009030:	f7ff ffa2 	bl	8008f78 <malloc>
 8009034:	4602      	mov	r2, r0
 8009036:	6268      	str	r0, [r5, #36]	; 0x24
 8009038:	b920      	cbnz	r0, 8009044 <_Bfree+0x20>
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <_Bfree+0x3c>)
 800903c:	4809      	ldr	r0, [pc, #36]	; (8009064 <_Bfree+0x40>)
 800903e:	218a      	movs	r1, #138	; 0x8a
 8009040:	f000 ff04 	bl	8009e4c <__assert_func>
 8009044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009048:	6006      	str	r6, [r0, #0]
 800904a:	60c6      	str	r6, [r0, #12]
 800904c:	b13c      	cbz	r4, 800905e <_Bfree+0x3a>
 800904e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009058:	6021      	str	r1, [r4, #0]
 800905a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	0800ef61 	.word	0x0800ef61
 8009064:	0800f048 	.word	0x0800f048

08009068 <__multadd>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	690e      	ldr	r6, [r1, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	4698      	mov	r8, r3
 8009072:	460c      	mov	r4, r1
 8009074:	f101 0014 	add.w	r0, r1, #20
 8009078:	2300      	movs	r3, #0
 800907a:	6805      	ldr	r5, [r0, #0]
 800907c:	b2a9      	uxth	r1, r5
 800907e:	fb02 8101 	mla	r1, r2, r1, r8
 8009082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009086:	0c2d      	lsrs	r5, r5, #16
 8009088:	fb02 c505 	mla	r5, r2, r5, ip
 800908c:	b289      	uxth	r1, r1
 800908e:	3301      	adds	r3, #1
 8009090:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009094:	429e      	cmp	r6, r3
 8009096:	f840 1b04 	str.w	r1, [r0], #4
 800909a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800909e:	dcec      	bgt.n	800907a <__multadd+0x12>
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d022      	beq.n	80090ec <__multadd+0x84>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x78>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff77 	bl	8008fa4 <_Balloc>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5e>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <__multadd+0x8c>)
 80090be:	480e      	ldr	r0, [pc, #56]	; (80090f8 <__multadd+0x90>)
 80090c0:	21b5      	movs	r1, #181	; 0xb5
 80090c2:	f000 fec3 	bl	8009e4c <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7ff ff59 	bl	8008f88 <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa3 	bl	8009024 <_Bfree>
 80090de:	462c      	mov	r4, r5
 80090e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090e4:	3601      	adds	r6, #1
 80090e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80090ea:	6126      	str	r6, [r4, #16]
 80090ec:	4620      	mov	r0, r4
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f2:	bf00      	nop
 80090f4:	0800efd7 	.word	0x0800efd7
 80090f8:	0800f048 	.word	0x0800f048

080090fc <__hi0bits>:
 80090fc:	0c03      	lsrs	r3, r0, #16
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	b9d3      	cbnz	r3, 8009138 <__hi0bits+0x3c>
 8009102:	0400      	lsls	r0, r0, #16
 8009104:	2310      	movs	r3, #16
 8009106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800910a:	bf04      	itt	eq
 800910c:	0200      	lsleq	r0, r0, #8
 800910e:	3308      	addeq	r3, #8
 8009110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009114:	bf04      	itt	eq
 8009116:	0100      	lsleq	r0, r0, #4
 8009118:	3304      	addeq	r3, #4
 800911a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800911e:	bf04      	itt	eq
 8009120:	0080      	lsleq	r0, r0, #2
 8009122:	3302      	addeq	r3, #2
 8009124:	2800      	cmp	r0, #0
 8009126:	db05      	blt.n	8009134 <__hi0bits+0x38>
 8009128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800912c:	f103 0301 	add.w	r3, r3, #1
 8009130:	bf08      	it	eq
 8009132:	2320      	moveq	r3, #32
 8009134:	4618      	mov	r0, r3
 8009136:	4770      	bx	lr
 8009138:	2300      	movs	r3, #0
 800913a:	e7e4      	b.n	8009106 <__hi0bits+0xa>

0800913c <__lo0bits>:
 800913c:	6803      	ldr	r3, [r0, #0]
 800913e:	f013 0207 	ands.w	r2, r3, #7
 8009142:	4601      	mov	r1, r0
 8009144:	d00b      	beq.n	800915e <__lo0bits+0x22>
 8009146:	07da      	lsls	r2, r3, #31
 8009148:	d424      	bmi.n	8009194 <__lo0bits+0x58>
 800914a:	0798      	lsls	r0, r3, #30
 800914c:	bf49      	itett	mi
 800914e:	085b      	lsrmi	r3, r3, #1
 8009150:	089b      	lsrpl	r3, r3, #2
 8009152:	2001      	movmi	r0, #1
 8009154:	600b      	strmi	r3, [r1, #0]
 8009156:	bf5c      	itt	pl
 8009158:	600b      	strpl	r3, [r1, #0]
 800915a:	2002      	movpl	r0, #2
 800915c:	4770      	bx	lr
 800915e:	b298      	uxth	r0, r3
 8009160:	b9b0      	cbnz	r0, 8009190 <__lo0bits+0x54>
 8009162:	0c1b      	lsrs	r3, r3, #16
 8009164:	2010      	movs	r0, #16
 8009166:	f013 0fff 	tst.w	r3, #255	; 0xff
 800916a:	bf04      	itt	eq
 800916c:	0a1b      	lsreq	r3, r3, #8
 800916e:	3008      	addeq	r0, #8
 8009170:	071a      	lsls	r2, r3, #28
 8009172:	bf04      	itt	eq
 8009174:	091b      	lsreq	r3, r3, #4
 8009176:	3004      	addeq	r0, #4
 8009178:	079a      	lsls	r2, r3, #30
 800917a:	bf04      	itt	eq
 800917c:	089b      	lsreq	r3, r3, #2
 800917e:	3002      	addeq	r0, #2
 8009180:	07da      	lsls	r2, r3, #31
 8009182:	d403      	bmi.n	800918c <__lo0bits+0x50>
 8009184:	085b      	lsrs	r3, r3, #1
 8009186:	f100 0001 	add.w	r0, r0, #1
 800918a:	d005      	beq.n	8009198 <__lo0bits+0x5c>
 800918c:	600b      	str	r3, [r1, #0]
 800918e:	4770      	bx	lr
 8009190:	4610      	mov	r0, r2
 8009192:	e7e8      	b.n	8009166 <__lo0bits+0x2a>
 8009194:	2000      	movs	r0, #0
 8009196:	4770      	bx	lr
 8009198:	2020      	movs	r0, #32
 800919a:	4770      	bx	lr

0800919c <__i2b>:
 800919c:	b510      	push	{r4, lr}
 800919e:	460c      	mov	r4, r1
 80091a0:	2101      	movs	r1, #1
 80091a2:	f7ff feff 	bl	8008fa4 <_Balloc>
 80091a6:	4602      	mov	r2, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <__i2b+0x1a>
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <__i2b+0x24>)
 80091ac:	4805      	ldr	r0, [pc, #20]	; (80091c4 <__i2b+0x28>)
 80091ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091b2:	f000 fe4b 	bl	8009e4c <__assert_func>
 80091b6:	2301      	movs	r3, #1
 80091b8:	6144      	str	r4, [r0, #20]
 80091ba:	6103      	str	r3, [r0, #16]
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	0800efd7 	.word	0x0800efd7
 80091c4:	0800f048 	.word	0x0800f048

080091c8 <__multiply>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4614      	mov	r4, r2
 80091ce:	690a      	ldr	r2, [r1, #16]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	bfb8      	it	lt
 80091d6:	460b      	movlt	r3, r1
 80091d8:	460d      	mov	r5, r1
 80091da:	bfbc      	itt	lt
 80091dc:	4625      	movlt	r5, r4
 80091de:	461c      	movlt	r4, r3
 80091e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091e8:	68ab      	ldr	r3, [r5, #8]
 80091ea:	6869      	ldr	r1, [r5, #4]
 80091ec:	eb0a 0709 	add.w	r7, sl, r9
 80091f0:	42bb      	cmp	r3, r7
 80091f2:	b085      	sub	sp, #20
 80091f4:	bfb8      	it	lt
 80091f6:	3101      	addlt	r1, #1
 80091f8:	f7ff fed4 	bl	8008fa4 <_Balloc>
 80091fc:	b930      	cbnz	r0, 800920c <__multiply+0x44>
 80091fe:	4602      	mov	r2, r0
 8009200:	4b42      	ldr	r3, [pc, #264]	; (800930c <__multiply+0x144>)
 8009202:	4843      	ldr	r0, [pc, #268]	; (8009310 <__multiply+0x148>)
 8009204:	f240 115d 	movw	r1, #349	; 0x15d
 8009208:	f000 fe20 	bl	8009e4c <__assert_func>
 800920c:	f100 0614 	add.w	r6, r0, #20
 8009210:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009214:	4633      	mov	r3, r6
 8009216:	2200      	movs	r2, #0
 8009218:	4543      	cmp	r3, r8
 800921a:	d31e      	bcc.n	800925a <__multiply+0x92>
 800921c:	f105 0c14 	add.w	ip, r5, #20
 8009220:	f104 0314 	add.w	r3, r4, #20
 8009224:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009228:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	ebac 0205 	sub.w	r2, ip, r5
 8009232:	3a15      	subs	r2, #21
 8009234:	f022 0203 	bic.w	r2, r2, #3
 8009238:	3204      	adds	r2, #4
 800923a:	f105 0115 	add.w	r1, r5, #21
 800923e:	458c      	cmp	ip, r1
 8009240:	bf38      	it	cc
 8009242:	2204      	movcc	r2, #4
 8009244:	9201      	str	r2, [sp, #4]
 8009246:	9a02      	ldr	r2, [sp, #8]
 8009248:	9303      	str	r3, [sp, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d808      	bhi.n	8009260 <__multiply+0x98>
 800924e:	2f00      	cmp	r7, #0
 8009250:	dc55      	bgt.n	80092fe <__multiply+0x136>
 8009252:	6107      	str	r7, [r0, #16]
 8009254:	b005      	add	sp, #20
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	f843 2b04 	str.w	r2, [r3], #4
 800925e:	e7db      	b.n	8009218 <__multiply+0x50>
 8009260:	f8b3 a000 	ldrh.w	sl, [r3]
 8009264:	f1ba 0f00 	cmp.w	sl, #0
 8009268:	d020      	beq.n	80092ac <__multiply+0xe4>
 800926a:	f105 0e14 	add.w	lr, r5, #20
 800926e:	46b1      	mov	r9, r6
 8009270:	2200      	movs	r2, #0
 8009272:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009276:	f8d9 b000 	ldr.w	fp, [r9]
 800927a:	b2a1      	uxth	r1, r4
 800927c:	fa1f fb8b 	uxth.w	fp, fp
 8009280:	fb0a b101 	mla	r1, sl, r1, fp
 8009284:	4411      	add	r1, r2
 8009286:	f8d9 2000 	ldr.w	r2, [r9]
 800928a:	0c24      	lsrs	r4, r4, #16
 800928c:	0c12      	lsrs	r2, r2, #16
 800928e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009292:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800929c:	45f4      	cmp	ip, lr
 800929e:	f849 1b04 	str.w	r1, [r9], #4
 80092a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092a6:	d8e4      	bhi.n	8009272 <__multiply+0xaa>
 80092a8:	9901      	ldr	r1, [sp, #4]
 80092aa:	5072      	str	r2, [r6, r1]
 80092ac:	9a03      	ldr	r2, [sp, #12]
 80092ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092b2:	3304      	adds	r3, #4
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	d01f      	beq.n	80092fa <__multiply+0x132>
 80092ba:	6834      	ldr	r4, [r6, #0]
 80092bc:	f105 0114 	add.w	r1, r5, #20
 80092c0:	46b6      	mov	lr, r6
 80092c2:	f04f 0a00 	mov.w	sl, #0
 80092c6:	880a      	ldrh	r2, [r1, #0]
 80092c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80092cc:	fb09 b202 	mla	r2, r9, r2, fp
 80092d0:	4492      	add	sl, r2
 80092d2:	b2a4      	uxth	r4, r4
 80092d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80092d8:	f84e 4b04 	str.w	r4, [lr], #4
 80092dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80092e0:	f8be 2000 	ldrh.w	r2, [lr]
 80092e4:	0c24      	lsrs	r4, r4, #16
 80092e6:	fb09 2404 	mla	r4, r9, r4, r2
 80092ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80092ee:	458c      	cmp	ip, r1
 80092f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092f4:	d8e7      	bhi.n	80092c6 <__multiply+0xfe>
 80092f6:	9a01      	ldr	r2, [sp, #4]
 80092f8:	50b4      	str	r4, [r6, r2]
 80092fa:	3604      	adds	r6, #4
 80092fc:	e7a3      	b.n	8009246 <__multiply+0x7e>
 80092fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1a5      	bne.n	8009252 <__multiply+0x8a>
 8009306:	3f01      	subs	r7, #1
 8009308:	e7a1      	b.n	800924e <__multiply+0x86>
 800930a:	bf00      	nop
 800930c:	0800efd7 	.word	0x0800efd7
 8009310:	0800f048 	.word	0x0800f048

08009314 <__pow5mult>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4615      	mov	r5, r2
 800931a:	f012 0203 	ands.w	r2, r2, #3
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	d007      	beq.n	8009334 <__pow5mult+0x20>
 8009324:	4c25      	ldr	r4, [pc, #148]	; (80093bc <__pow5mult+0xa8>)
 8009326:	3a01      	subs	r2, #1
 8009328:	2300      	movs	r3, #0
 800932a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800932e:	f7ff fe9b 	bl	8009068 <__multadd>
 8009332:	4607      	mov	r7, r0
 8009334:	10ad      	asrs	r5, r5, #2
 8009336:	d03d      	beq.n	80093b4 <__pow5mult+0xa0>
 8009338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800933a:	b97c      	cbnz	r4, 800935c <__pow5mult+0x48>
 800933c:	2010      	movs	r0, #16
 800933e:	f7ff fe1b 	bl	8008f78 <malloc>
 8009342:	4602      	mov	r2, r0
 8009344:	6270      	str	r0, [r6, #36]	; 0x24
 8009346:	b928      	cbnz	r0, 8009354 <__pow5mult+0x40>
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <__pow5mult+0xac>)
 800934a:	481e      	ldr	r0, [pc, #120]	; (80093c4 <__pow5mult+0xb0>)
 800934c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009350:	f000 fd7c 	bl	8009e4c <__assert_func>
 8009354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009358:	6004      	str	r4, [r0, #0]
 800935a:	60c4      	str	r4, [r0, #12]
 800935c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009364:	b94c      	cbnz	r4, 800937a <__pow5mult+0x66>
 8009366:	f240 2171 	movw	r1, #625	; 0x271
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff16 	bl	800919c <__i2b>
 8009370:	2300      	movs	r3, #0
 8009372:	f8c8 0008 	str.w	r0, [r8, #8]
 8009376:	4604      	mov	r4, r0
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	07eb      	lsls	r3, r5, #31
 8009380:	d50a      	bpl.n	8009398 <__pow5mult+0x84>
 8009382:	4639      	mov	r1, r7
 8009384:	4622      	mov	r2, r4
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff1e 	bl	80091c8 <__multiply>
 800938c:	4639      	mov	r1, r7
 800938e:	4680      	mov	r8, r0
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff fe47 	bl	8009024 <_Bfree>
 8009396:	4647      	mov	r7, r8
 8009398:	106d      	asrs	r5, r5, #1
 800939a:	d00b      	beq.n	80093b4 <__pow5mult+0xa0>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	b938      	cbnz	r0, 80093b0 <__pow5mult+0x9c>
 80093a0:	4622      	mov	r2, r4
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff ff0f 	bl	80091c8 <__multiply>
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	f8c0 9000 	str.w	r9, [r0]
 80093b0:	4604      	mov	r4, r0
 80093b2:	e7e4      	b.n	800937e <__pow5mult+0x6a>
 80093b4:	4638      	mov	r0, r7
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	bf00      	nop
 80093bc:	0800f198 	.word	0x0800f198
 80093c0:	0800ef61 	.word	0x0800ef61
 80093c4:	0800f048 	.word	0x0800f048

080093c8 <__lshift>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	6849      	ldr	r1, [r1, #4]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	4607      	mov	r7, r0
 80093da:	4691      	mov	r9, r2
 80093dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093e0:	f108 0601 	add.w	r6, r8, #1
 80093e4:	42b3      	cmp	r3, r6
 80093e6:	db0b      	blt.n	8009400 <__lshift+0x38>
 80093e8:	4638      	mov	r0, r7
 80093ea:	f7ff fddb 	bl	8008fa4 <_Balloc>
 80093ee:	4605      	mov	r5, r0
 80093f0:	b948      	cbnz	r0, 8009406 <__lshift+0x3e>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4b28      	ldr	r3, [pc, #160]	; (8009498 <__lshift+0xd0>)
 80093f6:	4829      	ldr	r0, [pc, #164]	; (800949c <__lshift+0xd4>)
 80093f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093fc:	f000 fd26 	bl	8009e4c <__assert_func>
 8009400:	3101      	adds	r1, #1
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	e7ee      	b.n	80093e4 <__lshift+0x1c>
 8009406:	2300      	movs	r3, #0
 8009408:	f100 0114 	add.w	r1, r0, #20
 800940c:	f100 0210 	add.w	r2, r0, #16
 8009410:	4618      	mov	r0, r3
 8009412:	4553      	cmp	r3, sl
 8009414:	db33      	blt.n	800947e <__lshift+0xb6>
 8009416:	6920      	ldr	r0, [r4, #16]
 8009418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800941c:	f104 0314 	add.w	r3, r4, #20
 8009420:	f019 091f 	ands.w	r9, r9, #31
 8009424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800942c:	d02b      	beq.n	8009486 <__lshift+0xbe>
 800942e:	f1c9 0e20 	rsb	lr, r9, #32
 8009432:	468a      	mov	sl, r1
 8009434:	2200      	movs	r2, #0
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	fa00 f009 	lsl.w	r0, r0, r9
 800943c:	4302      	orrs	r2, r0
 800943e:	f84a 2b04 	str.w	r2, [sl], #4
 8009442:	f853 2b04 	ldr.w	r2, [r3], #4
 8009446:	459c      	cmp	ip, r3
 8009448:	fa22 f20e 	lsr.w	r2, r2, lr
 800944c:	d8f3      	bhi.n	8009436 <__lshift+0x6e>
 800944e:	ebac 0304 	sub.w	r3, ip, r4
 8009452:	3b15      	subs	r3, #21
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	3304      	adds	r3, #4
 800945a:	f104 0015 	add.w	r0, r4, #21
 800945e:	4584      	cmp	ip, r0
 8009460:	bf38      	it	cc
 8009462:	2304      	movcc	r3, #4
 8009464:	50ca      	str	r2, [r1, r3]
 8009466:	b10a      	cbz	r2, 800946c <__lshift+0xa4>
 8009468:	f108 0602 	add.w	r6, r8, #2
 800946c:	3e01      	subs	r6, #1
 800946e:	4638      	mov	r0, r7
 8009470:	612e      	str	r6, [r5, #16]
 8009472:	4621      	mov	r1, r4
 8009474:	f7ff fdd6 	bl	8009024 <_Bfree>
 8009478:	4628      	mov	r0, r5
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009482:	3301      	adds	r3, #1
 8009484:	e7c5      	b.n	8009412 <__lshift+0x4a>
 8009486:	3904      	subs	r1, #4
 8009488:	f853 2b04 	ldr.w	r2, [r3], #4
 800948c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009490:	459c      	cmp	ip, r3
 8009492:	d8f9      	bhi.n	8009488 <__lshift+0xc0>
 8009494:	e7ea      	b.n	800946c <__lshift+0xa4>
 8009496:	bf00      	nop
 8009498:	0800efd7 	.word	0x0800efd7
 800949c:	0800f048 	.word	0x0800f048

080094a0 <__mcmp>:
 80094a0:	b530      	push	{r4, r5, lr}
 80094a2:	6902      	ldr	r2, [r0, #16]
 80094a4:	690c      	ldr	r4, [r1, #16]
 80094a6:	1b12      	subs	r2, r2, r4
 80094a8:	d10e      	bne.n	80094c8 <__mcmp+0x28>
 80094aa:	f100 0314 	add.w	r3, r0, #20
 80094ae:	3114      	adds	r1, #20
 80094b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094c0:	42a5      	cmp	r5, r4
 80094c2:	d003      	beq.n	80094cc <__mcmp+0x2c>
 80094c4:	d305      	bcc.n	80094d2 <__mcmp+0x32>
 80094c6:	2201      	movs	r2, #1
 80094c8:	4610      	mov	r0, r2
 80094ca:	bd30      	pop	{r4, r5, pc}
 80094cc:	4283      	cmp	r3, r0
 80094ce:	d3f3      	bcc.n	80094b8 <__mcmp+0x18>
 80094d0:	e7fa      	b.n	80094c8 <__mcmp+0x28>
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e7f7      	b.n	80094c8 <__mcmp+0x28>

080094d8 <__mdiff>:
 80094d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	4606      	mov	r6, r0
 80094e0:	4611      	mov	r1, r2
 80094e2:	4620      	mov	r0, r4
 80094e4:	4617      	mov	r7, r2
 80094e6:	f7ff ffdb 	bl	80094a0 <__mcmp>
 80094ea:	1e05      	subs	r5, r0, #0
 80094ec:	d110      	bne.n	8009510 <__mdiff+0x38>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff fd57 	bl	8008fa4 <_Balloc>
 80094f6:	b930      	cbnz	r0, 8009506 <__mdiff+0x2e>
 80094f8:	4b39      	ldr	r3, [pc, #228]	; (80095e0 <__mdiff+0x108>)
 80094fa:	4602      	mov	r2, r0
 80094fc:	f240 2132 	movw	r1, #562	; 0x232
 8009500:	4838      	ldr	r0, [pc, #224]	; (80095e4 <__mdiff+0x10c>)
 8009502:	f000 fca3 	bl	8009e4c <__assert_func>
 8009506:	2301      	movs	r3, #1
 8009508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800950c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	bfa4      	itt	ge
 8009512:	463b      	movge	r3, r7
 8009514:	4627      	movge	r7, r4
 8009516:	4630      	mov	r0, r6
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	bfa6      	itte	ge
 800951c:	461c      	movge	r4, r3
 800951e:	2500      	movge	r5, #0
 8009520:	2501      	movlt	r5, #1
 8009522:	f7ff fd3f 	bl	8008fa4 <_Balloc>
 8009526:	b920      	cbnz	r0, 8009532 <__mdiff+0x5a>
 8009528:	4b2d      	ldr	r3, [pc, #180]	; (80095e0 <__mdiff+0x108>)
 800952a:	4602      	mov	r2, r0
 800952c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009530:	e7e6      	b.n	8009500 <__mdiff+0x28>
 8009532:	693e      	ldr	r6, [r7, #16]
 8009534:	60c5      	str	r5, [r0, #12]
 8009536:	6925      	ldr	r5, [r4, #16]
 8009538:	f107 0114 	add.w	r1, r7, #20
 800953c:	f104 0914 	add.w	r9, r4, #20
 8009540:	f100 0e14 	add.w	lr, r0, #20
 8009544:	f107 0210 	add.w	r2, r7, #16
 8009548:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800954c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009550:	46f2      	mov	sl, lr
 8009552:	2700      	movs	r7, #0
 8009554:	f859 3b04 	ldr.w	r3, [r9], #4
 8009558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800955c:	fa1f f883 	uxth.w	r8, r3
 8009560:	fa17 f78b 	uxtah	r7, r7, fp
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	eba7 0808 	sub.w	r8, r7, r8
 800956a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800956e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009572:	fa1f f888 	uxth.w	r8, r8
 8009576:	141f      	asrs	r7, r3, #16
 8009578:	454d      	cmp	r5, r9
 800957a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800957e:	f84a 3b04 	str.w	r3, [sl], #4
 8009582:	d8e7      	bhi.n	8009554 <__mdiff+0x7c>
 8009584:	1b2b      	subs	r3, r5, r4
 8009586:	3b15      	subs	r3, #21
 8009588:	f023 0303 	bic.w	r3, r3, #3
 800958c:	3304      	adds	r3, #4
 800958e:	3415      	adds	r4, #21
 8009590:	42a5      	cmp	r5, r4
 8009592:	bf38      	it	cc
 8009594:	2304      	movcc	r3, #4
 8009596:	4419      	add	r1, r3
 8009598:	4473      	add	r3, lr
 800959a:	469e      	mov	lr, r3
 800959c:	460d      	mov	r5, r1
 800959e:	4565      	cmp	r5, ip
 80095a0:	d30e      	bcc.n	80095c0 <__mdiff+0xe8>
 80095a2:	f10c 0203 	add.w	r2, ip, #3
 80095a6:	1a52      	subs	r2, r2, r1
 80095a8:	f022 0203 	bic.w	r2, r2, #3
 80095ac:	3903      	subs	r1, #3
 80095ae:	458c      	cmp	ip, r1
 80095b0:	bf38      	it	cc
 80095b2:	2200      	movcc	r2, #0
 80095b4:	441a      	add	r2, r3
 80095b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ba:	b17b      	cbz	r3, 80095dc <__mdiff+0x104>
 80095bc:	6106      	str	r6, [r0, #16]
 80095be:	e7a5      	b.n	800950c <__mdiff+0x34>
 80095c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80095c4:	fa17 f488 	uxtah	r4, r7, r8
 80095c8:	1422      	asrs	r2, r4, #16
 80095ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80095ce:	b2a4      	uxth	r4, r4
 80095d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80095d4:	f84e 4b04 	str.w	r4, [lr], #4
 80095d8:	1417      	asrs	r7, r2, #16
 80095da:	e7e0      	b.n	800959e <__mdiff+0xc6>
 80095dc:	3e01      	subs	r6, #1
 80095de:	e7ea      	b.n	80095b6 <__mdiff+0xde>
 80095e0:	0800efd7 	.word	0x0800efd7
 80095e4:	0800f048 	.word	0x0800f048

080095e8 <__d2b>:
 80095e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4689      	mov	r9, r1
 80095ee:	2101      	movs	r1, #1
 80095f0:	ec57 6b10 	vmov	r6, r7, d0
 80095f4:	4690      	mov	r8, r2
 80095f6:	f7ff fcd5 	bl	8008fa4 <_Balloc>
 80095fa:	4604      	mov	r4, r0
 80095fc:	b930      	cbnz	r0, 800960c <__d2b+0x24>
 80095fe:	4602      	mov	r2, r0
 8009600:	4b25      	ldr	r3, [pc, #148]	; (8009698 <__d2b+0xb0>)
 8009602:	4826      	ldr	r0, [pc, #152]	; (800969c <__d2b+0xb4>)
 8009604:	f240 310a 	movw	r1, #778	; 0x30a
 8009608:	f000 fc20 	bl	8009e4c <__assert_func>
 800960c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009614:	bb35      	cbnz	r5, 8009664 <__d2b+0x7c>
 8009616:	2e00      	cmp	r6, #0
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	d028      	beq.n	800966e <__d2b+0x86>
 800961c:	4668      	mov	r0, sp
 800961e:	9600      	str	r6, [sp, #0]
 8009620:	f7ff fd8c 	bl	800913c <__lo0bits>
 8009624:	9900      	ldr	r1, [sp, #0]
 8009626:	b300      	cbz	r0, 800966a <__d2b+0x82>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f1c0 0320 	rsb	r3, r0, #32
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	430b      	orrs	r3, r1
 8009634:	40c2      	lsrs	r2, r0
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	61a3      	str	r3, [r4, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bf14      	ite	ne
 8009642:	2202      	movne	r2, #2
 8009644:	2201      	moveq	r2, #1
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	b1d5      	cbz	r5, 8009680 <__d2b+0x98>
 800964a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800964e:	4405      	add	r5, r0
 8009650:	f8c9 5000 	str.w	r5, [r9]
 8009654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009658:	f8c8 0000 	str.w	r0, [r8]
 800965c:	4620      	mov	r0, r4
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009668:	e7d5      	b.n	8009616 <__d2b+0x2e>
 800966a:	6161      	str	r1, [r4, #20]
 800966c:	e7e5      	b.n	800963a <__d2b+0x52>
 800966e:	a801      	add	r0, sp, #4
 8009670:	f7ff fd64 	bl	800913c <__lo0bits>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	2201      	movs	r2, #1
 800967a:	6122      	str	r2, [r4, #16]
 800967c:	3020      	adds	r0, #32
 800967e:	e7e3      	b.n	8009648 <__d2b+0x60>
 8009680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009688:	f8c9 0000 	str.w	r0, [r9]
 800968c:	6918      	ldr	r0, [r3, #16]
 800968e:	f7ff fd35 	bl	80090fc <__hi0bits>
 8009692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009696:	e7df      	b.n	8009658 <__d2b+0x70>
 8009698:	0800efd7 	.word	0x0800efd7
 800969c:	0800f048 	.word	0x0800f048

080096a0 <_calloc_r>:
 80096a0:	b513      	push	{r0, r1, r4, lr}
 80096a2:	434a      	muls	r2, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	f000 f85a 	bl	8009760 <_malloc_r>
 80096ac:	4604      	mov	r4, r0
 80096ae:	b118      	cbz	r0, 80096b8 <_calloc_r+0x18>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	2100      	movs	r1, #0
 80096b4:	f7fd fde4 	bl	8007280 <memset>
 80096b8:	4620      	mov	r0, r4
 80096ba:	b002      	add	sp, #8
 80096bc:	bd10      	pop	{r4, pc}
	...

080096c0 <_free_r>:
 80096c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096c2:	2900      	cmp	r1, #0
 80096c4:	d048      	beq.n	8009758 <_free_r+0x98>
 80096c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ca:	9001      	str	r0, [sp, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f1a1 0404 	sub.w	r4, r1, #4
 80096d2:	bfb8      	it	lt
 80096d4:	18e4      	addlt	r4, r4, r3
 80096d6:	f000 fc59 	bl	8009f8c <__malloc_lock>
 80096da:	4a20      	ldr	r2, [pc, #128]	; (800975c <_free_r+0x9c>)
 80096dc:	9801      	ldr	r0, [sp, #4]
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	4615      	mov	r5, r2
 80096e2:	b933      	cbnz	r3, 80096f2 <_free_r+0x32>
 80096e4:	6063      	str	r3, [r4, #4]
 80096e6:	6014      	str	r4, [r2, #0]
 80096e8:	b003      	add	sp, #12
 80096ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ee:	f000 bc53 	b.w	8009f98 <__malloc_unlock>
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	d90b      	bls.n	800970e <_free_r+0x4e>
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	1862      	adds	r2, r4, r1
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bf04      	itt	eq
 80096fe:	681a      	ldreq	r2, [r3, #0]
 8009700:	685b      	ldreq	r3, [r3, #4]
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	bf04      	itt	eq
 8009706:	1852      	addeq	r2, r2, r1
 8009708:	6022      	streq	r2, [r4, #0]
 800970a:	602c      	str	r4, [r5, #0]
 800970c:	e7ec      	b.n	80096e8 <_free_r+0x28>
 800970e:	461a      	mov	r2, r3
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	b10b      	cbz	r3, 8009718 <_free_r+0x58>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d9fa      	bls.n	800970e <_free_r+0x4e>
 8009718:	6811      	ldr	r1, [r2, #0]
 800971a:	1855      	adds	r5, r2, r1
 800971c:	42a5      	cmp	r5, r4
 800971e:	d10b      	bne.n	8009738 <_free_r+0x78>
 8009720:	6824      	ldr	r4, [r4, #0]
 8009722:	4421      	add	r1, r4
 8009724:	1854      	adds	r4, r2, r1
 8009726:	42a3      	cmp	r3, r4
 8009728:	6011      	str	r1, [r2, #0]
 800972a:	d1dd      	bne.n	80096e8 <_free_r+0x28>
 800972c:	681c      	ldr	r4, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	6053      	str	r3, [r2, #4]
 8009732:	4421      	add	r1, r4
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	e7d7      	b.n	80096e8 <_free_r+0x28>
 8009738:	d902      	bls.n	8009740 <_free_r+0x80>
 800973a:	230c      	movs	r3, #12
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	e7d3      	b.n	80096e8 <_free_r+0x28>
 8009740:	6825      	ldr	r5, [r4, #0]
 8009742:	1961      	adds	r1, r4, r5
 8009744:	428b      	cmp	r3, r1
 8009746:	bf04      	itt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	6063      	str	r3, [r4, #4]
 800974e:	bf04      	itt	eq
 8009750:	1949      	addeq	r1, r1, r5
 8009752:	6021      	streq	r1, [r4, #0]
 8009754:	6054      	str	r4, [r2, #4]
 8009756:	e7c7      	b.n	80096e8 <_free_r+0x28>
 8009758:	b003      	add	sp, #12
 800975a:	bd30      	pop	{r4, r5, pc}
 800975c:	200002e4 	.word	0x200002e4

08009760 <_malloc_r>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	1ccd      	adds	r5, r1, #3
 8009764:	f025 0503 	bic.w	r5, r5, #3
 8009768:	3508      	adds	r5, #8
 800976a:	2d0c      	cmp	r5, #12
 800976c:	bf38      	it	cc
 800976e:	250c      	movcc	r5, #12
 8009770:	2d00      	cmp	r5, #0
 8009772:	4606      	mov	r6, r0
 8009774:	db01      	blt.n	800977a <_malloc_r+0x1a>
 8009776:	42a9      	cmp	r1, r5
 8009778:	d903      	bls.n	8009782 <_malloc_r+0x22>
 800977a:	230c      	movs	r3, #12
 800977c:	6033      	str	r3, [r6, #0]
 800977e:	2000      	movs	r0, #0
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009782:	f000 fc03 	bl	8009f8c <__malloc_lock>
 8009786:	4921      	ldr	r1, [pc, #132]	; (800980c <_malloc_r+0xac>)
 8009788:	680a      	ldr	r2, [r1, #0]
 800978a:	4614      	mov	r4, r2
 800978c:	b99c      	cbnz	r4, 80097b6 <_malloc_r+0x56>
 800978e:	4f20      	ldr	r7, [pc, #128]	; (8009810 <_malloc_r+0xb0>)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	b923      	cbnz	r3, 800979e <_malloc_r+0x3e>
 8009794:	4621      	mov	r1, r4
 8009796:	4630      	mov	r0, r6
 8009798:	f000 faf2 	bl	8009d80 <_sbrk_r>
 800979c:	6038      	str	r0, [r7, #0]
 800979e:	4629      	mov	r1, r5
 80097a0:	4630      	mov	r0, r6
 80097a2:	f000 faed 	bl	8009d80 <_sbrk_r>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d123      	bne.n	80097f2 <_malloc_r+0x92>
 80097aa:	230c      	movs	r3, #12
 80097ac:	6033      	str	r3, [r6, #0]
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 fbf2 	bl	8009f98 <__malloc_unlock>
 80097b4:	e7e3      	b.n	800977e <_malloc_r+0x1e>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	1b5b      	subs	r3, r3, r5
 80097ba:	d417      	bmi.n	80097ec <_malloc_r+0x8c>
 80097bc:	2b0b      	cmp	r3, #11
 80097be:	d903      	bls.n	80097c8 <_malloc_r+0x68>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	441c      	add	r4, r3
 80097c4:	6025      	str	r5, [r4, #0]
 80097c6:	e004      	b.n	80097d2 <_malloc_r+0x72>
 80097c8:	6863      	ldr	r3, [r4, #4]
 80097ca:	42a2      	cmp	r2, r4
 80097cc:	bf0c      	ite	eq
 80097ce:	600b      	streq	r3, [r1, #0]
 80097d0:	6053      	strne	r3, [r2, #4]
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 fbe0 	bl	8009f98 <__malloc_unlock>
 80097d8:	f104 000b 	add.w	r0, r4, #11
 80097dc:	1d23      	adds	r3, r4, #4
 80097de:	f020 0007 	bic.w	r0, r0, #7
 80097e2:	1ac2      	subs	r2, r0, r3
 80097e4:	d0cc      	beq.n	8009780 <_malloc_r+0x20>
 80097e6:	1a1b      	subs	r3, r3, r0
 80097e8:	50a3      	str	r3, [r4, r2]
 80097ea:	e7c9      	b.n	8009780 <_malloc_r+0x20>
 80097ec:	4622      	mov	r2, r4
 80097ee:	6864      	ldr	r4, [r4, #4]
 80097f0:	e7cc      	b.n	800978c <_malloc_r+0x2c>
 80097f2:	1cc4      	adds	r4, r0, #3
 80097f4:	f024 0403 	bic.w	r4, r4, #3
 80097f8:	42a0      	cmp	r0, r4
 80097fa:	d0e3      	beq.n	80097c4 <_malloc_r+0x64>
 80097fc:	1a21      	subs	r1, r4, r0
 80097fe:	4630      	mov	r0, r6
 8009800:	f000 fabe 	bl	8009d80 <_sbrk_r>
 8009804:	3001      	adds	r0, #1
 8009806:	d1dd      	bne.n	80097c4 <_malloc_r+0x64>
 8009808:	e7cf      	b.n	80097aa <_malloc_r+0x4a>
 800980a:	bf00      	nop
 800980c:	200002e4 	.word	0x200002e4
 8009810:	200002e8 	.word	0x200002e8

08009814 <__ssputs_r>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	688e      	ldr	r6, [r1, #8]
 800981a:	429e      	cmp	r6, r3
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	461f      	mov	r7, r3
 8009824:	d838      	bhi.n	8009898 <__ssputs_r+0x84>
 8009826:	898a      	ldrh	r2, [r1, #12]
 8009828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982c:	d032      	beq.n	8009894 <__ssputs_r+0x80>
 800982e:	6825      	ldr	r5, [r4, #0]
 8009830:	6909      	ldr	r1, [r1, #16]
 8009832:	eba5 0901 	sub.w	r9, r5, r1
 8009836:	6965      	ldr	r5, [r4, #20]
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009840:	3301      	adds	r3, #1
 8009842:	444b      	add	r3, r9
 8009844:	106d      	asrs	r5, r5, #1
 8009846:	429d      	cmp	r5, r3
 8009848:	bf38      	it	cc
 800984a:	461d      	movcc	r5, r3
 800984c:	0553      	lsls	r3, r2, #21
 800984e:	d531      	bpl.n	80098b4 <__ssputs_r+0xa0>
 8009850:	4629      	mov	r1, r5
 8009852:	f7ff ff85 	bl	8009760 <_malloc_r>
 8009856:	4606      	mov	r6, r0
 8009858:	b950      	cbnz	r0, 8009870 <__ssputs_r+0x5c>
 800985a:	230c      	movs	r3, #12
 800985c:	f8ca 3000 	str.w	r3, [sl]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	6921      	ldr	r1, [r4, #16]
 8009872:	464a      	mov	r2, r9
 8009874:	f7ff fb88 	bl	8008f88 <memcpy>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	6126      	str	r6, [r4, #16]
 8009886:	6165      	str	r5, [r4, #20]
 8009888:	444e      	add	r6, r9
 800988a:	eba5 0509 	sub.w	r5, r5, r9
 800988e:	6026      	str	r6, [r4, #0]
 8009890:	60a5      	str	r5, [r4, #8]
 8009892:	463e      	mov	r6, r7
 8009894:	42be      	cmp	r6, r7
 8009896:	d900      	bls.n	800989a <__ssputs_r+0x86>
 8009898:	463e      	mov	r6, r7
 800989a:	4632      	mov	r2, r6
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	4641      	mov	r1, r8
 80098a0:	f000 fb5a 	bl	8009f58 <memmove>
 80098a4:	68a3      	ldr	r3, [r4, #8]
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	1b9b      	subs	r3, r3, r6
 80098aa:	4432      	add	r2, r6
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7db      	b.n	800986c <__ssputs_r+0x58>
 80098b4:	462a      	mov	r2, r5
 80098b6:	f000 fb75 	bl	8009fa4 <_realloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e1      	bne.n	8009884 <__ssputs_r+0x70>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7ff fefc 	bl	80096c0 <_free_r>
 80098c8:	e7c7      	b.n	800985a <__ssputs_r+0x46>
	...

080098cc <_svfiprintf_r>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	898b      	ldrh	r3, [r1, #12]
 80098d4:	061b      	lsls	r3, r3, #24
 80098d6:	b09d      	sub	sp, #116	; 0x74
 80098d8:	4607      	mov	r7, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	d50e      	bpl.n	80098fe <_svfiprintf_r+0x32>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	b963      	cbnz	r3, 80098fe <_svfiprintf_r+0x32>
 80098e4:	2140      	movs	r1, #64	; 0x40
 80098e6:	f7ff ff3b 	bl	8009760 <_malloc_r>
 80098ea:	6028      	str	r0, [r5, #0]
 80098ec:	6128      	str	r0, [r5, #16]
 80098ee:	b920      	cbnz	r0, 80098fa <_svfiprintf_r+0x2e>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e0d1      	b.n	8009a9e <_svfiprintf_r+0x1d2>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	616b      	str	r3, [r5, #20]
 80098fe:	2300      	movs	r3, #0
 8009900:	9309      	str	r3, [sp, #36]	; 0x24
 8009902:	2320      	movs	r3, #32
 8009904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009908:	f8cd 800c 	str.w	r8, [sp, #12]
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ab8 <_svfiprintf_r+0x1ec>
 8009912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009916:	f04f 0901 	mov.w	r9, #1
 800991a:	4623      	mov	r3, r4
 800991c:	469a      	mov	sl, r3
 800991e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009922:	b10a      	cbz	r2, 8009928 <_svfiprintf_r+0x5c>
 8009924:	2a25      	cmp	r2, #37	; 0x25
 8009926:	d1f9      	bne.n	800991c <_svfiprintf_r+0x50>
 8009928:	ebba 0b04 	subs.w	fp, sl, r4
 800992c:	d00b      	beq.n	8009946 <_svfiprintf_r+0x7a>
 800992e:	465b      	mov	r3, fp
 8009930:	4622      	mov	r2, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff6d 	bl	8009814 <__ssputs_r>
 800993a:	3001      	adds	r0, #1
 800993c:	f000 80aa 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	445a      	add	r2, fp
 8009944:	9209      	str	r2, [sp, #36]	; 0x24
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a2 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009950:	2300      	movs	r3, #0
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009966:	931a      	str	r3, [sp, #104]	; 0x68
 8009968:	4654      	mov	r4, sl
 800996a:	2205      	movs	r2, #5
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	4851      	ldr	r0, [pc, #324]	; (8009ab8 <_svfiprintf_r+0x1ec>)
 8009972:	f7f6 fc3d 	bl	80001f0 <memchr>
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	b9d8      	cbnz	r0, 80099b2 <_svfiprintf_r+0xe6>
 800997a:	06d0      	lsls	r0, r2, #27
 800997c:	bf44      	itt	mi
 800997e:	2320      	movmi	r3, #32
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	bf44      	itt	mi
 8009988:	232b      	movmi	r3, #43	; 0x2b
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800998e:	f89a 3000 	ldrb.w	r3, [sl]
 8009992:	2b2a      	cmp	r3, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xf6>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4654      	mov	r4, sl
 800999a:	2000      	movs	r0, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4621      	mov	r1, r4
 80099a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a6:	3b30      	subs	r3, #48	; 0x30
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d94e      	bls.n	8009a4a <_svfiprintf_r+0x17e>
 80099ac:	b1b0      	cbz	r0, 80099dc <_svfiprintf_r+0x110>
 80099ae:	9207      	str	r2, [sp, #28]
 80099b0:	e014      	b.n	80099dc <_svfiprintf_r+0x110>
 80099b2:	eba0 0308 	sub.w	r3, r0, r8
 80099b6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	46a2      	mov	sl, r4
 80099c0:	e7d2      	b.n	8009968 <_svfiprintf_r+0x9c>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d19      	adds	r1, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfbb      	ittet	lt
 80099ce:	425b      	neglt	r3, r3
 80099d0:	f042 0202 	orrlt.w	r2, r2, #2
 80099d4:	9307      	strge	r3, [sp, #28]
 80099d6:	9307      	strlt	r3, [sp, #28]
 80099d8:	bfb8      	it	lt
 80099da:	9204      	strlt	r2, [sp, #16]
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x130>
 80099e2:	7863      	ldrb	r3, [r4, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d135      	bne.n	8009a54 <_svfiprintf_r+0x188>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfb8      	it	lt
 80099f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f8:	3402      	adds	r4, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ac8 <_svfiprintf_r+0x1fc>
 8009a00:	7821      	ldrb	r1, [r4, #0]
 8009a02:	2203      	movs	r2, #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7f6 fbf3 	bl	80001f0 <memchr>
 8009a0a:	b140      	cbz	r0, 8009a1e <_svfiprintf_r+0x152>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	fa03 f000 	lsl.w	r0, r3, r0
 8009a16:	9b04      	ldr	r3, [sp, #16]
 8009a18:	4303      	orrs	r3, r0
 8009a1a:	3401      	adds	r4, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	4826      	ldr	r0, [pc, #152]	; (8009abc <_svfiprintf_r+0x1f0>)
 8009a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a28:	2206      	movs	r2, #6
 8009a2a:	f7f6 fbe1 	bl	80001f0 <memchr>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d038      	beq.n	8009aa4 <_svfiprintf_r+0x1d8>
 8009a32:	4b23      	ldr	r3, [pc, #140]	; (8009ac0 <_svfiprintf_r+0x1f4>)
 8009a34:	bb1b      	cbnz	r3, 8009a7e <_svfiprintf_r+0x1b2>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	3307      	adds	r3, #7
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	3308      	adds	r3, #8
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a44:	4433      	add	r3, r6
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	e767      	b.n	800991a <_svfiprintf_r+0x4e>
 8009a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4e:	460c      	mov	r4, r1
 8009a50:	2001      	movs	r0, #1
 8009a52:	e7a5      	b.n	80099a0 <_svfiprintf_r+0xd4>
 8009a54:	2300      	movs	r3, #0
 8009a56:	3401      	adds	r4, #1
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f04f 0c0a 	mov.w	ip, #10
 8009a60:	4620      	mov	r0, r4
 8009a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a66:	3a30      	subs	r2, #48	; 0x30
 8009a68:	2a09      	cmp	r2, #9
 8009a6a:	d903      	bls.n	8009a74 <_svfiprintf_r+0x1a8>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0c5      	beq.n	80099fc <_svfiprintf_r+0x130>
 8009a70:	9105      	str	r1, [sp, #20]
 8009a72:	e7c3      	b.n	80099fc <_svfiprintf_r+0x130>
 8009a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7f0      	b.n	8009a60 <_svfiprintf_r+0x194>
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009a86:	a904      	add	r1, sp, #16
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7fd fca1 	bl	80073d0 <_printf_float>
 8009a8e:	1c42      	adds	r2, r0, #1
 8009a90:	4606      	mov	r6, r0
 8009a92:	d1d6      	bne.n	8009a42 <_svfiprintf_r+0x176>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af2c 	bmi.w	80098f4 <_svfiprintf_r+0x28>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	b01d      	add	sp, #116	; 0x74
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7fd ff32 	bl	8007918 <_printf_i>
 8009ab4:	e7eb      	b.n	8009a8e <_svfiprintf_r+0x1c2>
 8009ab6:	bf00      	nop
 8009ab8:	0800f1a4 	.word	0x0800f1a4
 8009abc:	0800f1ae 	.word	0x0800f1ae
 8009ac0:	080073d1 	.word	0x080073d1
 8009ac4:	08009815 	.word	0x08009815
 8009ac8:	0800f1aa 	.word	0x0800f1aa

08009acc <__sfputc_r>:
 8009acc:	6893      	ldr	r3, [r2, #8]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	b410      	push	{r4}
 8009ad4:	6093      	str	r3, [r2, #8]
 8009ad6:	da08      	bge.n	8009aea <__sfputc_r+0x1e>
 8009ad8:	6994      	ldr	r4, [r2, #24]
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	db01      	blt.n	8009ae2 <__sfputc_r+0x16>
 8009ade:	290a      	cmp	r1, #10
 8009ae0:	d103      	bne.n	8009aea <__sfputc_r+0x1e>
 8009ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae6:	f7fe b8eb 	b.w	8007cc0 <__swbuf_r>
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	1c58      	adds	r0, r3, #1
 8009aee:	6010      	str	r0, [r2, #0]
 8009af0:	7019      	strb	r1, [r3, #0]
 8009af2:	4608      	mov	r0, r1
 8009af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <__sfputs_r>:
 8009afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	4614      	mov	r4, r2
 8009b02:	18d5      	adds	r5, r2, r3
 8009b04:	42ac      	cmp	r4, r5
 8009b06:	d101      	bne.n	8009b0c <__sfputs_r+0x12>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e007      	b.n	8009b1c <__sfputs_r+0x22>
 8009b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b10:	463a      	mov	r2, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff ffda 	bl	8009acc <__sfputc_r>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d1f3      	bne.n	8009b04 <__sfputs_r+0xa>
 8009b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b20 <_vfiprintf_r>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	460d      	mov	r5, r1
 8009b26:	b09d      	sub	sp, #116	; 0x74
 8009b28:	4614      	mov	r4, r2
 8009b2a:	4698      	mov	r8, r3
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	b118      	cbz	r0, 8009b38 <_vfiprintf_r+0x18>
 8009b30:	6983      	ldr	r3, [r0, #24]
 8009b32:	b90b      	cbnz	r3, 8009b38 <_vfiprintf_r+0x18>
 8009b34:	f7ff f916 	bl	8008d64 <__sinit>
 8009b38:	4b89      	ldr	r3, [pc, #548]	; (8009d60 <_vfiprintf_r+0x240>)
 8009b3a:	429d      	cmp	r5, r3
 8009b3c:	d11b      	bne.n	8009b76 <_vfiprintf_r+0x56>
 8009b3e:	6875      	ldr	r5, [r6, #4]
 8009b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b42:	07d9      	lsls	r1, r3, #31
 8009b44:	d405      	bmi.n	8009b52 <_vfiprintf_r+0x32>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	059a      	lsls	r2, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_vfiprintf_r+0x32>
 8009b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4e:	f7ff f9ac 	bl	8008eaa <__retarget_lock_acquire_recursive>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	071b      	lsls	r3, r3, #28
 8009b56:	d501      	bpl.n	8009b5c <_vfiprintf_r+0x3c>
 8009b58:	692b      	ldr	r3, [r5, #16]
 8009b5a:	b9eb      	cbnz	r3, 8009b98 <_vfiprintf_r+0x78>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7fe f900 	bl	8007d64 <__swsetup_r>
 8009b64:	b1c0      	cbz	r0, 8009b98 <_vfiprintf_r+0x78>
 8009b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b68:	07dc      	lsls	r4, r3, #31
 8009b6a:	d50e      	bpl.n	8009b8a <_vfiprintf_r+0x6a>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	b01d      	add	sp, #116	; 0x74
 8009b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b76:	4b7b      	ldr	r3, [pc, #492]	; (8009d64 <_vfiprintf_r+0x244>)
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	d101      	bne.n	8009b80 <_vfiprintf_r+0x60>
 8009b7c:	68b5      	ldr	r5, [r6, #8]
 8009b7e:	e7df      	b.n	8009b40 <_vfiprintf_r+0x20>
 8009b80:	4b79      	ldr	r3, [pc, #484]	; (8009d68 <_vfiprintf_r+0x248>)
 8009b82:	429d      	cmp	r5, r3
 8009b84:	bf08      	it	eq
 8009b86:	68f5      	ldreq	r5, [r6, #12]
 8009b88:	e7da      	b.n	8009b40 <_vfiprintf_r+0x20>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4ed      	bmi.n	8009b6c <_vfiprintf_r+0x4c>
 8009b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b92:	f7ff f98b 	bl	8008eac <__retarget_lock_release_recursive>
 8009b96:	e7e9      	b.n	8009b6c <_vfiprintf_r+0x4c>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	; 0x30
 8009ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d6c <_vfiprintf_r+0x24c>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0xa2>
 8009bbe:	2a25      	cmp	r2, #37	; 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x96>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xc0>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ff93 	bl	8009afa <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80aa 	beq.w	8009d2e <_vfiprintf_r+0x20e>
 8009bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	; 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80a2 	beq.w	8009d2e <_vfiprintf_r+0x20e>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c00:	931a      	str	r3, [sp, #104]	; 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4858      	ldr	r0, [pc, #352]	; (8009d6c <_vfiprintf_r+0x24c>)
 8009c0c:	f7f6 faf0 	bl	80001f0 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x12c>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	; 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x13c>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	; 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94e      	bls.n	8009ce4 <_vfiprintf_r+0x1c4>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x156>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x156>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xe2>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7a:	d10c      	bne.n	8009c96 <_vfiprintf_r+0x176>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c80:	d135      	bne.n	8009cee <_vfiprintf_r+0x1ce>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfb8      	it	lt
 8009c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c92:	3402      	adds	r4, #2
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d7c <_vfiprintf_r+0x25c>
 8009c9a:	7821      	ldrb	r1, [r4, #0]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f7f6 faa6 	bl	80001f0 <memchr>
 8009ca4:	b140      	cbz	r0, 8009cb8 <_vfiprintf_r+0x198>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	eba0 000a 	sub.w	r0, r0, sl
 8009cac:	fa03 f000 	lsl.w	r0, r3, r0
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	4303      	orrs	r3, r0
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	482c      	ldr	r0, [pc, #176]	; (8009d70 <_vfiprintf_r+0x250>)
 8009cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cc2:	2206      	movs	r2, #6
 8009cc4:	f7f6 fa94 	bl	80001f0 <memchr>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d03f      	beq.n	8009d4c <_vfiprintf_r+0x22c>
 8009ccc:	4b29      	ldr	r3, [pc, #164]	; (8009d74 <_vfiprintf_r+0x254>)
 8009cce:	bb1b      	cbnz	r3, 8009d18 <_vfiprintf_r+0x1f8>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	3307      	adds	r3, #7
 8009cd4:	f023 0307 	bic.w	r3, r3, #7
 8009cd8:	3308      	adds	r3, #8
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cde:	443b      	add	r3, r7
 8009ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce2:	e767      	b.n	8009bb4 <_vfiprintf_r+0x94>
 8009ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce8:	460c      	mov	r4, r1
 8009cea:	2001      	movs	r0, #1
 8009cec:	e7a5      	b.n	8009c3a <_vfiprintf_r+0x11a>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	3401      	adds	r4, #1
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f04f 0c0a 	mov.w	ip, #10
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d00:	3a30      	subs	r2, #48	; 0x30
 8009d02:	2a09      	cmp	r2, #9
 8009d04:	d903      	bls.n	8009d0e <_vfiprintf_r+0x1ee>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0c5      	beq.n	8009c96 <_vfiprintf_r+0x176>
 8009d0a:	9105      	str	r1, [sp, #20]
 8009d0c:	e7c3      	b.n	8009c96 <_vfiprintf_r+0x176>
 8009d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d12:	4604      	mov	r4, r0
 8009d14:	2301      	movs	r3, #1
 8009d16:	e7f0      	b.n	8009cfa <_vfiprintf_r+0x1da>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <_vfiprintf_r+0x258>)
 8009d20:	a904      	add	r1, sp, #16
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7fd fb54 	bl	80073d0 <_printf_float>
 8009d28:	4607      	mov	r7, r0
 8009d2a:	1c78      	adds	r0, r7, #1
 8009d2c:	d1d6      	bne.n	8009cdc <_vfiprintf_r+0x1bc>
 8009d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d30:	07d9      	lsls	r1, r3, #31
 8009d32:	d405      	bmi.n	8009d40 <_vfiprintf_r+0x220>
 8009d34:	89ab      	ldrh	r3, [r5, #12]
 8009d36:	059a      	lsls	r2, r3, #22
 8009d38:	d402      	bmi.n	8009d40 <_vfiprintf_r+0x220>
 8009d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3c:	f7ff f8b6 	bl	8008eac <__retarget_lock_release_recursive>
 8009d40:	89ab      	ldrh	r3, [r5, #12]
 8009d42:	065b      	lsls	r3, r3, #25
 8009d44:	f53f af12 	bmi.w	8009b6c <_vfiprintf_r+0x4c>
 8009d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4a:	e711      	b.n	8009b70 <_vfiprintf_r+0x50>
 8009d4c:	ab03      	add	r3, sp, #12
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <_vfiprintf_r+0x258>)
 8009d54:	a904      	add	r1, sp, #16
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7fd fdde 	bl	8007918 <_printf_i>
 8009d5c:	e7e4      	b.n	8009d28 <_vfiprintf_r+0x208>
 8009d5e:	bf00      	nop
 8009d60:	0800f008 	.word	0x0800f008
 8009d64:	0800f028 	.word	0x0800f028
 8009d68:	0800efe8 	.word	0x0800efe8
 8009d6c:	0800f1a4 	.word	0x0800f1a4
 8009d70:	0800f1ae 	.word	0x0800f1ae
 8009d74:	080073d1 	.word	0x080073d1
 8009d78:	08009afb 	.word	0x08009afb
 8009d7c:	0800f1aa 	.word	0x0800f1aa

08009d80 <_sbrk_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_sbrk_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f8 fad4 	bl	8002338 <_sbrk>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_sbrk_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_sbrk_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	20000484 	.word	0x20000484

08009da0 <__sread>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	460c      	mov	r4, r1
 8009da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da8:	f000 f922 	bl	8009ff0 <_read_r>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	bfab      	itete	ge
 8009db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009db2:	89a3      	ldrhlt	r3, [r4, #12]
 8009db4:	181b      	addge	r3, r3, r0
 8009db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dba:	bfac      	ite	ge
 8009dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dbe:	81a3      	strhlt	r3, [r4, #12]
 8009dc0:	bd10      	pop	{r4, pc}

08009dc2 <__swrite>:
 8009dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc6:	461f      	mov	r7, r3
 8009dc8:	898b      	ldrh	r3, [r1, #12]
 8009dca:	05db      	lsls	r3, r3, #23
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	d505      	bpl.n	8009de0 <__swrite+0x1e>
 8009dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd8:	2302      	movs	r3, #2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f000 f898 	bl	8009f10 <_lseek_r>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	4628      	mov	r0, r5
 8009df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	f000 b817 	b.w	8009e28 <_write_r>

08009dfa <__sseek>:
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e02:	f000 f885 	bl	8009f10 <_lseek_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	bf15      	itete	ne
 8009e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e16:	81a3      	strheq	r3, [r4, #12]
 8009e18:	bf18      	it	ne
 8009e1a:	81a3      	strhne	r3, [r4, #12]
 8009e1c:	bd10      	pop	{r4, pc}

08009e1e <__sclose>:
 8009e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e22:	f000 b831 	b.w	8009e88 <_close_r>
	...

08009e28 <_write_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	; (8009e48 <_write_r+0x20>)
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f7 fb8a 	bl	8001550 <_write>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_write_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_write_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000484 	.word	0x20000484

08009e4c <__assert_func>:
 8009e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e4e:	4614      	mov	r4, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <__assert_func+0x2c>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4605      	mov	r5, r0
 8009e58:	68d8      	ldr	r0, [r3, #12]
 8009e5a:	b14c      	cbz	r4, 8009e70 <__assert_func+0x24>
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <__assert_func+0x30>)
 8009e5e:	9100      	str	r1, [sp, #0]
 8009e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e64:	4906      	ldr	r1, [pc, #24]	; (8009e80 <__assert_func+0x34>)
 8009e66:	462b      	mov	r3, r5
 8009e68:	f000 f81e 	bl	8009ea8 <fiprintf>
 8009e6c:	f000 f8df 	bl	800a02e <abort>
 8009e70:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <__assert_func+0x38>)
 8009e72:	461c      	mov	r4, r3
 8009e74:	e7f3      	b.n	8009e5e <__assert_func+0x12>
 8009e76:	bf00      	nop
 8009e78:	20000028 	.word	0x20000028
 8009e7c:	0800f1b5 	.word	0x0800f1b5
 8009e80:	0800f1c2 	.word	0x0800f1c2
 8009e84:	0800f1f0 	.word	0x0800f1f0

08009e88 <_close_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d06      	ldr	r5, [pc, #24]	; (8009ea4 <_close_r+0x1c>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	f7f8 fa1b 	bl	80022ce <_close>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_close_r+0x1a>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_close_r+0x1a>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20000484 	.word	0x20000484

08009ea8 <fiprintf>:
 8009ea8:	b40e      	push	{r1, r2, r3}
 8009eaa:	b503      	push	{r0, r1, lr}
 8009eac:	4601      	mov	r1, r0
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	4805      	ldr	r0, [pc, #20]	; (8009ec8 <fiprintf+0x20>)
 8009eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	f7ff fe31 	bl	8009b20 <_vfiprintf_r>
 8009ebe:	b002      	add	sp, #8
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	4770      	bx	lr
 8009ec8:	20000028 	.word	0x20000028

08009ecc <_fstat_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	; (8009eec <_fstat_r+0x20>)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	602b      	str	r3, [r5, #0]
 8009eda:	f7f8 fa04 	bl	80022e6 <_fstat>
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	d102      	bne.n	8009ee8 <_fstat_r+0x1c>
 8009ee2:	682b      	ldr	r3, [r5, #0]
 8009ee4:	b103      	cbz	r3, 8009ee8 <_fstat_r+0x1c>
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	bd38      	pop	{r3, r4, r5, pc}
 8009eea:	bf00      	nop
 8009eec:	20000484 	.word	0x20000484

08009ef0 <_isatty_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d06      	ldr	r5, [pc, #24]	; (8009f0c <_isatty_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f8 fa03 	bl	8002306 <_isatty>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_isatty_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_isatty_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	20000484 	.word	0x20000484

08009f10 <_lseek_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d07      	ldr	r5, [pc, #28]	; (8009f30 <_lseek_r+0x20>)
 8009f14:	4604      	mov	r4, r0
 8009f16:	4608      	mov	r0, r1
 8009f18:	4611      	mov	r1, r2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	602a      	str	r2, [r5, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f7f8 f9fc 	bl	800231c <_lseek>
 8009f24:	1c43      	adds	r3, r0, #1
 8009f26:	d102      	bne.n	8009f2e <_lseek_r+0x1e>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b103      	cbz	r3, 8009f2e <_lseek_r+0x1e>
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	bd38      	pop	{r3, r4, r5, pc}
 8009f30:	20000484 	.word	0x20000484

08009f34 <__ascii_mbtowc>:
 8009f34:	b082      	sub	sp, #8
 8009f36:	b901      	cbnz	r1, 8009f3a <__ascii_mbtowc+0x6>
 8009f38:	a901      	add	r1, sp, #4
 8009f3a:	b142      	cbz	r2, 8009f4e <__ascii_mbtowc+0x1a>
 8009f3c:	b14b      	cbz	r3, 8009f52 <__ascii_mbtowc+0x1e>
 8009f3e:	7813      	ldrb	r3, [r2, #0]
 8009f40:	600b      	str	r3, [r1, #0]
 8009f42:	7812      	ldrb	r2, [r2, #0]
 8009f44:	1e10      	subs	r0, r2, #0
 8009f46:	bf18      	it	ne
 8009f48:	2001      	movne	r0, #1
 8009f4a:	b002      	add	sp, #8
 8009f4c:	4770      	bx	lr
 8009f4e:	4610      	mov	r0, r2
 8009f50:	e7fb      	b.n	8009f4a <__ascii_mbtowc+0x16>
 8009f52:	f06f 0001 	mvn.w	r0, #1
 8009f56:	e7f8      	b.n	8009f4a <__ascii_mbtowc+0x16>

08009f58 <memmove>:
 8009f58:	4288      	cmp	r0, r1
 8009f5a:	b510      	push	{r4, lr}
 8009f5c:	eb01 0402 	add.w	r4, r1, r2
 8009f60:	d902      	bls.n	8009f68 <memmove+0x10>
 8009f62:	4284      	cmp	r4, r0
 8009f64:	4623      	mov	r3, r4
 8009f66:	d807      	bhi.n	8009f78 <memmove+0x20>
 8009f68:	1e43      	subs	r3, r0, #1
 8009f6a:	42a1      	cmp	r1, r4
 8009f6c:	d008      	beq.n	8009f80 <memmove+0x28>
 8009f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f76:	e7f8      	b.n	8009f6a <memmove+0x12>
 8009f78:	4402      	add	r2, r0
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	428a      	cmp	r2, r1
 8009f7e:	d100      	bne.n	8009f82 <memmove+0x2a>
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f8a:	e7f7      	b.n	8009f7c <memmove+0x24>

08009f8c <__malloc_lock>:
 8009f8c:	4801      	ldr	r0, [pc, #4]	; (8009f94 <__malloc_lock+0x8>)
 8009f8e:	f7fe bf8c 	b.w	8008eaa <__retarget_lock_acquire_recursive>
 8009f92:	bf00      	nop
 8009f94:	2000047c 	.word	0x2000047c

08009f98 <__malloc_unlock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_unlock+0x8>)
 8009f9a:	f7fe bf87 	b.w	8008eac <__retarget_lock_release_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	2000047c 	.word	0x2000047c

08009fa4 <_realloc_r>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	4607      	mov	r7, r0
 8009fa8:	4614      	mov	r4, r2
 8009faa:	460e      	mov	r6, r1
 8009fac:	b921      	cbnz	r1, 8009fb8 <_realloc_r+0x14>
 8009fae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	f7ff bbd4 	b.w	8009760 <_malloc_r>
 8009fb8:	b922      	cbnz	r2, 8009fc4 <_realloc_r+0x20>
 8009fba:	f7ff fb81 	bl	80096c0 <_free_r>
 8009fbe:	4625      	mov	r5, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc4:	f000 f83a 	bl	800a03c <_malloc_usable_size_r>
 8009fc8:	42a0      	cmp	r0, r4
 8009fca:	d20f      	bcs.n	8009fec <_realloc_r+0x48>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4638      	mov	r0, r7
 8009fd0:	f7ff fbc6 	bl	8009760 <_malloc_r>
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d0f2      	beq.n	8009fc0 <_realloc_r+0x1c>
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4622      	mov	r2, r4
 8009fde:	f7fe ffd3 	bl	8008f88 <memcpy>
 8009fe2:	4631      	mov	r1, r6
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fb6b 	bl	80096c0 <_free_r>
 8009fea:	e7e9      	b.n	8009fc0 <_realloc_r+0x1c>
 8009fec:	4635      	mov	r5, r6
 8009fee:	e7e7      	b.n	8009fc0 <_realloc_r+0x1c>

08009ff0 <_read_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d07      	ldr	r5, [pc, #28]	; (800a010 <_read_r+0x20>)
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	4608      	mov	r0, r1
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	602a      	str	r2, [r5, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	f7f8 f948 	bl	8002294 <_read>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_read_r+0x1e>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_read_r+0x1e>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	20000484 	.word	0x20000484

0800a014 <__ascii_wctomb>:
 800a014:	b149      	cbz	r1, 800a02a <__ascii_wctomb+0x16>
 800a016:	2aff      	cmp	r2, #255	; 0xff
 800a018:	bf85      	ittet	hi
 800a01a:	238a      	movhi	r3, #138	; 0x8a
 800a01c:	6003      	strhi	r3, [r0, #0]
 800a01e:	700a      	strbls	r2, [r1, #0]
 800a020:	f04f 30ff 	movhi.w	r0, #4294967295
 800a024:	bf98      	it	ls
 800a026:	2001      	movls	r0, #1
 800a028:	4770      	bx	lr
 800a02a:	4608      	mov	r0, r1
 800a02c:	4770      	bx	lr

0800a02e <abort>:
 800a02e:	b508      	push	{r3, lr}
 800a030:	2006      	movs	r0, #6
 800a032:	f000 f833 	bl	800a09c <raise>
 800a036:	2001      	movs	r0, #1
 800a038:	f7f8 f922 	bl	8002280 <_exit>

0800a03c <_malloc_usable_size_r>:
 800a03c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a040:	1f18      	subs	r0, r3, #4
 800a042:	2b00      	cmp	r3, #0
 800a044:	bfbc      	itt	lt
 800a046:	580b      	ldrlt	r3, [r1, r0]
 800a048:	18c0      	addlt	r0, r0, r3
 800a04a:	4770      	bx	lr

0800a04c <_raise_r>:
 800a04c:	291f      	cmp	r1, #31
 800a04e:	b538      	push	{r3, r4, r5, lr}
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	d904      	bls.n	800a060 <_raise_r+0x14>
 800a056:	2316      	movs	r3, #22
 800a058:	6003      	str	r3, [r0, #0]
 800a05a:	f04f 30ff 	mov.w	r0, #4294967295
 800a05e:	bd38      	pop	{r3, r4, r5, pc}
 800a060:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a062:	b112      	cbz	r2, 800a06a <_raise_r+0x1e>
 800a064:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a068:	b94b      	cbnz	r3, 800a07e <_raise_r+0x32>
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f830 	bl	800a0d0 <_getpid_r>
 800a070:	462a      	mov	r2, r5
 800a072:	4601      	mov	r1, r0
 800a074:	4620      	mov	r0, r4
 800a076:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a07a:	f000 b817 	b.w	800a0ac <_kill_r>
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d00a      	beq.n	800a098 <_raise_r+0x4c>
 800a082:	1c59      	adds	r1, r3, #1
 800a084:	d103      	bne.n	800a08e <_raise_r+0x42>
 800a086:	2316      	movs	r3, #22
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	2001      	movs	r0, #1
 800a08c:	e7e7      	b.n	800a05e <_raise_r+0x12>
 800a08e:	2400      	movs	r4, #0
 800a090:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a094:	4628      	mov	r0, r5
 800a096:	4798      	blx	r3
 800a098:	2000      	movs	r0, #0
 800a09a:	e7e0      	b.n	800a05e <_raise_r+0x12>

0800a09c <raise>:
 800a09c:	4b02      	ldr	r3, [pc, #8]	; (800a0a8 <raise+0xc>)
 800a09e:	4601      	mov	r1, r0
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	f7ff bfd3 	b.w	800a04c <_raise_r>
 800a0a6:	bf00      	nop
 800a0a8:	20000028 	.word	0x20000028

0800a0ac <_kill_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	4d07      	ldr	r5, [pc, #28]	; (800a0cc <_kill_r+0x20>)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4608      	mov	r0, r1
 800a0b6:	4611      	mov	r1, r2
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	f7f8 f8d1 	bl	8002260 <_kill>
 800a0be:	1c43      	adds	r3, r0, #1
 800a0c0:	d102      	bne.n	800a0c8 <_kill_r+0x1c>
 800a0c2:	682b      	ldr	r3, [r5, #0]
 800a0c4:	b103      	cbz	r3, 800a0c8 <_kill_r+0x1c>
 800a0c6:	6023      	str	r3, [r4, #0]
 800a0c8:	bd38      	pop	{r3, r4, r5, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000484 	.word	0x20000484

0800a0d0 <_getpid_r>:
 800a0d0:	f7f8 b8be 	b.w	8002250 <_getpid>

0800a0d4 <_init>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr

0800a0e0 <_fini>:
 800a0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e2:	bf00      	nop
 800a0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0e6:	bc08      	pop	{r3}
 800a0e8:	469e      	mov	lr, r3
 800a0ea:	4770      	bx	lr
