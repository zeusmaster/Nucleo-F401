
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051f4  08009e48  08009e48  00019e48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f03c  0800f03c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f03c  0800f03c  0001f03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f044  0800f044  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f044  0800f044  0001f044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f048  0800f048  0001f048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f04c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001f4  0800f240  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800f240  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003addd  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a32  00000000  00000000  0005b001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0005fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000612b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b192  00000000  00000000  00062910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0d0  00000000  00000000  0007daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2b75  00000000  00000000  00099b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c6e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075e8  00000000  00000000  0013c73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e2c 	.word	0x08009e2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009e2c 	.word	0x08009e2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <I2C_LCD1602_Send_Command>:
#define LCD1_address 		0x4E // A0,A1,A2 OPEN->E

extern I2C_HandleTypeDef hi2c1;

void I2C_LCD1602_Send_Command(unsigned char command)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	char command_MSB, command_LSB;
	uint8_t I2C_cmd[4];
	command_MSB = ( command & 0xf0 );
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
	command_LSB = ( (command << 4) & 0xf0 ) ;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	73bb      	strb	r3, [r7, #14]

	I2C_cmd[ 0 ] = command_MSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	f043 030c 	orr.w	r3, r3, #12
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	723b      	strb	r3, [r7, #8]
	I2C_cmd[ 1 ] = command_MSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
	I2C_cmd[ 2 ] = command_LSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	f043 030c 	orr.w	r3, r3, #12
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	72bb      	strb	r3, [r7, #10]
	I2C_cmd[ 3 ] = command_LSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_cmd, 4, 100 );
 8000fd0:	f107 0208 	add.w	r2, r7, #8
 8000fd4:	2364      	movs	r3, #100	; 0x64
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2304      	movs	r3, #4
 8000fda:	214e      	movs	r1, #78	; 0x4e
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <I2C_LCD1602_Send_Command+0x5c>)
 8000fde:	f004 f923 	bl	8005228 <HAL_I2C_Master_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000390 	.word	0x20000390

08000ff0 <I2C_LCD1602_Send_Data>:

void I2C_LCD1602_Send_Data(unsigned char data)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	char data_MSB, data_LSB;
	uint8_t I2C_data[4];
	data_MSB = ( data & 0xf0 ) ;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f023 030f 	bic.w	r3, r3, #15
 8001000:	73fb      	strb	r3, [r7, #15]
	data_LSB =  ( (data << 4) & 0xf0 ) ;
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	73bb      	strb	r3, [r7, #14]

	I2C_data[ 0 ] = data_MSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	f043 030d 	orr.w	r3, r3, #13
 800100e:	b2db      	uxtb	r3, r3
 8001010:	723b      	strb	r3, [r7, #8]
	I2C_data[ 1 ] = data_MSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f043 0309 	orr.w	r3, r3, #9
 8001018:	b2db      	uxtb	r3, r3
 800101a:	727b      	strb	r3, [r7, #9]
	I2C_data[ 2 ] = data_LSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	f043 030d 	orr.w	r3, r3, #13
 8001022:	b2db      	uxtb	r3, r3
 8001024:	72bb      	strb	r3, [r7, #10]
	I2C_data[ 3 ] = data_LSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	f043 0309 	orr.w	r3, r3, #9
 800102c:	b2db      	uxtb	r3, r3
 800102e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_data, 4, 100 );
 8001030:	f107 0208 	add.w	r2, r7, #8
 8001034:	2364      	movs	r3, #100	; 0x64
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2304      	movs	r3, #4
 800103a:	214e      	movs	r1, #78	; 0x4e
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <I2C_LCD1602_Send_Data+0x5c>)
 800103e:	f004 f8f3 	bl	8005228 <HAL_I2C_Master_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000390 	.word	0x20000390

08001050 <I2C_LCD1602_Init>:

void I2C_LCD1602_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001054:	2032      	movs	r0, #50	; 0x32
 8001056:	f002 fd3d 	bl	8003ad4 <HAL_Delay>

	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 800105a:	2030      	movs	r0, #48	; 0x30
 800105c:	f7ff ff98 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001060:	2005      	movs	r0, #5
 8001062:	f002 fd37 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001066:	2030      	movs	r0, #48	; 0x30
 8001068:	f7ff ff92 	bl	8000f90 <I2C_LCD1602_Send_Command>
 800106c:	2005      	movs	r0, #5
 800106e:	f002 fd31 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001072:	2030      	movs	r0, #48	; 0x30
 8001074:	f7ff ff8c 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001078:	2005      	movs	r0, #5
 800107a:	f002 fd2b 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( MODE4bit ); HAL_Delay(5);
 800107e:	2020      	movs	r0, #32
 8001080:	f7ff ff86 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001084:	2005      	movs	r0, #5
 8001086:	f002 fd25 	bl	8003ad4 <HAL_Delay>

	I2C_LCD1602_Send_Command(FUNCTIONSET ); HAL_Delay(5); // 4bit 2line font5x10
 800108a:	202c      	movs	r0, #44	; 0x2c
 800108c:	f7ff ff80 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001090:	2005      	movs	r0, #5
 8001092:	f002 fd1f 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( DISPLAYON ); HAL_Delay(5);
 8001096:	200c      	movs	r0, #12
 8001098:	f7ff ff7a 	bl	8000f90 <I2C_LCD1602_Send_Command>
 800109c:	2005      	movs	r0, #5
 800109e:	f002 fd19 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( ALLCLR ); HAL_Delay(5);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f7ff ff74 	bl	8000f90 <I2C_LCD1602_Send_Command>
 80010a8:	2005      	movs	r0, #5
 80010aa:	f002 fd13 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command( ENTMODE ); HAL_Delay(5);
 80010ae:	2006      	movs	r0, #6
 80010b0:	f7ff ff6e 	bl	8000f90 <I2C_LCD1602_Send_Command>
 80010b4:	2005      	movs	r0, #5
 80010b6:	f002 fd0d 	bl	8003ad4 <HAL_Delay>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}

080010be <I2C_LCD1602_Send_string>:

void I2C_LCD1602_Send_string( char *string)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
	while( * string ) I2C_LCD1602_Send_Data( *string++ );
 80010c6:	e006      	b.n	80010d6 <I2C_LCD1602_Send_string+0x18>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff8d 	bl	8000ff0 <I2C_LCD1602_Send_Data>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f4      	bne.n	80010c8 <I2C_LCD1602_Send_string+0xa>
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <I2C_LCD1602_GotoXY>:
void I2C_LCD1602_GotoXY(char x, char y)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	if( !y ) I2C_LCD1602_Send_Command( 0x80 | x );
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d107      	bne.n	800110e <I2C_LCD1602_GotoXY+0x26>
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff42 	bl	8000f90 <I2C_LCD1602_Send_Command>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
}
 800110c:	e006      	b.n	800111c <I2C_LCD1602_GotoXY+0x34>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff3a 	bl	8000f90 <I2C_LCD1602_Send_Command>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <I2C_LCD1602_Send_String_XY>:

void I2C_LCD1602_Send_String_XY( char x, char y, char *string )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	460b      	mov	r3, r1
 8001132:	71bb      	strb	r3, [r7, #6]
	I2C_LCD1602_GotoXY( x , y );
 8001134:	79ba      	ldrb	r2, [r7, #6]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ffd4 	bl	80010e8 <I2C_LCD1602_GotoXY>
	I2C_LCD1602_Send_string( string );
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff ffbc 	bl	80010be <I2C_LCD1602_Send_string>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <I2C_LCD1602_Clear>:
void I2C_LCD1602_BlinkOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x01); }
void I2C_LCD1602_CursorOn(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON | 0x02); }
void I2C_LCD1602_CursorOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x02); }

void I2C_LCD1602_Clear()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
/*	I2C_LCD1602_Send_Command (0x80);
	for (int i=0; i<70; i++)
	{
		I2C_LCD1602_Send_Data (' ');
	}*/
	I2C_LCD1602_Send_Command(ALLCLR); HAL_Delay(1);
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ff1c 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001158:	2001      	movs	r0, #1
 800115a:	f002 fcbb 	bl	8003ad4 <HAL_Delay>
	I2C_LCD1602_Send_Command(0x80); HAL_Delay(1);
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	f7ff ff16 	bl	8000f90 <I2C_LCD1602_Send_Command>
 8001164:	2001      	movs	r0, #1
 8001166:	f002 fcb5 	bl	8003ad4 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_TIM_PeriodElapsedCallback>:
#include "SR04.h"

float SR04_Echo_HighTime= 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	if( htim->Instance == TIM1 ) 	TIM1->SR =0;   }
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d102      	bne.n	8001188 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SR04_ECHO_Pin )
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d113      	bne.n	80011d0 <HAL_GPIO_EXTI_Callback+0x38>
	{
		TIM1->CNT =0;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin( SR04_ECHO_GPIO_Port, SR04_ECHO_Pin) ) {
 80011ae:	bf00      	nop
 80011b0:	2110      	movs	r1, #16
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <HAL_GPIO_EXTI_Callback+0x44>)
 80011b4:	f003 feaa 	bl	8004f0c <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0x18>
		}
		SR04_Echo_HighTime = TIM1->CNT ;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_GPIO_EXTI_Callback+0x48>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40020800 	.word	0x40020800
 80011e0:	20000210 	.word	0x20000210
 80011e4:	00000000 	.word	0x00000000

080011e8 <SR04_Trigger_out>:

float SR04_Trigger_out(char microSec)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	4822      	ldr	r0, [pc, #136]	; (8001280 <SR04_Trigger_out+0x98>)
 80011f8:	f003 fea0 	bl	8004f3c <HAL_GPIO_WritePin>
	TIM1->CNT =0;
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <SR04_Trigger_out+0x9c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24

	while ( TIM1->CNT  < microSec ) {
 8001202:	e004      	b.n	800120e <SR04_Trigger_out+0x26>
		HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_SET); // Trigger Pin High for 10u sec
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <SR04_Trigger_out+0x98>)
 800120a:	f003 fe97 	bl	8004f3c <HAL_GPIO_WritePin>
	while ( TIM1->CNT  < microSec ) {
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <SR04_Trigger_out+0x9c>)
 8001210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3f5      	bcc.n	8001204 <SR04_Trigger_out+0x1c>
	}

	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 8001218:	2200      	movs	r2, #0
 800121a:	2120      	movs	r1, #32
 800121c:	4818      	ldr	r0, [pc, #96]	; (8001280 <SR04_Trigger_out+0x98>)
 800121e:	f003 fe8d 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_Delay(10);
 8001222:	200a      	movs	r0, #10
 8001224:	f002 fc56 	bl	8003ad4 <HAL_Delay>

	printf("%6.0f mm\r\n",SR04_Echo_HighTime*0.17 );
 8001228:	4b17      	ldr	r3, [pc, #92]	; (8001288 <SR04_Trigger_out+0xa0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f993 	bl	8000558 <__aeabi_f2d>
 8001232:	a311      	add	r3, pc, #68	; (adr r3, 8001278 <SR04_Trigger_out+0x90>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9e6 	bl	8000608 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <SR04_Trigger_out+0xa4>)
 8001242:	f006 fb3b 	bl	80078bc <iprintf>

	return SR04_Echo_HighTime*0.17;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <SR04_Trigger_out+0xa0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f984 	bl	8000558 <__aeabi_f2d>
 8001250:	a309      	add	r3, pc, #36	; (adr r3, 8001278 <SR04_Trigger_out+0x90>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9d7 	bl	8000608 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fcc9 	bl	8000bf8 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	ee07 3a90 	vmov	s15, r3
}
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	5c28f5c3 	.word	0x5c28f5c3
 800127c:	3fc5c28f 	.word	0x3fc5c28f
 8001280:	40020800 	.word	0x40020800
 8001284:	40010000 	.word	0x40010000
 8001288:	20000210 	.word	0x20000210
 800128c:	08009e48 	.word	0x08009e48

08001290 <_write>:


// =================  printf function for debugging ======================
extern UART_HandleTypeDef huart2;
int _write(int file, char *data, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,(uint8_t *)data,len,1000);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <_write+0x34>)
 80012a8:	f005 fbc7 	bl	8006a3a <HAL_UART_Transmit>
 80012ac:	4603      	mov	r3, r0
 80012ae:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK ? len : 0);
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <_write+0x2a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e000      	b.n	80012bc <_write+0x2c>
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000042c 	.word	0x2000042c

080012c8 <Buzzer_OnOff>:

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e012      	b.n	80012fc <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2102      	movs	r1, #2
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <Buzzer_OnOff+0x48>)
 80012dc:	f003 fe2e 	bl	8004f3c <HAL_GPIO_WritePin>
 80012e0:	200a      	movs	r0, #10
 80012e2:	f002 fbf7 	bl	8003ad4 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2102      	movs	r1, #2
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <Buzzer_OnOff+0x48>)
 80012ec:	f003 fe26 	bl	8004f3c <HAL_GPIO_WritePin>
 80012f0:	200a      	movs	r0, #10
 80012f2:	f002 fbef 	bl	8003ad4 <HAL_Delay>
	for(int i=0;i< times ; i++)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3301      	adds	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbe8      	blt.n	80012d6 <Buzzer_OnOff+0xe>
	}
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020400 	.word	0x40020400

08001314 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <Key_input+0x58>)
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f023 030f 	bic.w	r3, r3, #15
 8001324:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2bf0      	cmp	r3, #240	; 0xf0
 800132a:	d10d      	bne.n	8001348 <Key_input+0x34>
    { if(key_flag == 0)
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <Key_input+0x5c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <Key_input+0x24>
        return key;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	e014      	b.n	8001362 <Key_input+0x4e>
      else
        { HAL_Delay(20);
 8001338:	2014      	movs	r0, #20
 800133a:	f002 fbcb 	bl	8003ad4 <HAL_Delay>
          key_flag = 0;
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <Key_input+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
          return key;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	e00c      	b.n	8001362 <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <Key_input+0x5c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	e006      	b.n	8001362 <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ffb7 	bl	80012c8 <Buzzer_OnOff>
          key_flag = 1;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <Key_input+0x5c>)
 800135c:	2201      	movs	r2, #1
 800135e:	701a      	strb	r2, [r3, #0]
          return key;
 8001360:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020400 	.word	0x40020400
 8001370:	20000214 	.word	0x20000214

08001374 <Average_ADC>:
// =================  End of Key function  ====================

// =================  ADC input(Noise clear) ==================
uint16_t Average_ADC(uint16_t NumSum,uint8_t NumAvg, uint16_t *Adc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	603a      	str	r2, [r7, #0]
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	460b      	mov	r3, r1
 8001382:	717b      	strb	r3, [r7, #5]
	double SumAdc =0, AvgAdc=0;
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int j=0; j < NumAvg ;j++ ) {
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e040      	b.n	8001424 <Average_ADC+0xb0>
		for(int i=0; i< NumSum ; i++ ) {
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	e011      	b.n	80013cc <Average_ADC+0x58>
			SumAdc += Adc[0];
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8c1 	bl	8000534 <__aeabi_i2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ba:	f7fe ff6f 	bl	800029c <__adddf3>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(int i=0; i< NumSum ; i++ ) {
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3301      	adds	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbe9      	blt.n	80013a8 <Average_ADC+0x34>
		}
		AvgAdc += (uint16_t)( SumAdc / NumSum );
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f8ac 	bl	8000534 <__aeabi_i2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013e4:	f7ff fa3a 	bl	800085c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbe2 	bl	8000bb8 <__aeabi_d2uiz>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f89b 	bl	8000534 <__aeabi_i2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001406:	f7fe ff49 	bl	800029c <__adddf3>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		SumAdc = 0;
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int j=0; j < NumAvg ;j++ ) {
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	797b      	ldrb	r3, [r7, #5]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	dbba      	blt.n	80013a2 <Average_ADC+0x2e>
	}
	AvgAdc =(uint16_t)(AvgAdc /NumAvg );
 800142c:	797b      	ldrb	r3, [r7, #5]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f880 	bl	8000534 <__aeabi_i2d>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800143c:	f7ff fa0e 	bl	800085c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbb6 	bl	8000bb8 <__aeabi_d2uiz>
 800144c:	4603      	mov	r3, r0
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f85f 	bl	8000514 <__aeabi_ui2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return (uint16_t)AvgAdc;
 800145e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001462:	f7ff fba9 	bl	8000bb8 <__aeabi_d2uiz>
 8001466:	4603      	mov	r3, r0
 8001468:	b29b      	uxth	r3, r3
}
 800146a:	4618      	mov	r0, r3
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_ADC1_Init+0x98>)
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <MX_ADC1_Init+0x9c>)
 800148a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_ADC1_Init+0x98>)
 800148e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001492:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_ADC1_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_ADC1_Init+0x98>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_ADC1_Init+0x98>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_ADC1_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_ADC1_Init+0x98>)
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <MX_ADC1_Init+0xa0>)
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_ADC1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_ADC1_Init+0x98>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_ADC1_Init+0x98>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_ADC1_Init+0x98>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_ADC1_Init+0x98>)
 80014d6:	f002 fb21 	bl	8003b1c <HAL_ADC_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014e0:	f000 fce8 	bl	8001eb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80014ec:	2304      	movs	r3, #4
 80014ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_ADC1_Init+0x98>)
 80014f6:	f002 fc63 	bl	8003dc0 <HAL_ADC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001500:	f000 fcd8 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002e8 	.word	0x200002e8
 8001510:	40012000 	.word	0x40012000
 8001514:	0f000001 	.word	0x0f000001

08001518 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <HAL_ADC_MspInit+0xdc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d157      	bne.n	80015ea <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_ADC_MspInit+0xe0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001572:	2302      	movs	r3, #2
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001576:	2303      	movs	r3, #3
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	481d      	ldr	r0, [pc, #116]	; (80015fc <HAL_ADC_MspInit+0xe4>)
 8001586:	f003 fb3d 	bl	8004c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_MspInit+0xec>)
 800158e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ce:	480c      	ldr	r0, [pc, #48]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015d0:	f002 ffa8 	bl	8004524 <HAL_DMA_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015da:	f000 fc6b 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015e2:	639a      	str	r2, [r3, #56]	; 0x38
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_ADC_MspInit+0xe8>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40012000 	.word	0x40012000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	20000330 	.word	0x20000330
 8001604:	40026410 	.word	0x40026410

08001608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_DMA_Init+0x3c>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <MX_DMA_Init+0x3c>)
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_DMA_Init+0x3c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	2038      	movs	r0, #56	; 0x38
 8001630:	f002 ff41 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001634:	2038      	movs	r0, #56	; 0x38
 8001636:	f002 ff5a 	bl	80044ee <HAL_NVIC_EnableIRQ>

}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <MX_GPIO_Init+0x15c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <MX_GPIO_Init+0x15c>)
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <MX_GPIO_Init+0x15c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <MX_GPIO_Init+0x15c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <MX_GPIO_Init+0x15c>)
 8001684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <MX_GPIO_Init+0x15c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <MX_GPIO_Init+0x15c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a41      	ldr	r2, [pc, #260]	; (80017a4 <MX_GPIO_Init+0x15c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <MX_GPIO_Init+0x15c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <MX_GPIO_Init+0x15c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a3a      	ldr	r2, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x15c>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <MX_GPIO_Init+0x15c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2120      	movs	r1, #32
 80016d2:	4835      	ldr	r0, [pc, #212]	; (80017a8 <MX_GPIO_Init+0x160>)
 80016d4:	f003 fc32 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2120      	movs	r1, #32
 80016dc:	4833      	ldr	r0, [pc, #204]	; (80017ac <MX_GPIO_Init+0x164>)
 80016de:	f003 fc2d 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2102      	movs	r1, #2
 80016e6:	4832      	ldr	r0, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x168>)
 80016e8:	f003 fc28 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <MX_GPIO_Init+0x16c>)
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	482a      	ldr	r0, [pc, #168]	; (80017ac <MX_GPIO_Init+0x164>)
 8001702:	f003 fa7f 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001706:	2320      	movs	r3, #32
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	4822      	ldr	r0, [pc, #136]	; (80017a8 <MX_GPIO_Init+0x160>)
 800171e:	f003 fa71 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_ECHO_Pin;
 8001722:	2310      	movs	r3, #16
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <MX_GPIO_Init+0x170>)
 8001728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800172a:	2302      	movs	r3, #2
 800172c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	4619      	mov	r1, r3
 8001734:	481d      	ldr	r0, [pc, #116]	; (80017ac <MX_GPIO_Init+0x164>)
 8001736:	f003 fa65 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_TRIG_Pin;
 800173a:	2320      	movs	r3, #32
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2301      	movs	r3, #1
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <MX_GPIO_Init+0x164>)
 8001752:	f003 fa57 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001756:	2302      	movs	r3, #2
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <MX_GPIO_Init+0x168>)
 800176e:	f003 fa49 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 8001772:	23f0      	movs	r3, #240	; 0xf0
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <MX_GPIO_Init+0x168>)
 8001786:	f003 fa3d 	bl	8004c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	200a      	movs	r0, #10
 8001790:	f002 fe91 	bl	80044b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001794:	200a      	movs	r0, #10
 8001796:	f002 feaa 	bl	80044ee <HAL_NVIC_EnableIRQ>

}
 800179a:	bf00      	nop
 800179c:	3728      	adds	r7, #40	; 0x28
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	10210000 	.word	0x10210000
 80017b8:	10110000 	.word	0x10110000

080017bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <MX_I2C1_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <MX_I2C1_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <MX_I2C1_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <MX_I2C1_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_I2C1_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_I2C1_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_I2C1_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_I2C1_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_I2C1_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_I2C1_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_I2C1_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_I2C1_Init+0x50>)
 80017fa:	f003 fbd1 	bl	8004fa0 <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 fb56 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000390 	.word	0x20000390
 8001810:	40005400 	.word	0x40005400
 8001814:	000186a0 	.word	0x000186a0

08001818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_I2C_MspInit+0x84>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12c      	bne.n	8001894 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800185c:	2312      	movs	r3, #18
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001868:	2304      	movs	r3, #4
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <HAL_I2C_MspInit+0x8c>)
 8001874:	f003 f9c6 	bl	8004c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 8001882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_I2C_MspInit+0x88>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40005400 	.word	0x40005400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020400 	.word	0x40020400

080018a8 <Time_count>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status);
void Time_count()
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	Second++;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <Time_count+0x5c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <Time_count+0x5c>)
 80018b6:	701a      	strb	r2, [r3, #0]
	if( Second > 59 )	{
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <Time_count+0x5c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b3b      	cmp	r3, #59	; 0x3b
 80018be:	d908      	bls.n	80018d2 <Time_count+0x2a>
	  Minute ++;		Second = 0;
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <Time_count+0x60>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <Time_count+0x60>)
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <Time_count+0x5c>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
	}
	if (Minute > 59 ) 	{
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <Time_count+0x60>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b3b      	cmp	r3, #59	; 0x3b
 80018d8:	d908      	bls.n	80018ec <Time_count+0x44>
	  Hour++;			 Minute =0;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <Time_count+0x64>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <Time_count+0x64>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <Time_count+0x60>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
	}
	if( Hour > 11) Hour = 0;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <Time_count+0x64>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b0b      	cmp	r3, #11
 80018f2:	d902      	bls.n	80018fa <Time_count+0x52>
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <Time_count+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	20000256 	.word	0x20000256
 8001908:	20000255 	.word	0x20000255
 800190c:	20000254 	.word	0x20000254

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001916:	f002 f86b 	bl	80039f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800191a:	f000 f8bf 	bl	8001a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191e:	f7ff fe93 	bl	8001648 <MX_GPIO_Init>
  MX_DMA_Init();
 8001922:	f7ff fe71 	bl	8001608 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001926:	f000 fc77 	bl	8002218 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800192a:	f7ff fda3 	bl	8001474 <MX_ADC1_Init>
  MX_I2C1_Init();
 800192e:	f7ff ff45 	bl	80017bc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001932:	f000 fbf9 	bl	8002128 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Init\r\n");
 8001936:	484a      	ldr	r0, [pc, #296]	; (8001a60 <main+0x150>)
 8001938:	f006 f846 	bl	80079c8 <puts>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	4847      	ldr	r0, [pc, #284]	; (8001a64 <main+0x154>)
 8001946:	f002 f92d 	bl	8003ba4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 800194a:	4847      	ldr	r0, [pc, #284]	; (8001a68 <main+0x158>)
 800194c:	f004 fc36 	bl	80061bc <HAL_TIM_Base_Start_IT>

  u8g_InitComFn(&u8g,&u8g_dev_ssd1306_128x64_i2c,u8g_com_hw_i2c_fn);
 8001950:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <main+0x15c>)
 8001952:	4947      	ldr	r1, [pc, #284]	; (8001a70 <main+0x160>)
 8001954:	4847      	ldr	r0, [pc, #284]	; (8001a74 <main+0x164>)
 8001956:	f001 fc3e 	bl	80031d6 <u8g_InitComFn>

  I2C_LCD1602_Init();
 800195a:	f7ff fb79 	bl	8001050 <I2C_LCD1602_Init>

  I2C_LCD1602_Send_String_XY( 0 , 0, "Welcom Zeus");
 800195e:	4a46      	ldr	r2, [pc, #280]	; (8001a78 <main+0x168>)
 8001960:	2100      	movs	r1, #0
 8001962:	2000      	movs	r0, #0
 8001964:	f7ff fbde 	bl	8001124 <I2C_LCD1602_Send_String_XY>
  I2C_LCD1602_Send_String_XY( 0 , 1, "I2C PCF8574");
 8001968:	4a44      	ldr	r2, [pc, #272]	; (8001a7c <main+0x16c>)
 800196a:	2101      	movs	r1, #1
 800196c:	2000      	movs	r0, #0
 800196e:	f7ff fbd9 	bl	8001124 <I2C_LCD1602_Send_String_XY>
  HAL_Delay(2000);
 8001972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001976:	f002 f8ad 	bl	8003ad4 <HAL_Delay>
  I2C_LCD1602_Clear();
 800197a:	f7ff fbe8 	bl	800114e <I2C_LCD1602_Clear>

  sprintf( str, "start");
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	493f      	ldr	r1, [pc, #252]	; (8001a80 <main+0x170>)
 8001982:	4618      	mov	r0, r3
 8001984:	f006 f828 	bl	80079d8 <siprintf>
  I2C_LCD1602_Send_string(str);
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fb97 	bl	80010be <I2C_LCD1602_Send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fc99 	bl	80012c8 <Buzzer_OnOff>

  uint16_t AvgAdc=0;
 8001996:	2300      	movs	r3, #0
 8001998:	83bb      	strh	r3, [r7, #28]
  uint16_t count = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	83fb      	strh	r3, [r7, #30]
  float distance=0;
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  distance = SR04_Trigger_out(10);
 80019a4:	200a      	movs	r0, #10
 80019a6:	f7ff fc1f 	bl	80011e8 <SR04_Trigger_out>
 80019aa:	ed87 0a06 	vstr	s0, [r7, #24]
	  sprintf(str, "%5d mm",(int)distance );
 80019ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80019b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	ee17 2a90 	vmov	r2, s15
 80019bc:	4931      	ldr	r1, [pc, #196]	; (8001a84 <main+0x174>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f006 f80a 	bl	80079d8 <siprintf>


	  u8g_xyputs( 10, 55, str,count++);
 80019c4:	8bfb      	ldrh	r3, [r7, #30]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	83fa      	strh	r2, [r7, #30]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	1d3a      	adds	r2, r7, #4
 80019ce:	2137      	movs	r1, #55	; 0x37
 80019d0:	200a      	movs	r0, #10
 80019d2:	f000 f9fb 	bl	8001dcc <u8g_xyputs>
	  	  Time_count();
 80019d6:	f7ff ff67 	bl	80018a8 <Time_count>
	  	  if( count >100 ) count = 0;
 80019da:	8bfb      	ldrh	r3, [r7, #30]
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d901      	bls.n	80019e4 <main+0xd4>
 80019e0:	2300      	movs	r3, #0
 80019e2:	83fb      	strh	r3, [r7, #30]

	  AvgAdc = Average_ADC(200, 10,Adc_Value);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	461a      	mov	r2, r3
 80019ea:	210a      	movs	r1, #10
 80019ec:	20c8      	movs	r0, #200	; 0xc8
 80019ee:	f7ff fcc1 	bl	8001374 <Average_ADC>
 80019f2:	4603      	mov	r3, r0
 80019f4:	83bb      	strh	r3, [r7, #28]

	  sprintf( str, "ADC : %4d", AvgAdc );
 80019f6:	8bba      	ldrh	r2, [r7, #28]
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	4923      	ldr	r1, [pc, #140]	; (8001a88 <main+0x178>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f005 ffeb 	bl	80079d8 <siprintf>
	  I2C_LCD1602_Send_String_XY( 0 , 0, str);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	461a      	mov	r2, r3
 8001a06:	2100      	movs	r1, #0
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff fb8b 	bl	8001124 <I2C_LCD1602_Send_String_XY>

	  //HAL_Delay(500);



	  switch( Key_input() ) {
 8001a0e:	f7ff fc81 	bl	8001314 <Key_input>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2be0      	cmp	r3, #224	; 0xe0
 8001a16:	d00f      	beq.n	8001a38 <main+0x128>
 8001a18:	2be0      	cmp	r3, #224	; 0xe0
 8001a1a:	dc1f      	bgt.n	8001a5c <main+0x14c>
 8001a1c:	2bd0      	cmp	r3, #208	; 0xd0
 8001a1e:	d011      	beq.n	8001a44 <main+0x134>
 8001a20:	2bd0      	cmp	r3, #208	; 0xd0
 8001a22:	dc1b      	bgt.n	8001a5c <main+0x14c>
 8001a24:	2b70      	cmp	r3, #112	; 0x70
 8001a26:	d013      	beq.n	8001a50 <main+0x140>
 8001a28:	2bb0      	cmp	r3, #176	; 0xb0
 8001a2a:	d117      	bne.n	8001a5c <main+0x14c>
	  case KEY_UP:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "UP    pressed");
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <main+0x17c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fb77 	bl	8001124 <I2C_LCD1602_Send_String_XY>
		  break;
 8001a36:	e012      	b.n	8001a5e <main+0x14e>

	  case KEY_DOWN:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "DOWN  pressed");
 8001a38:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <main+0x180>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f7ff fb71 	bl	8001124 <I2C_LCD1602_Send_String_XY>
		  break;
 8001a42:	e00c      	b.n	8001a5e <main+0x14e>

	  case KEY_RIGHT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "RIGHT pressed");
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <main+0x184>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fb6b 	bl	8001124 <I2C_LCD1602_Send_String_XY>
		  break;
 8001a4e:	e006      	b.n	8001a5e <main+0x14e>

	  case KEY_LEFT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "LEFT  pressed");
 8001a50:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <main+0x188>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fb65 	bl	8001124 <I2C_LCD1602_Send_String_XY>
		  break;
 8001a5a:	e000      	b.n	8001a5e <main+0x14e>

	  default:
		  break;
 8001a5c:	bf00      	nop
	  distance = SR04_Trigger_out(10);
 8001a5e:	e7a1      	b.n	80019a4 <main+0x94>
 8001a60:	08009e54 	.word	0x08009e54
 8001a64:	200002e8 	.word	0x200002e8
 8001a68:	200003e4 	.word	0x200003e4
 8001a6c:	080022fd 	.word	0x080022fd
 8001a70:	20000010 	.word	0x20000010
 8001a74:	20000218 	.word	0x20000218
 8001a78:	08009e60 	.word	0x08009e60
 8001a7c:	08009e6c 	.word	0x08009e6c
 8001a80:	08009e78 	.word	0x08009e78
 8001a84:	08009e80 	.word	0x08009e80
 8001a88:	08009e88 	.word	0x08009e88
 8001a8c:	08009e94 	.word	0x08009e94
 8001a90:	08009ea4 	.word	0x08009ea4
 8001a94:	08009eb4 	.word	0x08009eb4
 8001a98:	08009ec4 	.word	0x08009ec4

08001a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	; 0x50
 8001aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa2:	f107 0320 	add.w	r3, r7, #32
 8001aa6:	2230      	movs	r2, #48	; 0x30
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fa94 	bl	8006fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <SystemClock_Config+0xcc>)
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <SystemClock_Config+0xcc>)
 8001aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <SystemClock_Config+0xcc>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <SystemClock_Config+0xd0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ae8:	4a20      	ldr	r2, [pc, #128]	; (8001b6c <SystemClock_Config+0xd0>)
 8001aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <SystemClock_Config+0xd0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b10:	2308      	movs	r3, #8
 8001b12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001b14:	2354      	movs	r3, #84	; 0x54
 8001b16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	4618      	mov	r0, r3
 8001b26:	f003 fe87 	bl	8005838 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b30:	f000 f9c0 	bl	8001eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 f8e9 	bl	8005d28 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b5c:	f000 f9aa 	bl	8001eb4 <Error_Handler>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3750      	adds	r7, #80	; 0x50
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <u8g_battery_status>:

/* USER CODE BEGIN 4 */

void u8g_battery_status(uint8_t x, uint8_t y, uint8_t percentage)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	71bb      	strb	r3, [r7, #6]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	717b      	strb	r3, [r7, #5]
	char str[5];
	u8g_DrawFrame(&u8g, x, y, 18, 7); // battery����
 8001b82:	79ba      	ldrb	r2, [r7, #6]
 8001b84:	79f9      	ldrb	r1, [r7, #7]
 8001b86:	2307      	movs	r3, #7
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2312      	movs	r3, #18
 8001b8c:	488c      	ldr	r0, [pc, #560]	; (8001dc0 <u8g_battery_status+0x250>)
 8001b8e:	f001 fe93 	bl	80038b8 <u8g_DrawFrame>
	u8g_DrawFrame(&u8g, x+18,y+(5/2), 2,3); //battery����ǥ��
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	3312      	adds	r3, #18
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	4886      	ldr	r0, [pc, #536]	; (8001dc0 <u8g_battery_status+0x250>)
 8001ba6:	f001 fe87 	bl	80038b8 <u8g_DrawFrame>
	uint8_t battery_step = 5;
 8001baa:	2305      	movs	r3, #5
 8001bac:	73fb      	strb	r3, [r7, #15]
	if( percentage > 90 ) 		battery_step =5;
 8001bae:	797b      	ldrb	r3, [r7, #5]
 8001bb0:	2b5a      	cmp	r3, #90	; 0x5a
 8001bb2:	d902      	bls.n	8001bba <u8g_battery_status+0x4a>
 8001bb4:	2305      	movs	r3, #5
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e01c      	b.n	8001bf4 <u8g_battery_status+0x84>
	else if (percentage <= 10 )	battery_step =0;
 8001bba:	797b      	ldrb	r3, [r7, #5]
 8001bbc:	2b0a      	cmp	r3, #10
 8001bbe:	d802      	bhi.n	8001bc6 <u8g_battery_status+0x56>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
 8001bc4:	e016      	b.n	8001bf4 <u8g_battery_status+0x84>
	else if (percentage <= 20 )	battery_step =1;
 8001bc6:	797b      	ldrb	r3, [r7, #5]
 8001bc8:	2b14      	cmp	r3, #20
 8001bca:	d802      	bhi.n	8001bd2 <u8g_battery_status+0x62>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
 8001bd0:	e010      	b.n	8001bf4 <u8g_battery_status+0x84>
	else if (percentage <= 40 )	battery_step =2;
 8001bd2:	797b      	ldrb	r3, [r7, #5]
 8001bd4:	2b28      	cmp	r3, #40	; 0x28
 8001bd6:	d802      	bhi.n	8001bde <u8g_battery_status+0x6e>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e00a      	b.n	8001bf4 <u8g_battery_status+0x84>
	else if (percentage <= 60 )	battery_step =3;
 8001bde:	797b      	ldrb	r3, [r7, #5]
 8001be0:	2b3c      	cmp	r3, #60	; 0x3c
 8001be2:	d802      	bhi.n	8001bea <u8g_battery_status+0x7a>
 8001be4:	2303      	movs	r3, #3
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e004      	b.n	8001bf4 <u8g_battery_status+0x84>
	else if (percentage <= 80 )	battery_step =4;
 8001bea:	797b      	ldrb	r3, [r7, #5]
 8001bec:	2b50      	cmp	r3, #80	; 0x50
 8001bee:	d801      	bhi.n	8001bf4 <u8g_battery_status+0x84>
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	73fb      	strb	r3, [r7, #15]

	switch( battery_step )
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	f200 80c6 	bhi.w	8001d8a <u8g_battery_status+0x21a>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <u8g_battery_status+0x94>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c19 	.word	0x08001c19
 8001c08:	08001c33 	.word	0x08001c33
 8001c0c:	08001c65 	.word	0x08001c65
 8001c10:	08001caf 	.word	0x08001caf
 8001c14:	08001d11 	.word	0x08001d11
	{
	case 1:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	b2d9      	uxtb	r1, r3
 8001c1e:	79bb      	ldrb	r3, [r7, #6]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	2305      	movs	r3, #5
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	4865      	ldr	r0, [pc, #404]	; (8001dc0 <u8g_battery_status+0x250>)
 8001c2c:	f001 fe8a 	bl	8003944 <u8g_draw_box>
		break;
 8001c30:	e0ab      	b.n	8001d8a <u8g_battery_status+0x21a>
	case 2:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	3302      	adds	r3, #2
 8001c36:	b2d9      	uxtb	r1, r3
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	2305      	movs	r3, #5
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2302      	movs	r3, #2
 8001c44:	485e      	ldr	r0, [pc, #376]	; (8001dc0 <u8g_battery_status+0x250>)
 8001c46:	f001 fe7d 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	3305      	adds	r3, #5
 8001c4e:	b2d9      	uxtb	r1, r3
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	2305      	movs	r3, #5
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	4858      	ldr	r0, [pc, #352]	; (8001dc0 <u8g_battery_status+0x250>)
 8001c5e:	f001 fe71 	bl	8003944 <u8g_draw_box>
		break;
 8001c62:	e092      	b.n	8001d8a <u8g_battery_status+0x21a>
	case 3:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	3302      	adds	r3, #2
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	2305      	movs	r3, #5
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2302      	movs	r3, #2
 8001c76:	4852      	ldr	r0, [pc, #328]	; (8001dc0 <u8g_battery_status+0x250>)
 8001c78:	f001 fe64 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	3305      	adds	r3, #5
 8001c80:	b2d9      	uxtb	r1, r3
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	2305      	movs	r3, #5
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	484c      	ldr	r0, [pc, #304]	; (8001dc0 <u8g_battery_status+0x250>)
 8001c90:	f001 fe58 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	3308      	adds	r3, #8
 8001c98:	b2d9      	uxtb	r1, r3
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	2305      	movs	r3, #5
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	4846      	ldr	r0, [pc, #280]	; (8001dc0 <u8g_battery_status+0x250>)
 8001ca8:	f001 fe4c 	bl	8003944 <u8g_draw_box>
		break;
 8001cac:	e06d      	b.n	8001d8a <u8g_battery_status+0x21a>
	case 4:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	2305      	movs	r3, #5
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	483f      	ldr	r0, [pc, #252]	; (8001dc0 <u8g_battery_status+0x250>)
 8001cc2:	f001 fe3f 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	3305      	adds	r3, #5
 8001cca:	b2d9      	uxtb	r1, r3
 8001ccc:	79bb      	ldrb	r3, [r7, #6]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	4839      	ldr	r0, [pc, #228]	; (8001dc0 <u8g_battery_status+0x250>)
 8001cda:	f001 fe33 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	b2d9      	uxtb	r1, r3
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	2305      	movs	r3, #5
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2302      	movs	r3, #2
 8001cf0:	4833      	ldr	r0, [pc, #204]	; (8001dc0 <u8g_battery_status+0x250>)
 8001cf2:	f001 fe27 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	330b      	adds	r3, #11
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	2305      	movs	r3, #5
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2302      	movs	r3, #2
 8001d08:	482d      	ldr	r0, [pc, #180]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d0a:	f001 fe1b 	bl	8003944 <u8g_draw_box>
		break;
 8001d0e:	e03c      	b.n	8001d8a <u8g_battery_status+0x21a>
	case 5:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	3302      	adds	r3, #2
 8001d14:	b2d9      	uxtb	r1, r3
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	4827      	ldr	r0, [pc, #156]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d24:	f001 fe0e 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	3305      	adds	r3, #5
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	2305      	movs	r3, #5
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d3c:	f001 fe02 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	3308      	adds	r3, #8
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2302      	movs	r3, #2
 8001d52:	481b      	ldr	r0, [pc, #108]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d54:	f001 fdf6 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	330b      	adds	r3, #11
 8001d5c:	b2d9      	uxtb	r1, r3
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	3301      	adds	r3, #1
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	2305      	movs	r3, #5
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	4815      	ldr	r0, [pc, #84]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d6c:	f001 fdea 	bl	8003944 <u8g_draw_box>
		u8g_draw_box(&u8g,x+14,y+1,2,5);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	330e      	adds	r3, #14
 8001d74:	b2d9      	uxtb	r1, r3
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	2305      	movs	r3, #5
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2302      	movs	r3, #2
 8001d82:	480f      	ldr	r0, [pc, #60]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d84:	f001 fdde 	bl	8003944 <u8g_draw_box>
		break;
 8001d88:	bf00      	nop
	}
	u8g_SetFont( &u8g, u8g_font_courB08 );
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <u8g_battery_status+0x254>)
 8001d8c:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <u8g_battery_status+0x250>)
 8001d8e:	f001 f8b7 	bl	8002f00 <u8g_SetFont>
	sprintf( str, "%d%%",percentage);
 8001d92:	797a      	ldrb	r2, [r7, #5]
 8001d94:	f107 0308 	add.w	r3, r7, #8
 8001d98:	490b      	ldr	r1, [pc, #44]	; (8001dc8 <u8g_battery_status+0x258>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f005 fe1c 	bl	80079d8 <siprintf>
	u8g_DrawStr( &u8g,  x-25,  y+7, str );
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	3b19      	subs	r3, #25
 8001da4:	b2d9      	uxtb	r1, r3
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	3307      	adds	r3, #7
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	f107 0308 	add.w	r3, r7, #8
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <u8g_battery_status+0x250>)
 8001db2:	f000 ffe0 	bl	8002d76 <u8g_DrawStr>
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000218 	.word	0x20000218
 8001dc4:	08009f50 	.word	0x08009f50
 8001dc8:	08009ed4 	.word	0x08009ed4

08001dcc <u8g_xyputs>:
void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	603a      	str	r2, [r7, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	71bb      	strb	r3, [r7, #6]
 8001dde:	4613      	mov	r3, r2
 8001de0:	717b      	strb	r3, [r7, #5]
	char Str_HM[20],Str_Sec[10];
	sprintf( Str_HM, "%02d:%02d", Hour, Minute);
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <u8g_xyputs+0xc4>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <u8g_xyputs+0xc8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f107 0014 	add.w	r0, r7, #20
 8001df0:	4929      	ldr	r1, [pc, #164]	; (8001e98 <u8g_xyputs+0xcc>)
 8001df2:	f005 fdf1 	bl	80079d8 <siprintf>
	sprintf( Str_Sec, "%02d", Second);
 8001df6:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <u8g_xyputs+0xd0>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	4927      	ldr	r1, [pc, #156]	; (8001ea0 <u8g_xyputs+0xd4>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fde8 	bl	80079d8 <siprintf>
	u8g_FirstPage(&u8g);
 8001e08:	4826      	ldr	r0, [pc, #152]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e0a:	f001 f9fc 	bl	8003206 <u8g_FirstPage>
	do
	{
		u8g_SetFont( &u8g, u8g_font_courB10 );
 8001e0e:	4926      	ldr	r1, [pc, #152]	; (8001ea8 <u8g_xyputs+0xdc>)
 8001e10:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e12:	f001 f875 	bl	8002f00 <u8g_SetFont>
		u8g_DrawStr( &u8g,  x,  y, str );
 8001e16:	79ba      	ldrb	r2, [r7, #6]
 8001e18:	79f9      	ldrb	r1, [r7, #7]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e1e:	f000 ffaa 	bl	8002d76 <u8g_DrawStr>

		//u8g_DrawBitmap(&u8g,10,1,16,52,Zeus_logo);
		u8g_SetFont( &u8g, u8g_font_osb21 );
 8001e22:	4922      	ldr	r1, [pc, #136]	; (8001eac <u8g_xyputs+0xe0>)
 8001e24:	481f      	ldr	r0, [pc, #124]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e26:	f001 f86b 	bl	8002f00 <u8g_SetFont>
		u8g_DrawStr( &u8g, 35,40,&Str_HM[0]);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2228      	movs	r2, #40	; 0x28
 8001e30:	2123      	movs	r1, #35	; 0x23
 8001e32:	481c      	ldr	r0, [pc, #112]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e34:	f000 ff9f 	bl	8002d76 <u8g_DrawStr>

		u8g_SetFont( &u8g, u8g_font_gdb11 );
 8001e38:	491d      	ldr	r1, [pc, #116]	; (8001eb0 <u8g_xyputs+0xe4>)
 8001e3a:	481a      	ldr	r0, [pc, #104]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e3c:	f001 f860 	bl	8002f00 <u8g_SetFont>
		u8g_DrawStr( &u8g, 108,38,&Str_Sec[0]);
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	2226      	movs	r2, #38	; 0x26
 8001e46:	216c      	movs	r1, #108	; 0x6c
 8001e48:	4816      	ldr	r0, [pc, #88]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e4a:	f000 ff94 	bl	8002d76 <u8g_DrawStr>

		u8g_battery_status(100,6,battery_status);
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	461a      	mov	r2, r3
 8001e52:	2106      	movs	r1, #6
 8001e54:	2064      	movs	r0, #100	; 0x64
 8001e56:	f7ff fe8b 	bl	8001b70 <u8g_battery_status>


		u8g_DrawFrame(&u8g,2,2,126,62);
 8001e5a:	233e      	movs	r3, #62	; 0x3e
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	237e      	movs	r3, #126	; 0x7e
 8001e60:	2202      	movs	r2, #2
 8001e62:	2102      	movs	r1, #2
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e66:	f001 fd27 	bl	80038b8 <u8g_DrawFrame>
		u8g_DrawFrame(&u8g,1,1,127,63);
 8001e6a:	233f      	movs	r3, #63	; 0x3f
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	237f      	movs	r3, #127	; 0x7f
 8001e70:	2201      	movs	r2, #1
 8001e72:	2101      	movs	r1, #1
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e76:	f001 fd1f 	bl	80038b8 <u8g_DrawFrame>
	} while( u8g_NextPage(&u8g));
 8001e7a:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <u8g_xyputs+0xd8>)
 8001e7c:	f001 f9d1 	bl	8003222 <u8g_NextPage>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1c3      	bne.n	8001e0e <u8g_xyputs+0x42>
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3728      	adds	r7, #40	; 0x28
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000254 	.word	0x20000254
 8001e94:	20000255 	.word	0x20000255
 8001e98:	08009edc 	.word	0x08009edc
 8001e9c:	20000256 	.word	0x20000256
 8001ea0:	08009ee8 	.word	0x08009ee8
 8001ea4:	20000218 	.word	0x20000218
 8001ea8:	0800a8cc 	.word	0x0800a8cc
 8001eac:	0800c6c4 	.word	0x0800c6c4
 8001eb0:	0800b5e8 	.word	0x0800b5e8

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_MspInit+0x4c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	603b      	str	r3, [r7, #0]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x4c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x4c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001f02:	2006      	movs	r0, #6
 8001f04:	f002 facc 	bl	80044a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f68:	f001 fd94 	bl	8003a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001f74:	2010      	movs	r0, #16
 8001f76:	f002 fffb 	bl	8004f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f86:	f004 f97b 	bl	8006280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200003e4 	.word	0x200003e4

08001f94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <DMA2_Stream0_IRQHandler+0x10>)
 8001f9a:	f002 fbc9 	bl	8004730 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000330 	.word	0x20000330

08001fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	return 1;
 8001fac:	2301      	movs	r3, #1
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_kill>:

int _kill(int pid, int sig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fc2:	f004 ffdf 	bl	8006f84 <__errno>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2216      	movs	r2, #22
 8001fca:	601a      	str	r2, [r3, #0]
	return -1;
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_exit>:

void _exit (int status)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ffe7 	bl	8001fb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fea:	e7fe      	b.n	8001fea <_exit+0x12>

08001fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e00a      	b.n	8002014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ffe:	f3af 8000 	nop.w
 8002002:	4601      	mov	r1, r0
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	b2ca      	uxtb	r2, r1
 800200c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf0      	blt.n	8001ffe <_read+0x12>
	}

return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204e:	605a      	str	r2, [r3, #4]
	return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <_isatty>:

int _isatty(int file)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
	return 1;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
	...

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f004 ff60 	bl	8006f84 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20018000 	.word	0x20018000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20000258 	.word	0x20000258
 80020f8:	20000488 	.word	0x20000488

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <SystemInit+0x28>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <SystemInit+0x28>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SystemInit+0x28>)
 8002112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002116:	609a      	str	r2, [r3, #8]
#endif
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	463b      	mov	r3, r7
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002146:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <MX_TIM1_Init+0x9c>)
 8002148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_TIM1_Init+0x98>)
 800214c:	2253      	movs	r2, #83	; 0x53
 800214e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002166:	2200      	movs	r2, #0
 8002168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_TIM1_Init+0x98>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002170:	4813      	ldr	r0, [pc, #76]	; (80021c0 <MX_TIM1_Init+0x98>)
 8002172:	f003 ffd3 	bl	800611c <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800217c:	f7ff fe9a 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4619      	mov	r1, r3
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <MX_TIM1_Init+0x98>)
 800218e:	f004 f97f 	bl	8006490 <HAL_TIM_ConfigClockSource>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002198:	f7ff fe8c 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_TIM1_Init+0x98>)
 80021aa:	f004 fb77 	bl	800689c <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80021b4:	f7ff fe7e 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200003e4 	.word	0x200003e4
 80021c4:	40010000 	.word	0x40010000

080021c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_TIM_Base_MspInit+0x48>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d115      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_TIM_Base_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <HAL_TIM_Base_MspInit+0x4c>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_TIM_Base_MspInit+0x4c>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2100      	movs	r1, #0
 80021fa:	2019      	movs	r0, #25
 80021fc:	f002 f95b 	bl	80044b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002200:	2019      	movs	r0, #25
 8002202:	f002 f974 	bl	80044ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40023800 	.word	0x40023800

08002218 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <MX_USART2_UART_Init+0x50>)
 8002220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 8002224:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_USART2_UART_Init+0x4c>)
 8002250:	f004 fba6 	bl	80069a0 <HAL_UART_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800225a:	f7ff fe2b 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000042c 	.word	0x2000042c
 8002268:	40004400 	.word	0x40004400

0800226c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_UART_MspInit+0x84>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12b      	bne.n	80022e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <HAL_UART_MspInit+0x88>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_UART_MspInit+0x88>)
 8002298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_UART_MspInit+0x88>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	613b      	str	r3, [r7, #16]
 80022a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <HAL_UART_MspInit+0x88>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <HAL_UART_MspInit+0x88>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <HAL_UART_MspInit+0x88>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022c6:	230c      	movs	r3, #12
 80022c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022d6:	2307      	movs	r3, #7
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0314 	add.w	r3, r7, #20
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <HAL_UART_MspInit+0x8c>)
 80022e2:	f002 fc8f 	bl	8004c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022e6:	bf00      	nop
 80022e8:	3728      	adds	r7, #40	; 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40004400 	.word	0x40004400
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020000 	.word	0x40020000

080022fc <u8g_com_hw_i2c_fn>:
	 usleep(10);
 }
   
   
 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8002302:	af02      	add	r7, sp, #8
 8002304:	f107 040c 	add.w	r4, r7, #12
 8002308:	6020      	str	r0, [r4, #0]
 800230a:	4608      	mov	r0, r1
 800230c:	4611      	mov	r1, r2
 800230e:	1d3a      	adds	r2, r7, #4
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	f107 030b 	add.w	r3, r7, #11
 8002316:	4602      	mov	r2, r0
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	f107 030a 	add.w	r3, r7, #10
 800231e:	460a      	mov	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
  switch(msg)  
 8002322:	f107 030b 	add.w	r3, r7, #11
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d86a      	bhi.n	8002402 <u8g_com_hw_i2c_fn+0x106>
 800232c:	a201      	add	r2, pc, #4	; (adr r2, 8002334 <u8g_com_hw_i2c_fn+0x38>)
 800232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002332:	bf00      	nop
 8002334:	08002403 	.word	0x08002403
 8002338:	08002403 	.word	0x08002403
 800233c:	08002355 	.word	0x08002355
 8002340:	08002403 	.word	0x08002403
 8002344:	08002403 	.word	0x08002403
 8002348:	0800236f 	.word	0x0800236f
 800234c:	08002397 	.word	0x08002397
 8002350:	08002397 	.word	0x08002397
    break;  
   
   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
	   //HAL_Delay(1);
	   //u8g_10MicroDelay();
    if (arg_val == 0)  
 8002354:	f107 030a 	add.w	r3, r7, #10
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <u8g_com_hw_i2c_fn+0x6a>
    {  
         control = 0;  
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <u8g_com_hw_i2c_fn+0x114>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
    }  
    else  
    {  
         control = 0x40;  
    }  
    break;  
 8002364:	e04d      	b.n	8002402 <u8g_com_hw_i2c_fn+0x106>
         control = 0x40;  
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <u8g_com_hw_i2c_fn+0x114>)
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	701a      	strb	r2, [r3, #0]
    break;  
 800236c:	e049      	b.n	8002402 <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_BYTE:  
   {  
        uint8_t buffer[2];  
        buffer[0] = control;  
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <u8g_com_hw_i2c_fn+0x114>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
        buffer[1] = arg_val;  
 8002376:	f107 030a 	add.w	r3, r7, #10
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);  
 8002380:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8002384:	f242 7310 	movw	r3, #10000	; 0x2710
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2302      	movs	r3, #2
 800238c:	2178      	movs	r1, #120	; 0x78
 800238e:	4821      	ldr	r0, [pc, #132]	; (8002414 <u8g_com_hw_i2c_fn+0x118>)
 8002390:	f002 ff4a 	bl	8005228 <HAL_I2C_Master_Transmit>
   }  
        break;  
 8002394:	e035      	b.n	8002402 <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_SEQ:  
   case U8G_COM_MSG_WRITE_SEQ_P:  
   {  
        uint8_t buffer[DATA_BUFFER_SIZE];  
           uint8_t *ptr = arg_ptr;  
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
           buffer[0] = control;  
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <u8g_com_hw_i2c_fn+0x114>)
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 80023a8:	2301      	movs	r3, #1
 80023aa:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80023ae:	e011      	b.n	80023d4 <u8g_com_hw_i2c_fn+0xd8>
           {  
                buffer[i] = *(ptr++);
 80023b0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 80023ba:	7819      	ldrb	r1, [r3, #0]
 80023bc:	f107 0214 	add.w	r2, r7, #20
 80023c0:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80023c4:	4413      	add	r3, r2
 80023c6:	460a      	mov	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 80023ca:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80023ce:	3301      	adds	r3, #1
 80023d0:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80023d4:	f107 030a 	add.w	r3, r7, #10
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 80023de:	429a      	cmp	r2, r3
 80023e0:	dde6      	ble.n	80023b0 <u8g_com_hw_i2c_fn+0xb4>
           }  
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val+1, I2C_TIMEOUT);  
 80023e2:	f107 030a 	add.w	r3, r7, #10
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f107 0214 	add.w	r2, r7, #20
 80023f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80023f6:	9100      	str	r1, [sp, #0]
 80023f8:	2178      	movs	r1, #120	; 0x78
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <u8g_com_hw_i2c_fn+0x118>)
 80023fc:	f002 ff14 	bl	8005228 <HAL_I2C_Master_Transmit>
   }  
   
    break;  
 8002400:	bf00      	nop
  }  
  return 1;  
 8002402:	2301      	movs	r3, #1
 }  
 8002404:	4618      	mov	r0, r3
 8002406:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	2000025c 	.word	0x2000025c
 8002414:	20000390 	.word	0x20000390

08002418 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8002418:	b490      	push	{r4, r7}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	4608      	mov	r0, r1
 8002422:	4611      	mov	r1, r2
 8002424:	461a      	mov	r2, r3
 8002426:	4603      	mov	r3, r0
 8002428:	70fb      	strb	r3, [r7, #3]
 800242a:	460b      	mov	r3, r1
 800242c:	70bb      	strb	r3, [r7, #2]
 800242e:	4613      	mov	r3, r2
 8002430:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 8002432:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 8002434:	7e3b      	ldrb	r3, [r7, #24]
 8002436:	4423      	add	r3, r4
 8002438:	b2dc      	uxtb	r4, r3
  tmp--;
 800243a:	4623      	mov	r3, r4
 800243c:	3b01      	subs	r3, #1
 800243e:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800244c:	73fa      	strb	r2, [r7, #15]
 800244e:	73bb      	strb	r3, [r7, #14]
 8002450:	78bb      	ldrb	r3, [r7, #2]
 8002452:	737b      	strb	r3, [r7, #13]
 8002454:	4623      	mov	r3, r4
 8002456:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8002458:	7bba      	ldrb	r2, [r7, #14]
 800245a:	7b7b      	ldrb	r3, [r7, #13]
 800245c:	429a      	cmp	r2, r3
 800245e:	d30d      	bcc.n	800247c <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8002460:	7bfa      	ldrb	r2, [r7, #15]
 8002462:	7b3b      	ldrb	r3, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d801      	bhi.n	800246c <u8g_IsBBXIntersection+0x54>
      return 1;
 8002468:	2301      	movs	r3, #1
 800246a:	e014      	b.n	8002496 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 800246c:	7b7a      	ldrb	r2, [r7, #13]
 800246e:	7b3b      	ldrb	r3, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d901      	bls.n	8002478 <u8g_IsBBXIntersection+0x60>
	return 1;
 8002474:	2301      	movs	r3, #1
 8002476:	e00e      	b.n	8002496 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8002478:	2300      	movs	r3, #0
 800247a:	e00c      	b.n	8002496 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	7b3b      	ldrb	r3, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d807      	bhi.n	8002494 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8002484:	7b7a      	ldrb	r2, [r7, #13]
 8002486:	7b3b      	ldrb	r3, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d901      	bls.n	8002490 <u8g_IsBBXIntersection+0x78>
	return 1;
 800248c:	2301      	movs	r3, #1
 800248e:	e002      	b.n	8002496 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8002494:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <u8g_IsBBXIntersection+0x86>
    return 0; 
 800249a:	2300      	movs	r3, #0
 800249c:	e032      	b.n	8002504 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 800249e:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 80024a0:	787b      	ldrb	r3, [r7, #1]
 80024a2:	4423      	add	r3, r4
 80024a4:	b2dc      	uxtb	r4, r3
  tmp--;
 80024a6:	4623      	mov	r3, r4
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024b8:	72fa      	strb	r2, [r7, #11]
 80024ba:	72bb      	strb	r3, [r7, #10]
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	727b      	strb	r3, [r7, #9]
 80024c0:	4623      	mov	r3, r4
 80024c2:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 80024c4:	7aba      	ldrb	r2, [r7, #10]
 80024c6:	7a7b      	ldrb	r3, [r7, #9]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d30d      	bcc.n	80024e8 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 80024cc:	7afa      	ldrb	r2, [r7, #11]
 80024ce:	7a3b      	ldrb	r3, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d801      	bhi.n	80024d8 <u8g_IsBBXIntersection+0xc0>
      return 1;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e014      	b.n	8002502 <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 80024d8:	7a7a      	ldrb	r2, [r7, #9]
 80024da:	7a3b      	ldrb	r3, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d901      	bls.n	80024e4 <u8g_IsBBXIntersection+0xcc>
	return 1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e00e      	b.n	8002502 <u8g_IsBBXIntersection+0xea>
	return 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e00c      	b.n	8002502 <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 80024e8:	7afa      	ldrb	r2, [r7, #11]
 80024ea:	7a3b      	ldrb	r3, [r7, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d807      	bhi.n	8002500 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 80024f0:	7a7a      	ldrb	r2, [r7, #9]
 80024f2:	7a3b      	ldrb	r3, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d901      	bls.n	80024fc <u8g_IsBBXIntersection+0xe4>
	return 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e002      	b.n	8002502 <u8g_IsBBXIntersection+0xea>
	return 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <u8g_IsBBXIntersection+0xea>
      return 0;
 8002500:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002502:	bf00      	nop
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bc90      	pop	{r4, r7}
 800250c:	4770      	bx	lr

0800250e <u8g_InitCom>:
#include "u8g_arm.h"

extern void u8g_Delay(uint16_t val);

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 800250e:	b590      	push	{r4, r7, lr}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	689c      	ldr	r4, [r3, #8]
 8002520:	79fa      	ldrb	r2, [r7, #7]
 8002522:	2300      	movs	r3, #0
 8002524:	2101      	movs	r1, #1
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	47a0      	blx	r4
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	4613      	mov	r3, r2
 8002540:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	689c      	ldr	r4, [r3, #8]
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	2300      	movs	r3, #0
 800254a:	2103      	movs	r1, #3
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	47a0      	blx	r4
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	689c      	ldr	r4, [r3, #8]
 8002566:	2300      	movs	r3, #0
 8002568:	2200      	movs	r2, #0
 800256a:	2104      	movs	r1, #4
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	47a0      	blx	r4
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}

08002578 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689c      	ldr	r4, [r3, #8]
 8002586:	2300      	movs	r3, #0
 8002588:	2201      	movs	r2, #1
 800258a:	2104      	movs	r1, #4
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	47a0      	blx	r4
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	4613      	mov	r3, r2
 80025a4:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689c      	ldr	r4, [r3, #8]
 80025aa:	79fa      	ldrb	r2, [r7, #7]
 80025ac:	2300      	movs	r3, #0
 80025ae:	2102      	movs	r1, #2
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	47a0      	blx	r4
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}

080025bc <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	689c      	ldr	r4, [r3, #8]
 80025ce:	79fa      	ldrb	r2, [r7, #7]
 80025d0:	2300      	movs	r3, #0
 80025d2:	2105      	movs	r1, #5
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	47a0      	blx	r4
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd90      	pop	{r4, r7, pc}

080025e2 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 80025e2:	b590      	push	{r4, r7, lr}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	689c      	ldr	r4, [r3, #8]
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2106      	movs	r1, #6
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	47a0      	blx	r4
 8002600:	4603      	mov	r3, r0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d110      	bne.n	8002648 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8002626:	7dbb      	ldrb	r3, [r7, #22]
 8002628:	2bff      	cmp	r3, #255	; 0xff
 800262a:	d00a      	beq.n	8002642 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	461a      	mov	r2, r3
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff ffc2 	bl	80025bc <u8g_WriteByte>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d15d      	bne.n	80026fa <u8g_WriteEscSeqP+0xf0>
          return 0;
 800263e:	2300      	movs	r3, #0
 8002640:	e061      	b.n	8002706 <u8g_WriteEscSeqP+0xfc>
      }
      else
      {
        is_escape = 1;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
 8002646:	e058      	b.n	80026fa <u8g_WriteEscSeqP+0xf0>
      }
    }
    else
    {
      if ( value == 255 )
 8002648:	7dbb      	ldrb	r3, [r7, #22]
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d10a      	bne.n	8002664 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 800264e:	7dbb      	ldrb	r3, [r7, #22]
 8002650:	461a      	mov	r2, r3
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff ffb1 	bl	80025bc <u8g_WriteByte>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d14a      	bne.n	80026f6 <u8g_WriteEscSeqP+0xec>
          return 0;
 8002660:	2300      	movs	r3, #0
 8002662:	e050      	b.n	8002706 <u8g_WriteEscSeqP+0xfc>
      }
      else if ( value == 254 )
 8002664:	7dbb      	ldrb	r3, [r7, #22]
 8002666:	2bfe      	cmp	r3, #254	; 0xfe
 8002668:	d04b      	beq.n	8002702 <u8g_WriteEscSeqP+0xf8>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 800266a:	7dbb      	ldrb	r3, [r7, #22]
 800266c:	2bef      	cmp	r3, #239	; 0xef
 800266e:	d842      	bhi.n	80026f6 <u8g_WriteEscSeqP+0xec>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8002670:	7dbb      	ldrb	r3, [r7, #22]
 8002672:	2bdf      	cmp	r3, #223	; 0xdf
 8002674:	d909      	bls.n	800268a <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8002676:	7dbb      	ldrb	r3, [r7, #22]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff ff88 	bl	8002598 <u8g_SetAddress>
 8002688:	e035      	b.n	80026f6 <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xd0 )
 800268a:	7dbb      	ldrb	r3, [r7, #22]
 800268c:	2bcf      	cmp	r3, #207	; 0xcf
 800268e:	d909      	bls.n	80026a4 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002690:	7dbb      	ldrb	r3, [r7, #22]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7ff ff49 	bl	8002534 <u8g_SetChipSelect>
 80026a2:	e028      	b.n	80026f6 <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xc0 )
 80026a4:	7dbb      	ldrb	r3, [r7, #22]
 80026a6:	2bbf      	cmp	r3, #191	; 0xbf
 80026a8:	d91a      	bls.n	80026e0 <u8g_WriteEscSeqP+0xd6>
      {
        u8g_SetResetLow(u8g, dev);
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff ff53 	bl	8002558 <u8g_SetResetLow>
        value &= 0x0f;
 80026b2:	7dbb      	ldrb	r3, [r7, #22]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 80026ba:	7dbb      	ldrb	r3, [r7, #22]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	75bb      	strb	r3, [r7, #22]
        value+=2;
 80026c0:	7dbb      	ldrb	r3, [r7, #22]
 80026c2:	3302      	adds	r3, #2
 80026c4:	75bb      	strb	r3, [r7, #22]
        HAL_Delay(value);
 80026c6:	7dbb      	ldrb	r3, [r7, #22]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fa03 	bl	8003ad4 <HAL_Delay>
        u8g_SetResetHigh(u8g, dev);
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff ff51 	bl	8002578 <u8g_SetResetHigh>
        HAL_Delay(value);
 80026d6:	7dbb      	ldrb	r3, [r7, #22]
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 f9fb 	bl	8003ad4 <HAL_Delay>
 80026de:	e00a      	b.n	80026f6 <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xbe )
 80026e0:	7dbb      	ldrb	r3, [r7, #22]
 80026e2:	2bbd      	cmp	r3, #189	; 0xbd
 80026e4:	d807      	bhi.n	80026f6 <u8g_WriteEscSeqP+0xec>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 80026e6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db03      	blt.n	80026f6 <u8g_WriteEscSeqP+0xec>
      {
    	  HAL_Delay(value);
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 f9ef 	bl	8003ad4 <HAL_Delay>
      }
      is_escape = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3301      	adds	r3, #1
 80026fe:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8002700:	e78b      	b.n	800261a <u8g_WriteEscSeqP+0x10>
        break;
 8002702:	bf00      	nop
  }
  return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	72fb      	strb	r3, [r7, #11]
 800271e:	4613      	mov	r3, r2
 8002720:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	2b06      	cmp	r3, #6
 8002726:	d811      	bhi.n	800274c <u8g_com_null_fn+0x3c>
 8002728:	a201      	add	r2, pc, #4	; (adr r2, 8002730 <u8g_com_null_fn+0x20>)
 800272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272e:	bf00      	nop
 8002730:	0800274d 	.word	0x0800274d
 8002734:	0800274d 	.word	0x0800274d
 8002738:	0800274d 	.word	0x0800274d
 800273c:	0800274d 	.word	0x0800274d
 8002740:	0800274d 	.word	0x0800274d
 8002744:	0800274d 	.word	0x0800274d
 8002748:	0800274d 	.word	0x0800274d
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 800274c:	2301      	movs	r3, #1
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop

0800275c <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	3b0a      	subs	r3, #10
 8002770:	2b0b      	cmp	r3, #11
 8002772:	d85b      	bhi.n	800282c <u8g_dev_ssd1306_128x64_fn+0xd0>
 8002774:	a201      	add	r2, pc, #4	; (adr r2, 800277c <u8g_dev_ssd1306_128x64_fn+0x20>)
 8002776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277a:	bf00      	nop
 800277c:	080027ad 	.word	0x080027ad
 8002780:	0800282d 	.word	0x0800282d
 8002784:	0800282d 	.word	0x0800282d
 8002788:	0800282d 	.word	0x0800282d
 800278c:	0800282d 	.word	0x0800282d
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002811 	.word	0x08002811
 8002798:	0800281f 	.word	0x0800281f
 800279c:	0800282d 	.word	0x0800282d
 80027a0:	0800282d 	.word	0x0800282d
 80027a4:	0800282d 	.word	0x0800282d
 80027a8:	080027c3 	.word	0x080027c3
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80027ac:	2202      	movs	r2, #2
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff feac 	bl	800250e <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 80027b6:	4a23      	ldr	r2, [pc, #140]	; (8002844 <u8g_dev_ssd1306_128x64_fn+0xe8>)
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff ff25 	bl	800260a <u8g_WriteEscSeqP>
      break;
 80027c0:	e034      	b.n	800282c <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <u8g_dev_ssd1306_128x64_fn+0xec>)
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff ff1c 	bl	800260a <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	791b      	ldrb	r3, [r3, #4]
 80027d6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff feeb 	bl	80025bc <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 80027e6:	2201      	movs	r2, #1
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fed4 	bl	8002598 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	68f9      	ldr	r1, [r7, #12]
 80027f4:	6978      	ldr	r0, [r7, #20]
 80027f6:	f000 fe53 	bl	80034a0 <u8g_pb_WriteBuffer>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e01a      	b.n	800283a <u8g_dev_ssd1306_128x64_fn+0xde>
        u8g_SetChipSelect(u8g, dev, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fe93 	bl	8002534 <u8g_SetChipSelect>
      }
      break;
 800280e:	e00d      	b.n	800282c <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <u8g_dev_ssd1306_128x64_fn+0xf0>)
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff fef8 	bl	800260a <u8g_WriteEscSeqP>
      return 1;
 800281a:	2301      	movs	r3, #1
 800281c:	e00d      	b.n	800283a <u8g_dev_ssd1306_128x64_fn+0xde>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800281e:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <u8g_dev_ssd1306_128x64_fn+0xf4>)
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff fef1 	bl	800260a <u8g_WriteEscSeqP>
      return 1;
 8002828:	2301      	movs	r3, #1
 800282a:	e006      	b.n	800283a <u8g_dev_ssd1306_128x64_fn+0xde>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 800282c:	79fa      	ldrb	r2, [r7, #7]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fef4 	bl	8003620 <u8g_dev_pb8v1_base_fn>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	08009f08 	.word	0x08009f08
 8002848:	08009f30 	.word	0x08009f30
 800284c:	08009f38 	.word	0x08009f38
 8002850:	08009f44 	.word	0x08009f44

08002854 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	81fb      	strh	r3, [r7, #14]
    font++;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3301      	adds	r3, #1
 8002896:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002898:	89fb      	ldrh	r3, [r7, #14]
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	4413      	add	r3, r2
 80028a8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80028aa:	89fb      	ldrh	r3, [r7, #14]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 80028c0:	2100      	movs	r1, #0
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffc6 	bl	8002854 <u8g_font_get_byte>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffec 	bl	80028b8 <u8g_font_GetFormat>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d00a      	beq.n	80028fc <u8g_font_GetFontGlyphStructureSize+0x2a>
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	dc0a      	bgt.n	8002900 <u8g_font_GetFontGlyphStructureSize+0x2e>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <u8g_font_GetFontGlyphStructureSize+0x22>
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d002      	beq.n	80028f8 <u8g_font_GetFontGlyphStructureSize+0x26>
 80028f2:	e005      	b.n	8002900 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 80028f4:	2306      	movs	r3, #6
 80028f6:	e004      	b.n	8002902 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e002      	b.n	8002902 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 80028fc:	2306      	movs	r3, #6
 80028fe:	e000      	b.n	8002902 <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8002900:	2303      	movs	r3, #3
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 8002912:	2105      	movs	r1, #5
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff9d 	bl	8002854 <u8g_font_get_byte>
 800291a:	4603      	mov	r3, r0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 800292c:	2106      	movs	r1, #6
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffa2 	bl	8002878 <u8g_font_get_word>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 8002946:	2108      	movs	r1, #8
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff95 	bl	8002878 <u8g_font_get_word>
 800294e:	4603      	mov	r3, r0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8002960:	210a      	movs	r1, #10
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff76 	bl	8002854 <u8g_font_get_byte>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 800297a:	210b      	movs	r1, #11
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff69 	bl	8002854 <u8g_font_get_byte>
 8002982:	4603      	mov	r3, r0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8002994:	210c      	movs	r1, #12
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff5c 	bl	8002854 <u8g_font_get_byte>
 800299c:	4603      	mov	r3, r0
 800299e:	b25b      	sxtb	r3, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 80029b0:	210d      	movs	r1, #13
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff4e 	bl	8002854 <u8g_font_get_byte>
 80029b8:	4603      	mov	r3, r0
 80029ba:	b25b      	sxtb	r3, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 80029cc:	210e      	movs	r1, #14
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ff40 	bl	8002854 <u8g_font_get_byte>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b25b      	sxtb	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 80029e8:	210f      	movs	r1, #15
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff ff32 	bl	8002854 <u8g_font_get_byte>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b25b      	sxtb	r3, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 8002a04:	2110      	movs	r1, #16
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff ff24 	bl	8002854 <u8g_font_get_byte>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	b25b      	sxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ff55 	bl	80028d2 <u8g_font_GetFontGlyphStructureSize>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4413      	add	r3, r2
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff36 	bl	80028b8 <u8g_font_GetFormat>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <u8g_CopyGlyphDataToCache+0x1e>
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d11b      	bne.n	8002a8e <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	785a      	ldrb	r2, [r3, #1]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	3303      	adds	r3, #3
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b25a      	sxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	3304      	adds	r3, #4
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b25a      	sxtb	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	3305      	adds	r3, #5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b25a      	sxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	779a      	strb	r2, [r3, #30]
      break;
 8002a8c:	e034      	b.n	8002af8 <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8002a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	b25a      	sxtb	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3b02      	subs	r3, #2
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	b25a      	sxtb	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8002aba:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	789b      	ldrb	r3, [r3, #2]
 8002ae6:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 8002aee:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	771a      	strb	r2, [r3, #28]
    
      
      break;
 8002af6:	bf00      	nop
  }
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	779a      	strb	r2, [r3, #30]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff feb4 	bl	80028b8 <u8g_font_GetFormat>
 8002b50:	4603      	mov	r3, r0
 8002b52:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff feba 	bl	80028d2 <u8g_font_GetFontGlyphStructureSize>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8002b62:	23ff      	movs	r3, #255	; 0xff
 8002b64:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8002b66:	7c3b      	ldrb	r3, [r7, #16]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <u8g_GetGlyph+0x3c>
    mask = 15;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff feef 	bl	8002958 <u8g_font_GetFontStartEncoding>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fef5 	bl	8002972 <u8g_font_GetFontEndEncoding>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fed4 	bl	800293e <u8g_font_GetEncoding97Pos>
 8002b96:	4603      	mov	r3, r0
 8002b98:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d909      	bls.n	8002bb4 <u8g_GetGlyph+0x80>
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8002ba6:	89bb      	ldrh	r3, [r7, #12]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4413      	add	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
    start = 97;
 8002bae:	2361      	movs	r3, #97	; 0x61
 8002bb0:	74fb      	strb	r3, [r7, #19]
 8002bb2:	e016      	b.n	8002be2 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff feb3 	bl	8002924 <u8g_font_GetEncoding65Pos>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d909      	bls.n	8002bdc <u8g_GetGlyph+0xa8>
 8002bc8:	89bb      	ldrh	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8002bce:	89bb      	ldrh	r3, [r7, #12]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
      start = 65;
 8002bd6:	2341      	movs	r3, #65	; 0x41
 8002bd8:	74fb      	strb	r3, [r7, #19]
 8002bda:	e002      	b.n	8002be2 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3311      	adds	r3, #17
 8002be0:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	7bbb      	ldrb	r3, [r7, #14]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d904      	bls.n	8002bf4 <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff88 	bl	8002b00 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e032      	b.n	8002c5a <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8002bf8:	7cba      	ldrb	r2, [r7, #18]
 8002bfa:	7bbb      	ldrb	r3, [r7, #14]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d828      	bhi.n	8002c52 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2bff      	cmp	r3, #255	; 0xff
 8002c06:	d103      	bne.n	8002c10 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e017      	b.n	8002c40 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8002c10:	7cba      	ldrb	r2, [r7, #18]
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d105      	bne.n	8002c24 <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8002c18:	6979      	ldr	r1, [r7, #20]
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff0c 	bl	8002a38 <u8g_CopyGlyphDataToCache>
          return p;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	e01a      	b.n	8002c5a <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3302      	adds	r3, #2
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	7c7b      	ldrb	r3, [r7, #17]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8002c40:	7cba      	ldrb	r2, [r7, #18]
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d003      	beq.n	8002c50 <u8g_GetGlyph+0x11c>
        break;
      i++;
 8002c48:	7cbb      	ldrb	r3, [r7, #18]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002c4e:	e7d7      	b.n	8002c00 <u8g_GetGlyph+0xcc>
        break;
 8002c50:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff54 	bl	8002b00 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b088      	sub	sp, #32
 8002c66:	af02      	add	r7, sp, #8
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	4608      	mov	r0, r1
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4603      	mov	r3, r0
 8002c72:	70fb      	strb	r3, [r7, #3]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70bb      	strb	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff57 	bl	8002b34 <u8g_GetGlyph>
 8002c86:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <u8g_draw_glyph+0x30>
      return 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e06d      	b.n	8002d6e <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff febd 	bl	8002a18 <u8g_font_GetGlyphDataStart>
 8002c9e:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7fdb      	ldrb	r3, [r3, #31]
 8002ca4:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	4413      	add	r3, r2
 8002cba:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	78ba      	ldrb	r2, [r7, #2]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	70bb      	strb	r3, [r7, #2]
  y--;
 8002cca:	78bb      	ldrb	r3, [r7, #2]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002cd0:	78ba      	ldrb	r2, [r7, #2]
 8002cd2:	7abb      	ldrb	r3, [r7, #10]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7af8      	ldrb	r0, [r7, #11]
 8002cde:	78f9      	ldrb	r1, [r7, #3]
 8002ce0:	7abb      	ldrb	r3, [r7, #10]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff fb96 	bl	8002418 <u8g_IsBBXIntersection>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002cf8:	e039      	b.n	8002d6e <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	3307      	adds	r3, #7
 8002cfe:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8002d00:	7afb      	ldrb	r3, [r7, #11]
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8002d06:	78bb      	ldrb	r3, [r7, #2]
 8002d08:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8002d0a:	7c3a      	ldrb	r2, [r7, #16]
 8002d0c:	7abb      	ldrb	r3, [r7, #10]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	743b      	strb	r3, [r7, #16]
  iy++;
 8002d12:	7c3b      	ldrb	r3, [r7, #16]
 8002d14:	3301      	adds	r3, #1
 8002d16:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8002d18:	2300      	movs	r3, #0
 8002d1a:	74bb      	strb	r3, [r7, #18]
 8002d1c:	e020      	b.n	8002d60 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002d22:	2300      	movs	r3, #0
 8002d24:	74fb      	strb	r3, [r7, #19]
 8002d26:	e011      	b.n	8002d4c <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	7c3a      	ldrb	r2, [r7, #16]
 8002d2e:	7c79      	ldrb	r1, [r7, #17]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fa8b 	bl	8003250 <u8g_Draw8Pixel>
      data++;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	617b      	str	r3, [r7, #20]
      ix+=8;
 8002d40:	7c7b      	ldrb	r3, [r7, #17]
 8002d42:	3308      	adds	r3, #8
 8002d44:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	74fb      	strb	r3, [r7, #19]
 8002d4c:	7cfa      	ldrb	r2, [r7, #19]
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d3e9      	bcc.n	8002d28 <u8g_draw_glyph+0xc6>
    }
    iy++;
 8002d54:	7c3b      	ldrb	r3, [r7, #16]
 8002d56:	3301      	adds	r3, #1
 8002d58:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8002d5a:	7cbb      	ldrb	r3, [r7, #18]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	74bb      	strb	r3, [r7, #18]
 8002d60:	7cba      	ldrb	r2, [r7, #18]
 8002d62:	7abb      	ldrb	r3, [r7, #10]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3da      	bcc.n	8002d1e <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	72fb      	strb	r3, [r7, #11]
 8002d84:	4613      	mov	r3, r2
 8002d86:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	4798      	blx	r3
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	7abb      	ldrb	r3, [r7, #10]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 8002d9e:	e013      	b.n	8002dc8 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	7aba      	ldrb	r2, [r7, #10]
 8002da6:	7af9      	ldrb	r1, [r7, #11]
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f7ff ff5a 	bl	8002c62 <u8g_draw_glyph>
 8002dae:	4603      	mov	r3, r0
 8002db0:	75bb      	strb	r3, [r7, #22]
    x += d;
 8002db2:	7dba      	ldrb	r2, [r7, #22]
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	4413      	add	r3, r2
 8002db8:	72fb      	strb	r3, [r7, #11]
    t += d;
 8002dba:	7dba      	ldrb	r2, [r7, #22]
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	75fb      	strb	r3, [r7, #23]
    s++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e7      	bne.n	8002da0 <u8g_DrawStr+0x2a>
  }
  return t;
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d06b      	beq.n	8002ec2 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d114      	bne.n	8002e1e <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fd86 	bl	800290a <u8g_font_GetCapitalAHeight>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b25a      	sxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fdbd 	bl	800298c <u8g_font_GetLowerGDescent>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002e1c:	e02d      	b.n	8002e7a <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d114      	bne.n	8002e52 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fdd7 	bl	80029e0 <u8g_font_GetFontXAscent>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461a      	mov	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fddb 	bl	80029fc <u8g_font_GetFontXDescent>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002e50:	e013      	b.n	8002e7a <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fda6 	bl	80029a8 <u8g_font_GetFontAscent>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fdaa 	bl	80029c4 <u8g_font_GetFontDescent>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8002e88:	b21b      	sxth	r3, r3
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002e96:	2b40      	cmp	r3, #64	; 0x40
 8002e98:	d00d      	beq.n	8002eb6 <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	89fa      	ldrh	r2, [r7, #14]
 8002eaa:	fb12 f303 	smulbb	r3, r2, r3
 8002eae:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 8002eb0:	89fb      	ldrh	r3, [r7, #14]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002ec0:	e000      	b.n	8002ec4 <u8g_UpdateRefHeight+0xea>
    return;
 8002ec2:	bf00      	nop
}
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return 0;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <u8g_SetFontPosBaseline+0x1c>)
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	08002ecb 	.word	0x08002ecb

08002f00 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d008      	beq.n	8002f26 <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ff5d 	bl	8002dda <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ffdd 	bl	8002ee0 <u8g_SetFontPosBaseline>
  }
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002f2e:	b590      	push	{r4, r7, lr}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	681c      	ldr	r4, [r3, #0]
 8002f42:	79fa      	ldrb	r2, [r7, #7]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	47a0      	blx	r4
 8002f4c:	4603      	mov	r3, r0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}

08002f56 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	2002      	movs	r0, #2
 8002f66:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	220a      	movs	r2, #10
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffdd 	bl	8002f2e <u8g_call_dev_fn>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	2000      	movs	r0, #0
 8002f86:	4798      	blx	r3
  return r;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
 8002f9a:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	2002      	movs	r0, #2
 8002fa2:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa8:	2001      	movs	r0, #1
 8002faa:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8002fac:	2300      	movs	r3, #0
 8002fae:	2214      	movs	r2, #20
 8002fb0:	6839      	ldr	r1, [r7, #0]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffbb 	bl	8002f2e <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3338      	adds	r3, #56	; 0x38
 8002fbc:	2217      	movs	r2, #23
 8002fbe:	6839      	ldr	r1, [r7, #0]
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ffb4 	bl	8002f2e <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	2000      	movs	r0, #0
 8002fcc:	4798      	blx	r3
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	2001      	movs	r0, #1
 8002fee:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	2215      	movs	r2, #21
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ff99 	bl	8002f2e <u8g_call_dev_fn>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3338      	adds	r3, #56	; 0x38
 800300a:	2217      	movs	r2, #23
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ff8d 	bl	8002f2e <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	2000      	movs	r0, #0
 800301a:	4798      	blx	r3
  return r;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	4611      	mov	r1, r2
 8003032:	461a      	mov	r2, r3
 8003034:	460b      	mov	r3, r1
 8003036:	71fb      	strb	r3, [r7, #7]
 8003038:	4613      	mov	r3, r2
 800303a:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	332d      	adds	r3, #45	; 0x2d
 8003040:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	79fa      	ldrb	r2, [r7, #7]
 8003046:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	79ba      	ldrb	r2, [r7, #6]
 800304c:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003054:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800305c:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	223b      	movs	r2, #59	; 0x3b
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ff62 	bl	8002f2e <u8g_call_dev_fn>
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800307c:	f107 030f 	add.w	r3, r7, #15
 8003080:	2246      	movs	r2, #70	; 0x46
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff52 	bl	8002f2e <u8g_call_dev_fn>
  return r;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 800309e:	f107 030f 	add.w	r3, r7, #15
 80030a2:	2247      	movs	r2, #71	; 0x47
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff41 	bl	8002f2e <u8g_call_dev_fn>
  return r;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 80030c0:	2300      	movs	r3, #0
 80030c2:	2248      	movs	r2, #72	; 0x48
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ff31 	bl	8002f2e <u8g_call_dev_fn>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ffc4 	bl	8003072 <u8g_GetWidthLL>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ffcb 	bl	8003094 <u8g_GetHeightLL>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff ffd2 	bl	80030b6 <u8g_GetModeLL>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3338      	adds	r3, #56	; 0x38
 8003122:	2217      	movs	r2, #23
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff02 	bl	8002f2e <u8g_call_dev_fn>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2222      	movs	r2, #34	; 0x22
 8003158:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8003160:	2101      	movs	r1, #1
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f891 	bl	800328a <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7ff feb9 	bl	8002ee0 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2240      	movs	r2, #64	; 0x40
 800318a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a02      	ldr	r2, [pc, #8]	; (80031a4 <u8g_init_data+0x70>)
 800319a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08003987 	.word	0x08003987

080031a8 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fecd 	bl	8002f56 <u8g_InitLL>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <u8g_Begin+0x1e>
    return 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e003      	b.n	80031ce <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ff85 	bl	80030d6 <u8g_UpdateDimension>
  return 1;
 80031cc:	2301      	movs	r3, #1
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff ffa6 	bl	8003134 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f7ff ffd6 	bl	80031a8 <u8g_Begin>
 80031fc:	4603      	mov	r3, r0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff febc 	bl	8002f92 <u8g_FirstPageLL>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4619      	mov	r1, r3
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fec8 	bl	8002fd6 <u8g_NextPageLL>
 8003246:	4603      	mov	r3, r0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af02      	add	r7, sp, #8
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	70fb      	strb	r3, [r7, #3]
 8003262:	460b      	mov	r3, r1
 8003264:	70bb      	strb	r3, [r7, #2]
 8003266:	4613      	mov	r3, r2
 8003268:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	78b8      	ldrb	r0, [r7, #2]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	7c3b      	ldrb	r3, [r7, #16]
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	787b      	ldrb	r3, [r7, #1]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	4603      	mov	r3, r0
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fed2 	bl	8003026 <u8g_Draw8PixelLL>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	78db      	ldrb	r3, [r3, #3]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	711a      	strb	r2, [r3, #4]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 80032de:	b490      	push	{r4, r7}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	789a      	ldrb	r2, [r3, #2]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	789a      	ldrb	r2, [r3, #2]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d301      	bcc.n	8003306 <u8g_page_Next+0x28>
    return 0;
 8003302:	2300      	movs	r3, #0
 8003304:	e018      	b.n	8003338 <u8g_page_Next+0x5a>
  p->page++;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	791b      	ldrb	r3, [r3, #4]
 800330a:	3301      	adds	r3, #1
 800330c:	b2da      	uxtb	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4423      	add	r3, r4
 800331c:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	429c      	cmp	r4, r3
 8003324:	d304      	bcc.n	8003330 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	785c      	ldrb	r4, [r3, #1]
    y1--;
 800332a:	4623      	mov	r3, r4
 800332c:	3b01      	subs	r3, #1
 800332e:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4622      	mov	r2, r4
 8003334:	70da      	strb	r2, [r3, #3]
  
  return 1;
 8003336:	2301      	movs	r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bc90      	pop	{r4, r7}
 8003340:	4770      	bx	lr

08003342 <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	795b      	ldrb	r3, [r3, #5]
 8003358:	461a      	mov	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4413      	add	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	60fa      	str	r2, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	d1f6      	bne.n	8003360 <u8g_pb_Clear+0x1e>
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
 800338c:	4613      	mov	r3, r2
 800338e:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	78db      	ldrb	r3, [r3, #3]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf94      	ite	ls
 800339a:	2301      	movls	r3, #1
 800339c:	2300      	movhi	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	789b      	ldrb	r3, [r3, #2]
 80033a6:	78ba      	ldrb	r2, [r7, #2]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	bf2c      	ite	cs
 80033ac:	2301      	movcs	r3, #1
 80033ae:	2300      	movcc	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	78bb      	ldrb	r3, [r7, #2]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	bf8c      	ite	hi
 80033bc:	2301      	movhi	r3, #1
 80033be:	2300      	movls	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	7bbb      	ldrb	r3, [r7, #14]
 80033cc:	4013      	ands	r3, r2
 80033ce:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 80033d0:	7bba      	ldrb	r2, [r7, #14]
 80033d2:	7b7b      	ldrb	r3, [r7, #13]
 80033d4:	4013      	ands	r3, r2
 80033d6:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 80033d8:	7b7a      	ldrb	r2, [r7, #13]
 80033da:	7b3b      	ldrb	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	7bbb      	ldrb	r3, [r7, #14]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	7b7b      	ldrb	r3, [r7, #13]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	b2db      	uxtb	r3, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	789a      	ldrb	r2, [r3, #2]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	795a      	ldrb	r2, [r3, #5]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	709a      	strb	r2, [r3, #2]
  box->x1--;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	789b      	ldrb	r3, [r3, #2]
 8003428:	3b01      	subs	r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	78da      	ldrb	r2, [r3, #3]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	70da      	strb	r2, [r3, #3]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	785b      	ldrb	r3, [r3, #1]
 8003452:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	78db      	ldrb	r3, [r3, #3]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d813      	bhi.n	8003488 <u8g_pb_Is8PixelVisible+0x44>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <u8g_pb_Is8PixelVisible+0x24>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	08003489 	.word	0x08003489
 800346c:	08003479 	.word	0x08003479
 8003470:	08003489 	.word	0x08003489
 8003474:	08003481 	.word	0x08003481
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8003478:	7bbb      	ldrb	r3, [r7, #14]
 800347a:	3308      	adds	r3, #8
 800347c:	73bb      	strb	r3, [r7, #14]
      break;
 800347e:	e003      	b.n	8003488 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3b08      	subs	r3, #8
 8003484:	73fb      	strb	r3, [r7, #15]
      break;
 8003486:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8003488:	7bba      	ldrb	r2, [r7, #14]
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	4619      	mov	r1, r3
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff76 	bl	8003380 <u8g_pb_IsYIntersection>
 8003494:	4603      	mov	r3, r0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop

080034a0 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	795a      	ldrb	r2, [r3, #5]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f7ff f893 	bl	80025e2 <u8g_WriteSequence>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 80034c6:	b490      	push	{r4, r7}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	4608      	mov	r0, r1
 80034d0:	4611      	mov	r1, r2
 80034d2:	461a      	mov	r2, r3
 80034d4:	4603      	mov	r3, r0
 80034d6:	70fb      	strb	r3, [r7, #3]
 80034d8:	460b      	mov	r3, r1
 80034da:	70bb      	strb	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	78ba      	ldrb	r2, [r7, #2]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 80034f0:	2401      	movs	r4, #1
  y &= 0x07;
 80034f2:	78bb      	ldrb	r3, [r7, #2]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 80034fa:	4622      	mov	r2, r4
 80034fc:	78bb      	ldrb	r3, [r7, #2]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	b2dc      	uxtb	r4, r3
  ptr += x;
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	4323      	orrs	r3, r4
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 800351e:	e007      	b.n	8003530 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8003520:	43e3      	mvns	r3, r4
 8003522:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4023      	ands	r3, r4
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	701a      	strb	r2, [r3, #0]
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bc90      	pop	{r4, r7}
 8003538:	4770      	bx	lr

0800353a <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	785a      	ldrb	r2, [r3, #1]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	789b      	ldrb	r3, [r3, #2]
 800354c:	429a      	cmp	r2, r3
 800354e:	d315      	bcc.n	800357c <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	785a      	ldrb	r2, [r3, #1]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	429a      	cmp	r2, r3
 800355a:	d811      	bhi.n	8003580 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	795b      	ldrb	r3, [r3, #5]
 8003564:	429a      	cmp	r2, r3
 8003566:	d20d      	bcs.n	8003584 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	7819      	ldrb	r1, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	785a      	ldrb	r2, [r3, #1]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	791b      	ldrb	r3, [r3, #4]
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff ffa6 	bl	80034c6 <u8g_pb8v1_set_pixel>
 800357a:	e004      	b.n	8003586 <u8g_pb8v1_SetPixel+0x4c>
    return;
 800357c:	bf00      	nop
 800357e:	e002      	b.n	8003586 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003580:	bf00      	nop
 8003582:	e000      	b.n	8003586 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003584:	bf00      	nop
}
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800358c:	b590      	push	{r4, r7, lr}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	78db      	ldrb	r3, [r3, #3]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d81c      	bhi.n	80035e4 <u8g_pb8v1_Set8PixelOpt2+0x58>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035c1 	.word	0x080035c1
 80035b4:	080035c9 	.word	0x080035c9
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035d9 	.word	0x080035d9
  {
    case 0: dx++; break;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
 80035c2:	3301      	adds	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e00d      	b.n	80035e4 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 1: dy++; break;
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	3301      	adds	r3, #1
 80035cc:	73bb      	strb	r3, [r7, #14]
 80035ce:	e009      	b.n	80035e4 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 2: dx--; break;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e005      	b.n	80035e4 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 3: dy--; break;
 80035d8:	7bbb      	ldrb	r3, [r7, #14]
 80035da:	3b01      	subs	r3, #1
 80035dc:	73bb      	strb	r3, [r7, #14]
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <u8g_pb8v1_Set8PixelOpt2+0x58>
  }
  
  do
 80035e2:	bf00      	nop
  {
    if ( pixel & 128 )
 80035e4:	b263      	sxtb	r3, r4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da03      	bge.n	80035f2 <u8g_pb8v1_Set8PixelOpt2+0x66>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffa4 	bl	800353a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	4413      	add	r3, r2
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	785a      	ldrb	r2, [r3, #1]
 8003604:	7bbb      	ldrb	r3, [r7, #14]
 8003606:	4413      	add	r3, r2
 8003608:	b2da      	uxtb	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 800360e:	0063      	lsls	r3, r4, #1
 8003610:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 8003612:	2c00      	cmp	r4, #0
 8003614:	d1e5      	bne.n	80035e2 <u8g_pb8v1_Set8PixelOpt2+0x56>
  
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}

08003620 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]
  switch(msg)
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	3b0a      	subs	r3, #10
 800363a:	2b3e      	cmp	r3, #62	; 0x3e
 800363c:	f200 80ba 	bhi.w	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <u8g_dev_pb8v1_base_fn+0x28>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	080037b5 	.word	0x080037b5
 800364c:	080037b5 	.word	0x080037b5
 8003650:	080037b5 	.word	0x080037b5
 8003654:	080037b5 	.word	0x080037b5
 8003658:	080037b5 	.word	0x080037b5
 800365c:	080037b5 	.word	0x080037b5
 8003660:	080037b5 	.word	0x080037b5
 8003664:	080037b5 	.word	0x080037b5
 8003668:	080037b5 	.word	0x080037b5
 800366c:	080037b5 	.word	0x080037b5
 8003670:	08003767 	.word	0x08003767
 8003674:	08003777 	.word	0x08003777
 8003678:	080037b5 	.word	0x080037b5
 800367c:	08003791 	.word	0x08003791
 8003680:	080037b5 	.word	0x080037b5
 8003684:	080037b5 	.word	0x080037b5
 8003688:	080037b5 	.word	0x080037b5
 800368c:	080037b5 	.word	0x080037b5
 8003690:	080037b5 	.word	0x080037b5
 8003694:	080037b5 	.word	0x080037b5
 8003698:	080037b5 	.word	0x080037b5
 800369c:	080037b5 	.word	0x080037b5
 80036a0:	080037b5 	.word	0x080037b5
 80036a4:	080037b5 	.word	0x080037b5
 80036a8:	080037b5 	.word	0x080037b5
 80036ac:	080037b5 	.word	0x080037b5
 80036b0:	080037b5 	.word	0x080037b5
 80036b4:	080037b5 	.word	0x080037b5
 80036b8:	080037b5 	.word	0x080037b5
 80036bc:	080037b5 	.word	0x080037b5
 80036c0:	080037b5 	.word	0x080037b5
 80036c4:	080037b5 	.word	0x080037b5
 80036c8:	080037b5 	.word	0x080037b5
 80036cc:	080037b5 	.word	0x080037b5
 80036d0:	080037b5 	.word	0x080037b5
 80036d4:	080037b5 	.word	0x080037b5
 80036d8:	080037b5 	.word	0x080037b5
 80036dc:	080037b5 	.word	0x080037b5
 80036e0:	080037b5 	.word	0x080037b5
 80036e4:	080037b5 	.word	0x080037b5
 80036e8:	0800375d 	.word	0x0800375d
 80036ec:	080037b5 	.word	0x080037b5
 80036f0:	080037b5 	.word	0x080037b5
 80036f4:	080037b5 	.word	0x080037b5
 80036f8:	080037b5 	.word	0x080037b5
 80036fc:	080037b5 	.word	0x080037b5
 8003700:	080037b5 	.word	0x080037b5
 8003704:	080037b5 	.word	0x080037b5
 8003708:	080037b5 	.word	0x080037b5
 800370c:	08003745 	.word	0x08003745
 8003710:	080037b5 	.word	0x080037b5
 8003714:	080037b5 	.word	0x080037b5
 8003718:	080037b5 	.word	0x080037b5
 800371c:	080037b5 	.word	0x080037b5
 8003720:	080037b5 	.word	0x080037b5
 8003724:	080037b5 	.word	0x080037b5
 8003728:	080037b5 	.word	0x080037b5
 800372c:	080037b5 	.word	0x080037b5
 8003730:	080037b5 	.word	0x080037b5
 8003734:	080037b5 	.word	0x080037b5
 8003738:	0800379b 	.word	0x0800379b
 800373c:	080037a5 	.word	0x080037a5
 8003740:	080037af 	.word	0x080037af
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff fe7c 	bl	8003444 <u8g_pb_Is8PixelVisible>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02f      	beq.n	80037b2 <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8003752:	6839      	ldr	r1, [r7, #0]
 8003754:	6978      	ldr	r0, [r7, #20]
 8003756:	f7ff ff19 	bl	800358c <u8g_pb8v1_Set8PixelOpt2>
      break;
 800375a:	e02a      	b.n	80037b2 <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7ff feeb 	bl	800353a <u8g_pb8v1_SetPixel>
      break;
 8003764:	e026      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 8003766:	6978      	ldr	r0, [r7, #20]
 8003768:	f7ff fdeb 	bl	8003342 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fd9b 	bl	80032aa <u8g_page_First>
      break;
 8003774:	e01e      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fdb0 	bl	80032de <u8g_page_Next>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8003784:	2300      	movs	r3, #0
 8003786:	e016      	b.n	80037b6 <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 8003788:	6978      	ldr	r0, [r7, #20]
 800378a:	f7ff fdda 	bl	8003342 <u8g_pb_Clear>
      break;
 800378e:	e011      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff fe36 	bl	8003404 <u8g_pb_GetPageBox>
      break;
 8003798:	e00c      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	795a      	ldrb	r2, [r3, #5]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	e007      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	785a      	ldrb	r2, [r3, #1]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	701a      	strb	r2, [r3, #0]
      break;
 80037ac:	e002      	b.n	80037b4 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e001      	b.n	80037b6 <u8g_dev_pb8v1_base_fn+0x196>
      break;
 80037b2:	bf00      	nop
  }
  return 1;
 80037b4:	2301      	movs	r3, #1
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop

080037c0 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4603      	mov	r3, r0
 80037d0:	70fb      	strb	r3, [r7, #3]
 80037d2:	460b      	mov	r3, r1
 80037d4:	70bb      	strb	r3, [r7, #2]
 80037d6:	4613      	mov	r3, r2
 80037d8:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 80037da:	23ff      	movs	r3, #255	; 0xff
 80037dc:	73fb      	strb	r3, [r7, #15]
  while( w >= 8 )
 80037de:	e00d      	b.n	80037fc <u8g_draw_hline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 80037e0:	78ba      	ldrb	r2, [r7, #2]
 80037e2:	78f9      	ldrb	r1, [r7, #3]
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fd30 	bl	8003250 <u8g_Draw8Pixel>
    w-=8;
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	3b08      	subs	r3, #8
 80037f4:	707b      	strb	r3, [r7, #1]
    x+=8;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	3308      	adds	r3, #8
 80037fa:	70fb      	strb	r3, [r7, #3]
  while( w >= 8 )
 80037fc:	787b      	ldrb	r3, [r7, #1]
 80037fe:	2b07      	cmp	r3, #7
 8003800:	d8ee      	bhi.n	80037e0 <u8g_draw_hline+0x20>
  }
  if ( w != 0 )
 8003802:	787b      	ldrb	r3, [r7, #1]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d015      	beq.n	8003834 <u8g_draw_hline+0x74>
  {
    w ^=7;
 8003808:	787b      	ldrb	r3, [r7, #1]
 800380a:	f083 0307 	eor.w	r3, r3, #7
 800380e:	707b      	strb	r3, [r7, #1]
    w++;
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	3301      	adds	r3, #1
 8003814:	707b      	strb	r3, [r7, #1]
    pixel <<= w&7;
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	787b      	ldrb	r3, [r7, #1]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003824:	78ba      	ldrb	r2, [r7, #2]
 8003826:	78f9      	ldrb	r1, [r7, #3]
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fd0e 	bl	8003250 <u8g_Draw8Pixel>
  }
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	70fb      	strb	r3, [r7, #3]
 800384e:	460b      	mov	r3, r1
 8003850:	70bb      	strb	r3, [r7, #2]
 8003852:	4613      	mov	r3, r2
 8003854:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 8003856:	23ff      	movs	r3, #255	; 0xff
 8003858:	73fb      	strb	r3, [r7, #15]
  while( h >= 8 )
 800385a:	e00d      	b.n	8003878 <u8g_draw_vline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 800385c:	78ba      	ldrb	r2, [r7, #2]
 800385e:	78f9      	ldrb	r1, [r7, #3]
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2301      	movs	r3, #1
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fcf2 	bl	8003250 <u8g_Draw8Pixel>
    h-=8;
 800386c:	787b      	ldrb	r3, [r7, #1]
 800386e:	3b08      	subs	r3, #8
 8003870:	707b      	strb	r3, [r7, #1]
    y+=8;
 8003872:	78bb      	ldrb	r3, [r7, #2]
 8003874:	3308      	adds	r3, #8
 8003876:	70bb      	strb	r3, [r7, #2]
  while( h >= 8 )
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b07      	cmp	r3, #7
 800387c:	d8ee      	bhi.n	800385c <u8g_draw_vline+0x20>
  }
  if ( h != 0 )
 800387e:	787b      	ldrb	r3, [r7, #1]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d015      	beq.n	80038b0 <u8g_draw_vline+0x74>
  {
    h ^=7;
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	f083 0307 	eor.w	r3, r3, #7
 800388a:	707b      	strb	r3, [r7, #1]
    h++;
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	3301      	adds	r3, #1
 8003890:	707b      	strb	r3, [r7, #1]
    pixel <<= h&7;
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 80038a0:	78ba      	ldrb	r2, [r7, #2]
 80038a2:	78f9      	ldrb	r1, [r7, #3]
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fcd0 	bl	8003250 <u8g_Draw8Pixel>
  }
}
 80038b0:	bf00      	nop
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	70fb      	strb	r3, [r7, #3]
 80038ca:	460b      	mov	r3, r1
 80038cc:	70bb      	strb	r3, [r7, #2]
 80038ce:	4613      	mov	r3, r2
 80038d0:	707b      	strb	r3, [r7, #1]
  u8g_uint_t xtmp = x;
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	73fb      	strb	r3, [r7, #15]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 80038d6:	7878      	ldrb	r0, [r7, #1]
 80038d8:	78ba      	ldrb	r2, [r7, #2]
 80038da:	78f9      	ldrb	r1, [r7, #3]
 80038dc:	7e3b      	ldrb	r3, [r7, #24]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	4603      	mov	r3, r0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe fd98 	bl	8002418 <u8g_IsBBXIntersection>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d026      	beq.n	800393c <u8g_DrawFrame+0x84>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
 80038ee:	787b      	ldrb	r3, [r7, #1]
 80038f0:	78ba      	ldrb	r2, [r7, #2]
 80038f2:	78f9      	ldrb	r1, [r7, #3]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff63 	bl	80037c0 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
 80038fa:	7e3b      	ldrb	r3, [r7, #24]
 80038fc:	78ba      	ldrb	r2, [r7, #2]
 80038fe:	78f9      	ldrb	r1, [r7, #3]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff9b 	bl	800383c <u8g_draw_vline>
  x+=w;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	787b      	ldrb	r3, [r7, #1]
 800390a:	4413      	add	r3, r2
 800390c:	70fb      	strb	r3, [r7, #3]
  x--;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	3b01      	subs	r3, #1
 8003912:	70fb      	strb	r3, [r7, #3]
  u8g_draw_vline(u8g, x, y, h);
 8003914:	7e3b      	ldrb	r3, [r7, #24]
 8003916:	78ba      	ldrb	r2, [r7, #2]
 8003918:	78f9      	ldrb	r1, [r7, #3]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ff8e 	bl	800383c <u8g_draw_vline>
  y+=h;
 8003920:	78ba      	ldrb	r2, [r7, #2]
 8003922:	7e3b      	ldrb	r3, [r7, #24]
 8003924:	4413      	add	r3, r2
 8003926:	70bb      	strb	r3, [r7, #2]
  y--;
 8003928:	78bb      	ldrb	r3, [r7, #2]
 800392a:	3b01      	subs	r3, #1
 800392c:	70bb      	strb	r3, [r7, #2]
  u8g_draw_hline(u8g, xtmp, y, w);
 800392e:	787b      	ldrb	r3, [r7, #1]
 8003930:	78ba      	ldrb	r2, [r7, #2]
 8003932:	7bf9      	ldrb	r1, [r7, #15]
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff43 	bl	80037c0 <u8g_draw_hline>
 800393a:	e000      	b.n	800393e <u8g_DrawFrame+0x86>
    return;
 800393c:	bf00      	nop
}
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	4608      	mov	r0, r1
 800394e:	4611      	mov	r1, r2
 8003950:	461a      	mov	r2, r3
 8003952:	4603      	mov	r3, r0
 8003954:	70fb      	strb	r3, [r7, #3]
 8003956:	460b      	mov	r3, r1
 8003958:	70bb      	strb	r3, [r7, #2]
 800395a:	4613      	mov	r3, r2
 800395c:	707b      	strb	r3, [r7, #1]
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
 800395e:	787b      	ldrb	r3, [r7, #1]
 8003960:	78ba      	ldrb	r2, [r7, #2]
 8003962:	78f9      	ldrb	r1, [r7, #3]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff2b 	bl	80037c0 <u8g_draw_hline>
    y++;    
 800396a:	78bb      	ldrb	r3, [r7, #2]
 800396c:	3301      	adds	r3, #1
 800396e:	70bb      	strb	r3, [r7, #2]
    h--;
 8003970:	7c3b      	ldrb	r3, [r7, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	743b      	strb	r3, [r7, #16]
  } while( h != 0 );
 8003976:	7c3b      	ldrb	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <u8g_draw_box+0x1a>
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800399c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039a2:	e003      	b.n	80039ac <LoopCopyDataInit>

080039a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039aa:	3104      	adds	r1, #4

080039ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039b4:	d3f6      	bcc.n	80039a4 <CopyDataInit>
  ldr  r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039b8:	e002      	b.n	80039c0 <LoopFillZerobss>

080039ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039bc:	f842 3b04 	str.w	r3, [r2], #4

080039c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039c0:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039c4:	d3f9      	bcc.n	80039ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039c6:	f7fe fb99 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f003 fae1 	bl	8006f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ce:	f7fd ff9f 	bl	8001910 <main>
  bx  lr    
 80039d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039d4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80039d8:	0800f04c 	.word	0x0800f04c
  ldr  r0, =_sdata
 80039dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039e0:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 80039e4:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80039e8:	20000484 	.word	0x20000484

080039ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC_IRQHandler>
	...

080039f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_Init+0x40>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <HAL_Init+0x40>)
 80039fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_Init+0x40>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_Init+0x40>)
 8003a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_Init+0x40>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <HAL_Init+0x40>)
 8003a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f000 fd41 	bl	80044a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f000 f808 	bl	8003a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a24:	f7fe fa4e 	bl	8001ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023c00 	.word	0x40023c00

08003a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a3c:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_InitTick+0x54>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_InitTick+0x58>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd59 	bl	800450a <HAL_SYSTICK_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00e      	b.n	8003a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b0f      	cmp	r3, #15
 8003a66:	d80a      	bhi.n	8003a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f000 fd21 	bl	80044b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a74:	4a06      	ldr	r2, [pc, #24]	; (8003a90 <HAL_InitTick+0x5c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	20000020 	.word	0x20000020
 8003a90:	2000001c 	.word	0x2000001c

08003a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_IncTick+0x20>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_IncTick+0x24>)
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000020 	.word	0x20000020
 8003ab8:	20000470 	.word	0x20000470

08003abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_GetTick+0x14>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000470 	.word	0x20000470

08003ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff ffee 	bl	8003abc <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d005      	beq.n	8003afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_Delay+0x44>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003afa:	bf00      	nop
 8003afc:	f7ff ffde 	bl	8003abc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d8f7      	bhi.n	8003afc <HAL_Delay+0x28>
  {
  }
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000020 	.word	0x20000020

08003b1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e033      	b.n	8003b9a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7fd fcec 	bl	8001518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d118      	bne.n	8003b8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b62:	f023 0302 	bic.w	r3, r3, #2
 8003b66:	f043 0202 	orr.w	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fa48 	bl	8004004 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	641a      	str	r2, [r3, #64]	; 0x40
 8003b8a:	e001      	b.n	8003b90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_Start_DMA+0x1e>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e0ce      	b.n	8003d60 <HAL_ADC_Start_DMA+0x1bc>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d018      	beq.n	8003c0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003be8:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <HAL_ADC_Start_DMA+0x1c4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a5f      	ldr	r2, [pc, #380]	; (8003d6c <HAL_ADC_Start_DMA+0x1c8>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	0c9a      	lsrs	r2, r3, #18
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bfc:	e002      	b.n	8003c04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f9      	bne.n	8003bfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c18:	d107      	bne.n	8003c2a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c28:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 8086 	bne.w	8003d46 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d106      	bne.n	8003c88 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f023 0206 	bic.w	r2, r3, #6
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
 8003c86:	e002      	b.n	8003c8e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c96:	4b36      	ldr	r3, [pc, #216]	; (8003d70 <HAL_ADC_Start_DMA+0x1cc>)
 8003c98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	4a35      	ldr	r2, [pc, #212]	; (8003d74 <HAL_ADC_Start_DMA+0x1d0>)
 8003ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	4a34      	ldr	r2, [pc, #208]	; (8003d78 <HAL_ADC_Start_DMA+0x1d4>)
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <HAL_ADC_Start_DMA+0x1d8>)
 8003cb0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003cba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003cca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cda:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	334c      	adds	r3, #76	; 0x4c
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f000 fcc8 	bl	8004680 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d129      	bne.n	8003d5e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	e020      	b.n	8003d5e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <HAL_ADC_Start_DMA+0x1dc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d11b      	bne.n	8003d5e <HAL_ADC_Start_DMA+0x1ba>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d114      	bne.n	8003d5e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	e00b      	b.n	8003d5e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	431bde83 	.word	0x431bde83
 8003d70:	40012300 	.word	0x40012300
 8003d74:	080041fd 	.word	0x080041fd
 8003d78:	080042b7 	.word	0x080042b7
 8003d7c:	080042d3 	.word	0x080042d3
 8003d80:	40012000 	.word	0x40012000

08003d84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e105      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x228>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b09      	cmp	r3, #9
 8003dea:	d925      	bls.n	8003e38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68d9      	ldr	r1, [r3, #12]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b1e      	subs	r3, #30
 8003e02:	2207      	movs	r2, #7
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43da      	mvns	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	400a      	ands	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	4618      	mov	r0, r3
 8003e24:	4603      	mov	r3, r0
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4403      	add	r3, r0
 8003e2a:	3b1e      	subs	r3, #30
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	e022      	b.n	8003e7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6919      	ldr	r1, [r3, #16]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43da      	mvns	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	400a      	ands	r2, r1
 8003e5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4403      	add	r3, r0
 8003e74:	409a      	lsls	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d824      	bhi.n	8003ed0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	3b05      	subs	r3, #5
 8003e98:	221f      	movs	r2, #31
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b05      	subs	r3, #5
 8003ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ece:	e04c      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b0c      	cmp	r3, #12
 8003ed6:	d824      	bhi.n	8003f22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3b23      	subs	r3, #35	; 0x23
 8003eea:	221f      	movs	r2, #31
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43da      	mvns	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	400a      	ands	r2, r1
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	3b23      	subs	r3, #35	; 0x23
 8003f14:	fa00 f203 	lsl.w	r2, r0, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f20:	e023      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	3b41      	subs	r3, #65	; 0x41
 8003f34:	221f      	movs	r2, #31
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	400a      	ands	r2, r1
 8003f42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4618      	mov	r0, r3
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3b41      	subs	r3, #65	; 0x41
 8003f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <HAL_ADC_ConfigChannel+0x234>)
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <HAL_ADC_ConfigChannel+0x238>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d109      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x1cc>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b12      	cmp	r3, #18
 8003f7e:	d105      	bne.n	8003f8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a19      	ldr	r2, [pc, #100]	; (8003ff8 <HAL_ADC_ConfigChannel+0x238>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d123      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x21e>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d003      	beq.n	8003fa6 <HAL_ADC_ConfigChannel+0x1e6>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b11      	cmp	r3, #17
 8003fa4:	d11b      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d111      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <HAL_ADC_ConfigChannel+0x23c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_ADC_ConfigChannel+0x240>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	0c9a      	lsrs	r2, r3, #18
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fd0:	e002      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f9      	bne.n	8003fd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	40012300 	.word	0x40012300
 8003ff8:	40012000 	.word	0x40012000
 8003ffc:	20000000 	.word	0x20000000
 8004000:	431bde83 	.word	0x431bde83

08004004 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800400c:	4b79      	ldr	r3, [pc, #484]	; (80041f4 <ADC_Init+0x1f0>)
 800400e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	021a      	lsls	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800405c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	4a58      	ldr	r2, [pc, #352]	; (80041f8 <ADC_Init+0x1f4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6899      	ldr	r1, [r3, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	e00f      	b.n	8004102 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004100:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0202 	bic.w	r2, r2, #2
 8004110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7e1b      	ldrb	r3, [r3, #24]
 800411c:	005a      	lsls	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800414e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6859      	ldr	r1, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	3b01      	subs	r3, #1
 800415c:	035a      	lsls	r2, r3, #13
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	e007      	b.n	8004178 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004176:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	3b01      	subs	r3, #1
 8004194:	051a      	lsls	r2, r3, #20
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041ba:	025a      	lsls	r2, r3, #9
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6899      	ldr	r1, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	029a      	lsls	r2, r3, #10
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	40012300 	.word	0x40012300
 80041f8:	0f000001 	.word	0x0f000001

080041fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004212:	2b00      	cmp	r3, #0
 8004214:	d13c      	bne.n	8004290 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d12b      	bne.n	8004288 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	d127      	bne.n	8004288 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004250:	2b00      	cmp	r3, #0
 8004252:	d119      	bne.n	8004288 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0220 	bic.w	r2, r2, #32
 8004262:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff fd7b 	bl	8003d84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800428e:	e00e      	b.n	80042ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fd85 	bl	8003dac <HAL_ADC_ErrorCallback>
}
 80042a2:	e004      	b.n	80042ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fd67 	bl	8003d98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2240      	movs	r2, #64	; 0x40
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fd5a 	bl	8003dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3b01      	subs	r3, #1
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d301      	bcc.n	8004472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800446e:	2301      	movs	r3, #1
 8004470:	e00f      	b.n	8004492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <SysTick_Config+0x40>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3b01      	subs	r3, #1
 8004478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800447a:	210f      	movs	r1, #15
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	f7ff ff8e 	bl	80043a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <SysTick_Config+0x40>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <SysTick_Config+0x40>)
 800448c:	2207      	movs	r2, #7
 800448e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000e010 	.word	0xe000e010

080044a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ff29 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044c8:	f7ff ff3e 	bl	8004348 <__NVIC_GetPriorityGrouping>
 80044cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6978      	ldr	r0, [r7, #20]
 80044d4:	f7ff ff8e 	bl	80043f4 <NVIC_EncodePriority>
 80044d8:	4602      	mov	r2, r0
 80044da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff5d 	bl	80043a0 <__NVIC_SetPriority>
}
 80044e6:	bf00      	nop
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	4603      	mov	r3, r0
 80044f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff31 	bl	8004364 <__NVIC_EnableIRQ>
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff ffa2 	bl	800445c <SysTick_Config>
 8004518:	4603      	mov	r3, r0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7ff fac4 	bl	8003abc <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e099      	b.n	8004674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004560:	e00f      	b.n	8004582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004562:	f7ff faab 	bl	8003abc <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b05      	cmp	r3, #5
 800456e:	d908      	bls.n	8004582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e078      	b.n	8004674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e8      	bne.n	8004562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_DMA_Init+0x158>)
 800459c:	4013      	ands	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d107      	bne.n	80045ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4313      	orrs	r3, r2
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b04      	cmp	r3, #4
 8004614:	d117      	bne.n	8004646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00e      	beq.n	8004646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fa6f 	bl	8004b0c <DMA_CheckFifoParam>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2240      	movs	r2, #64	; 0x40
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004642:	2301      	movs	r3, #1
 8004644:	e016      	b.n	8004674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa26 	bl	8004aa0 <DMA_CalcBaseAndBitshift>
 8004654:	4603      	mov	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465c:	223f      	movs	r2, #63	; 0x3f
 800465e:	409a      	lsls	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	f010803f 	.word	0xf010803f

08004680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_DMA_Start_IT+0x26>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e040      	b.n	8004728 <HAL_DMA_Start_IT+0xa8>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d12f      	bne.n	800471a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2202      	movs	r2, #2
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f9b8 	bl	8004a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	223f      	movs	r2, #63	; 0x3f
 80046da:	409a      	lsls	r2, r3
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0216 	orr.w	r2, r2, #22
 80046ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d007      	beq.n	8004708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0208 	orr.w	r2, r2, #8
 8004706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	e005      	b.n	8004726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800473c:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_DMA_IRQHandler+0x258>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a92      	ldr	r2, [pc, #584]	; (800498c <HAL_DMA_IRQHandler+0x25c>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0a9b      	lsrs	r3, r3, #10
 8004748:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	2208      	movs	r2, #8
 800475c:	409a      	lsls	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01a      	beq.n	800479c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d013      	beq.n	800479c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0204 	bic.w	r2, r2, #4
 8004782:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	2208      	movs	r2, #8
 800478a:	409a      	lsls	r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	2201      	movs	r2, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d012      	beq.n	80047d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	2201      	movs	r2, #1
 80047c0:	409a      	lsls	r2, r3
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	2204      	movs	r2, #4
 80047d8:	409a      	lsls	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d012      	beq.n	8004808 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	2204      	movs	r2, #4
 80047f6:	409a      	lsls	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004800:	f043 0204 	orr.w	r2, r3, #4
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	2210      	movs	r2, #16
 800480e:	409a      	lsls	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d043      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03c      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800482a:	2210      	movs	r2, #16
 800482c:	409a      	lsls	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d108      	bne.n	8004860 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d024      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
 800485e:	e01f      	b.n	80048a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01b      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	4798      	blx	r3
 8004870:	e016      	b.n	80048a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0208 	bic.w	r2, r2, #8
 800488e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	2220      	movs	r2, #32
 80048a6:	409a      	lsls	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 808e 	beq.w	80049ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8086 	beq.w	80049ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	2220      	movs	r2, #32
 80048c8:	409a      	lsls	r2, r3
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b05      	cmp	r3, #5
 80048d8:	d136      	bne.n	8004948 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0216 	bic.w	r2, r2, #22
 80048e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_DMA_IRQHandler+0x1da>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0208 	bic.w	r2, r2, #8
 8004918:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	223f      	movs	r2, #63	; 0x3f
 8004920:	409a      	lsls	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493a:	2b00      	cmp	r3, #0
 800493c:	d07d      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	4798      	blx	r3
        }
        return;
 8004946:	e078      	b.n	8004a3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01c      	beq.n	8004990 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	2b00      	cmp	r3, #0
 800496a:	d030      	beq.n	80049ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
 8004974:	e02b      	b.n	80049ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d027      	beq.n	80049ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e022      	b.n	80049ce <HAL_DMA_IRQHandler+0x29e>
 8004988:	20000000 	.word	0x20000000
 800498c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0210 	bic.w	r2, r2, #16
 80049ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d032      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d022      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2205      	movs	r2, #5
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0201 	bic.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d307      	bcc.n	8004a16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f2      	bne.n	80049fa <HAL_DMA_IRQHandler+0x2ca>
 8004a14:	e000      	b.n	8004a18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a3a:	bf00      	nop
    }
  }
}
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b40      	cmp	r3, #64	; 0x40
 8004a70:	d108      	bne.n	8004a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a82:	e007      	b.n	8004a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	3b10      	subs	r3, #16
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <DMA_CalcBaseAndBitshift+0x64>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004aba:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <DMA_CalcBaseAndBitshift+0x68>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d909      	bls.n	8004ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	1d1a      	adds	r2, r3, #4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	659a      	str	r2, [r3, #88]	; 0x58
 8004ae0:	e007      	b.n	8004af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	aaaaaaab 	.word	0xaaaaaaab
 8004b08:	0800ec50 	.word	0x0800ec50

08004b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11f      	bne.n	8004b66 <DMA_CheckFifoParam+0x5a>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d856      	bhi.n	8004bda <DMA_CheckFifoParam+0xce>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <DMA_CheckFifoParam+0x28>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b57 	.word	0x08004b57
 8004b3c:	08004b45 	.word	0x08004b45
 8004b40:	08004bdb 	.word	0x08004bdb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d046      	beq.n	8004bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e043      	b.n	8004bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b5e:	d140      	bne.n	8004be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b64:	e03d      	b.n	8004be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6e:	d121      	bne.n	8004bb4 <DMA_CheckFifoParam+0xa8>
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d837      	bhi.n	8004be6 <DMA_CheckFifoParam+0xda>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <DMA_CheckFifoParam+0x70>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b93 	.word	0x08004b93
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004ba5 	.word	0x08004ba5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e030      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d025      	beq.n	8004bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba2:	e022      	b.n	8004bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bac:	d11f      	bne.n	8004bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bb2:	e01c      	b.n	8004bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d903      	bls.n	8004bc2 <DMA_CheckFifoParam+0xb6>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d003      	beq.n	8004bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bc0:	e018      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc6:	e015      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00e      	beq.n	8004bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	e00b      	b.n	8004bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e00a      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bde:	bf00      	nop
 8004be0:	e008      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be2:	bf00      	nop
 8004be4:	e006      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8004be6:	bf00      	nop
 8004be8:	e004      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8004bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop

08004c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b089      	sub	sp, #36	; 0x24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e159      	b.n	8004ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c20:	2201      	movs	r2, #1
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4013      	ands	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	f040 8148 	bne.w	8004ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d005      	beq.n	8004c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d130      	bne.n	8004cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 0201 	and.w	r2, r3, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 0303 	and.w	r3, r3, #3
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d017      	beq.n	8004cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	2203      	movs	r2, #3
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d123      	bne.n	8004d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	08da      	lsrs	r2, r3, #3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3208      	adds	r2, #8
 8004d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	220f      	movs	r2, #15
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	08da      	lsrs	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3208      	adds	r2, #8
 8004d42:	69b9      	ldr	r1, [r7, #24]
 8004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 80a2 	beq.w	8004ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b57      	ldr	r3, [pc, #348]	; (8004eec <HAL_GPIO_Init+0x2e8>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	4a56      	ldr	r2, [pc, #344]	; (8004eec <HAL_GPIO_Init+0x2e8>)
 8004d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d98:	6453      	str	r3, [r2, #68]	; 0x44
 8004d9a:	4b54      	ldr	r3, [pc, #336]	; (8004eec <HAL_GPIO_Init+0x2e8>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004da6:	4a52      	ldr	r2, [pc, #328]	; (8004ef0 <HAL_GPIO_Init+0x2ec>)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	3302      	adds	r3, #2
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a49      	ldr	r2, [pc, #292]	; (8004ef4 <HAL_GPIO_Init+0x2f0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d019      	beq.n	8004e06 <HAL_GPIO_Init+0x202>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a48      	ldr	r2, [pc, #288]	; (8004ef8 <HAL_GPIO_Init+0x2f4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <HAL_GPIO_Init+0x1fe>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a47      	ldr	r2, [pc, #284]	; (8004efc <HAL_GPIO_Init+0x2f8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00d      	beq.n	8004dfe <HAL_GPIO_Init+0x1fa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a46      	ldr	r2, [pc, #280]	; (8004f00 <HAL_GPIO_Init+0x2fc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d007      	beq.n	8004dfa <HAL_GPIO_Init+0x1f6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a45      	ldr	r2, [pc, #276]	; (8004f04 <HAL_GPIO_Init+0x300>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_GPIO_Init+0x1f2>
 8004df2:	2304      	movs	r3, #4
 8004df4:	e008      	b.n	8004e08 <HAL_GPIO_Init+0x204>
 8004df6:	2307      	movs	r3, #7
 8004df8:	e006      	b.n	8004e08 <HAL_GPIO_Init+0x204>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e004      	b.n	8004e08 <HAL_GPIO_Init+0x204>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e002      	b.n	8004e08 <HAL_GPIO_Init+0x204>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_GPIO_Init+0x204>
 8004e06:	2300      	movs	r3, #0
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f002 0203 	and.w	r2, r2, #3
 8004e0e:	0092      	lsls	r2, r2, #2
 8004e10:	4093      	lsls	r3, r2
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e18:	4935      	ldr	r1, [pc, #212]	; (8004ef0 <HAL_GPIO_Init+0x2ec>)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e26:	4b38      	ldr	r3, [pc, #224]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e4a:	4a2f      	ldr	r2, [pc, #188]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e50:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e74:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e7a:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea4:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec8:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <HAL_GPIO_Init+0x304>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	f67f aea2 	bls.w	8004c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40020400 	.word	0x40020400
 8004efc:	40020800 	.word	0x40020800
 8004f00:	40020c00 	.word	0x40020c00
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40013c00 	.word	0x40013c00

08004f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f58:	e003      	b.n	8004f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f5a:	887b      	ldrh	r3, [r7, #2]
 8004f5c:	041a      	lsls	r2, r3, #16
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	619a      	str	r2, [r3, #24]
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f86:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fc f902 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40013c00 	.word	0x40013c00

08004fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e12b      	b.n	800520a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fc fc26 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2224      	movs	r2, #36	; 0x24
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0201 	bic.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005004:	f001 f862 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8005008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4a81      	ldr	r2, [pc, #516]	; (8005214 <HAL_I2C_Init+0x274>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d807      	bhi.n	8005024 <HAL_I2C_Init+0x84>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a80      	ldr	r2, [pc, #512]	; (8005218 <HAL_I2C_Init+0x278>)
 8005018:	4293      	cmp	r3, r2
 800501a:	bf94      	ite	ls
 800501c:	2301      	movls	r3, #1
 800501e:	2300      	movhi	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e006      	b.n	8005032 <HAL_I2C_Init+0x92>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4a7d      	ldr	r2, [pc, #500]	; (800521c <HAL_I2C_Init+0x27c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	bf94      	ite	ls
 800502c:	2301      	movls	r3, #1
 800502e:	2300      	movhi	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0e7      	b.n	800520a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a78      	ldr	r2, [pc, #480]	; (8005220 <HAL_I2C_Init+0x280>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0c9b      	lsrs	r3, r3, #18
 8005044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a6a      	ldr	r2, [pc, #424]	; (8005214 <HAL_I2C_Init+0x274>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d802      	bhi.n	8005074 <HAL_I2C_Init+0xd4>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	3301      	adds	r3, #1
 8005072:	e009      	b.n	8005088 <HAL_I2C_Init+0xe8>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	4a69      	ldr	r2, [pc, #420]	; (8005224 <HAL_I2C_Init+0x284>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	099b      	lsrs	r3, r3, #6
 8005086:	3301      	adds	r3, #1
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	430b      	orrs	r3, r1
 800508e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800509a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	495c      	ldr	r1, [pc, #368]	; (8005214 <HAL_I2C_Init+0x274>)
 80050a4:	428b      	cmp	r3, r1
 80050a6:	d819      	bhi.n	80050dc <HAL_I2C_Init+0x13c>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1e59      	subs	r1, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050bc:	400b      	ands	r3, r1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_I2C_Init+0x138>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1e59      	subs	r1, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80050d0:	3301      	adds	r3, #1
 80050d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d6:	e051      	b.n	800517c <HAL_I2C_Init+0x1dc>
 80050d8:	2304      	movs	r3, #4
 80050da:	e04f      	b.n	800517c <HAL_I2C_Init+0x1dc>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d111      	bne.n	8005108 <HAL_I2C_Init+0x168>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1e58      	subs	r0, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6859      	ldr	r1, [r3, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	440b      	add	r3, r1
 80050f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050f6:	3301      	adds	r3, #1
 80050f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	e012      	b.n	800512e <HAL_I2C_Init+0x18e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1e58      	subs	r0, r3, #1
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	0099      	lsls	r1, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	fbb0 f3f3 	udiv	r3, r0, r3
 800511e:	3301      	adds	r3, #1
 8005120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005124:	2b00      	cmp	r3, #0
 8005126:	bf0c      	ite	eq
 8005128:	2301      	moveq	r3, #1
 800512a:	2300      	movne	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Init+0x196>
 8005132:	2301      	movs	r3, #1
 8005134:	e022      	b.n	800517c <HAL_I2C_Init+0x1dc>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10e      	bne.n	800515c <HAL_I2C_Init+0x1bc>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1e58      	subs	r0, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6859      	ldr	r1, [r3, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	440b      	add	r3, r1
 800514c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005150:	3301      	adds	r3, #1
 8005152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515a:	e00f      	b.n	800517c <HAL_I2C_Init+0x1dc>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1e58      	subs	r0, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	0099      	lsls	r1, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005172:	3301      	adds	r3, #1
 8005174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	6809      	ldr	r1, [r1, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69da      	ldr	r2, [r3, #28]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6911      	ldr	r1, [r2, #16]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	4311      	orrs	r1, r2
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695a      	ldr	r2, [r3, #20]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2220      	movs	r2, #32
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	000186a0 	.word	0x000186a0
 8005218:	001e847f 	.word	0x001e847f
 800521c:	003d08ff 	.word	0x003d08ff
 8005220:	431bde83 	.word	0x431bde83
 8005224:	10624dd3 	.word	0x10624dd3

08005228 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	461a      	mov	r2, r3
 8005234:	460b      	mov	r3, r1
 8005236:	817b      	strh	r3, [r7, #10]
 8005238:	4613      	mov	r3, r2
 800523a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800523c:	f7fe fc3e 	bl	8003abc <HAL_GetTick>
 8005240:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b20      	cmp	r3, #32
 800524c:	f040 80e0 	bne.w	8005410 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	2319      	movs	r3, #25
 8005256:	2201      	movs	r2, #1
 8005258:	4970      	ldr	r1, [pc, #448]	; (800541c <HAL_I2C_Master_Transmit+0x1f4>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f964 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005266:	2302      	movs	r3, #2
 8005268:	e0d3      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2C_Master_Transmit+0x50>
 8005274:	2302      	movs	r3, #2
 8005276:	e0cc      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b01      	cmp	r3, #1
 800528c:	d007      	beq.n	800529e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2221      	movs	r2, #33	; 0x21
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2210      	movs	r2, #16
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	893a      	ldrh	r2, [r7, #8]
 80052ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a50      	ldr	r2, [pc, #320]	; (8005420 <HAL_I2C_Master_Transmit+0x1f8>)
 80052de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80052e0:	8979      	ldrh	r1, [r7, #10]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 f89c 	bl	8005424 <I2C_MasterRequestWrite>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e08d      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f6:	2300      	movs	r3, #0
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	613b      	str	r3, [r7, #16]
 800530a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800530c:	e066      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	6a39      	ldr	r1, [r7, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9de 	bl	80056d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b04      	cmp	r3, #4
 8005324:	d107      	bne.n	8005336 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e06b      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d11b      	bne.n	80053b0 <HAL_I2C_Master_Transmit+0x188>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d017      	beq.n	80053b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	781a      	ldrb	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	6a39      	ldr	r1, [r7, #32]
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f000 f9ce 	bl	8005756 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00d      	beq.n	80053dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d107      	bne.n	80053d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e01a      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d194      	bne.n	800530e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	00100002 	.word	0x00100002
 8005420:	ffff0000 	.word	0xffff0000

08005424 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	460b      	mov	r3, r1
 8005432:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d006      	beq.n	800544e <I2C_MasterRequestWrite+0x2a>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d003      	beq.n	800544e <I2C_MasterRequestWrite+0x2a>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800544c:	d108      	bne.n	8005460 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e00b      	b.n	8005478 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	2b12      	cmp	r3, #18
 8005466:	d107      	bne.n	8005478 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005476:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f84f 	bl	8005528 <I2C_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549e:	d103      	bne.n	80054a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e035      	b.n	8005518 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b4:	d108      	bne.n	80054c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c4:	611a      	str	r2, [r3, #16]
 80054c6:	e01b      	b.n	8005500 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054c8:	897b      	ldrh	r3, [r7, #10]
 80054ca:	11db      	asrs	r3, r3, #7
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0306 	and.w	r3, r3, #6
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f063 030f 	orn	r3, r3, #15
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	490e      	ldr	r1, [pc, #56]	; (8005520 <I2C_MasterRequestWrite+0xfc>)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 f875 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e010      	b.n	8005518 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054f6:	897b      	ldrh	r3, [r7, #10]
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	4907      	ldr	r1, [pc, #28]	; (8005524 <I2C_MasterRequestWrite+0x100>)
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f865 	bl	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	00010008 	.word	0x00010008
 8005524:	00010002 	.word	0x00010002

08005528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005538:	e025      	b.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d021      	beq.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005542:	f7fe fabb 	bl	8003abc <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d302      	bcc.n	8005558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d116      	bne.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f043 0220 	orr.w	r2, r3, #32
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e023      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10d      	bne.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	43da      	mvns	r2, r3
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4013      	ands	r3, r2
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	bf0c      	ite	eq
 80055a2:	2301      	moveq	r3, #1
 80055a4:	2300      	movne	r3, #0
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	e00c      	b.n	80055c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	43da      	mvns	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0b6      	beq.n	800553a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055e4:	e051      	b.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f4:	d123      	bne.n	800563e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005604:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e046      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d021      	beq.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005646:	f7fe fa39 	bl	8003abc <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	429a      	cmp	r2, r3
 8005654:	d302      	bcc.n	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d116      	bne.n	800568a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f043 0220 	orr.w	r2, r3, #32
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e020      	b.n	80056cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10c      	bne.n	80056ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	43da      	mvns	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4013      	ands	r3, r2
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	e00b      	b.n	80056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	43da      	mvns	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d18d      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056e0:	e02d      	b.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f878 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e02d      	b.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f8:	d021      	beq.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fe f9df 	bl	8003abc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	f043 0220 	orr.w	r2, r3, #32
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d1ca      	bne.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005762:	e02d      	b.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f837 	bl	80057d8 <I2C_IsAcknowledgeFailed>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e02d      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577a:	d021      	beq.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800577c:	f7fe f99e 	bl	8003abc <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d302      	bcc.n	8005792 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	f043 0220 	orr.w	r2, r3, #32
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e007      	b.n	80057d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d1ca      	bne.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ee:	d11b      	bne.n	8005828 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e264      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d075      	beq.n	8005942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005856:	4ba3      	ldr	r3, [pc, #652]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b04      	cmp	r3, #4
 8005860:	d00c      	beq.n	800587c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005862:	4ba0      	ldr	r3, [pc, #640]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800586a:	2b08      	cmp	r3, #8
 800586c:	d112      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800586e:	4b9d      	ldr	r3, [pc, #628]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587a:	d10b      	bne.n	8005894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800587c:	4b99      	ldr	r3, [pc, #612]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05b      	beq.n	8005940 <HAL_RCC_OscConfig+0x108>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d157      	bne.n	8005940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e23f      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589c:	d106      	bne.n	80058ac <HAL_RCC_OscConfig+0x74>
 800589e:	4b91      	ldr	r3, [pc, #580]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a90      	ldr	r2, [pc, #576]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e01d      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x98>
 80058b6:	4b8b      	ldr	r3, [pc, #556]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a8a      	ldr	r2, [pc, #552]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	4b88      	ldr	r3, [pc, #544]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a87      	ldr	r2, [pc, #540]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0xb0>
 80058d0:	4b84      	ldr	r3, [pc, #528]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a83      	ldr	r2, [pc, #524]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b81      	ldr	r3, [pc, #516]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a80      	ldr	r2, [pc, #512]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80058e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d013      	beq.n	8005918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fe f8e4 	bl	8003abc <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f8:	f7fe f8e0 	bl	8003abc <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b64      	cmp	r3, #100	; 0x64
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e204      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b76      	ldr	r3, [pc, #472]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0f0      	beq.n	80058f8 <HAL_RCC_OscConfig+0xc0>
 8005916:	e014      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fe f8d0 	bl	8003abc <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005920:	f7fe f8cc 	bl	8003abc <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b64      	cmp	r3, #100	; 0x64
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e1f0      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005932:	4b6c      	ldr	r3, [pc, #432]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0xe8>
 800593e:	e000      	b.n	8005942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d063      	beq.n	8005a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00b      	beq.n	8005972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595a:	4b62      	ldr	r3, [pc, #392]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005962:	2b08      	cmp	r3, #8
 8005964:	d11c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005966:	4b5f      	ldr	r3, [pc, #380]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005972:	4b5c      	ldr	r3, [pc, #368]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1c4      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800598a:	4b56      	ldr	r3, [pc, #344]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4952      	ldr	r1, [pc, #328]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 800599a:	4313      	orrs	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800599e:	e03a      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a8:	4b4f      	ldr	r3, [pc, #316]	; (8005ae8 <HAL_RCC_OscConfig+0x2b0>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ae:	f7fe f885 	bl	8003abc <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059b6:	f7fe f881 	bl	8003abc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e1a5      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c8:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d4:	4b43      	ldr	r3, [pc, #268]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4940      	ldr	r1, [pc, #256]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCC_OscConfig+0x2b0>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fe f864 	bl	8003abc <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f8:	f7fe f860 	bl	8003abc <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e184      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a0a:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d030      	beq.n	8005a84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2a:	4b30      	ldr	r3, [pc, #192]	; (8005aec <HAL_RCC_OscConfig+0x2b4>)
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a30:	f7fe f844 	bl	8003abc <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a38:	f7fe f840 	bl	8003abc <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e164      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a4a:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f0      	beq.n	8005a38 <HAL_RCC_OscConfig+0x200>
 8005a56:	e015      	b.n	8005a84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <HAL_RCC_OscConfig+0x2b4>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5e:	f7fe f82d 	bl	8003abc <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a66:	f7fe f829 	bl	8003abc <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e14d      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a78:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a0 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a96:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10f      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	4a0e      	ldr	r2, [pc, #56]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x2b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d121      	bne.n	8005b12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_RCC_OscConfig+0x2b8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <HAL_RCC_OscConfig+0x2b8>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ada:	f7fd ffef 	bl	8003abc <HAL_GetTick>
 8005ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae0:	e011      	b.n	8005b06 <HAL_RCC_OscConfig+0x2ce>
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800
 8005ae8:	42470000 	.word	0x42470000
 8005aec:	42470e80 	.word	0x42470e80
 8005af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af4:	f7fd ffe2 	bl	8003abc <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e106      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b06:	4b85      	ldr	r3, [pc, #532]	; (8005d1c <HAL_RCC_OscConfig+0x4e4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0f0      	beq.n	8005af4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d106      	bne.n	8005b28 <HAL_RCC_OscConfig+0x2f0>
 8005b1a:	4b81      	ldr	r3, [pc, #516]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	4a80      	ldr	r2, [pc, #512]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b20:	f043 0301 	orr.w	r3, r3, #1
 8005b24:	6713      	str	r3, [r2, #112]	; 0x70
 8005b26:	e01c      	b.n	8005b62 <HAL_RCC_OscConfig+0x32a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	2b05      	cmp	r3, #5
 8005b2e:	d10c      	bne.n	8005b4a <HAL_RCC_OscConfig+0x312>
 8005b30:	4b7b      	ldr	r3, [pc, #492]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b34:	4a7a      	ldr	r2, [pc, #488]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b36:	f043 0304 	orr.w	r3, r3, #4
 8005b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3c:	4b78      	ldr	r3, [pc, #480]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b42:	f043 0301 	orr.w	r3, r3, #1
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
 8005b48:	e00b      	b.n	8005b62 <HAL_RCC_OscConfig+0x32a>
 8005b4a:	4b75      	ldr	r3, [pc, #468]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a74      	ldr	r2, [pc, #464]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b50:	f023 0301 	bic.w	r3, r3, #1
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
 8005b56:	4b72      	ldr	r3, [pc, #456]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a71      	ldr	r2, [pc, #452]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b5c:	f023 0304 	bic.w	r3, r3, #4
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d015      	beq.n	8005b96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6a:	f7fd ffa7 	bl	8003abc <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fd ffa3 	bl	8003abc <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0c5      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b88:	4b65      	ldr	r3, [pc, #404]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0ee      	beq.n	8005b72 <HAL_RCC_OscConfig+0x33a>
 8005b94:	e014      	b.n	8005bc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b96:	f7fd ff91 	bl	8003abc <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b9c:	e00a      	b.n	8005bb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9e:	f7fd ff8d 	bl	8003abc <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e0af      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb4:	4b5a      	ldr	r3, [pc, #360]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1ee      	bne.n	8005b9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d105      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc6:	4b56      	ldr	r3, [pc, #344]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4a55      	ldr	r2, [pc, #340]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 809b 	beq.w	8005d12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bdc:	4b50      	ldr	r3, [pc, #320]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 030c 	and.w	r3, r3, #12
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d05c      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d141      	bne.n	8005c74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf0:	4b4c      	ldr	r3, [pc, #304]	; (8005d24 <HAL_RCC_OscConfig+0x4ec>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf6:	f7fd ff61 	bl	8003abc <HAL_GetTick>
 8005bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfe:	f7fd ff5d 	bl	8003abc <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e081      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c10:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f0      	bne.n	8005bfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	019b      	lsls	r3, r3, #6
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	3b01      	subs	r3, #1
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	4937      	ldr	r1, [pc, #220]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <HAL_RCC_OscConfig+0x4ec>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c4c:	f7fd ff36 	bl	8003abc <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c54:	f7fd ff32 	bl	8003abc <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e056      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c66:	4b2e      	ldr	r3, [pc, #184]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0x41c>
 8005c72:	e04e      	b.n	8005d12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c74:	4b2b      	ldr	r3, [pc, #172]	; (8005d24 <HAL_RCC_OscConfig+0x4ec>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fd ff1f 	bl	8003abc <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fd ff1b 	bl	8003abc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e03f      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c94:	4b22      	ldr	r3, [pc, #136]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f0      	bne.n	8005c82 <HAL_RCC_OscConfig+0x44a>
 8005ca0:	e037      	b.n	8005d12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e032      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <HAL_RCC_OscConfig+0x4e8>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d028      	beq.n	8005d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d121      	bne.n	8005d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d11a      	bne.n	8005d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cde:	4013      	ands	r3, r2
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d111      	bne.n	8005d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3718      	adds	r7, #24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	40023800 	.word	0x40023800
 8005d24:	42470060 	.word	0x42470060

08005d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e0cc      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d3c:	4b68      	ldr	r3, [pc, #416]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d90c      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4a:	4b65      	ldr	r3, [pc, #404]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d52:	4b63      	ldr	r3, [pc, #396]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0307 	and.w	r3, r3, #7
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0b8      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d020      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d7c:	4b59      	ldr	r3, [pc, #356]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	4a58      	ldr	r2, [pc, #352]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d94:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	4a52      	ldr	r2, [pc, #328]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b50      	ldr	r3, [pc, #320]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	494d      	ldr	r1, [pc, #308]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d044      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b47      	ldr	r3, [pc, #284]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d119      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e07f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d003      	beq.n	8005de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d107      	bne.n	8005df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005de6:	4b3f      	ldr	r3, [pc, #252]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e06f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005df6:	4b3b      	ldr	r3, [pc, #236]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e067      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e06:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f023 0203 	bic.w	r2, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	4934      	ldr	r1, [pc, #208]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e18:	f7fd fe50 	bl	8003abc <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	e00a      	b.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e20:	f7fd fe4c 	bl	8003abc <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e04f      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e36:	4b2b      	ldr	r3, [pc, #172]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 020c 	and.w	r2, r3, #12
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1eb      	bne.n	8005e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d20c      	bcs.n	8005e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b22      	ldr	r3, [pc, #136]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b20      	ldr	r3, [pc, #128]	; (8005ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e032      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e9a:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	490e      	ldr	r1, [pc, #56]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005eae:	f000 f821 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	490a      	ldr	r1, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	5ccb      	ldrb	r3, [r1, r3]
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	4a09      	ldr	r2, [pc, #36]	; (8005eec <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fd fdb0 	bl	8003a34 <HAL_InitTick>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	40023c00 	.word	0x40023c00
 8005ee4:	40023800 	.word	0x40023800
 8005ee8:	08009ef0 	.word	0x08009ef0
 8005eec:	20000000 	.word	0x20000000
 8005ef0:	2000001c 	.word	0x2000001c

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	2300      	movs	r3, #0
 8005f06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f0c:	4b67      	ldr	r3, [pc, #412]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 030c 	and.w	r3, r3, #12
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d00d      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0x40>
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	f200 80bd 	bhi.w	8006098 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <HAL_RCC_GetSysClockFreq+0x34>
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d003      	beq.n	8005f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f26:	e0b7      	b.n	8006098 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f28:	4b61      	ldr	r3, [pc, #388]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f2a:	60bb      	str	r3, [r7, #8]
       break;
 8005f2c:	e0b7      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f2e:	4b60      	ldr	r3, [pc, #384]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f30:	60bb      	str	r3, [r7, #8]
      break;
 8005f32:	e0b4      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f34:	4b5d      	ldr	r3, [pc, #372]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f3e:	4b5b      	ldr	r3, [pc, #364]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d04d      	beq.n	8005fe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f4a:	4b58      	ldr	r3, [pc, #352]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	099b      	lsrs	r3, r3, #6
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f5a:	f04f 0100 	mov.w	r1, #0
 8005f5e:	ea02 0800 	and.w	r8, r2, r0
 8005f62:	ea03 0901 	and.w	r9, r3, r1
 8005f66:	4640      	mov	r0, r8
 8005f68:	4649      	mov	r1, r9
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	014b      	lsls	r3, r1, #5
 8005f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f78:	0142      	lsls	r2, r0, #5
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	ebb0 0008 	subs.w	r0, r0, r8
 8005f82:	eb61 0109 	sbc.w	r1, r1, r9
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	018b      	lsls	r3, r1, #6
 8005f90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f94:	0182      	lsls	r2, r0, #6
 8005f96:	1a12      	subs	r2, r2, r0
 8005f98:	eb63 0301 	sbc.w	r3, r3, r1
 8005f9c:	f04f 0000 	mov.w	r0, #0
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	00d9      	lsls	r1, r3, #3
 8005fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005faa:	00d0      	lsls	r0, r2, #3
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	eb12 0208 	adds.w	r2, r2, r8
 8005fb4:	eb43 0309 	adc.w	r3, r3, r9
 8005fb8:	f04f 0000 	mov.w	r0, #0
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	0299      	lsls	r1, r3, #10
 8005fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fc6:	0290      	lsls	r0, r2, #10
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4619      	mov	r1, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	f7fa fe5e 	bl	8000c98 <__aeabi_uldivmod>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	460b      	mov	r3, r1
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e04a      	b.n	800607c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe6:	4b31      	ldr	r3, [pc, #196]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	461a      	mov	r2, r3
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	ea02 0400 	and.w	r4, r2, r0
 8005ffe:	ea03 0501 	and.w	r5, r3, r1
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f04f 0200 	mov.w	r2, #0
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	014b      	lsls	r3, r1, #5
 8006010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006014:	0142      	lsls	r2, r0, #5
 8006016:	4610      	mov	r0, r2
 8006018:	4619      	mov	r1, r3
 800601a:	1b00      	subs	r0, r0, r4
 800601c:	eb61 0105 	sbc.w	r1, r1, r5
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	018b      	lsls	r3, r1, #6
 800602a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800602e:	0182      	lsls	r2, r0, #6
 8006030:	1a12      	subs	r2, r2, r0
 8006032:	eb63 0301 	sbc.w	r3, r3, r1
 8006036:	f04f 0000 	mov.w	r0, #0
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	00d9      	lsls	r1, r3, #3
 8006040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006044:	00d0      	lsls	r0, r2, #3
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	1912      	adds	r2, r2, r4
 800604c:	eb45 0303 	adc.w	r3, r5, r3
 8006050:	f04f 0000 	mov.w	r0, #0
 8006054:	f04f 0100 	mov.w	r1, #0
 8006058:	0299      	lsls	r1, r3, #10
 800605a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800605e:	0290      	lsls	r0, r2, #10
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4610      	mov	r0, r2
 8006066:	4619      	mov	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	461a      	mov	r2, r3
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	f7fa fe12 	bl	8000c98 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4613      	mov	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800607c:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	3301      	adds	r3, #1
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	fbb2 f3f3 	udiv	r3, r2, r3
 8006094:	60bb      	str	r3, [r7, #8]
      break;
 8006096:	e002      	b.n	800609e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006098:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800609a:	60bb      	str	r3, [r7, #8]
      break;
 800609c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800609e:	68bb      	ldr	r3, [r7, #8]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060aa:	bf00      	nop
 80060ac:	40023800 	.word	0x40023800
 80060b0:	00f42400 	.word	0x00f42400

080060b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80060b8:	4b03      	ldr	r3, [pc, #12]	; (80060c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80060ba:	681b      	ldr	r3, [r3, #0]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20000000 	.word	0x20000000

080060cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060d0:	f7ff fff0 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060d4:	4602      	mov	r2, r0
 80060d6:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	0a9b      	lsrs	r3, r3, #10
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	4903      	ldr	r1, [pc, #12]	; (80060f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060e2:	5ccb      	ldrb	r3, [r1, r3]
 80060e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40023800 	.word	0x40023800
 80060f0:	08009f00 	.word	0x08009f00

080060f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060f8:	f7ff ffdc 	bl	80060b4 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	0b5b      	lsrs	r3, r3, #13
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006110:	4618      	mov	r0, r3
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40023800 	.word	0x40023800
 8006118:	08009f00 	.word	0x08009f00

0800611c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e041      	b.n	80061b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc f840 	bl	80021c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f000 fa84 	bl	8006668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d001      	beq.n	80061d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e044      	b.n	800625e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1e      	ldr	r2, [pc, #120]	; (800626c <HAL_TIM_Base_Start_IT+0xb0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1a      	ldr	r2, [pc, #104]	; (8006270 <HAL_TIM_Base_Start_IT+0xb4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_TIM_Base_Start_IT+0xb8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a17      	ldr	r2, [pc, #92]	; (8006278 <HAL_TIM_Base_Start_IT+0xbc>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_TIM_Base_Start_IT+0xc0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000

08006280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d122      	bne.n	80062dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d11b      	bne.n	80062dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0202 	mvn.w	r2, #2
 80062ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9b2 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 80062c8:	e005      	b.n	80062d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9a4 	bl	8006618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f9b5 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d122      	bne.n	8006330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d11b      	bne.n	8006330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f06f 0204 	mvn.w	r2, #4
 8006300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f988 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 800631c:	e005      	b.n	800632a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f97a 	bl	8006618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f98b 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b08      	cmp	r3, #8
 800633c:	d122      	bne.n	8006384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b08      	cmp	r3, #8
 800634a:	d11b      	bne.n	8006384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0208 	mvn.w	r2, #8
 8006354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f95e 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f950 	bl	8006618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f961 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b10      	cmp	r3, #16
 8006390:	d122      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b10      	cmp	r3, #16
 800639e:	d11b      	bne.n	80063d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0210 	mvn.w	r2, #16
 80063a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2208      	movs	r2, #8
 80063ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f934 	bl	800662c <HAL_TIM_IC_CaptureCallback>
 80063c4:	e005      	b.n	80063d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f926 	bl	8006618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f937 	bl	8006640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d10e      	bne.n	8006404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d107      	bne.n	8006404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0201 	mvn.w	r2, #1
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fa feb6 	bl	8001170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640e:	2b80      	cmp	r3, #128	; 0x80
 8006410:	d10e      	bne.n	8006430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800641c:	2b80      	cmp	r3, #128	; 0x80
 800641e:	d107      	bne.n	8006430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 faae 	bl	800698c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643a:	2b40      	cmp	r3, #64	; 0x40
 800643c:	d10e      	bne.n	800645c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b40      	cmp	r3, #64	; 0x40
 800644a:	d107      	bne.n	800645c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8fc 	bl	8006654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b20      	cmp	r3, #32
 8006468:	d10e      	bne.n	8006488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b20      	cmp	r3, #32
 8006476:	d107      	bne.n	8006488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0220 	mvn.w	r2, #32
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa78 	bl	8006978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_ConfigClockSource+0x18>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e0b3      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x180>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e0:	d03e      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0xd0>
 80064e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e6:	f200 8087 	bhi.w	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	f000 8085 	beq.w	80065fc <HAL_TIM_ConfigClockSource+0x16c>
 80064f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f6:	d87f      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 80064f8:	2b70      	cmp	r3, #112	; 0x70
 80064fa:	d01a      	beq.n	8006532 <HAL_TIM_ConfigClockSource+0xa2>
 80064fc:	2b70      	cmp	r3, #112	; 0x70
 80064fe:	d87b      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006500:	2b60      	cmp	r3, #96	; 0x60
 8006502:	d050      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0x116>
 8006504:	2b60      	cmp	r3, #96	; 0x60
 8006506:	d877      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006508:	2b50      	cmp	r3, #80	; 0x50
 800650a:	d03c      	beq.n	8006586 <HAL_TIM_ConfigClockSource+0xf6>
 800650c:	2b50      	cmp	r3, #80	; 0x50
 800650e:	d873      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d058      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x136>
 8006514:	2b40      	cmp	r3, #64	; 0x40
 8006516:	d86f      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006518:	2b30      	cmp	r3, #48	; 0x30
 800651a:	d064      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x156>
 800651c:	2b30      	cmp	r3, #48	; 0x30
 800651e:	d86b      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006520:	2b20      	cmp	r3, #32
 8006522:	d060      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x156>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d867      	bhi.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d05c      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x156>
 800652c:	2b10      	cmp	r3, #16
 800652e:	d05a      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006530:	e062      	b.n	80065f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6899      	ldr	r1, [r3, #8]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f000 f98b 	bl	800685c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006554:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	609a      	str	r2, [r3, #8]
      break;
 800655e:	e04e      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6899      	ldr	r1, [r3, #8]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f000 f974 	bl	800685c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006582:	609a      	str	r2, [r3, #8]
      break;
 8006584:	e03b      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6818      	ldr	r0, [r3, #0]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	6859      	ldr	r1, [r3, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	461a      	mov	r2, r3
 8006594:	f000 f8e8 	bl	8006768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2150      	movs	r1, #80	; 0x50
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 f941 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 80065a4:	e02b      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 f907 	bl	80067c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2160      	movs	r1, #96	; 0x60
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f931 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 80065c4:	e01b      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6859      	ldr	r1, [r3, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f000 f8c8 	bl	8006768 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f921 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 80065e4:	e00b      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4619      	mov	r1, r3
 80065f0:	4610      	mov	r0, r2
 80065f2:	f000 f918 	bl	8006826 <TIM_ITRx_SetConfig>
        break;
 80065f6:	e002      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065f8:	bf00      	nop
 80065fa:	e000      	b.n	80065fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80065fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a34      	ldr	r2, [pc, #208]	; (800674c <TIM_Base_SetConfig+0xe4>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00f      	beq.n	80066a0 <TIM_Base_SetConfig+0x38>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006686:	d00b      	beq.n	80066a0 <TIM_Base_SetConfig+0x38>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a31      	ldr	r2, [pc, #196]	; (8006750 <TIM_Base_SetConfig+0xe8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d007      	beq.n	80066a0 <TIM_Base_SetConfig+0x38>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a30      	ldr	r2, [pc, #192]	; (8006754 <TIM_Base_SetConfig+0xec>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d003      	beq.n	80066a0 <TIM_Base_SetConfig+0x38>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a2f      	ldr	r2, [pc, #188]	; (8006758 <TIM_Base_SetConfig+0xf0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a25      	ldr	r2, [pc, #148]	; (800674c <TIM_Base_SetConfig+0xe4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01b      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d017      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a22      	ldr	r2, [pc, #136]	; (8006750 <TIM_Base_SetConfig+0xe8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a21      	ldr	r2, [pc, #132]	; (8006754 <TIM_Base_SetConfig+0xec>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00f      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a20      	ldr	r2, [pc, #128]	; (8006758 <TIM_Base_SetConfig+0xf0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a1f      	ldr	r2, [pc, #124]	; (800675c <TIM_Base_SetConfig+0xf4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d007      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <TIM_Base_SetConfig+0xf8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d003      	beq.n	80066f2 <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1d      	ldr	r2, [pc, #116]	; (8006764 <TIM_Base_SetConfig+0xfc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d108      	bne.n	8006704 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a08      	ldr	r2, [pc, #32]	; (800674c <TIM_Base_SetConfig+0xe4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d103      	bne.n	8006738 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	615a      	str	r2, [r3, #20]
}
 800673e:	bf00      	nop
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	40010000 	.word	0x40010000
 8006750:	40000400 	.word	0x40000400
 8006754:	40000800 	.word	0x40000800
 8006758:	40000c00 	.word	0x40000c00
 800675c:	40014000 	.word	0x40014000
 8006760:	40014400 	.word	0x40014400
 8006764:	40014800 	.word	0x40014800

08006768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	011b      	lsls	r3, r3, #4
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f023 030a 	bic.w	r3, r3, #10
 80067a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr

080067c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b087      	sub	sp, #28
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f023 0210 	bic.w	r2, r3, #16
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006802:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	f043 0307 	orr.w	r3, r3, #7
 8006848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	021a      	lsls	r2, r3, #8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	431a      	orrs	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d101      	bne.n	80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e050      	b.n	8006956 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d018      	beq.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006900:	d013      	beq.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a18      	ldr	r2, [pc, #96]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00e      	beq.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a16      	ldr	r2, [pc, #88]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d009      	beq.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a15      	ldr	r2, [pc, #84]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d004      	beq.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d10c      	bne.n	8006944 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	4313      	orrs	r3, r2
 800693a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40010000 	.word	0x40010000
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40014000 	.word	0x40014000

08006978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e03f      	b.n	8006a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fc50 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	; 0x24
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f905 	bl	8006bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695a      	ldr	r2, [r3, #20]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08a      	sub	sp, #40	; 0x28
 8006a3e:	af02      	add	r7, sp, #8
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d17c      	bne.n	8006b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_UART_Transmit+0x2c>
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e075      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_UART_Transmit+0x3e>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e06e      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2221      	movs	r2, #33	; 0x21
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a8e:	f7fd f815 	bl	8003abc <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa8:	d108      	bne.n	8006abc <HAL_UART_Transmit+0x82>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e003      	b.n	8006ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006acc:	e02a      	b.n	8006b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f840 	bl	8006b5e <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e036      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	3302      	adds	r3, #2
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e007      	b.n	8006b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1cf      	bne.n	8006ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2140      	movs	r1, #64	; 0x40
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f810 	bl	8006b5e <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e006      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b6e:	e02c      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d028      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8006b7e:	f7fc ff9d 	bl	8003abc <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d21d      	bcs.n	8006bca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e00f      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d0c3      	beq.n	8006b70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	b09f      	sub	sp, #124	; 0x7c
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0a:	68d9      	ldr	r1, [r3, #12]
 8006c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	ea40 0301 	orr.w	r3, r0, r1
 8006c14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c38:	f021 010c 	bic.w	r1, r1, #12
 8006c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c42:	430b      	orrs	r3, r1
 8006c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c52:	6999      	ldr	r1, [r3, #24]
 8006c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	ea40 0301 	orr.w	r3, r0, r1
 8006c5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4bc5      	ldr	r3, [pc, #788]	; (8006f78 <UART_SetConfig+0x384>)
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d004      	beq.n	8006c72 <UART_SetConfig+0x7e>
 8006c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	4bc3      	ldr	r3, [pc, #780]	; (8006f7c <UART_SetConfig+0x388>)
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d103      	bne.n	8006c7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c72:	f7ff fa3f 	bl	80060f4 <HAL_RCC_GetPCLK2Freq>
 8006c76:	6778      	str	r0, [r7, #116]	; 0x74
 8006c78:	e002      	b.n	8006c80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c7a:	f7ff fa27 	bl	80060cc <HAL_RCC_GetPCLK1Freq>
 8006c7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c88:	f040 80b6 	bne.w	8006df8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c8e:	461c      	mov	r4, r3
 8006c90:	f04f 0500 	mov.w	r5, #0
 8006c94:	4622      	mov	r2, r4
 8006c96:	462b      	mov	r3, r5
 8006c98:	1891      	adds	r1, r2, r2
 8006c9a:	6439      	str	r1, [r7, #64]	; 0x40
 8006c9c:	415b      	adcs	r3, r3
 8006c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006ca0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ca4:	1912      	adds	r2, r2, r4
 8006ca6:	eb45 0303 	adc.w	r3, r5, r3
 8006caa:	f04f 0000 	mov.w	r0, #0
 8006cae:	f04f 0100 	mov.w	r1, #0
 8006cb2:	00d9      	lsls	r1, r3, #3
 8006cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cb8:	00d0      	lsls	r0, r2, #3
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	1911      	adds	r1, r2, r4
 8006cc0:	6639      	str	r1, [r7, #96]	; 0x60
 8006cc2:	416b      	adcs	r3, r5
 8006cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8006cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f04f 0300 	mov.w	r3, #0
 8006cd0:	1891      	adds	r1, r2, r2
 8006cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cd4:	415b      	adcs	r3, r3
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006cdc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ce0:	f7f9 ffda 	bl	8000c98 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4ba5      	ldr	r3, [pc, #660]	; (8006f80 <UART_SetConfig+0x38c>)
 8006cea:	fba3 2302 	umull	r2, r3, r3, r2
 8006cee:	095b      	lsrs	r3, r3, #5
 8006cf0:	011e      	lsls	r6, r3, #4
 8006cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf4:	461c      	mov	r4, r3
 8006cf6:	f04f 0500 	mov.w	r5, #0
 8006cfa:	4622      	mov	r2, r4
 8006cfc:	462b      	mov	r3, r5
 8006cfe:	1891      	adds	r1, r2, r2
 8006d00:	6339      	str	r1, [r7, #48]	; 0x30
 8006d02:	415b      	adcs	r3, r3
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d0a:	1912      	adds	r2, r2, r4
 8006d0c:	eb45 0303 	adc.w	r3, r5, r3
 8006d10:	f04f 0000 	mov.w	r0, #0
 8006d14:	f04f 0100 	mov.w	r1, #0
 8006d18:	00d9      	lsls	r1, r3, #3
 8006d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d1e:	00d0      	lsls	r0, r2, #3
 8006d20:	4602      	mov	r2, r0
 8006d22:	460b      	mov	r3, r1
 8006d24:	1911      	adds	r1, r2, r4
 8006d26:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d28:	416b      	adcs	r3, r5
 8006d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	461a      	mov	r2, r3
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	1891      	adds	r1, r2, r2
 8006d38:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d3a:	415b      	adcs	r3, r3
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d46:	f7f9 ffa7 	bl	8000c98 <__aeabi_uldivmod>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4b8c      	ldr	r3, [pc, #560]	; (8006f80 <UART_SetConfig+0x38c>)
 8006d50:	fba3 1302 	umull	r1, r3, r3, r2
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	2164      	movs	r1, #100	; 0x64
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	3332      	adds	r3, #50	; 0x32
 8006d62:	4a87      	ldr	r2, [pc, #540]	; (8006f80 <UART_SetConfig+0x38c>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d70:	441e      	add	r6, r3
 8006d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d74:	4618      	mov	r0, r3
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	1894      	adds	r4, r2, r2
 8006d80:	623c      	str	r4, [r7, #32]
 8006d82:	415b      	adcs	r3, r3
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
 8006d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d8a:	1812      	adds	r2, r2, r0
 8006d8c:	eb41 0303 	adc.w	r3, r1, r3
 8006d90:	f04f 0400 	mov.w	r4, #0
 8006d94:	f04f 0500 	mov.w	r5, #0
 8006d98:	00dd      	lsls	r5, r3, #3
 8006d9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d9e:	00d4      	lsls	r4, r2, #3
 8006da0:	4622      	mov	r2, r4
 8006da2:	462b      	mov	r3, r5
 8006da4:	1814      	adds	r4, r2, r0
 8006da6:	653c      	str	r4, [r7, #80]	; 0x50
 8006da8:	414b      	adcs	r3, r1
 8006daa:	657b      	str	r3, [r7, #84]	; 0x54
 8006dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	461a      	mov	r2, r3
 8006db2:	f04f 0300 	mov.w	r3, #0
 8006db6:	1891      	adds	r1, r2, r2
 8006db8:	61b9      	str	r1, [r7, #24]
 8006dba:	415b      	adcs	r3, r3
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006dc6:	f7f9 ff67 	bl	8000c98 <__aeabi_uldivmod>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4b6c      	ldr	r3, [pc, #432]	; (8006f80 <UART_SetConfig+0x38c>)
 8006dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dd4:	095b      	lsrs	r3, r3, #5
 8006dd6:	2164      	movs	r1, #100	; 0x64
 8006dd8:	fb01 f303 	mul.w	r3, r1, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	3332      	adds	r3, #50	; 0x32
 8006de2:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <UART_SetConfig+0x38c>)
 8006de4:	fba2 2303 	umull	r2, r3, r2, r3
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	f003 0207 	and.w	r2, r3, #7
 8006dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4432      	add	r2, r6
 8006df4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006df6:	e0b9      	b.n	8006f6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dfa:	461c      	mov	r4, r3
 8006dfc:	f04f 0500 	mov.w	r5, #0
 8006e00:	4622      	mov	r2, r4
 8006e02:	462b      	mov	r3, r5
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	6139      	str	r1, [r7, #16]
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e10:	1912      	adds	r2, r2, r4
 8006e12:	eb45 0303 	adc.w	r3, r5, r3
 8006e16:	f04f 0000 	mov.w	r0, #0
 8006e1a:	f04f 0100 	mov.w	r1, #0
 8006e1e:	00d9      	lsls	r1, r3, #3
 8006e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e24:	00d0      	lsls	r0, r2, #3
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	eb12 0804 	adds.w	r8, r2, r4
 8006e2e:	eb43 0905 	adc.w	r9, r3, r5
 8006e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	f04f 0200 	mov.w	r2, #0
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	008b      	lsls	r3, r1, #2
 8006e46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e4a:	0082      	lsls	r2, r0, #2
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4649      	mov	r1, r9
 8006e50:	f7f9 ff22 	bl	8000c98 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4b49      	ldr	r3, [pc, #292]	; (8006f80 <UART_SetConfig+0x38c>)
 8006e5a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	011e      	lsls	r6, r3, #4
 8006e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e64:	4618      	mov	r0, r3
 8006e66:	f04f 0100 	mov.w	r1, #0
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	1894      	adds	r4, r2, r2
 8006e70:	60bc      	str	r4, [r7, #8]
 8006e72:	415b      	adcs	r3, r3
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e7a:	1812      	adds	r2, r2, r0
 8006e7c:	eb41 0303 	adc.w	r3, r1, r3
 8006e80:	f04f 0400 	mov.w	r4, #0
 8006e84:	f04f 0500 	mov.w	r5, #0
 8006e88:	00dd      	lsls	r5, r3, #3
 8006e8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e8e:	00d4      	lsls	r4, r2, #3
 8006e90:	4622      	mov	r2, r4
 8006e92:	462b      	mov	r3, r5
 8006e94:	1814      	adds	r4, r2, r0
 8006e96:	64bc      	str	r4, [r7, #72]	; 0x48
 8006e98:	414b      	adcs	r3, r1
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	008b      	lsls	r3, r1, #2
 8006eb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006eb4:	0082      	lsls	r2, r0, #2
 8006eb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006eba:	f7f9 feed 	bl	8000c98 <__aeabi_uldivmod>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	; (8006f80 <UART_SetConfig+0x38c>)
 8006ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	2164      	movs	r1, #100	; 0x64
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	3332      	adds	r3, #50	; 0x32
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <UART_SetConfig+0x38c>)
 8006ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ee2:	441e      	add	r6, r3
 8006ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	1894      	adds	r4, r2, r2
 8006ef2:	603c      	str	r4, [r7, #0]
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006efc:	1812      	adds	r2, r2, r0
 8006efe:	eb41 0303 	adc.w	r3, r1, r3
 8006f02:	f04f 0400 	mov.w	r4, #0
 8006f06:	f04f 0500 	mov.w	r5, #0
 8006f0a:	00dd      	lsls	r5, r3, #3
 8006f0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f10:	00d4      	lsls	r4, r2, #3
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	eb12 0a00 	adds.w	sl, r2, r0
 8006f1a:	eb43 0b01 	adc.w	fp, r3, r1
 8006f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f04f 0100 	mov.w	r1, #0
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	f04f 0300 	mov.w	r3, #0
 8006f30:	008b      	lsls	r3, r1, #2
 8006f32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f36:	0082      	lsls	r2, r0, #2
 8006f38:	4650      	mov	r0, sl
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	f7f9 feac 	bl	8000c98 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <UART_SetConfig+0x38c>)
 8006f46:	fba3 1302 	umull	r1, r3, r3, r2
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	2164      	movs	r1, #100	; 0x64
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	3332      	adds	r3, #50	; 0x32
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <UART_SetConfig+0x38c>)
 8006f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	f003 020f 	and.w	r2, r3, #15
 8006f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4432      	add	r2, r6
 8006f6a:	609a      	str	r2, [r3, #8]
}
 8006f6c:	bf00      	nop
 8006f6e:	377c      	adds	r7, #124	; 0x7c
 8006f70:	46bd      	mov	sp, r7
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	bf00      	nop
 8006f78:	40011000 	.word	0x40011000
 8006f7c:	40011400 	.word	0x40011400
 8006f80:	51eb851f 	.word	0x51eb851f

08006f84 <__errno>:
 8006f84:	4b01      	ldr	r3, [pc, #4]	; (8006f8c <__errno+0x8>)
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	20000024 	.word	0x20000024

08006f90 <__libc_init_array>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	4d0d      	ldr	r5, [pc, #52]	; (8006fc8 <__libc_init_array+0x38>)
 8006f94:	4c0d      	ldr	r4, [pc, #52]	; (8006fcc <__libc_init_array+0x3c>)
 8006f96:	1b64      	subs	r4, r4, r5
 8006f98:	10a4      	asrs	r4, r4, #2
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	42a6      	cmp	r6, r4
 8006f9e:	d109      	bne.n	8006fb4 <__libc_init_array+0x24>
 8006fa0:	4d0b      	ldr	r5, [pc, #44]	; (8006fd0 <__libc_init_array+0x40>)
 8006fa2:	4c0c      	ldr	r4, [pc, #48]	; (8006fd4 <__libc_init_array+0x44>)
 8006fa4:	f002 ff42 	bl	8009e2c <_init>
 8006fa8:	1b64      	subs	r4, r4, r5
 8006faa:	10a4      	asrs	r4, r4, #2
 8006fac:	2600      	movs	r6, #0
 8006fae:	42a6      	cmp	r6, r4
 8006fb0:	d105      	bne.n	8006fbe <__libc_init_array+0x2e>
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb8:	4798      	blx	r3
 8006fba:	3601      	adds	r6, #1
 8006fbc:	e7ee      	b.n	8006f9c <__libc_init_array+0xc>
 8006fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc2:	4798      	blx	r3
 8006fc4:	3601      	adds	r6, #1
 8006fc6:	e7f2      	b.n	8006fae <__libc_init_array+0x1e>
 8006fc8:	0800f044 	.word	0x0800f044
 8006fcc:	0800f044 	.word	0x0800f044
 8006fd0:	0800f044 	.word	0x0800f044
 8006fd4:	0800f048 	.word	0x0800f048

08006fd8 <memset>:
 8006fd8:	4402      	add	r2, r0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <memset+0xa>
 8006fe0:	4770      	bx	lr
 8006fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe6:	e7f9      	b.n	8006fdc <memset+0x4>

08006fe8 <__cvt>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	ec55 4b10 	vmov	r4, r5, d0
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	bfbb      	ittet	lt
 8006ffa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ffe:	461d      	movlt	r5, r3
 8007000:	2300      	movge	r3, #0
 8007002:	232d      	movlt	r3, #45	; 0x2d
 8007004:	700b      	strb	r3, [r1, #0]
 8007006:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007008:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800700c:	4691      	mov	r9, r2
 800700e:	f023 0820 	bic.w	r8, r3, #32
 8007012:	bfbc      	itt	lt
 8007014:	4622      	movlt	r2, r4
 8007016:	4614      	movlt	r4, r2
 8007018:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800701c:	d005      	beq.n	800702a <__cvt+0x42>
 800701e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007022:	d100      	bne.n	8007026 <__cvt+0x3e>
 8007024:	3601      	adds	r6, #1
 8007026:	2102      	movs	r1, #2
 8007028:	e000      	b.n	800702c <__cvt+0x44>
 800702a:	2103      	movs	r1, #3
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	ab02      	add	r3, sp, #8
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	ec45 4b10 	vmov	d0, r4, r5
 8007038:	4653      	mov	r3, sl
 800703a:	4632      	mov	r2, r6
 800703c:	f000 fe38 	bl	8007cb0 <_dtoa_r>
 8007040:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007044:	4607      	mov	r7, r0
 8007046:	d102      	bne.n	800704e <__cvt+0x66>
 8007048:	f019 0f01 	tst.w	r9, #1
 800704c:	d022      	beq.n	8007094 <__cvt+0xac>
 800704e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007052:	eb07 0906 	add.w	r9, r7, r6
 8007056:	d110      	bne.n	800707a <__cvt+0x92>
 8007058:	783b      	ldrb	r3, [r7, #0]
 800705a:	2b30      	cmp	r3, #48	; 0x30
 800705c:	d10a      	bne.n	8007074 <__cvt+0x8c>
 800705e:	2200      	movs	r2, #0
 8007060:	2300      	movs	r3, #0
 8007062:	4620      	mov	r0, r4
 8007064:	4629      	mov	r1, r5
 8007066:	f7f9 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800706a:	b918      	cbnz	r0, 8007074 <__cvt+0x8c>
 800706c:	f1c6 0601 	rsb	r6, r6, #1
 8007070:	f8ca 6000 	str.w	r6, [sl]
 8007074:	f8da 3000 	ldr.w	r3, [sl]
 8007078:	4499      	add	r9, r3
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4620      	mov	r0, r4
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fd29 	bl	8000ad8 <__aeabi_dcmpeq>
 8007086:	b108      	cbz	r0, 800708c <__cvt+0xa4>
 8007088:	f8cd 900c 	str.w	r9, [sp, #12]
 800708c:	2230      	movs	r2, #48	; 0x30
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	454b      	cmp	r3, r9
 8007092:	d307      	bcc.n	80070a4 <__cvt+0xbc>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007098:	1bdb      	subs	r3, r3, r7
 800709a:	4638      	mov	r0, r7
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	b004      	add	sp, #16
 80070a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a4:	1c59      	adds	r1, r3, #1
 80070a6:	9103      	str	r1, [sp, #12]
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	e7f0      	b.n	800708e <__cvt+0xa6>

080070ac <__exponent>:
 80070ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ae:	4603      	mov	r3, r0
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfb8      	it	lt
 80070b4:	4249      	neglt	r1, r1
 80070b6:	f803 2b02 	strb.w	r2, [r3], #2
 80070ba:	bfb4      	ite	lt
 80070bc:	222d      	movlt	r2, #45	; 0x2d
 80070be:	222b      	movge	r2, #43	; 0x2b
 80070c0:	2909      	cmp	r1, #9
 80070c2:	7042      	strb	r2, [r0, #1]
 80070c4:	dd2a      	ble.n	800711c <__exponent+0x70>
 80070c6:	f10d 0407 	add.w	r4, sp, #7
 80070ca:	46a4      	mov	ip, r4
 80070cc:	270a      	movs	r7, #10
 80070ce:	46a6      	mov	lr, r4
 80070d0:	460a      	mov	r2, r1
 80070d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070d6:	fb07 1516 	mls	r5, r7, r6, r1
 80070da:	3530      	adds	r5, #48	; 0x30
 80070dc:	2a63      	cmp	r2, #99	; 0x63
 80070de:	f104 34ff 	add.w	r4, r4, #4294967295
 80070e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80070e6:	4631      	mov	r1, r6
 80070e8:	dcf1      	bgt.n	80070ce <__exponent+0x22>
 80070ea:	3130      	adds	r1, #48	; 0x30
 80070ec:	f1ae 0502 	sub.w	r5, lr, #2
 80070f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070f4:	1c44      	adds	r4, r0, #1
 80070f6:	4629      	mov	r1, r5
 80070f8:	4561      	cmp	r1, ip
 80070fa:	d30a      	bcc.n	8007112 <__exponent+0x66>
 80070fc:	f10d 0209 	add.w	r2, sp, #9
 8007100:	eba2 020e 	sub.w	r2, r2, lr
 8007104:	4565      	cmp	r5, ip
 8007106:	bf88      	it	hi
 8007108:	2200      	movhi	r2, #0
 800710a:	4413      	add	r3, r2
 800710c:	1a18      	subs	r0, r3, r0
 800710e:	b003      	add	sp, #12
 8007110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007116:	f804 2f01 	strb.w	r2, [r4, #1]!
 800711a:	e7ed      	b.n	80070f8 <__exponent+0x4c>
 800711c:	2330      	movs	r3, #48	; 0x30
 800711e:	3130      	adds	r1, #48	; 0x30
 8007120:	7083      	strb	r3, [r0, #2]
 8007122:	70c1      	strb	r1, [r0, #3]
 8007124:	1d03      	adds	r3, r0, #4
 8007126:	e7f1      	b.n	800710c <__exponent+0x60>

08007128 <_printf_float>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b02 	vpush	{d8}
 8007130:	b08d      	sub	sp, #52	; 0x34
 8007132:	460c      	mov	r4, r1
 8007134:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007138:	4616      	mov	r6, r2
 800713a:	461f      	mov	r7, r3
 800713c:	4605      	mov	r5, r0
 800713e:	f001 fd5b 	bl	8008bf8 <_localeconv_r>
 8007142:	f8d0 a000 	ldr.w	sl, [r0]
 8007146:	4650      	mov	r0, sl
 8007148:	f7f9 f84a 	bl	80001e0 <strlen>
 800714c:	2300      	movs	r3, #0
 800714e:	930a      	str	r3, [sp, #40]	; 0x28
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	f8d8 3000 	ldr.w	r3, [r8]
 8007158:	f894 b018 	ldrb.w	fp, [r4, #24]
 800715c:	3307      	adds	r3, #7
 800715e:	f023 0307 	bic.w	r3, r3, #7
 8007162:	f103 0208 	add.w	r2, r3, #8
 8007166:	f8c8 2000 	str.w	r2, [r8]
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007172:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007176:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800717a:	9307      	str	r3, [sp, #28]
 800717c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007180:	ee08 0a10 	vmov	s16, r0
 8007184:	4b9f      	ldr	r3, [pc, #636]	; (8007404 <_printf_float+0x2dc>)
 8007186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800718a:	f04f 32ff 	mov.w	r2, #4294967295
 800718e:	f7f9 fcd5 	bl	8000b3c <__aeabi_dcmpun>
 8007192:	bb88      	cbnz	r0, 80071f8 <_printf_float+0xd0>
 8007194:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007198:	4b9a      	ldr	r3, [pc, #616]	; (8007404 <_printf_float+0x2dc>)
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	f7f9 fcaf 	bl	8000b00 <__aeabi_dcmple>
 80071a2:	bb48      	cbnz	r0, 80071f8 <_printf_float+0xd0>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4640      	mov	r0, r8
 80071aa:	4649      	mov	r1, r9
 80071ac:	f7f9 fc9e 	bl	8000aec <__aeabi_dcmplt>
 80071b0:	b110      	cbz	r0, 80071b8 <_printf_float+0x90>
 80071b2:	232d      	movs	r3, #45	; 0x2d
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b8:	4b93      	ldr	r3, [pc, #588]	; (8007408 <_printf_float+0x2e0>)
 80071ba:	4894      	ldr	r0, [pc, #592]	; (800740c <_printf_float+0x2e4>)
 80071bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071c0:	bf94      	ite	ls
 80071c2:	4698      	movls	r8, r3
 80071c4:	4680      	movhi	r8, r0
 80071c6:	2303      	movs	r3, #3
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	9b05      	ldr	r3, [sp, #20]
 80071cc:	f023 0204 	bic.w	r2, r3, #4
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	f04f 0900 	mov.w	r9, #0
 80071d6:	9700      	str	r7, [sp, #0]
 80071d8:	4633      	mov	r3, r6
 80071da:	aa0b      	add	r2, sp, #44	; 0x2c
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f9d8 	bl	8007594 <_printf_common>
 80071e4:	3001      	adds	r0, #1
 80071e6:	f040 8090 	bne.w	800730a <_printf_float+0x1e2>
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	b00d      	add	sp, #52	; 0x34
 80071f0:	ecbd 8b02 	vpop	{d8}
 80071f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f8:	4642      	mov	r2, r8
 80071fa:	464b      	mov	r3, r9
 80071fc:	4640      	mov	r0, r8
 80071fe:	4649      	mov	r1, r9
 8007200:	f7f9 fc9c 	bl	8000b3c <__aeabi_dcmpun>
 8007204:	b140      	cbz	r0, 8007218 <_printf_float+0xf0>
 8007206:	464b      	mov	r3, r9
 8007208:	2b00      	cmp	r3, #0
 800720a:	bfbc      	itt	lt
 800720c:	232d      	movlt	r3, #45	; 0x2d
 800720e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007212:	487f      	ldr	r0, [pc, #508]	; (8007410 <_printf_float+0x2e8>)
 8007214:	4b7f      	ldr	r3, [pc, #508]	; (8007414 <_printf_float+0x2ec>)
 8007216:	e7d1      	b.n	80071bc <_printf_float+0x94>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800721e:	9206      	str	r2, [sp, #24]
 8007220:	1c5a      	adds	r2, r3, #1
 8007222:	d13f      	bne.n	80072a4 <_printf_float+0x17c>
 8007224:	2306      	movs	r3, #6
 8007226:	6063      	str	r3, [r4, #4]
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	6861      	ldr	r1, [r4, #4]
 800722c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007230:	2300      	movs	r3, #0
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	ab0a      	add	r3, sp, #40	; 0x28
 8007236:	e9cd b301 	strd	fp, r3, [sp, #4]
 800723a:	ab09      	add	r3, sp, #36	; 0x24
 800723c:	ec49 8b10 	vmov	d0, r8, r9
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007248:	4628      	mov	r0, r5
 800724a:	f7ff fecd 	bl	8006fe8 <__cvt>
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007252:	2b47      	cmp	r3, #71	; 0x47
 8007254:	4680      	mov	r8, r0
 8007256:	d108      	bne.n	800726a <_printf_float+0x142>
 8007258:	1cc8      	adds	r0, r1, #3
 800725a:	db02      	blt.n	8007262 <_printf_float+0x13a>
 800725c:	6863      	ldr	r3, [r4, #4]
 800725e:	4299      	cmp	r1, r3
 8007260:	dd41      	ble.n	80072e6 <_printf_float+0x1be>
 8007262:	f1ab 0b02 	sub.w	fp, fp, #2
 8007266:	fa5f fb8b 	uxtb.w	fp, fp
 800726a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800726e:	d820      	bhi.n	80072b2 <_printf_float+0x18a>
 8007270:	3901      	subs	r1, #1
 8007272:	465a      	mov	r2, fp
 8007274:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007278:	9109      	str	r1, [sp, #36]	; 0x24
 800727a:	f7ff ff17 	bl	80070ac <__exponent>
 800727e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007280:	1813      	adds	r3, r2, r0
 8007282:	2a01      	cmp	r2, #1
 8007284:	4681      	mov	r9, r0
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	dc02      	bgt.n	8007290 <_printf_float+0x168>
 800728a:	6822      	ldr	r2, [r4, #0]
 800728c:	07d2      	lsls	r2, r2, #31
 800728e:	d501      	bpl.n	8007294 <_printf_float+0x16c>
 8007290:	3301      	adds	r3, #1
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007298:	2b00      	cmp	r3, #0
 800729a:	d09c      	beq.n	80071d6 <_printf_float+0xae>
 800729c:	232d      	movs	r3, #45	; 0x2d
 800729e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a2:	e798      	b.n	80071d6 <_printf_float+0xae>
 80072a4:	9a06      	ldr	r2, [sp, #24]
 80072a6:	2a47      	cmp	r2, #71	; 0x47
 80072a8:	d1be      	bne.n	8007228 <_printf_float+0x100>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1bc      	bne.n	8007228 <_printf_float+0x100>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e7b9      	b.n	8007226 <_printf_float+0xfe>
 80072b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072b6:	d118      	bne.n	80072ea <_printf_float+0x1c2>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	6863      	ldr	r3, [r4, #4]
 80072bc:	dd0b      	ble.n	80072d6 <_printf_float+0x1ae>
 80072be:	6121      	str	r1, [r4, #16]
 80072c0:	b913      	cbnz	r3, 80072c8 <_printf_float+0x1a0>
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	07d0      	lsls	r0, r2, #31
 80072c6:	d502      	bpl.n	80072ce <_printf_float+0x1a6>
 80072c8:	3301      	adds	r3, #1
 80072ca:	440b      	add	r3, r1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	e7de      	b.n	8007294 <_printf_float+0x16c>
 80072d6:	b913      	cbnz	r3, 80072de <_printf_float+0x1b6>
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	07d2      	lsls	r2, r2, #31
 80072dc:	d501      	bpl.n	80072e2 <_printf_float+0x1ba>
 80072de:	3302      	adds	r3, #2
 80072e0:	e7f4      	b.n	80072cc <_printf_float+0x1a4>
 80072e2:	2301      	movs	r3, #1
 80072e4:	e7f2      	b.n	80072cc <_printf_float+0x1a4>
 80072e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ec:	4299      	cmp	r1, r3
 80072ee:	db05      	blt.n	80072fc <_printf_float+0x1d4>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	6121      	str	r1, [r4, #16]
 80072f4:	07d8      	lsls	r0, r3, #31
 80072f6:	d5ea      	bpl.n	80072ce <_printf_float+0x1a6>
 80072f8:	1c4b      	adds	r3, r1, #1
 80072fa:	e7e7      	b.n	80072cc <_printf_float+0x1a4>
 80072fc:	2900      	cmp	r1, #0
 80072fe:	bfd4      	ite	le
 8007300:	f1c1 0202 	rsble	r2, r1, #2
 8007304:	2201      	movgt	r2, #1
 8007306:	4413      	add	r3, r2
 8007308:	e7e0      	b.n	80072cc <_printf_float+0x1a4>
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	055a      	lsls	r2, r3, #21
 800730e:	d407      	bmi.n	8007320 <_printf_float+0x1f8>
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	4642      	mov	r2, r8
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	d12c      	bne.n	8007378 <_printf_float+0x250>
 800731e:	e764      	b.n	80071ea <_printf_float+0xc2>
 8007320:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007324:	f240 80e0 	bls.w	80074e8 <_printf_float+0x3c0>
 8007328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	f7f9 fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007334:	2800      	cmp	r0, #0
 8007336:	d034      	beq.n	80073a2 <_printf_float+0x27a>
 8007338:	4a37      	ldr	r2, [pc, #220]	; (8007418 <_printf_float+0x2f0>)
 800733a:	2301      	movs	r3, #1
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f af51 	beq.w	80071ea <_printf_float+0xc2>
 8007348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800734c:	429a      	cmp	r2, r3
 800734e:	db02      	blt.n	8007356 <_printf_float+0x22e>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	07d8      	lsls	r0, r3, #31
 8007354:	d510      	bpl.n	8007378 <_printf_float+0x250>
 8007356:	ee18 3a10 	vmov	r3, s16
 800735a:	4652      	mov	r2, sl
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af41 	beq.w	80071ea <_printf_float+0xc2>
 8007368:	f04f 0800 	mov.w	r8, #0
 800736c:	f104 091a 	add.w	r9, r4, #26
 8007370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007372:	3b01      	subs	r3, #1
 8007374:	4543      	cmp	r3, r8
 8007376:	dc09      	bgt.n	800738c <_printf_float+0x264>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	f100 8105 	bmi.w	800758a <_printf_float+0x462>
 8007380:	68e0      	ldr	r0, [r4, #12]
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	4298      	cmp	r0, r3
 8007386:	bfb8      	it	lt
 8007388:	4618      	movlt	r0, r3
 800738a:	e730      	b.n	80071ee <_printf_float+0xc6>
 800738c:	2301      	movs	r3, #1
 800738e:	464a      	mov	r2, r9
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f af27 	beq.w	80071ea <_printf_float+0xc2>
 800739c:	f108 0801 	add.w	r8, r8, #1
 80073a0:	e7e6      	b.n	8007370 <_printf_float+0x248>
 80073a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	dc39      	bgt.n	800741c <_printf_float+0x2f4>
 80073a8:	4a1b      	ldr	r2, [pc, #108]	; (8007418 <_printf_float+0x2f0>)
 80073aa:	2301      	movs	r3, #1
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	f43f af19 	beq.w	80071ea <_printf_float+0xc2>
 80073b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073bc:	4313      	orrs	r3, r2
 80073be:	d102      	bne.n	80073c6 <_printf_float+0x29e>
 80073c0:	6823      	ldr	r3, [r4, #0]
 80073c2:	07d9      	lsls	r1, r3, #31
 80073c4:	d5d8      	bpl.n	8007378 <_printf_float+0x250>
 80073c6:	ee18 3a10 	vmov	r3, s16
 80073ca:	4652      	mov	r2, sl
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af09 	beq.w	80071ea <_printf_float+0xc2>
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	f104 0a1a 	add.w	sl, r4, #26
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	425b      	negs	r3, r3
 80073e4:	454b      	cmp	r3, r9
 80073e6:	dc01      	bgt.n	80073ec <_printf_float+0x2c4>
 80073e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ea:	e792      	b.n	8007312 <_printf_float+0x1ea>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f aef7 	beq.w	80071ea <_printf_float+0xc2>
 80073fc:	f109 0901 	add.w	r9, r9, #1
 8007400:	e7ee      	b.n	80073e0 <_printf_float+0x2b8>
 8007402:	bf00      	nop
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	0800ec5c 	.word	0x0800ec5c
 800740c:	0800ec60 	.word	0x0800ec60
 8007410:	0800ec68 	.word	0x0800ec68
 8007414:	0800ec64 	.word	0x0800ec64
 8007418:	0800ec6c 	.word	0x0800ec6c
 800741c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007420:	429a      	cmp	r2, r3
 8007422:	bfa8      	it	ge
 8007424:	461a      	movge	r2, r3
 8007426:	2a00      	cmp	r2, #0
 8007428:	4691      	mov	r9, r2
 800742a:	dc37      	bgt.n	800749c <_printf_float+0x374>
 800742c:	f04f 0b00 	mov.w	fp, #0
 8007430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007434:	f104 021a 	add.w	r2, r4, #26
 8007438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	eba3 0309 	sub.w	r3, r3, r9
 8007440:	455b      	cmp	r3, fp
 8007442:	dc33      	bgt.n	80074ac <_printf_float+0x384>
 8007444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007448:	429a      	cmp	r2, r3
 800744a:	db3b      	blt.n	80074c4 <_printf_float+0x39c>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d438      	bmi.n	80074c4 <_printf_float+0x39c>
 8007452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	eba2 0901 	sub.w	r9, r2, r1
 800745e:	4599      	cmp	r9, r3
 8007460:	bfa8      	it	ge
 8007462:	4699      	movge	r9, r3
 8007464:	f1b9 0f00 	cmp.w	r9, #0
 8007468:	dc35      	bgt.n	80074d6 <_printf_float+0x3ae>
 800746a:	f04f 0800 	mov.w	r8, #0
 800746e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007472:	f104 0a1a 	add.w	sl, r4, #26
 8007476:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	eba3 0309 	sub.w	r3, r3, r9
 8007480:	4543      	cmp	r3, r8
 8007482:	f77f af79 	ble.w	8007378 <_printf_float+0x250>
 8007486:	2301      	movs	r3, #1
 8007488:	4652      	mov	r2, sl
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f aeaa 	beq.w	80071ea <_printf_float+0xc2>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	e7ec      	b.n	8007476 <_printf_float+0x34e>
 800749c:	4613      	mov	r3, r2
 800749e:	4631      	mov	r1, r6
 80074a0:	4642      	mov	r2, r8
 80074a2:	4628      	mov	r0, r5
 80074a4:	47b8      	blx	r7
 80074a6:	3001      	adds	r0, #1
 80074a8:	d1c0      	bne.n	800742c <_printf_float+0x304>
 80074aa:	e69e      	b.n	80071ea <_printf_float+0xc2>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	9205      	str	r2, [sp, #20]
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f ae97 	beq.w	80071ea <_printf_float+0xc2>
 80074bc:	9a05      	ldr	r2, [sp, #20]
 80074be:	f10b 0b01 	add.w	fp, fp, #1
 80074c2:	e7b9      	b.n	8007438 <_printf_float+0x310>
 80074c4:	ee18 3a10 	vmov	r3, s16
 80074c8:	4652      	mov	r2, sl
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	d1be      	bne.n	8007452 <_printf_float+0x32a>
 80074d4:	e689      	b.n	80071ea <_printf_float+0xc2>
 80074d6:	9a05      	ldr	r2, [sp, #20]
 80074d8:	464b      	mov	r3, r9
 80074da:	4442      	add	r2, r8
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	d1c1      	bne.n	800746a <_printf_float+0x342>
 80074e6:	e680      	b.n	80071ea <_printf_float+0xc2>
 80074e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	dc01      	bgt.n	80074f2 <_printf_float+0x3ca>
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d538      	bpl.n	8007564 <_printf_float+0x43c>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f ae74 	beq.w	80071ea <_printf_float+0xc2>
 8007502:	ee18 3a10 	vmov	r3, s16
 8007506:	4652      	mov	r2, sl
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f ae6b 	beq.w	80071ea <_printf_float+0xc2>
 8007514:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007518:	2200      	movs	r2, #0
 800751a:	2300      	movs	r3, #0
 800751c:	f7f9 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007520:	b9d8      	cbnz	r0, 800755a <_printf_float+0x432>
 8007522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007524:	f108 0201 	add.w	r2, r8, #1
 8007528:	3b01      	subs	r3, #1
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	d10e      	bne.n	8007552 <_printf_float+0x42a>
 8007534:	e659      	b.n	80071ea <_printf_float+0xc2>
 8007536:	2301      	movs	r3, #1
 8007538:	4652      	mov	r2, sl
 800753a:	4631      	mov	r1, r6
 800753c:	4628      	mov	r0, r5
 800753e:	47b8      	blx	r7
 8007540:	3001      	adds	r0, #1
 8007542:	f43f ae52 	beq.w	80071ea <_printf_float+0xc2>
 8007546:	f108 0801 	add.w	r8, r8, #1
 800754a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754c:	3b01      	subs	r3, #1
 800754e:	4543      	cmp	r3, r8
 8007550:	dcf1      	bgt.n	8007536 <_printf_float+0x40e>
 8007552:	464b      	mov	r3, r9
 8007554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007558:	e6dc      	b.n	8007314 <_printf_float+0x1ec>
 800755a:	f04f 0800 	mov.w	r8, #0
 800755e:	f104 0a1a 	add.w	sl, r4, #26
 8007562:	e7f2      	b.n	800754a <_printf_float+0x422>
 8007564:	2301      	movs	r3, #1
 8007566:	4642      	mov	r2, r8
 8007568:	e7df      	b.n	800752a <_printf_float+0x402>
 800756a:	2301      	movs	r3, #1
 800756c:	464a      	mov	r2, r9
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae38 	beq.w	80071ea <_printf_float+0xc2>
 800757a:	f108 0801 	add.w	r8, r8, #1
 800757e:	68e3      	ldr	r3, [r4, #12]
 8007580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007582:	1a5b      	subs	r3, r3, r1
 8007584:	4543      	cmp	r3, r8
 8007586:	dcf0      	bgt.n	800756a <_printf_float+0x442>
 8007588:	e6fa      	b.n	8007380 <_printf_float+0x258>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	f104 0919 	add.w	r9, r4, #25
 8007592:	e7f4      	b.n	800757e <_printf_float+0x456>

08007594 <_printf_common>:
 8007594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	4616      	mov	r6, r2
 800759a:	4699      	mov	r9, r3
 800759c:	688a      	ldr	r2, [r1, #8]
 800759e:	690b      	ldr	r3, [r1, #16]
 80075a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075a4:	4293      	cmp	r3, r2
 80075a6:	bfb8      	it	lt
 80075a8:	4613      	movlt	r3, r2
 80075aa:	6033      	str	r3, [r6, #0]
 80075ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075b0:	4607      	mov	r7, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b10a      	cbz	r2, 80075ba <_printf_common+0x26>
 80075b6:	3301      	adds	r3, #1
 80075b8:	6033      	str	r3, [r6, #0]
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	0699      	lsls	r1, r3, #26
 80075be:	bf42      	ittt	mi
 80075c0:	6833      	ldrmi	r3, [r6, #0]
 80075c2:	3302      	addmi	r3, #2
 80075c4:	6033      	strmi	r3, [r6, #0]
 80075c6:	6825      	ldr	r5, [r4, #0]
 80075c8:	f015 0506 	ands.w	r5, r5, #6
 80075cc:	d106      	bne.n	80075dc <_printf_common+0x48>
 80075ce:	f104 0a19 	add.w	sl, r4, #25
 80075d2:	68e3      	ldr	r3, [r4, #12]
 80075d4:	6832      	ldr	r2, [r6, #0]
 80075d6:	1a9b      	subs	r3, r3, r2
 80075d8:	42ab      	cmp	r3, r5
 80075da:	dc26      	bgt.n	800762a <_printf_common+0x96>
 80075dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075e0:	1e13      	subs	r3, r2, #0
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	bf18      	it	ne
 80075e6:	2301      	movne	r3, #1
 80075e8:	0692      	lsls	r2, r2, #26
 80075ea:	d42b      	bmi.n	8007644 <_printf_common+0xb0>
 80075ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075f0:	4649      	mov	r1, r9
 80075f2:	4638      	mov	r0, r7
 80075f4:	47c0      	blx	r8
 80075f6:	3001      	adds	r0, #1
 80075f8:	d01e      	beq.n	8007638 <_printf_common+0xa4>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	68e5      	ldr	r5, [r4, #12]
 80075fe:	6832      	ldr	r2, [r6, #0]
 8007600:	f003 0306 	and.w	r3, r3, #6
 8007604:	2b04      	cmp	r3, #4
 8007606:	bf08      	it	eq
 8007608:	1aad      	subeq	r5, r5, r2
 800760a:	68a3      	ldr	r3, [r4, #8]
 800760c:	6922      	ldr	r2, [r4, #16]
 800760e:	bf0c      	ite	eq
 8007610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007614:	2500      	movne	r5, #0
 8007616:	4293      	cmp	r3, r2
 8007618:	bfc4      	itt	gt
 800761a:	1a9b      	subgt	r3, r3, r2
 800761c:	18ed      	addgt	r5, r5, r3
 800761e:	2600      	movs	r6, #0
 8007620:	341a      	adds	r4, #26
 8007622:	42b5      	cmp	r5, r6
 8007624:	d11a      	bne.n	800765c <_printf_common+0xc8>
 8007626:	2000      	movs	r0, #0
 8007628:	e008      	b.n	800763c <_printf_common+0xa8>
 800762a:	2301      	movs	r3, #1
 800762c:	4652      	mov	r2, sl
 800762e:	4649      	mov	r1, r9
 8007630:	4638      	mov	r0, r7
 8007632:	47c0      	blx	r8
 8007634:	3001      	adds	r0, #1
 8007636:	d103      	bne.n	8007640 <_printf_common+0xac>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007640:	3501      	adds	r5, #1
 8007642:	e7c6      	b.n	80075d2 <_printf_common+0x3e>
 8007644:	18e1      	adds	r1, r4, r3
 8007646:	1c5a      	adds	r2, r3, #1
 8007648:	2030      	movs	r0, #48	; 0x30
 800764a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800764e:	4422      	add	r2, r4
 8007650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007658:	3302      	adds	r3, #2
 800765a:	e7c7      	b.n	80075ec <_printf_common+0x58>
 800765c:	2301      	movs	r3, #1
 800765e:	4622      	mov	r2, r4
 8007660:	4649      	mov	r1, r9
 8007662:	4638      	mov	r0, r7
 8007664:	47c0      	blx	r8
 8007666:	3001      	adds	r0, #1
 8007668:	d0e6      	beq.n	8007638 <_printf_common+0xa4>
 800766a:	3601      	adds	r6, #1
 800766c:	e7d9      	b.n	8007622 <_printf_common+0x8e>
	...

08007670 <_printf_i>:
 8007670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	460c      	mov	r4, r1
 8007676:	4691      	mov	r9, r2
 8007678:	7e27      	ldrb	r7, [r4, #24]
 800767a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800767c:	2f78      	cmp	r7, #120	; 0x78
 800767e:	4680      	mov	r8, r0
 8007680:	469a      	mov	sl, r3
 8007682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007686:	d807      	bhi.n	8007698 <_printf_i+0x28>
 8007688:	2f62      	cmp	r7, #98	; 0x62
 800768a:	d80a      	bhi.n	80076a2 <_printf_i+0x32>
 800768c:	2f00      	cmp	r7, #0
 800768e:	f000 80d8 	beq.w	8007842 <_printf_i+0x1d2>
 8007692:	2f58      	cmp	r7, #88	; 0x58
 8007694:	f000 80a3 	beq.w	80077de <_printf_i+0x16e>
 8007698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800769c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076a0:	e03a      	b.n	8007718 <_printf_i+0xa8>
 80076a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076a6:	2b15      	cmp	r3, #21
 80076a8:	d8f6      	bhi.n	8007698 <_printf_i+0x28>
 80076aa:	a001      	add	r0, pc, #4	; (adr r0, 80076b0 <_printf_i+0x40>)
 80076ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80076b0:	08007709 	.word	0x08007709
 80076b4:	0800771d 	.word	0x0800771d
 80076b8:	08007699 	.word	0x08007699
 80076bc:	08007699 	.word	0x08007699
 80076c0:	08007699 	.word	0x08007699
 80076c4:	08007699 	.word	0x08007699
 80076c8:	0800771d 	.word	0x0800771d
 80076cc:	08007699 	.word	0x08007699
 80076d0:	08007699 	.word	0x08007699
 80076d4:	08007699 	.word	0x08007699
 80076d8:	08007699 	.word	0x08007699
 80076dc:	08007829 	.word	0x08007829
 80076e0:	0800774d 	.word	0x0800774d
 80076e4:	0800780b 	.word	0x0800780b
 80076e8:	08007699 	.word	0x08007699
 80076ec:	08007699 	.word	0x08007699
 80076f0:	0800784b 	.word	0x0800784b
 80076f4:	08007699 	.word	0x08007699
 80076f8:	0800774d 	.word	0x0800774d
 80076fc:	08007699 	.word	0x08007699
 8007700:	08007699 	.word	0x08007699
 8007704:	08007813 	.word	0x08007813
 8007708:	680b      	ldr	r3, [r1, #0]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007718:	2301      	movs	r3, #1
 800771a:	e0a3      	b.n	8007864 <_printf_i+0x1f4>
 800771c:	6825      	ldr	r5, [r4, #0]
 800771e:	6808      	ldr	r0, [r1, #0]
 8007720:	062e      	lsls	r6, r5, #24
 8007722:	f100 0304 	add.w	r3, r0, #4
 8007726:	d50a      	bpl.n	800773e <_printf_i+0xce>
 8007728:	6805      	ldr	r5, [r0, #0]
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	2d00      	cmp	r5, #0
 800772e:	da03      	bge.n	8007738 <_printf_i+0xc8>
 8007730:	232d      	movs	r3, #45	; 0x2d
 8007732:	426d      	negs	r5, r5
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007738:	485e      	ldr	r0, [pc, #376]	; (80078b4 <_printf_i+0x244>)
 800773a:	230a      	movs	r3, #10
 800773c:	e019      	b.n	8007772 <_printf_i+0x102>
 800773e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007742:	6805      	ldr	r5, [r0, #0]
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	bf18      	it	ne
 8007748:	b22d      	sxthne	r5, r5
 800774a:	e7ef      	b.n	800772c <_printf_i+0xbc>
 800774c:	680b      	ldr	r3, [r1, #0]
 800774e:	6825      	ldr	r5, [r4, #0]
 8007750:	1d18      	adds	r0, r3, #4
 8007752:	6008      	str	r0, [r1, #0]
 8007754:	0628      	lsls	r0, r5, #24
 8007756:	d501      	bpl.n	800775c <_printf_i+0xec>
 8007758:	681d      	ldr	r5, [r3, #0]
 800775a:	e002      	b.n	8007762 <_printf_i+0xf2>
 800775c:	0669      	lsls	r1, r5, #25
 800775e:	d5fb      	bpl.n	8007758 <_printf_i+0xe8>
 8007760:	881d      	ldrh	r5, [r3, #0]
 8007762:	4854      	ldr	r0, [pc, #336]	; (80078b4 <_printf_i+0x244>)
 8007764:	2f6f      	cmp	r7, #111	; 0x6f
 8007766:	bf0c      	ite	eq
 8007768:	2308      	moveq	r3, #8
 800776a:	230a      	movne	r3, #10
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007772:	6866      	ldr	r6, [r4, #4]
 8007774:	60a6      	str	r6, [r4, #8]
 8007776:	2e00      	cmp	r6, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90d      	cbnz	r5, 8007788 <_printf_i+0x118>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d04d      	beq.n	8007824 <_printf_i+0x1b4>
 8007788:	4616      	mov	r6, r2
 800778a:	fbb5 f1f3 	udiv	r1, r5, r3
 800778e:	fb03 5711 	mls	r7, r3, r1, r5
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007798:	462f      	mov	r7, r5
 800779a:	42bb      	cmp	r3, r7
 800779c:	460d      	mov	r5, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x11a>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x14c>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x14c>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	; 0x30
 80077b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077bc:	1b92      	subs	r2, r2, r6
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee2 	bl	8007594 <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14c      	bne.n	800786e <_printf_i+0x1fe>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	4835      	ldr	r0, [pc, #212]	; (80078b4 <_printf_i+0x244>)
 80077e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	680e      	ldr	r6, [r1, #0]
 80077e8:	061f      	lsls	r7, r3, #24
 80077ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80077ee:	600e      	str	r6, [r1, #0]
 80077f0:	d514      	bpl.n	800781c <_printf_i+0x1ac>
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	bf44      	itt	mi
 80077f6:	f043 0320 	orrmi.w	r3, r3, #32
 80077fa:	6023      	strmi	r3, [r4, #0]
 80077fc:	b91d      	cbnz	r5, 8007806 <_printf_i+0x196>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	f023 0320 	bic.w	r3, r3, #32
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	2310      	movs	r3, #16
 8007808:	e7b0      	b.n	800776c <_printf_i+0xfc>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	f043 0320 	orr.w	r3, r3, #32
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	2378      	movs	r3, #120	; 0x78
 8007814:	4828      	ldr	r0, [pc, #160]	; (80078b8 <_printf_i+0x248>)
 8007816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800781a:	e7e3      	b.n	80077e4 <_printf_i+0x174>
 800781c:	065e      	lsls	r6, r3, #25
 800781e:	bf48      	it	mi
 8007820:	b2ad      	uxthmi	r5, r5
 8007822:	e7e6      	b.n	80077f2 <_printf_i+0x182>
 8007824:	4616      	mov	r6, r2
 8007826:	e7bb      	b.n	80077a0 <_printf_i+0x130>
 8007828:	680b      	ldr	r3, [r1, #0]
 800782a:	6826      	ldr	r6, [r4, #0]
 800782c:	6960      	ldr	r0, [r4, #20]
 800782e:	1d1d      	adds	r5, r3, #4
 8007830:	600d      	str	r5, [r1, #0]
 8007832:	0635      	lsls	r5, r6, #24
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	d501      	bpl.n	800783c <_printf_i+0x1cc>
 8007838:	6018      	str	r0, [r3, #0]
 800783a:	e002      	b.n	8007842 <_printf_i+0x1d2>
 800783c:	0671      	lsls	r1, r6, #25
 800783e:	d5fb      	bpl.n	8007838 <_printf_i+0x1c8>
 8007840:	8018      	strh	r0, [r3, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	6123      	str	r3, [r4, #16]
 8007846:	4616      	mov	r6, r2
 8007848:	e7ba      	b.n	80077c0 <_printf_i+0x150>
 800784a:	680b      	ldr	r3, [r1, #0]
 800784c:	1d1a      	adds	r2, r3, #4
 800784e:	600a      	str	r2, [r1, #0]
 8007850:	681e      	ldr	r6, [r3, #0]
 8007852:	6862      	ldr	r2, [r4, #4]
 8007854:	2100      	movs	r1, #0
 8007856:	4630      	mov	r0, r6
 8007858:	f7f8 fcca 	bl	80001f0 <memchr>
 800785c:	b108      	cbz	r0, 8007862 <_printf_i+0x1f2>
 800785e:	1b80      	subs	r0, r0, r6
 8007860:	6060      	str	r0, [r4, #4]
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	6123      	str	r3, [r4, #16]
 8007866:	2300      	movs	r3, #0
 8007868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800786c:	e7a8      	b.n	80077c0 <_printf_i+0x150>
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	4632      	mov	r2, r6
 8007872:	4649      	mov	r1, r9
 8007874:	4640      	mov	r0, r8
 8007876:	47d0      	blx	sl
 8007878:	3001      	adds	r0, #1
 800787a:	d0ab      	beq.n	80077d4 <_printf_i+0x164>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	079b      	lsls	r3, r3, #30
 8007880:	d413      	bmi.n	80078aa <_printf_i+0x23a>
 8007882:	68e0      	ldr	r0, [r4, #12]
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	4298      	cmp	r0, r3
 8007888:	bfb8      	it	lt
 800788a:	4618      	movlt	r0, r3
 800788c:	e7a4      	b.n	80077d8 <_printf_i+0x168>
 800788e:	2301      	movs	r3, #1
 8007890:	4632      	mov	r2, r6
 8007892:	4649      	mov	r1, r9
 8007894:	4640      	mov	r0, r8
 8007896:	47d0      	blx	sl
 8007898:	3001      	adds	r0, #1
 800789a:	d09b      	beq.n	80077d4 <_printf_i+0x164>
 800789c:	3501      	adds	r5, #1
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	9903      	ldr	r1, [sp, #12]
 80078a2:	1a5b      	subs	r3, r3, r1
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dcf2      	bgt.n	800788e <_printf_i+0x21e>
 80078a8:	e7eb      	b.n	8007882 <_printf_i+0x212>
 80078aa:	2500      	movs	r5, #0
 80078ac:	f104 0619 	add.w	r6, r4, #25
 80078b0:	e7f5      	b.n	800789e <_printf_i+0x22e>
 80078b2:	bf00      	nop
 80078b4:	0800ec6e 	.word	0x0800ec6e
 80078b8:	0800ec7f 	.word	0x0800ec7f

080078bc <iprintf>:
 80078bc:	b40f      	push	{r0, r1, r2, r3}
 80078be:	4b0a      	ldr	r3, [pc, #40]	; (80078e8 <iprintf+0x2c>)
 80078c0:	b513      	push	{r0, r1, r4, lr}
 80078c2:	681c      	ldr	r4, [r3, #0]
 80078c4:	b124      	cbz	r4, 80078d0 <iprintf+0x14>
 80078c6:	69a3      	ldr	r3, [r4, #24]
 80078c8:	b913      	cbnz	r3, 80078d0 <iprintf+0x14>
 80078ca:	4620      	mov	r0, r4
 80078cc:	f001 f8f6 	bl	8008abc <__sinit>
 80078d0:	ab05      	add	r3, sp, #20
 80078d2:	9a04      	ldr	r2, [sp, #16]
 80078d4:	68a1      	ldr	r1, [r4, #8]
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 ffcd 	bl	8009878 <_vfiprintf_r>
 80078de:	b002      	add	sp, #8
 80078e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e4:	b004      	add	sp, #16
 80078e6:	4770      	bx	lr
 80078e8:	20000024 	.word	0x20000024

080078ec <_puts_r>:
 80078ec:	b570      	push	{r4, r5, r6, lr}
 80078ee:	460e      	mov	r6, r1
 80078f0:	4605      	mov	r5, r0
 80078f2:	b118      	cbz	r0, 80078fc <_puts_r+0x10>
 80078f4:	6983      	ldr	r3, [r0, #24]
 80078f6:	b90b      	cbnz	r3, 80078fc <_puts_r+0x10>
 80078f8:	f001 f8e0 	bl	8008abc <__sinit>
 80078fc:	69ab      	ldr	r3, [r5, #24]
 80078fe:	68ac      	ldr	r4, [r5, #8]
 8007900:	b913      	cbnz	r3, 8007908 <_puts_r+0x1c>
 8007902:	4628      	mov	r0, r5
 8007904:	f001 f8da 	bl	8008abc <__sinit>
 8007908:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <_puts_r+0xd0>)
 800790a:	429c      	cmp	r4, r3
 800790c:	d120      	bne.n	8007950 <_puts_r+0x64>
 800790e:	686c      	ldr	r4, [r5, #4]
 8007910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007912:	07db      	lsls	r3, r3, #31
 8007914:	d405      	bmi.n	8007922 <_puts_r+0x36>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d402      	bmi.n	8007922 <_puts_r+0x36>
 800791c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791e:	f001 f970 	bl	8008c02 <__retarget_lock_acquire_recursive>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	0719      	lsls	r1, r3, #28
 8007926:	d51d      	bpl.n	8007964 <_puts_r+0x78>
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	b1db      	cbz	r3, 8007964 <_puts_r+0x78>
 800792c:	3e01      	subs	r6, #1
 800792e:	68a3      	ldr	r3, [r4, #8]
 8007930:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007934:	3b01      	subs	r3, #1
 8007936:	60a3      	str	r3, [r4, #8]
 8007938:	bb39      	cbnz	r1, 800798a <_puts_r+0x9e>
 800793a:	2b00      	cmp	r3, #0
 800793c:	da38      	bge.n	80079b0 <_puts_r+0xc4>
 800793e:	4622      	mov	r2, r4
 8007940:	210a      	movs	r1, #10
 8007942:	4628      	mov	r0, r5
 8007944:	f000 f868 	bl	8007a18 <__swbuf_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d011      	beq.n	8007970 <_puts_r+0x84>
 800794c:	250a      	movs	r5, #10
 800794e:	e011      	b.n	8007974 <_puts_r+0x88>
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <_puts_r+0xd4>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <_puts_r+0x6e>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7da      	b.n	8007910 <_puts_r+0x24>
 800795a:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <_puts_r+0xd8>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7d5      	b.n	8007910 <_puts_r+0x24>
 8007964:	4621      	mov	r1, r4
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f8a8 	bl	8007abc <__swsetup_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	d0dd      	beq.n	800792c <_puts_r+0x40>
 8007970:	f04f 35ff 	mov.w	r5, #4294967295
 8007974:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007976:	07da      	lsls	r2, r3, #31
 8007978:	d405      	bmi.n	8007986 <_puts_r+0x9a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	059b      	lsls	r3, r3, #22
 800797e:	d402      	bmi.n	8007986 <_puts_r+0x9a>
 8007980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007982:	f001 f93f 	bl	8008c04 <__retarget_lock_release_recursive>
 8007986:	4628      	mov	r0, r5
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	2b00      	cmp	r3, #0
 800798c:	da04      	bge.n	8007998 <_puts_r+0xac>
 800798e:	69a2      	ldr	r2, [r4, #24]
 8007990:	429a      	cmp	r2, r3
 8007992:	dc06      	bgt.n	80079a2 <_puts_r+0xb6>
 8007994:	290a      	cmp	r1, #10
 8007996:	d004      	beq.n	80079a2 <_puts_r+0xb6>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	7019      	strb	r1, [r3, #0]
 80079a0:	e7c5      	b.n	800792e <_puts_r+0x42>
 80079a2:	4622      	mov	r2, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f837 	bl	8007a18 <__swbuf_r>
 80079aa:	3001      	adds	r0, #1
 80079ac:	d1bf      	bne.n	800792e <_puts_r+0x42>
 80079ae:	e7df      	b.n	8007970 <_puts_r+0x84>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	250a      	movs	r5, #10
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	701d      	strb	r5, [r3, #0]
 80079ba:	e7db      	b.n	8007974 <_puts_r+0x88>
 80079bc:	0800ed44 	.word	0x0800ed44
 80079c0:	0800ed64 	.word	0x0800ed64
 80079c4:	0800ed24 	.word	0x0800ed24

080079c8 <puts>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <puts+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f7ff bf8d 	b.w	80078ec <_puts_r>
 80079d2:	bf00      	nop
 80079d4:	20000024 	.word	0x20000024

080079d8 <siprintf>:
 80079d8:	b40e      	push	{r1, r2, r3}
 80079da:	b500      	push	{lr}
 80079dc:	b09c      	sub	sp, #112	; 0x70
 80079de:	ab1d      	add	r3, sp, #116	; 0x74
 80079e0:	9002      	str	r0, [sp, #8]
 80079e2:	9006      	str	r0, [sp, #24]
 80079e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079e8:	4809      	ldr	r0, [pc, #36]	; (8007a10 <siprintf+0x38>)
 80079ea:	9107      	str	r1, [sp, #28]
 80079ec:	9104      	str	r1, [sp, #16]
 80079ee:	4909      	ldr	r1, [pc, #36]	; (8007a14 <siprintf+0x3c>)
 80079f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f4:	9105      	str	r1, [sp, #20]
 80079f6:	6800      	ldr	r0, [r0, #0]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	a902      	add	r1, sp, #8
 80079fc:	f001 fe12 	bl	8009624 <_svfiprintf_r>
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	b01c      	add	sp, #112	; 0x70
 8007a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a0c:	b003      	add	sp, #12
 8007a0e:	4770      	bx	lr
 8007a10:	20000024 	.word	0x20000024
 8007a14:	ffff0208 	.word	0xffff0208

08007a18 <__swbuf_r>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4605      	mov	r5, r0
 8007a20:	b118      	cbz	r0, 8007a2a <__swbuf_r+0x12>
 8007a22:	6983      	ldr	r3, [r0, #24]
 8007a24:	b90b      	cbnz	r3, 8007a2a <__swbuf_r+0x12>
 8007a26:	f001 f849 	bl	8008abc <__sinit>
 8007a2a:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <__swbuf_r+0x98>)
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	d12b      	bne.n	8007a88 <__swbuf_r+0x70>
 8007a30:	686c      	ldr	r4, [r5, #4]
 8007a32:	69a3      	ldr	r3, [r4, #24]
 8007a34:	60a3      	str	r3, [r4, #8]
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	071a      	lsls	r2, r3, #28
 8007a3a:	d52f      	bpl.n	8007a9c <__swbuf_r+0x84>
 8007a3c:	6923      	ldr	r3, [r4, #16]
 8007a3e:	b36b      	cbz	r3, 8007a9c <__swbuf_r+0x84>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	1ac0      	subs	r0, r0, r3
 8007a46:	6963      	ldr	r3, [r4, #20]
 8007a48:	b2f6      	uxtb	r6, r6
 8007a4a:	4283      	cmp	r3, r0
 8007a4c:	4637      	mov	r7, r6
 8007a4e:	dc04      	bgt.n	8007a5a <__swbuf_r+0x42>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 ff9e 	bl	8008994 <_fflush_r>
 8007a58:	bb30      	cbnz	r0, 8007aa8 <__swbuf_r+0x90>
 8007a5a:	68a3      	ldr	r3, [r4, #8]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	701e      	strb	r6, [r3, #0]
 8007a68:	6963      	ldr	r3, [r4, #20]
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	4283      	cmp	r3, r0
 8007a6e:	d004      	beq.n	8007a7a <__swbuf_r+0x62>
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	07db      	lsls	r3, r3, #31
 8007a74:	d506      	bpl.n	8007a84 <__swbuf_r+0x6c>
 8007a76:	2e0a      	cmp	r6, #10
 8007a78:	d104      	bne.n	8007a84 <__swbuf_r+0x6c>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f000 ff89 	bl	8008994 <_fflush_r>
 8007a82:	b988      	cbnz	r0, 8007aa8 <__swbuf_r+0x90>
 8007a84:	4638      	mov	r0, r7
 8007a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a88:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <__swbuf_r+0x9c>)
 8007a8a:	429c      	cmp	r4, r3
 8007a8c:	d101      	bne.n	8007a92 <__swbuf_r+0x7a>
 8007a8e:	68ac      	ldr	r4, [r5, #8]
 8007a90:	e7cf      	b.n	8007a32 <__swbuf_r+0x1a>
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <__swbuf_r+0xa0>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	bf08      	it	eq
 8007a98:	68ec      	ldreq	r4, [r5, #12]
 8007a9a:	e7ca      	b.n	8007a32 <__swbuf_r+0x1a>
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f80c 	bl	8007abc <__swsetup_r>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d0cb      	beq.n	8007a40 <__swbuf_r+0x28>
 8007aa8:	f04f 37ff 	mov.w	r7, #4294967295
 8007aac:	e7ea      	b.n	8007a84 <__swbuf_r+0x6c>
 8007aae:	bf00      	nop
 8007ab0:	0800ed44 	.word	0x0800ed44
 8007ab4:	0800ed64 	.word	0x0800ed64
 8007ab8:	0800ed24 	.word	0x0800ed24

08007abc <__swsetup_r>:
 8007abc:	4b32      	ldr	r3, [pc, #200]	; (8007b88 <__swsetup_r+0xcc>)
 8007abe:	b570      	push	{r4, r5, r6, lr}
 8007ac0:	681d      	ldr	r5, [r3, #0]
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	b125      	cbz	r5, 8007ad2 <__swsetup_r+0x16>
 8007ac8:	69ab      	ldr	r3, [r5, #24]
 8007aca:	b913      	cbnz	r3, 8007ad2 <__swsetup_r+0x16>
 8007acc:	4628      	mov	r0, r5
 8007ace:	f000 fff5 	bl	8008abc <__sinit>
 8007ad2:	4b2e      	ldr	r3, [pc, #184]	; (8007b8c <__swsetup_r+0xd0>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d10f      	bne.n	8007af8 <__swsetup_r+0x3c>
 8007ad8:	686c      	ldr	r4, [r5, #4]
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae0:	0719      	lsls	r1, r3, #28
 8007ae2:	d42c      	bmi.n	8007b3e <__swsetup_r+0x82>
 8007ae4:	06dd      	lsls	r5, r3, #27
 8007ae6:	d411      	bmi.n	8007b0c <__swsetup_r+0x50>
 8007ae8:	2309      	movs	r3, #9
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	f04f 30ff 	mov.w	r0, #4294967295
 8007af6:	e03e      	b.n	8007b76 <__swsetup_r+0xba>
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <__swsetup_r+0xd4>)
 8007afa:	429c      	cmp	r4, r3
 8007afc:	d101      	bne.n	8007b02 <__swsetup_r+0x46>
 8007afe:	68ac      	ldr	r4, [r5, #8]
 8007b00:	e7eb      	b.n	8007ada <__swsetup_r+0x1e>
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <__swsetup_r+0xd8>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	bf08      	it	eq
 8007b08:	68ec      	ldreq	r4, [r5, #12]
 8007b0a:	e7e6      	b.n	8007ada <__swsetup_r+0x1e>
 8007b0c:	0758      	lsls	r0, r3, #29
 8007b0e:	d512      	bpl.n	8007b36 <__swsetup_r+0x7a>
 8007b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b12:	b141      	cbz	r1, 8007b26 <__swsetup_r+0x6a>
 8007b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	d002      	beq.n	8007b22 <__swsetup_r+0x66>
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f001 fc7b 	bl	8009418 <_free_r>
 8007b22:	2300      	movs	r3, #0
 8007b24:	6363      	str	r3, [r4, #52]	; 0x34
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b2c:	81a3      	strh	r3, [r4, #12]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6063      	str	r3, [r4, #4]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f043 0308 	orr.w	r3, r3, #8
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	b94b      	cbnz	r3, 8007b56 <__swsetup_r+0x9a>
 8007b42:	89a3      	ldrh	r3, [r4, #12]
 8007b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4c:	d003      	beq.n	8007b56 <__swsetup_r+0x9a>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4630      	mov	r0, r6
 8007b52:	f001 f87d 	bl	8008c50 <__smakebuf_r>
 8007b56:	89a0      	ldrh	r0, [r4, #12]
 8007b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b5c:	f010 0301 	ands.w	r3, r0, #1
 8007b60:	d00a      	beq.n	8007b78 <__swsetup_r+0xbc>
 8007b62:	2300      	movs	r3, #0
 8007b64:	60a3      	str	r3, [r4, #8]
 8007b66:	6963      	ldr	r3, [r4, #20]
 8007b68:	425b      	negs	r3, r3
 8007b6a:	61a3      	str	r3, [r4, #24]
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	b943      	cbnz	r3, 8007b82 <__swsetup_r+0xc6>
 8007b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b74:	d1ba      	bne.n	8007aec <__swsetup_r+0x30>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	0781      	lsls	r1, r0, #30
 8007b7a:	bf58      	it	pl
 8007b7c:	6963      	ldrpl	r3, [r4, #20]
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	e7f4      	b.n	8007b6c <__swsetup_r+0xb0>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e7f7      	b.n	8007b76 <__swsetup_r+0xba>
 8007b86:	bf00      	nop
 8007b88:	20000024 	.word	0x20000024
 8007b8c:	0800ed44 	.word	0x0800ed44
 8007b90:	0800ed64 	.word	0x0800ed64
 8007b94:	0800ed24 	.word	0x0800ed24

08007b98 <quorem>:
 8007b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	6903      	ldr	r3, [r0, #16]
 8007b9e:	690c      	ldr	r4, [r1, #16]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	f2c0 8081 	blt.w	8007caa <quorem+0x112>
 8007ba8:	3c01      	subs	r4, #1
 8007baa:	f101 0814 	add.w	r8, r1, #20
 8007bae:	f100 0514 	add.w	r5, r0, #20
 8007bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd0:	d331      	bcc.n	8007c36 <quorem+0x9e>
 8007bd2:	f04f 0e00 	mov.w	lr, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	46ac      	mov	ip, r5
 8007bda:	46f2      	mov	sl, lr
 8007bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be0:	b293      	uxth	r3, r2
 8007be2:	fb06 e303 	mla	r3, r6, r3, lr
 8007be6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf0:	0c12      	lsrs	r2, r2, #16
 8007bf2:	f8dc a000 	ldr.w	sl, [ip]
 8007bf6:	fb06 e202 	mla	r2, r6, r2, lr
 8007bfa:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c02:	fa1f fa82 	uxth.w	sl, r2
 8007c06:	f8dc 2000 	ldr.w	r2, [ip]
 8007c0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c18:	4581      	cmp	r9, r0
 8007c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c22:	d2db      	bcs.n	8007bdc <quorem+0x44>
 8007c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c28:	b92b      	cbnz	r3, 8007c36 <quorem+0x9e>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	d32e      	bcc.n	8007c92 <quorem+0xfa>
 8007c34:	613c      	str	r4, [r7, #16]
 8007c36:	4638      	mov	r0, r7
 8007c38:	f001 fade 	bl	80091f8 <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	db24      	blt.n	8007c8a <quorem+0xf2>
 8007c40:	3601      	adds	r6, #1
 8007c42:	4628      	mov	r0, r5
 8007c44:	f04f 0c00 	mov.w	ip, #0
 8007c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c50:	b293      	uxth	r3, r2
 8007c52:	ebac 0303 	sub.w	r3, ip, r3
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	fa13 f38e 	uxtah	r3, r3, lr
 8007c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6a:	45c1      	cmp	r9, r8
 8007c6c:	f840 3b04 	str.w	r3, [r0], #4
 8007c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c74:	d2e8      	bcs.n	8007c48 <quorem+0xb0>
 8007c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7e:	b922      	cbnz	r2, 8007c8a <quorem+0xf2>
 8007c80:	3b04      	subs	r3, #4
 8007c82:	429d      	cmp	r5, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	d30a      	bcc.n	8007c9e <quorem+0x106>
 8007c88:	613c      	str	r4, [r7, #16]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1cc      	bne.n	8007c34 <quorem+0x9c>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7c7      	b.n	8007c2e <quorem+0x96>
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1f0      	bne.n	8007c88 <quorem+0xf0>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	e7eb      	b.n	8007c82 <quorem+0xea>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7ee      	b.n	8007c8c <quorem+0xf4>
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	ed2d 8b02 	vpush	{d8}
 8007cb8:	ec57 6b10 	vmov	r6, r7, d0
 8007cbc:	b095      	sub	sp, #84	; 0x54
 8007cbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cc4:	9105      	str	r1, [sp, #20]
 8007cc6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007cca:	4604      	mov	r4, r0
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cd0:	b975      	cbnz	r5, 8007cf0 <_dtoa_r+0x40>
 8007cd2:	2010      	movs	r0, #16
 8007cd4:	f000 fffc 	bl	8008cd0 <malloc>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	6260      	str	r0, [r4, #36]	; 0x24
 8007cdc:	b920      	cbnz	r0, 8007ce8 <_dtoa_r+0x38>
 8007cde:	4bb2      	ldr	r3, [pc, #712]	; (8007fa8 <_dtoa_r+0x2f8>)
 8007ce0:	21ea      	movs	r1, #234	; 0xea
 8007ce2:	48b2      	ldr	r0, [pc, #712]	; (8007fac <_dtoa_r+0x2fc>)
 8007ce4:	f001 ff5e 	bl	8009ba4 <__assert_func>
 8007ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cec:	6005      	str	r5, [r0, #0]
 8007cee:	60c5      	str	r5, [r0, #12]
 8007cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	b151      	cbz	r1, 8007d0c <_dtoa_r+0x5c>
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	604a      	str	r2, [r1, #4]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4093      	lsls	r3, r2
 8007cfe:	608b      	str	r3, [r1, #8]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f001 f83b 	bl	8008d7c <_Bfree>
 8007d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	1e3b      	subs	r3, r7, #0
 8007d0e:	bfb9      	ittee	lt
 8007d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d14:	9303      	strlt	r3, [sp, #12]
 8007d16:	2300      	movge	r3, #0
 8007d18:	f8c8 3000 	strge.w	r3, [r8]
 8007d1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d20:	4ba3      	ldr	r3, [pc, #652]	; (8007fb0 <_dtoa_r+0x300>)
 8007d22:	bfbc      	itt	lt
 8007d24:	2201      	movlt	r2, #1
 8007d26:	f8c8 2000 	strlt.w	r2, [r8]
 8007d2a:	ea33 0309 	bics.w	r3, r3, r9
 8007d2e:	d11b      	bne.n	8007d68 <_dtoa_r+0xb8>
 8007d30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d3c:	4333      	orrs	r3, r6
 8007d3e:	f000 857a 	beq.w	8008836 <_dtoa_r+0xb86>
 8007d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d44:	b963      	cbnz	r3, 8007d60 <_dtoa_r+0xb0>
 8007d46:	4b9b      	ldr	r3, [pc, #620]	; (8007fb4 <_dtoa_r+0x304>)
 8007d48:	e024      	b.n	8007d94 <_dtoa_r+0xe4>
 8007d4a:	4b9b      	ldr	r3, [pc, #620]	; (8007fb8 <_dtoa_r+0x308>)
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	3308      	adds	r3, #8
 8007d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	9800      	ldr	r0, [sp, #0]
 8007d56:	b015      	add	sp, #84	; 0x54
 8007d58:	ecbd 8b02 	vpop	{d8}
 8007d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d60:	4b94      	ldr	r3, [pc, #592]	; (8007fb4 <_dtoa_r+0x304>)
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	3303      	adds	r3, #3
 8007d66:	e7f3      	b.n	8007d50 <_dtoa_r+0xa0>
 8007d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	ec51 0b17 	vmov	r0, r1, d7
 8007d72:	2300      	movs	r3, #0
 8007d74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007d78:	f7f8 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	b158      	cbz	r0, 8007d98 <_dtoa_r+0xe8>
 8007d80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d82:	2301      	movs	r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 8551 	beq.w	8008830 <_dtoa_r+0xb80>
 8007d8e:	488b      	ldr	r0, [pc, #556]	; (8007fbc <_dtoa_r+0x30c>)
 8007d90:	6018      	str	r0, [r3, #0]
 8007d92:	1e43      	subs	r3, r0, #1
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	e7dd      	b.n	8007d54 <_dtoa_r+0xa4>
 8007d98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007d9c:	aa12      	add	r2, sp, #72	; 0x48
 8007d9e:	a913      	add	r1, sp, #76	; 0x4c
 8007da0:	4620      	mov	r0, r4
 8007da2:	f001 facd 	bl	8009340 <__d2b>
 8007da6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007daa:	4683      	mov	fp, r0
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	d07c      	beq.n	8007eaa <_dtoa_r+0x1fa>
 8007db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007dbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dca:	4b7d      	ldr	r3, [pc, #500]	; (8007fc0 <_dtoa_r+0x310>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fa61 	bl	8000298 <__aeabi_dsub>
 8007dd6:	a36e      	add	r3, pc, #440	; (adr r3, 8007f90 <_dtoa_r+0x2e0>)
 8007dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	a36d      	add	r3, pc, #436	; (adr r3, 8007f98 <_dtoa_r+0x2e8>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 fa59 	bl	800029c <__adddf3>
 8007dea:	4606      	mov	r6, r0
 8007dec:	4628      	mov	r0, r5
 8007dee:	460f      	mov	r7, r1
 8007df0:	f7f8 fba0 	bl	8000534 <__aeabi_i2d>
 8007df4:	a36a      	add	r3, pc, #424	; (adr r3, 8007fa0 <_dtoa_r+0x2f0>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	f7f8 fc05 	bl	8000608 <__aeabi_dmul>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 fa49 	bl	800029c <__adddf3>
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	f7f8 feab 	bl	8000b68 <__aeabi_d2iz>
 8007e12:	2200      	movs	r2, #0
 8007e14:	4682      	mov	sl, r0
 8007e16:	2300      	movs	r3, #0
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe66 	bl	8000aec <__aeabi_dcmplt>
 8007e20:	b148      	cbz	r0, 8007e36 <_dtoa_r+0x186>
 8007e22:	4650      	mov	r0, sl
 8007e24:	f7f8 fb86 	bl	8000534 <__aeabi_i2d>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	f7f8 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e30:	b908      	cbnz	r0, 8007e36 <_dtoa_r+0x186>
 8007e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e36:	f1ba 0f16 	cmp.w	sl, #22
 8007e3a:	d854      	bhi.n	8007ee6 <_dtoa_r+0x236>
 8007e3c:	4b61      	ldr	r3, [pc, #388]	; (8007fc4 <_dtoa_r+0x314>)
 8007e3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e4a:	f7f8 fe4f 	bl	8000aec <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d04b      	beq.n	8007eea <_dtoa_r+0x23a>
 8007e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e56:	2300      	movs	r3, #0
 8007e58:	930e      	str	r3, [sp, #56]	; 0x38
 8007e5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e5c:	1b5d      	subs	r5, r3, r5
 8007e5e:	1e6b      	subs	r3, r5, #1
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	bf43      	ittte	mi
 8007e64:	2300      	movmi	r3, #0
 8007e66:	f1c5 0801 	rsbmi	r8, r5, #1
 8007e6a:	9304      	strmi	r3, [sp, #16]
 8007e6c:	f04f 0800 	movpl.w	r8, #0
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	db3b      	blt.n	8007eee <_dtoa_r+0x23e>
 8007e76:	9b04      	ldr	r3, [sp, #16]
 8007e78:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007e7c:	4453      	add	r3, sl
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	2300      	movs	r3, #0
 8007e82:	9306      	str	r3, [sp, #24]
 8007e84:	9b05      	ldr	r3, [sp, #20]
 8007e86:	2b09      	cmp	r3, #9
 8007e88:	d869      	bhi.n	8007f5e <_dtoa_r+0x2ae>
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	bfc4      	itt	gt
 8007e8e:	3b04      	subgt	r3, #4
 8007e90:	9305      	strgt	r3, [sp, #20]
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	f1a3 0302 	sub.w	r3, r3, #2
 8007e98:	bfcc      	ite	gt
 8007e9a:	2500      	movgt	r5, #0
 8007e9c:	2501      	movle	r5, #1
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d869      	bhi.n	8007f76 <_dtoa_r+0x2c6>
 8007ea2:	e8df f003 	tbb	[pc, r3]
 8007ea6:	4e2c      	.short	0x4e2c
 8007ea8:	5a4c      	.short	0x5a4c
 8007eaa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007eae:	441d      	add	r5, r3
 8007eb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	bfc1      	itttt	gt
 8007eb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ebc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ec0:	fa09 f303 	lslgt.w	r3, r9, r3
 8007ec4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ec8:	bfda      	itte	le
 8007eca:	f1c3 0320 	rsble	r3, r3, #32
 8007ece:	fa06 f003 	lslle.w	r0, r6, r3
 8007ed2:	4318      	orrgt	r0, r3
 8007ed4:	f7f8 fb1e 	bl	8000514 <__aeabi_ui2d>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	4606      	mov	r6, r0
 8007edc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ee0:	3d01      	subs	r5, #1
 8007ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8007ee4:	e771      	b.n	8007dca <_dtoa_r+0x11a>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7b6      	b.n	8007e58 <_dtoa_r+0x1a8>
 8007eea:	900e      	str	r0, [sp, #56]	; 0x38
 8007eec:	e7b5      	b.n	8007e5a <_dtoa_r+0x1aa>
 8007eee:	f1ca 0300 	rsb	r3, sl, #0
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	eba8 080a 	sub.w	r8, r8, sl
 8007efa:	930d      	str	r3, [sp, #52]	; 0x34
 8007efc:	e7c2      	b.n	8007e84 <_dtoa_r+0x1d4>
 8007efe:	2300      	movs	r3, #0
 8007f00:	9308      	str	r3, [sp, #32]
 8007f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dc39      	bgt.n	8007f7c <_dtoa_r+0x2cc>
 8007f08:	f04f 0901 	mov.w	r9, #1
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	464b      	mov	r3, r9
 8007f12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f18:	2200      	movs	r2, #0
 8007f1a:	6042      	str	r2, [r0, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	f102 0614 	add.w	r6, r2, #20
 8007f22:	429e      	cmp	r6, r3
 8007f24:	6841      	ldr	r1, [r0, #4]
 8007f26:	d92f      	bls.n	8007f88 <_dtoa_r+0x2d8>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fee7 	bl	8008cfc <_Balloc>
 8007f2e:	9000      	str	r0, [sp, #0]
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d14b      	bne.n	8007fcc <_dtoa_r+0x31c>
 8007f34:	4b24      	ldr	r3, [pc, #144]	; (8007fc8 <_dtoa_r+0x318>)
 8007f36:	4602      	mov	r2, r0
 8007f38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f3c:	e6d1      	b.n	8007ce2 <_dtoa_r+0x32>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e7de      	b.n	8007f00 <_dtoa_r+0x250>
 8007f42:	2300      	movs	r3, #0
 8007f44:	9308      	str	r3, [sp, #32]
 8007f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f48:	eb0a 0903 	add.w	r9, sl, r3
 8007f4c:	f109 0301 	add.w	r3, r9, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	bfb8      	it	lt
 8007f56:	2301      	movlt	r3, #1
 8007f58:	e7dd      	b.n	8007f16 <_dtoa_r+0x266>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e7f2      	b.n	8007f44 <_dtoa_r+0x294>
 8007f5e:	2501      	movs	r5, #1
 8007f60:	2300      	movs	r3, #0
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	9508      	str	r5, [sp, #32]
 8007f66:	f04f 39ff 	mov.w	r9, #4294967295
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f70:	2312      	movs	r3, #18
 8007f72:	9209      	str	r2, [sp, #36]	; 0x24
 8007f74:	e7cf      	b.n	8007f16 <_dtoa_r+0x266>
 8007f76:	2301      	movs	r3, #1
 8007f78:	9308      	str	r3, [sp, #32]
 8007f7a:	e7f4      	b.n	8007f66 <_dtoa_r+0x2b6>
 8007f7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f80:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f84:	464b      	mov	r3, r9
 8007f86:	e7c6      	b.n	8007f16 <_dtoa_r+0x266>
 8007f88:	3101      	adds	r1, #1
 8007f8a:	6041      	str	r1, [r0, #4]
 8007f8c:	0052      	lsls	r2, r2, #1
 8007f8e:	e7c6      	b.n	8007f1e <_dtoa_r+0x26e>
 8007f90:	636f4361 	.word	0x636f4361
 8007f94:	3fd287a7 	.word	0x3fd287a7
 8007f98:	8b60c8b3 	.word	0x8b60c8b3
 8007f9c:	3fc68a28 	.word	0x3fc68a28
 8007fa0:	509f79fb 	.word	0x509f79fb
 8007fa4:	3fd34413 	.word	0x3fd34413
 8007fa8:	0800ec9d 	.word	0x0800ec9d
 8007fac:	0800ecb4 	.word	0x0800ecb4
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	0800ec99 	.word	0x0800ec99
 8007fb8:	0800ec90 	.word	0x0800ec90
 8007fbc:	0800ec6d 	.word	0x0800ec6d
 8007fc0:	3ff80000 	.word	0x3ff80000
 8007fc4:	0800ee10 	.word	0x0800ee10
 8007fc8:	0800ed13 	.word	0x0800ed13
 8007fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fce:	9a00      	ldr	r2, [sp, #0]
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	9b01      	ldr	r3, [sp, #4]
 8007fd4:	2b0e      	cmp	r3, #14
 8007fd6:	f200 80ad 	bhi.w	8008134 <_dtoa_r+0x484>
 8007fda:	2d00      	cmp	r5, #0
 8007fdc:	f000 80aa 	beq.w	8008134 <_dtoa_r+0x484>
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	dd36      	ble.n	8008054 <_dtoa_r+0x3a4>
 8007fe6:	4ac3      	ldr	r2, [pc, #780]	; (80082f4 <_dtoa_r+0x644>)
 8007fe8:	f00a 030f 	and.w	r3, sl, #15
 8007fec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ff0:	ed93 7b00 	vldr	d7, [r3]
 8007ff4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ff8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007ffc:	eeb0 8a47 	vmov.f32	s16, s14
 8008000:	eef0 8a67 	vmov.f32	s17, s15
 8008004:	d016      	beq.n	8008034 <_dtoa_r+0x384>
 8008006:	4bbc      	ldr	r3, [pc, #752]	; (80082f8 <_dtoa_r+0x648>)
 8008008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800800c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008010:	f7f8 fc24 	bl	800085c <__aeabi_ddiv>
 8008014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008018:	f007 070f 	and.w	r7, r7, #15
 800801c:	2503      	movs	r5, #3
 800801e:	4eb6      	ldr	r6, [pc, #728]	; (80082f8 <_dtoa_r+0x648>)
 8008020:	b957      	cbnz	r7, 8008038 <_dtoa_r+0x388>
 8008022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008026:	ec53 2b18 	vmov	r2, r3, d8
 800802a:	f7f8 fc17 	bl	800085c <__aeabi_ddiv>
 800802e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008032:	e029      	b.n	8008088 <_dtoa_r+0x3d8>
 8008034:	2502      	movs	r5, #2
 8008036:	e7f2      	b.n	800801e <_dtoa_r+0x36e>
 8008038:	07f9      	lsls	r1, r7, #31
 800803a:	d508      	bpl.n	800804e <_dtoa_r+0x39e>
 800803c:	ec51 0b18 	vmov	r0, r1, d8
 8008040:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008044:	f7f8 fae0 	bl	8000608 <__aeabi_dmul>
 8008048:	ec41 0b18 	vmov	d8, r0, r1
 800804c:	3501      	adds	r5, #1
 800804e:	107f      	asrs	r7, r7, #1
 8008050:	3608      	adds	r6, #8
 8008052:	e7e5      	b.n	8008020 <_dtoa_r+0x370>
 8008054:	f000 80a6 	beq.w	80081a4 <_dtoa_r+0x4f4>
 8008058:	f1ca 0600 	rsb	r6, sl, #0
 800805c:	4ba5      	ldr	r3, [pc, #660]	; (80082f4 <_dtoa_r+0x644>)
 800805e:	4fa6      	ldr	r7, [pc, #664]	; (80082f8 <_dtoa_r+0x648>)
 8008060:	f006 020f 	and.w	r2, r6, #15
 8008064:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008070:	f7f8 faca 	bl	8000608 <__aeabi_dmul>
 8008074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008078:	1136      	asrs	r6, r6, #4
 800807a:	2300      	movs	r3, #0
 800807c:	2502      	movs	r5, #2
 800807e:	2e00      	cmp	r6, #0
 8008080:	f040 8085 	bne.w	800818e <_dtoa_r+0x4de>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1d2      	bne.n	800802e <_dtoa_r+0x37e>
 8008088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 808c 	beq.w	80081a8 <_dtoa_r+0x4f8>
 8008090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008094:	4b99      	ldr	r3, [pc, #612]	; (80082fc <_dtoa_r+0x64c>)
 8008096:	2200      	movs	r2, #0
 8008098:	4630      	mov	r0, r6
 800809a:	4639      	mov	r1, r7
 800809c:	f7f8 fd26 	bl	8000aec <__aeabi_dcmplt>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f000 8081 	beq.w	80081a8 <_dtoa_r+0x4f8>
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d07d      	beq.n	80081a8 <_dtoa_r+0x4f8>
 80080ac:	f1b9 0f00 	cmp.w	r9, #0
 80080b0:	dd3c      	ble.n	800812c <_dtoa_r+0x47c>
 80080b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	2200      	movs	r2, #0
 80080ba:	4b91      	ldr	r3, [pc, #580]	; (8008300 <_dtoa_r+0x650>)
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 faa2 	bl	8000608 <__aeabi_dmul>
 80080c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c8:	3501      	adds	r5, #1
 80080ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80080ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7f8 fa2e 	bl	8000534 <__aeabi_i2d>
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	4b88      	ldr	r3, [pc, #544]	; (8008304 <_dtoa_r+0x654>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 f8da 	bl	800029c <__adddf3>
 80080e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80080ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d15c      	bne.n	80081b2 <_dtoa_r+0x502>
 80080f8:	4b83      	ldr	r3, [pc, #524]	; (8008308 <_dtoa_r+0x658>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 f8ca 	bl	8000298 <__aeabi_dsub>
 8008104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008108:	4606      	mov	r6, r0
 800810a:	460f      	mov	r7, r1
 800810c:	f7f8 fd0c 	bl	8000b28 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f040 8296 	bne.w	8008642 <_dtoa_r+0x992>
 8008116:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800811a:	4630      	mov	r0, r6
 800811c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008120:	4639      	mov	r1, r7
 8008122:	f7f8 fce3 	bl	8000aec <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	f040 8288 	bne.w	800863c <_dtoa_r+0x98c>
 800812c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008134:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008136:	2b00      	cmp	r3, #0
 8008138:	f2c0 8158 	blt.w	80083ec <_dtoa_r+0x73c>
 800813c:	f1ba 0f0e 	cmp.w	sl, #14
 8008140:	f300 8154 	bgt.w	80083ec <_dtoa_r+0x73c>
 8008144:	4b6b      	ldr	r3, [pc, #428]	; (80082f4 <_dtoa_r+0x644>)
 8008146:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800814a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800814e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	f280 80e3 	bge.w	800831c <_dtoa_r+0x66c>
 8008156:	9b01      	ldr	r3, [sp, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f300 80df 	bgt.w	800831c <_dtoa_r+0x66c>
 800815e:	f040 826d 	bne.w	800863c <_dtoa_r+0x98c>
 8008162:	4b69      	ldr	r3, [pc, #420]	; (8008308 <_dtoa_r+0x658>)
 8008164:	2200      	movs	r2, #0
 8008166:	4640      	mov	r0, r8
 8008168:	4649      	mov	r1, r9
 800816a:	f7f8 fa4d 	bl	8000608 <__aeabi_dmul>
 800816e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008172:	f7f8 fccf 	bl	8000b14 <__aeabi_dcmpge>
 8008176:	9e01      	ldr	r6, [sp, #4]
 8008178:	4637      	mov	r7, r6
 800817a:	2800      	cmp	r0, #0
 800817c:	f040 8243 	bne.w	8008606 <_dtoa_r+0x956>
 8008180:	9d00      	ldr	r5, [sp, #0]
 8008182:	2331      	movs	r3, #49	; 0x31
 8008184:	f805 3b01 	strb.w	r3, [r5], #1
 8008188:	f10a 0a01 	add.w	sl, sl, #1
 800818c:	e23f      	b.n	800860e <_dtoa_r+0x95e>
 800818e:	07f2      	lsls	r2, r6, #31
 8008190:	d505      	bpl.n	800819e <_dtoa_r+0x4ee>
 8008192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008196:	f7f8 fa37 	bl	8000608 <__aeabi_dmul>
 800819a:	3501      	adds	r5, #1
 800819c:	2301      	movs	r3, #1
 800819e:	1076      	asrs	r6, r6, #1
 80081a0:	3708      	adds	r7, #8
 80081a2:	e76c      	b.n	800807e <_dtoa_r+0x3ce>
 80081a4:	2502      	movs	r5, #2
 80081a6:	e76f      	b.n	8008088 <_dtoa_r+0x3d8>
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80081ae:	930c      	str	r3, [sp, #48]	; 0x30
 80081b0:	e78d      	b.n	80080ce <_dtoa_r+0x41e>
 80081b2:	9900      	ldr	r1, [sp, #0]
 80081b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081b8:	4b4e      	ldr	r3, [pc, #312]	; (80082f4 <_dtoa_r+0x644>)
 80081ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081be:	4401      	add	r1, r0
 80081c0:	9102      	str	r1, [sp, #8]
 80081c2:	9908      	ldr	r1, [sp, #32]
 80081c4:	eeb0 8a47 	vmov.f32	s16, s14
 80081c8:	eef0 8a67 	vmov.f32	s17, s15
 80081cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d045      	beq.n	8008264 <_dtoa_r+0x5b4>
 80081d8:	494c      	ldr	r1, [pc, #304]	; (800830c <_dtoa_r+0x65c>)
 80081da:	2000      	movs	r0, #0
 80081dc:	f7f8 fb3e 	bl	800085c <__aeabi_ddiv>
 80081e0:	ec53 2b18 	vmov	r2, r3, d8
 80081e4:	f7f8 f858 	bl	8000298 <__aeabi_dsub>
 80081e8:	9d00      	ldr	r5, [sp, #0]
 80081ea:	ec41 0b18 	vmov	d8, r0, r1
 80081ee:	4639      	mov	r1, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7f8 fcb9 	bl	8000b68 <__aeabi_d2iz>
 80081f6:	900c      	str	r0, [sp, #48]	; 0x30
 80081f8:	f7f8 f99c 	bl	8000534 <__aeabi_i2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 f848 	bl	8000298 <__aeabi_dsub>
 8008208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820a:	3330      	adds	r3, #48	; 0x30
 800820c:	f805 3b01 	strb.w	r3, [r5], #1
 8008210:	ec53 2b18 	vmov	r2, r3, d8
 8008214:	4606      	mov	r6, r0
 8008216:	460f      	mov	r7, r1
 8008218:	f7f8 fc68 	bl	8000aec <__aeabi_dcmplt>
 800821c:	2800      	cmp	r0, #0
 800821e:	d165      	bne.n	80082ec <_dtoa_r+0x63c>
 8008220:	4632      	mov	r2, r6
 8008222:	463b      	mov	r3, r7
 8008224:	4935      	ldr	r1, [pc, #212]	; (80082fc <_dtoa_r+0x64c>)
 8008226:	2000      	movs	r0, #0
 8008228:	f7f8 f836 	bl	8000298 <__aeabi_dsub>
 800822c:	ec53 2b18 	vmov	r2, r3, d8
 8008230:	f7f8 fc5c 	bl	8000aec <__aeabi_dcmplt>
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 80b9 	bne.w	80083ac <_dtoa_r+0x6fc>
 800823a:	9b02      	ldr	r3, [sp, #8]
 800823c:	429d      	cmp	r5, r3
 800823e:	f43f af75 	beq.w	800812c <_dtoa_r+0x47c>
 8008242:	4b2f      	ldr	r3, [pc, #188]	; (8008300 <_dtoa_r+0x650>)
 8008244:	ec51 0b18 	vmov	r0, r1, d8
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f9dd 	bl	8000608 <__aeabi_dmul>
 800824e:	4b2c      	ldr	r3, [pc, #176]	; (8008300 <_dtoa_r+0x650>)
 8008250:	ec41 0b18 	vmov	d8, r0, r1
 8008254:	2200      	movs	r2, #0
 8008256:	4630      	mov	r0, r6
 8008258:	4639      	mov	r1, r7
 800825a:	f7f8 f9d5 	bl	8000608 <__aeabi_dmul>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	e7c4      	b.n	80081ee <_dtoa_r+0x53e>
 8008264:	ec51 0b17 	vmov	r0, r1, d7
 8008268:	f7f8 f9ce 	bl	8000608 <__aeabi_dmul>
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	9d00      	ldr	r5, [sp, #0]
 8008270:	930c      	str	r3, [sp, #48]	; 0x30
 8008272:	ec41 0b18 	vmov	d8, r0, r1
 8008276:	4639      	mov	r1, r7
 8008278:	4630      	mov	r0, r6
 800827a:	f7f8 fc75 	bl	8000b68 <__aeabi_d2iz>
 800827e:	9011      	str	r0, [sp, #68]	; 0x44
 8008280:	f7f8 f958 	bl	8000534 <__aeabi_i2d>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 f804 	bl	8000298 <__aeabi_dsub>
 8008290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008292:	3330      	adds	r3, #48	; 0x30
 8008294:	f805 3b01 	strb.w	r3, [r5], #1
 8008298:	9b02      	ldr	r3, [sp, #8]
 800829a:	429d      	cmp	r5, r3
 800829c:	4606      	mov	r6, r0
 800829e:	460f      	mov	r7, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	d134      	bne.n	8008310 <_dtoa_r+0x660>
 80082a6:	4b19      	ldr	r3, [pc, #100]	; (800830c <_dtoa_r+0x65c>)
 80082a8:	ec51 0b18 	vmov	r0, r1, d8
 80082ac:	f7f7 fff6 	bl	800029c <__adddf3>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4630      	mov	r0, r6
 80082b6:	4639      	mov	r1, r7
 80082b8:	f7f8 fc36 	bl	8000b28 <__aeabi_dcmpgt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d175      	bne.n	80083ac <_dtoa_r+0x6fc>
 80082c0:	ec53 2b18 	vmov	r2, r3, d8
 80082c4:	4911      	ldr	r1, [pc, #68]	; (800830c <_dtoa_r+0x65c>)
 80082c6:	2000      	movs	r0, #0
 80082c8:	f7f7 ffe6 	bl	8000298 <__aeabi_dsub>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4630      	mov	r0, r6
 80082d2:	4639      	mov	r1, r7
 80082d4:	f7f8 fc0a 	bl	8000aec <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	f43f af27 	beq.w	800812c <_dtoa_r+0x47c>
 80082de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e0:	1e6b      	subs	r3, r5, #1
 80082e2:	930c      	str	r3, [sp, #48]	; 0x30
 80082e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082e8:	2b30      	cmp	r3, #48	; 0x30
 80082ea:	d0f8      	beq.n	80082de <_dtoa_r+0x62e>
 80082ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80082f0:	e04a      	b.n	8008388 <_dtoa_r+0x6d8>
 80082f2:	bf00      	nop
 80082f4:	0800ee10 	.word	0x0800ee10
 80082f8:	0800ede8 	.word	0x0800ede8
 80082fc:	3ff00000 	.word	0x3ff00000
 8008300:	40240000 	.word	0x40240000
 8008304:	401c0000 	.word	0x401c0000
 8008308:	40140000 	.word	0x40140000
 800830c:	3fe00000 	.word	0x3fe00000
 8008310:	4baf      	ldr	r3, [pc, #700]	; (80085d0 <_dtoa_r+0x920>)
 8008312:	f7f8 f979 	bl	8000608 <__aeabi_dmul>
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	e7ac      	b.n	8008276 <_dtoa_r+0x5c6>
 800831c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008320:	9d00      	ldr	r5, [sp, #0]
 8008322:	4642      	mov	r2, r8
 8008324:	464b      	mov	r3, r9
 8008326:	4630      	mov	r0, r6
 8008328:	4639      	mov	r1, r7
 800832a:	f7f8 fa97 	bl	800085c <__aeabi_ddiv>
 800832e:	f7f8 fc1b 	bl	8000b68 <__aeabi_d2iz>
 8008332:	9002      	str	r0, [sp, #8]
 8008334:	f7f8 f8fe 	bl	8000534 <__aeabi_i2d>
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	f7f8 f964 	bl	8000608 <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ffa6 	bl	8000298 <__aeabi_dsub>
 800834c:	9e02      	ldr	r6, [sp, #8]
 800834e:	9f01      	ldr	r7, [sp, #4]
 8008350:	3630      	adds	r6, #48	; 0x30
 8008352:	f805 6b01 	strb.w	r6, [r5], #1
 8008356:	9e00      	ldr	r6, [sp, #0]
 8008358:	1bae      	subs	r6, r5, r6
 800835a:	42b7      	cmp	r7, r6
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	d137      	bne.n	80083d2 <_dtoa_r+0x722>
 8008362:	f7f7 ff9b 	bl	800029c <__adddf3>
 8008366:	4642      	mov	r2, r8
 8008368:	464b      	mov	r3, r9
 800836a:	4606      	mov	r6, r0
 800836c:	460f      	mov	r7, r1
 800836e:	f7f8 fbdb 	bl	8000b28 <__aeabi_dcmpgt>
 8008372:	b9c8      	cbnz	r0, 80083a8 <_dtoa_r+0x6f8>
 8008374:	4642      	mov	r2, r8
 8008376:	464b      	mov	r3, r9
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fbac 	bl	8000ad8 <__aeabi_dcmpeq>
 8008380:	b110      	cbz	r0, 8008388 <_dtoa_r+0x6d8>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	07d9      	lsls	r1, r3, #31
 8008386:	d40f      	bmi.n	80083a8 <_dtoa_r+0x6f8>
 8008388:	4620      	mov	r0, r4
 800838a:	4659      	mov	r1, fp
 800838c:	f000 fcf6 	bl	8008d7c <_Bfree>
 8008390:	2300      	movs	r3, #0
 8008392:	702b      	strb	r3, [r5, #0]
 8008394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008396:	f10a 0001 	add.w	r0, sl, #1
 800839a:	6018      	str	r0, [r3, #0]
 800839c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f acd8 	beq.w	8007d54 <_dtoa_r+0xa4>
 80083a4:	601d      	str	r5, [r3, #0]
 80083a6:	e4d5      	b.n	8007d54 <_dtoa_r+0xa4>
 80083a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80083ac:	462b      	mov	r3, r5
 80083ae:	461d      	mov	r5, r3
 80083b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083b4:	2a39      	cmp	r2, #57	; 0x39
 80083b6:	d108      	bne.n	80083ca <_dtoa_r+0x71a>
 80083b8:	9a00      	ldr	r2, [sp, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d1f7      	bne.n	80083ae <_dtoa_r+0x6fe>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	9900      	ldr	r1, [sp, #0]
 80083c2:	3201      	adds	r2, #1
 80083c4:	9207      	str	r2, [sp, #28]
 80083c6:	2230      	movs	r2, #48	; 0x30
 80083c8:	700a      	strb	r2, [r1, #0]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	3201      	adds	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e78c      	b.n	80082ec <_dtoa_r+0x63c>
 80083d2:	4b7f      	ldr	r3, [pc, #508]	; (80085d0 <_dtoa_r+0x920>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	4606      	mov	r6, r0
 80083e0:	460f      	mov	r7, r1
 80083e2:	f7f8 fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d09b      	beq.n	8008322 <_dtoa_r+0x672>
 80083ea:	e7cd      	b.n	8008388 <_dtoa_r+0x6d8>
 80083ec:	9a08      	ldr	r2, [sp, #32]
 80083ee:	2a00      	cmp	r2, #0
 80083f0:	f000 80c4 	beq.w	800857c <_dtoa_r+0x8cc>
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	2a01      	cmp	r2, #1
 80083f8:	f300 80a8 	bgt.w	800854c <_dtoa_r+0x89c>
 80083fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083fe:	2a00      	cmp	r2, #0
 8008400:	f000 80a0 	beq.w	8008544 <_dtoa_r+0x894>
 8008404:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008408:	9e06      	ldr	r6, [sp, #24]
 800840a:	4645      	mov	r5, r8
 800840c:	9a04      	ldr	r2, [sp, #16]
 800840e:	2101      	movs	r1, #1
 8008410:	441a      	add	r2, r3
 8008412:	4620      	mov	r0, r4
 8008414:	4498      	add	r8, r3
 8008416:	9204      	str	r2, [sp, #16]
 8008418:	f000 fd6c 	bl	8008ef4 <__i2b>
 800841c:	4607      	mov	r7, r0
 800841e:	2d00      	cmp	r5, #0
 8008420:	dd0b      	ble.n	800843a <_dtoa_r+0x78a>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dd08      	ble.n	800843a <_dtoa_r+0x78a>
 8008428:	42ab      	cmp	r3, r5
 800842a:	9a04      	ldr	r2, [sp, #16]
 800842c:	bfa8      	it	ge
 800842e:	462b      	movge	r3, r5
 8008430:	eba8 0803 	sub.w	r8, r8, r3
 8008434:	1aed      	subs	r5, r5, r3
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	b1fb      	cbz	r3, 800847e <_dtoa_r+0x7ce>
 800843e:	9b08      	ldr	r3, [sp, #32]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 809f 	beq.w	8008584 <_dtoa_r+0x8d4>
 8008446:	2e00      	cmp	r6, #0
 8008448:	dd11      	ble.n	800846e <_dtoa_r+0x7be>
 800844a:	4639      	mov	r1, r7
 800844c:	4632      	mov	r2, r6
 800844e:	4620      	mov	r0, r4
 8008450:	f000 fe0c 	bl	800906c <__pow5mult>
 8008454:	465a      	mov	r2, fp
 8008456:	4601      	mov	r1, r0
 8008458:	4607      	mov	r7, r0
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fd60 	bl	8008f20 <__multiply>
 8008460:	4659      	mov	r1, fp
 8008462:	9007      	str	r0, [sp, #28]
 8008464:	4620      	mov	r0, r4
 8008466:	f000 fc89 	bl	8008d7c <_Bfree>
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	469b      	mov	fp, r3
 800846e:	9b06      	ldr	r3, [sp, #24]
 8008470:	1b9a      	subs	r2, r3, r6
 8008472:	d004      	beq.n	800847e <_dtoa_r+0x7ce>
 8008474:	4659      	mov	r1, fp
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fdf8 	bl	800906c <__pow5mult>
 800847c:	4683      	mov	fp, r0
 800847e:	2101      	movs	r1, #1
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fd37 	bl	8008ef4 <__i2b>
 8008486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008488:	2b00      	cmp	r3, #0
 800848a:	4606      	mov	r6, r0
 800848c:	dd7c      	ble.n	8008588 <_dtoa_r+0x8d8>
 800848e:	461a      	mov	r2, r3
 8008490:	4601      	mov	r1, r0
 8008492:	4620      	mov	r0, r4
 8008494:	f000 fdea 	bl	800906c <__pow5mult>
 8008498:	9b05      	ldr	r3, [sp, #20]
 800849a:	2b01      	cmp	r3, #1
 800849c:	4606      	mov	r6, r0
 800849e:	dd76      	ble.n	800858e <_dtoa_r+0x8de>
 80084a0:	2300      	movs	r3, #0
 80084a2:	9306      	str	r3, [sp, #24]
 80084a4:	6933      	ldr	r3, [r6, #16]
 80084a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084aa:	6918      	ldr	r0, [r3, #16]
 80084ac:	f000 fcd2 	bl	8008e54 <__hi0bits>
 80084b0:	f1c0 0020 	rsb	r0, r0, #32
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	4418      	add	r0, r3
 80084b8:	f010 001f 	ands.w	r0, r0, #31
 80084bc:	f000 8086 	beq.w	80085cc <_dtoa_r+0x91c>
 80084c0:	f1c0 0320 	rsb	r3, r0, #32
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	dd7f      	ble.n	80085c8 <_dtoa_r+0x918>
 80084c8:	f1c0 001c 	rsb	r0, r0, #28
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4403      	add	r3, r0
 80084d0:	4480      	add	r8, r0
 80084d2:	4405      	add	r5, r0
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	f1b8 0f00 	cmp.w	r8, #0
 80084da:	dd05      	ble.n	80084e8 <_dtoa_r+0x838>
 80084dc:	4659      	mov	r1, fp
 80084de:	4642      	mov	r2, r8
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 fe1d 	bl	8009120 <__lshift>
 80084e6:	4683      	mov	fp, r0
 80084e8:	9b04      	ldr	r3, [sp, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	dd05      	ble.n	80084fa <_dtoa_r+0x84a>
 80084ee:	4631      	mov	r1, r6
 80084f0:	461a      	mov	r2, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 fe14 	bl	8009120 <__lshift>
 80084f8:	4606      	mov	r6, r0
 80084fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d069      	beq.n	80085d4 <_dtoa_r+0x924>
 8008500:	4631      	mov	r1, r6
 8008502:	4658      	mov	r0, fp
 8008504:	f000 fe78 	bl	80091f8 <__mcmp>
 8008508:	2800      	cmp	r0, #0
 800850a:	da63      	bge.n	80085d4 <_dtoa_r+0x924>
 800850c:	2300      	movs	r3, #0
 800850e:	4659      	mov	r1, fp
 8008510:	220a      	movs	r2, #10
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fc54 	bl	8008dc0 <__multadd>
 8008518:	9b08      	ldr	r3, [sp, #32]
 800851a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800851e:	4683      	mov	fp, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 818f 	beq.w	8008844 <_dtoa_r+0xb94>
 8008526:	4639      	mov	r1, r7
 8008528:	2300      	movs	r3, #0
 800852a:	220a      	movs	r2, #10
 800852c:	4620      	mov	r0, r4
 800852e:	f000 fc47 	bl	8008dc0 <__multadd>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	4607      	mov	r7, r0
 8008538:	f300 808e 	bgt.w	8008658 <_dtoa_r+0x9a8>
 800853c:	9b05      	ldr	r3, [sp, #20]
 800853e:	2b02      	cmp	r3, #2
 8008540:	dc50      	bgt.n	80085e4 <_dtoa_r+0x934>
 8008542:	e089      	b.n	8008658 <_dtoa_r+0x9a8>
 8008544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800854a:	e75d      	b.n	8008408 <_dtoa_r+0x758>
 800854c:	9b01      	ldr	r3, [sp, #4]
 800854e:	1e5e      	subs	r6, r3, #1
 8008550:	9b06      	ldr	r3, [sp, #24]
 8008552:	42b3      	cmp	r3, r6
 8008554:	bfbf      	itttt	lt
 8008556:	9b06      	ldrlt	r3, [sp, #24]
 8008558:	9606      	strlt	r6, [sp, #24]
 800855a:	1af2      	sublt	r2, r6, r3
 800855c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800855e:	bfb6      	itet	lt
 8008560:	189b      	addlt	r3, r3, r2
 8008562:	1b9e      	subge	r6, r3, r6
 8008564:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008566:	9b01      	ldr	r3, [sp, #4]
 8008568:	bfb8      	it	lt
 800856a:	2600      	movlt	r6, #0
 800856c:	2b00      	cmp	r3, #0
 800856e:	bfb5      	itete	lt
 8008570:	eba8 0503 	sublt.w	r5, r8, r3
 8008574:	9b01      	ldrge	r3, [sp, #4]
 8008576:	2300      	movlt	r3, #0
 8008578:	4645      	movge	r5, r8
 800857a:	e747      	b.n	800840c <_dtoa_r+0x75c>
 800857c:	9e06      	ldr	r6, [sp, #24]
 800857e:	9f08      	ldr	r7, [sp, #32]
 8008580:	4645      	mov	r5, r8
 8008582:	e74c      	b.n	800841e <_dtoa_r+0x76e>
 8008584:	9a06      	ldr	r2, [sp, #24]
 8008586:	e775      	b.n	8008474 <_dtoa_r+0x7c4>
 8008588:	9b05      	ldr	r3, [sp, #20]
 800858a:	2b01      	cmp	r3, #1
 800858c:	dc18      	bgt.n	80085c0 <_dtoa_r+0x910>
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	b9b3      	cbnz	r3, 80085c0 <_dtoa_r+0x910>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008598:	b9a3      	cbnz	r3, 80085c4 <_dtoa_r+0x914>
 800859a:	9b03      	ldr	r3, [sp, #12]
 800859c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085a0:	0d1b      	lsrs	r3, r3, #20
 80085a2:	051b      	lsls	r3, r3, #20
 80085a4:	b12b      	cbz	r3, 80085b2 <_dtoa_r+0x902>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	f108 0801 	add.w	r8, r8, #1
 80085b0:	2301      	movs	r3, #1
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f47f af74 	bne.w	80084a4 <_dtoa_r+0x7f4>
 80085bc:	2001      	movs	r0, #1
 80085be:	e779      	b.n	80084b4 <_dtoa_r+0x804>
 80085c0:	2300      	movs	r3, #0
 80085c2:	e7f6      	b.n	80085b2 <_dtoa_r+0x902>
 80085c4:	9b02      	ldr	r3, [sp, #8]
 80085c6:	e7f4      	b.n	80085b2 <_dtoa_r+0x902>
 80085c8:	d085      	beq.n	80084d6 <_dtoa_r+0x826>
 80085ca:	4618      	mov	r0, r3
 80085cc:	301c      	adds	r0, #28
 80085ce:	e77d      	b.n	80084cc <_dtoa_r+0x81c>
 80085d0:	40240000 	.word	0x40240000
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dc38      	bgt.n	800864c <_dtoa_r+0x99c>
 80085da:	9b05      	ldr	r3, [sp, #20]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	dd35      	ble.n	800864c <_dtoa_r+0x99c>
 80085e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085e4:	f1b9 0f00 	cmp.w	r9, #0
 80085e8:	d10d      	bne.n	8008606 <_dtoa_r+0x956>
 80085ea:	4631      	mov	r1, r6
 80085ec:	464b      	mov	r3, r9
 80085ee:	2205      	movs	r2, #5
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fbe5 	bl	8008dc0 <__multadd>
 80085f6:	4601      	mov	r1, r0
 80085f8:	4606      	mov	r6, r0
 80085fa:	4658      	mov	r0, fp
 80085fc:	f000 fdfc 	bl	80091f8 <__mcmp>
 8008600:	2800      	cmp	r0, #0
 8008602:	f73f adbd 	bgt.w	8008180 <_dtoa_r+0x4d0>
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	9d00      	ldr	r5, [sp, #0]
 800860a:	ea6f 0a03 	mvn.w	sl, r3
 800860e:	f04f 0800 	mov.w	r8, #0
 8008612:	4631      	mov	r1, r6
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fbb1 	bl	8008d7c <_Bfree>
 800861a:	2f00      	cmp	r7, #0
 800861c:	f43f aeb4 	beq.w	8008388 <_dtoa_r+0x6d8>
 8008620:	f1b8 0f00 	cmp.w	r8, #0
 8008624:	d005      	beq.n	8008632 <_dtoa_r+0x982>
 8008626:	45b8      	cmp	r8, r7
 8008628:	d003      	beq.n	8008632 <_dtoa_r+0x982>
 800862a:	4641      	mov	r1, r8
 800862c:	4620      	mov	r0, r4
 800862e:	f000 fba5 	bl	8008d7c <_Bfree>
 8008632:	4639      	mov	r1, r7
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fba1 	bl	8008d7c <_Bfree>
 800863a:	e6a5      	b.n	8008388 <_dtoa_r+0x6d8>
 800863c:	2600      	movs	r6, #0
 800863e:	4637      	mov	r7, r6
 8008640:	e7e1      	b.n	8008606 <_dtoa_r+0x956>
 8008642:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008648:	4637      	mov	r7, r6
 800864a:	e599      	b.n	8008180 <_dtoa_r+0x4d0>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 80fd 	beq.w	8008852 <_dtoa_r+0xba2>
 8008658:	2d00      	cmp	r5, #0
 800865a:	dd05      	ble.n	8008668 <_dtoa_r+0x9b8>
 800865c:	4639      	mov	r1, r7
 800865e:	462a      	mov	r2, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f000 fd5d 	bl	8009120 <__lshift>
 8008666:	4607      	mov	r7, r0
 8008668:	9b06      	ldr	r3, [sp, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d05c      	beq.n	8008728 <_dtoa_r+0xa78>
 800866e:	6879      	ldr	r1, [r7, #4]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fb43 	bl	8008cfc <_Balloc>
 8008676:	4605      	mov	r5, r0
 8008678:	b928      	cbnz	r0, 8008686 <_dtoa_r+0x9d6>
 800867a:	4b80      	ldr	r3, [pc, #512]	; (800887c <_dtoa_r+0xbcc>)
 800867c:	4602      	mov	r2, r0
 800867e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008682:	f7ff bb2e 	b.w	8007ce2 <_dtoa_r+0x32>
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	3202      	adds	r2, #2
 800868a:	0092      	lsls	r2, r2, #2
 800868c:	f107 010c 	add.w	r1, r7, #12
 8008690:	300c      	adds	r0, #12
 8008692:	f000 fb25 	bl	8008ce0 <memcpy>
 8008696:	2201      	movs	r2, #1
 8008698:	4629      	mov	r1, r5
 800869a:	4620      	mov	r0, r4
 800869c:	f000 fd40 	bl	8009120 <__lshift>
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	444b      	add	r3, r9
 80086aa:	9307      	str	r3, [sp, #28]
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	46b8      	mov	r8, r7
 80086b4:	9306      	str	r3, [sp, #24]
 80086b6:	4607      	mov	r7, r0
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	4631      	mov	r1, r6
 80086bc:	3b01      	subs	r3, #1
 80086be:	4658      	mov	r0, fp
 80086c0:	9302      	str	r3, [sp, #8]
 80086c2:	f7ff fa69 	bl	8007b98 <quorem>
 80086c6:	4603      	mov	r3, r0
 80086c8:	3330      	adds	r3, #48	; 0x30
 80086ca:	9004      	str	r0, [sp, #16]
 80086cc:	4641      	mov	r1, r8
 80086ce:	4658      	mov	r0, fp
 80086d0:	9308      	str	r3, [sp, #32]
 80086d2:	f000 fd91 	bl	80091f8 <__mcmp>
 80086d6:	463a      	mov	r2, r7
 80086d8:	4681      	mov	r9, r0
 80086da:	4631      	mov	r1, r6
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fda7 	bl	8009230 <__mdiff>
 80086e2:	68c2      	ldr	r2, [r0, #12]
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	4605      	mov	r5, r0
 80086e8:	bb02      	cbnz	r2, 800872c <_dtoa_r+0xa7c>
 80086ea:	4601      	mov	r1, r0
 80086ec:	4658      	mov	r0, fp
 80086ee:	f000 fd83 	bl	80091f8 <__mcmp>
 80086f2:	9b08      	ldr	r3, [sp, #32]
 80086f4:	4602      	mov	r2, r0
 80086f6:	4629      	mov	r1, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80086fe:	f000 fb3d 	bl	8008d7c <_Bfree>
 8008702:	9b05      	ldr	r3, [sp, #20]
 8008704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008706:	9d01      	ldr	r5, [sp, #4]
 8008708:	ea43 0102 	orr.w	r1, r3, r2
 800870c:	9b06      	ldr	r3, [sp, #24]
 800870e:	430b      	orrs	r3, r1
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	d10d      	bne.n	8008730 <_dtoa_r+0xa80>
 8008714:	2b39      	cmp	r3, #57	; 0x39
 8008716:	d029      	beq.n	800876c <_dtoa_r+0xabc>
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	dd01      	ble.n	8008722 <_dtoa_r+0xa72>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	3331      	adds	r3, #49	; 0x31
 8008722:	9a02      	ldr	r2, [sp, #8]
 8008724:	7013      	strb	r3, [r2, #0]
 8008726:	e774      	b.n	8008612 <_dtoa_r+0x962>
 8008728:	4638      	mov	r0, r7
 800872a:	e7b9      	b.n	80086a0 <_dtoa_r+0x9f0>
 800872c:	2201      	movs	r2, #1
 800872e:	e7e2      	b.n	80086f6 <_dtoa_r+0xa46>
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	db06      	blt.n	8008744 <_dtoa_r+0xa94>
 8008736:	9905      	ldr	r1, [sp, #20]
 8008738:	ea41 0909 	orr.w	r9, r1, r9
 800873c:	9906      	ldr	r1, [sp, #24]
 800873e:	ea59 0101 	orrs.w	r1, r9, r1
 8008742:	d120      	bne.n	8008786 <_dtoa_r+0xad6>
 8008744:	2a00      	cmp	r2, #0
 8008746:	ddec      	ble.n	8008722 <_dtoa_r+0xa72>
 8008748:	4659      	mov	r1, fp
 800874a:	2201      	movs	r2, #1
 800874c:	4620      	mov	r0, r4
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	f000 fce6 	bl	8009120 <__lshift>
 8008754:	4631      	mov	r1, r6
 8008756:	4683      	mov	fp, r0
 8008758:	f000 fd4e 	bl	80091f8 <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	dc02      	bgt.n	8008768 <_dtoa_r+0xab8>
 8008762:	d1de      	bne.n	8008722 <_dtoa_r+0xa72>
 8008764:	07da      	lsls	r2, r3, #31
 8008766:	d5dc      	bpl.n	8008722 <_dtoa_r+0xa72>
 8008768:	2b39      	cmp	r3, #57	; 0x39
 800876a:	d1d8      	bne.n	800871e <_dtoa_r+0xa6e>
 800876c:	9a02      	ldr	r2, [sp, #8]
 800876e:	2339      	movs	r3, #57	; 0x39
 8008770:	7013      	strb	r3, [r2, #0]
 8008772:	462b      	mov	r3, r5
 8008774:	461d      	mov	r5, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800877c:	2a39      	cmp	r2, #57	; 0x39
 800877e:	d050      	beq.n	8008822 <_dtoa_r+0xb72>
 8008780:	3201      	adds	r2, #1
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e745      	b.n	8008612 <_dtoa_r+0x962>
 8008786:	2a00      	cmp	r2, #0
 8008788:	dd03      	ble.n	8008792 <_dtoa_r+0xae2>
 800878a:	2b39      	cmp	r3, #57	; 0x39
 800878c:	d0ee      	beq.n	800876c <_dtoa_r+0xabc>
 800878e:	3301      	adds	r3, #1
 8008790:	e7c7      	b.n	8008722 <_dtoa_r+0xa72>
 8008792:	9a01      	ldr	r2, [sp, #4]
 8008794:	9907      	ldr	r1, [sp, #28]
 8008796:	f802 3c01 	strb.w	r3, [r2, #-1]
 800879a:	428a      	cmp	r2, r1
 800879c:	d02a      	beq.n	80087f4 <_dtoa_r+0xb44>
 800879e:	4659      	mov	r1, fp
 80087a0:	2300      	movs	r3, #0
 80087a2:	220a      	movs	r2, #10
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 fb0b 	bl	8008dc0 <__multadd>
 80087aa:	45b8      	cmp	r8, r7
 80087ac:	4683      	mov	fp, r0
 80087ae:	f04f 0300 	mov.w	r3, #0
 80087b2:	f04f 020a 	mov.w	r2, #10
 80087b6:	4641      	mov	r1, r8
 80087b8:	4620      	mov	r0, r4
 80087ba:	d107      	bne.n	80087cc <_dtoa_r+0xb1c>
 80087bc:	f000 fb00 	bl	8008dc0 <__multadd>
 80087c0:	4680      	mov	r8, r0
 80087c2:	4607      	mov	r7, r0
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	3301      	adds	r3, #1
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	e775      	b.n	80086b8 <_dtoa_r+0xa08>
 80087cc:	f000 faf8 	bl	8008dc0 <__multadd>
 80087d0:	4639      	mov	r1, r7
 80087d2:	4680      	mov	r8, r0
 80087d4:	2300      	movs	r3, #0
 80087d6:	220a      	movs	r2, #10
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 faf1 	bl	8008dc0 <__multadd>
 80087de:	4607      	mov	r7, r0
 80087e0:	e7f0      	b.n	80087c4 <_dtoa_r+0xb14>
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	9a00      	ldr	r2, [sp, #0]
 80087e8:	bfcc      	ite	gt
 80087ea:	464d      	movgt	r5, r9
 80087ec:	2501      	movle	r5, #1
 80087ee:	4415      	add	r5, r2
 80087f0:	f04f 0800 	mov.w	r8, #0
 80087f4:	4659      	mov	r1, fp
 80087f6:	2201      	movs	r2, #1
 80087f8:	4620      	mov	r0, r4
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	f000 fc90 	bl	8009120 <__lshift>
 8008800:	4631      	mov	r1, r6
 8008802:	4683      	mov	fp, r0
 8008804:	f000 fcf8 	bl	80091f8 <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	dcb2      	bgt.n	8008772 <_dtoa_r+0xac2>
 800880c:	d102      	bne.n	8008814 <_dtoa_r+0xb64>
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	07db      	lsls	r3, r3, #31
 8008812:	d4ae      	bmi.n	8008772 <_dtoa_r+0xac2>
 8008814:	462b      	mov	r3, r5
 8008816:	461d      	mov	r5, r3
 8008818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800881c:	2a30      	cmp	r2, #48	; 0x30
 800881e:	d0fa      	beq.n	8008816 <_dtoa_r+0xb66>
 8008820:	e6f7      	b.n	8008612 <_dtoa_r+0x962>
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d1a5      	bne.n	8008774 <_dtoa_r+0xac4>
 8008828:	f10a 0a01 	add.w	sl, sl, #1
 800882c:	2331      	movs	r3, #49	; 0x31
 800882e:	e779      	b.n	8008724 <_dtoa_r+0xa74>
 8008830:	4b13      	ldr	r3, [pc, #76]	; (8008880 <_dtoa_r+0xbd0>)
 8008832:	f7ff baaf 	b.w	8007d94 <_dtoa_r+0xe4>
 8008836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f aa86 	bne.w	8007d4a <_dtoa_r+0x9a>
 800883e:	4b11      	ldr	r3, [pc, #68]	; (8008884 <_dtoa_r+0xbd4>)
 8008840:	f7ff baa8 	b.w	8007d94 <_dtoa_r+0xe4>
 8008844:	f1b9 0f00 	cmp.w	r9, #0
 8008848:	dc03      	bgt.n	8008852 <_dtoa_r+0xba2>
 800884a:	9b05      	ldr	r3, [sp, #20]
 800884c:	2b02      	cmp	r3, #2
 800884e:	f73f aec9 	bgt.w	80085e4 <_dtoa_r+0x934>
 8008852:	9d00      	ldr	r5, [sp, #0]
 8008854:	4631      	mov	r1, r6
 8008856:	4658      	mov	r0, fp
 8008858:	f7ff f99e 	bl	8007b98 <quorem>
 800885c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008860:	f805 3b01 	strb.w	r3, [r5], #1
 8008864:	9a00      	ldr	r2, [sp, #0]
 8008866:	1aaa      	subs	r2, r5, r2
 8008868:	4591      	cmp	r9, r2
 800886a:	ddba      	ble.n	80087e2 <_dtoa_r+0xb32>
 800886c:	4659      	mov	r1, fp
 800886e:	2300      	movs	r3, #0
 8008870:	220a      	movs	r2, #10
 8008872:	4620      	mov	r0, r4
 8008874:	f000 faa4 	bl	8008dc0 <__multadd>
 8008878:	4683      	mov	fp, r0
 800887a:	e7eb      	b.n	8008854 <_dtoa_r+0xba4>
 800887c:	0800ed13 	.word	0x0800ed13
 8008880:	0800ec6c 	.word	0x0800ec6c
 8008884:	0800ec90 	.word	0x0800ec90

08008888 <__sflush_r>:
 8008888:	898a      	ldrh	r2, [r1, #12]
 800888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	4605      	mov	r5, r0
 8008890:	0710      	lsls	r0, r2, #28
 8008892:	460c      	mov	r4, r1
 8008894:	d458      	bmi.n	8008948 <__sflush_r+0xc0>
 8008896:	684b      	ldr	r3, [r1, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc05      	bgt.n	80088a8 <__sflush_r+0x20>
 800889c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dc02      	bgt.n	80088a8 <__sflush_r+0x20>
 80088a2:	2000      	movs	r0, #0
 80088a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088aa:	2e00      	cmp	r6, #0
 80088ac:	d0f9      	beq.n	80088a2 <__sflush_r+0x1a>
 80088ae:	2300      	movs	r3, #0
 80088b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b4:	682f      	ldr	r7, [r5, #0]
 80088b6:	602b      	str	r3, [r5, #0]
 80088b8:	d032      	beq.n	8008920 <__sflush_r+0x98>
 80088ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	075a      	lsls	r2, r3, #29
 80088c0:	d505      	bpl.n	80088ce <__sflush_r+0x46>
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	1ac0      	subs	r0, r0, r3
 80088c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c8:	b10b      	cbz	r3, 80088ce <__sflush_r+0x46>
 80088ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088cc:	1ac0      	subs	r0, r0, r3
 80088ce:	2300      	movs	r3, #0
 80088d0:	4602      	mov	r2, r0
 80088d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d4:	6a21      	ldr	r1, [r4, #32]
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b0      	blx	r6
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	d106      	bne.n	80088ee <__sflush_r+0x66>
 80088e0:	6829      	ldr	r1, [r5, #0]
 80088e2:	291d      	cmp	r1, #29
 80088e4:	d82c      	bhi.n	8008940 <__sflush_r+0xb8>
 80088e6:	4a2a      	ldr	r2, [pc, #168]	; (8008990 <__sflush_r+0x108>)
 80088e8:	40ca      	lsrs	r2, r1
 80088ea:	07d6      	lsls	r6, r2, #31
 80088ec:	d528      	bpl.n	8008940 <__sflush_r+0xb8>
 80088ee:	2200      	movs	r2, #0
 80088f0:	6062      	str	r2, [r4, #4]
 80088f2:	04d9      	lsls	r1, r3, #19
 80088f4:	6922      	ldr	r2, [r4, #16]
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	d504      	bpl.n	8008904 <__sflush_r+0x7c>
 80088fa:	1c42      	adds	r2, r0, #1
 80088fc:	d101      	bne.n	8008902 <__sflush_r+0x7a>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	b903      	cbnz	r3, 8008904 <__sflush_r+0x7c>
 8008902:	6560      	str	r0, [r4, #84]	; 0x54
 8008904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008906:	602f      	str	r7, [r5, #0]
 8008908:	2900      	cmp	r1, #0
 800890a:	d0ca      	beq.n	80088a2 <__sflush_r+0x1a>
 800890c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <__sflush_r+0x92>
 8008914:	4628      	mov	r0, r5
 8008916:	f000 fd7f 	bl	8009418 <_free_r>
 800891a:	2000      	movs	r0, #0
 800891c:	6360      	str	r0, [r4, #52]	; 0x34
 800891e:	e7c1      	b.n	80088a4 <__sflush_r+0x1c>
 8008920:	6a21      	ldr	r1, [r4, #32]
 8008922:	2301      	movs	r3, #1
 8008924:	4628      	mov	r0, r5
 8008926:	47b0      	blx	r6
 8008928:	1c41      	adds	r1, r0, #1
 800892a:	d1c7      	bne.n	80088bc <__sflush_r+0x34>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0c4      	beq.n	80088bc <__sflush_r+0x34>
 8008932:	2b1d      	cmp	r3, #29
 8008934:	d001      	beq.n	800893a <__sflush_r+0xb2>
 8008936:	2b16      	cmp	r3, #22
 8008938:	d101      	bne.n	800893e <__sflush_r+0xb6>
 800893a:	602f      	str	r7, [r5, #0]
 800893c:	e7b1      	b.n	80088a2 <__sflush_r+0x1a>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	e7ad      	b.n	80088a4 <__sflush_r+0x1c>
 8008948:	690f      	ldr	r7, [r1, #16]
 800894a:	2f00      	cmp	r7, #0
 800894c:	d0a9      	beq.n	80088a2 <__sflush_r+0x1a>
 800894e:	0793      	lsls	r3, r2, #30
 8008950:	680e      	ldr	r6, [r1, #0]
 8008952:	bf08      	it	eq
 8008954:	694b      	ldreq	r3, [r1, #20]
 8008956:	600f      	str	r7, [r1, #0]
 8008958:	bf18      	it	ne
 800895a:	2300      	movne	r3, #0
 800895c:	eba6 0807 	sub.w	r8, r6, r7
 8008960:	608b      	str	r3, [r1, #8]
 8008962:	f1b8 0f00 	cmp.w	r8, #0
 8008966:	dd9c      	ble.n	80088a2 <__sflush_r+0x1a>
 8008968:	6a21      	ldr	r1, [r4, #32]
 800896a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800896c:	4643      	mov	r3, r8
 800896e:	463a      	mov	r2, r7
 8008970:	4628      	mov	r0, r5
 8008972:	47b0      	blx	r6
 8008974:	2800      	cmp	r0, #0
 8008976:	dc06      	bgt.n	8008986 <__sflush_r+0xfe>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e78e      	b.n	80088a4 <__sflush_r+0x1c>
 8008986:	4407      	add	r7, r0
 8008988:	eba8 0800 	sub.w	r8, r8, r0
 800898c:	e7e9      	b.n	8008962 <__sflush_r+0xda>
 800898e:	bf00      	nop
 8008990:	20400001 	.word	0x20400001

08008994 <_fflush_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	690b      	ldr	r3, [r1, #16]
 8008998:	4605      	mov	r5, r0
 800899a:	460c      	mov	r4, r1
 800899c:	b913      	cbnz	r3, 80089a4 <_fflush_r+0x10>
 800899e:	2500      	movs	r5, #0
 80089a0:	4628      	mov	r0, r5
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	b118      	cbz	r0, 80089ae <_fflush_r+0x1a>
 80089a6:	6983      	ldr	r3, [r0, #24]
 80089a8:	b90b      	cbnz	r3, 80089ae <_fflush_r+0x1a>
 80089aa:	f000 f887 	bl	8008abc <__sinit>
 80089ae:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <_fflush_r+0x6c>)
 80089b0:	429c      	cmp	r4, r3
 80089b2:	d11b      	bne.n	80089ec <_fflush_r+0x58>
 80089b4:	686c      	ldr	r4, [r5, #4]
 80089b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0ef      	beq.n	800899e <_fflush_r+0xa>
 80089be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089c0:	07d0      	lsls	r0, r2, #31
 80089c2:	d404      	bmi.n	80089ce <_fflush_r+0x3a>
 80089c4:	0599      	lsls	r1, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_fflush_r+0x3a>
 80089c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ca:	f000 f91a 	bl	8008c02 <__retarget_lock_acquire_recursive>
 80089ce:	4628      	mov	r0, r5
 80089d0:	4621      	mov	r1, r4
 80089d2:	f7ff ff59 	bl	8008888 <__sflush_r>
 80089d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d8:	07da      	lsls	r2, r3, #31
 80089da:	4605      	mov	r5, r0
 80089dc:	d4e0      	bmi.n	80089a0 <_fflush_r+0xc>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	059b      	lsls	r3, r3, #22
 80089e2:	d4dd      	bmi.n	80089a0 <_fflush_r+0xc>
 80089e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e6:	f000 f90d 	bl	8008c04 <__retarget_lock_release_recursive>
 80089ea:	e7d9      	b.n	80089a0 <_fflush_r+0xc>
 80089ec:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <_fflush_r+0x70>)
 80089ee:	429c      	cmp	r4, r3
 80089f0:	d101      	bne.n	80089f6 <_fflush_r+0x62>
 80089f2:	68ac      	ldr	r4, [r5, #8]
 80089f4:	e7df      	b.n	80089b6 <_fflush_r+0x22>
 80089f6:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <_fflush_r+0x74>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	bf08      	it	eq
 80089fc:	68ec      	ldreq	r4, [r5, #12]
 80089fe:	e7da      	b.n	80089b6 <_fflush_r+0x22>
 8008a00:	0800ed44 	.word	0x0800ed44
 8008a04:	0800ed64 	.word	0x0800ed64
 8008a08:	0800ed24 	.word	0x0800ed24

08008a0c <std>:
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	b510      	push	{r4, lr}
 8008a10:	4604      	mov	r4, r0
 8008a12:	e9c0 3300 	strd	r3, r3, [r0]
 8008a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a1a:	6083      	str	r3, [r0, #8]
 8008a1c:	8181      	strh	r1, [r0, #12]
 8008a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a20:	81c2      	strh	r2, [r0, #14]
 8008a22:	6183      	str	r3, [r0, #24]
 8008a24:	4619      	mov	r1, r3
 8008a26:	2208      	movs	r2, #8
 8008a28:	305c      	adds	r0, #92	; 0x5c
 8008a2a:	f7fe fad5 	bl	8006fd8 <memset>
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <std+0x38>)
 8008a30:	6263      	str	r3, [r4, #36]	; 0x24
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <std+0x3c>)
 8008a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <std+0x40>)
 8008a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a3a:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <std+0x44>)
 8008a3c:	6224      	str	r4, [r4, #32]
 8008a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	bf00      	nop
 8008a44:	08009af9 	.word	0x08009af9
 8008a48:	08009b1b 	.word	0x08009b1b
 8008a4c:	08009b53 	.word	0x08009b53
 8008a50:	08009b77 	.word	0x08009b77

08008a54 <_cleanup_r>:
 8008a54:	4901      	ldr	r1, [pc, #4]	; (8008a5c <_cleanup_r+0x8>)
 8008a56:	f000 b8af 	b.w	8008bb8 <_fwalk_reent>
 8008a5a:	bf00      	nop
 8008a5c:	08008995 	.word	0x08008995

08008a60 <__sfmoreglue>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	1e4a      	subs	r2, r1, #1
 8008a64:	2568      	movs	r5, #104	; 0x68
 8008a66:	4355      	muls	r5, r2
 8008a68:	460e      	mov	r6, r1
 8008a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a6e:	f000 fd23 	bl	80094b8 <_malloc_r>
 8008a72:	4604      	mov	r4, r0
 8008a74:	b140      	cbz	r0, 8008a88 <__sfmoreglue+0x28>
 8008a76:	2100      	movs	r1, #0
 8008a78:	e9c0 1600 	strd	r1, r6, [r0]
 8008a7c:	300c      	adds	r0, #12
 8008a7e:	60a0      	str	r0, [r4, #8]
 8008a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a84:	f7fe faa8 	bl	8006fd8 <memset>
 8008a88:	4620      	mov	r0, r4
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}

08008a8c <__sfp_lock_acquire>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__sfp_lock_acquire+0x8>)
 8008a8e:	f000 b8b8 	b.w	8008c02 <__retarget_lock_acquire_recursive>
 8008a92:	bf00      	nop
 8008a94:	2000047c 	.word	0x2000047c

08008a98 <__sfp_lock_release>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__sfp_lock_release+0x8>)
 8008a9a:	f000 b8b3 	b.w	8008c04 <__retarget_lock_release_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	2000047c 	.word	0x2000047c

08008aa4 <__sinit_lock_acquire>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__sinit_lock_acquire+0x8>)
 8008aa6:	f000 b8ac 	b.w	8008c02 <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20000477 	.word	0x20000477

08008ab0 <__sinit_lock_release>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sinit_lock_release+0x8>)
 8008ab2:	f000 b8a7 	b.w	8008c04 <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20000477 	.word	0x20000477

08008abc <__sinit>:
 8008abc:	b510      	push	{r4, lr}
 8008abe:	4604      	mov	r4, r0
 8008ac0:	f7ff fff0 	bl	8008aa4 <__sinit_lock_acquire>
 8008ac4:	69a3      	ldr	r3, [r4, #24]
 8008ac6:	b11b      	cbz	r3, 8008ad0 <__sinit+0x14>
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	f7ff bff0 	b.w	8008ab0 <__sinit_lock_release>
 8008ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8008ad6:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <__sinit+0x68>)
 8008ad8:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <__sinit+0x6c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	bf04      	itt	eq
 8008ae2:	2301      	moveq	r3, #1
 8008ae4:	61a3      	streq	r3, [r4, #24]
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 f820 	bl	8008b2c <__sfp>
 8008aec:	6060      	str	r0, [r4, #4]
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 f81c 	bl	8008b2c <__sfp>
 8008af4:	60a0      	str	r0, [r4, #8]
 8008af6:	4620      	mov	r0, r4
 8008af8:	f000 f818 	bl	8008b2c <__sfp>
 8008afc:	2200      	movs	r2, #0
 8008afe:	60e0      	str	r0, [r4, #12]
 8008b00:	2104      	movs	r1, #4
 8008b02:	6860      	ldr	r0, [r4, #4]
 8008b04:	f7ff ff82 	bl	8008a0c <std>
 8008b08:	68a0      	ldr	r0, [r4, #8]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	2109      	movs	r1, #9
 8008b0e:	f7ff ff7d 	bl	8008a0c <std>
 8008b12:	68e0      	ldr	r0, [r4, #12]
 8008b14:	2202      	movs	r2, #2
 8008b16:	2112      	movs	r1, #18
 8008b18:	f7ff ff78 	bl	8008a0c <std>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	61a3      	str	r3, [r4, #24]
 8008b20:	e7d2      	b.n	8008ac8 <__sinit+0xc>
 8008b22:	bf00      	nop
 8008b24:	0800ec58 	.word	0x0800ec58
 8008b28:	08008a55 	.word	0x08008a55

08008b2c <__sfp>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	4607      	mov	r7, r0
 8008b30:	f7ff ffac 	bl	8008a8c <__sfp_lock_acquire>
 8008b34:	4b1e      	ldr	r3, [pc, #120]	; (8008bb0 <__sfp+0x84>)
 8008b36:	681e      	ldr	r6, [r3, #0]
 8008b38:	69b3      	ldr	r3, [r6, #24]
 8008b3a:	b913      	cbnz	r3, 8008b42 <__sfp+0x16>
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	f7ff ffbd 	bl	8008abc <__sinit>
 8008b42:	3648      	adds	r6, #72	; 0x48
 8008b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	d503      	bpl.n	8008b54 <__sfp+0x28>
 8008b4c:	6833      	ldr	r3, [r6, #0]
 8008b4e:	b30b      	cbz	r3, 8008b94 <__sfp+0x68>
 8008b50:	6836      	ldr	r6, [r6, #0]
 8008b52:	e7f7      	b.n	8008b44 <__sfp+0x18>
 8008b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b58:	b9d5      	cbnz	r5, 8008b90 <__sfp+0x64>
 8008b5a:	4b16      	ldr	r3, [pc, #88]	; (8008bb4 <__sfp+0x88>)
 8008b5c:	60e3      	str	r3, [r4, #12]
 8008b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b62:	6665      	str	r5, [r4, #100]	; 0x64
 8008b64:	f000 f84c 	bl	8008c00 <__retarget_lock_init_recursive>
 8008b68:	f7ff ff96 	bl	8008a98 <__sfp_lock_release>
 8008b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b74:	6025      	str	r5, [r4, #0]
 8008b76:	61a5      	str	r5, [r4, #24]
 8008b78:	2208      	movs	r2, #8
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b80:	f7fe fa2a 	bl	8006fd8 <memset>
 8008b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b90:	3468      	adds	r4, #104	; 0x68
 8008b92:	e7d9      	b.n	8008b48 <__sfp+0x1c>
 8008b94:	2104      	movs	r1, #4
 8008b96:	4638      	mov	r0, r7
 8008b98:	f7ff ff62 	bl	8008a60 <__sfmoreglue>
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	6030      	str	r0, [r6, #0]
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d1d5      	bne.n	8008b50 <__sfp+0x24>
 8008ba4:	f7ff ff78 	bl	8008a98 <__sfp_lock_release>
 8008ba8:	230c      	movs	r3, #12
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	e7ee      	b.n	8008b8c <__sfp+0x60>
 8008bae:	bf00      	nop
 8008bb0:	0800ec58 	.word	0x0800ec58
 8008bb4:	ffff0001 	.word	0xffff0001

08008bb8 <_fwalk_reent>:
 8008bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	4688      	mov	r8, r1
 8008bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bc4:	2700      	movs	r7, #0
 8008bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bca:	f1b9 0901 	subs.w	r9, r9, #1
 8008bce:	d505      	bpl.n	8008bdc <_fwalk_reent+0x24>
 8008bd0:	6824      	ldr	r4, [r4, #0]
 8008bd2:	2c00      	cmp	r4, #0
 8008bd4:	d1f7      	bne.n	8008bc6 <_fwalk_reent+0xe>
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bdc:	89ab      	ldrh	r3, [r5, #12]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d907      	bls.n	8008bf2 <_fwalk_reent+0x3a>
 8008be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be6:	3301      	adds	r3, #1
 8008be8:	d003      	beq.n	8008bf2 <_fwalk_reent+0x3a>
 8008bea:	4629      	mov	r1, r5
 8008bec:	4630      	mov	r0, r6
 8008bee:	47c0      	blx	r8
 8008bf0:	4307      	orrs	r7, r0
 8008bf2:	3568      	adds	r5, #104	; 0x68
 8008bf4:	e7e9      	b.n	8008bca <_fwalk_reent+0x12>
	...

08008bf8 <_localeconv_r>:
 8008bf8:	4800      	ldr	r0, [pc, #0]	; (8008bfc <_localeconv_r+0x4>)
 8008bfa:	4770      	bx	lr
 8008bfc:	20000178 	.word	0x20000178

08008c00 <__retarget_lock_init_recursive>:
 8008c00:	4770      	bx	lr

08008c02 <__retarget_lock_acquire_recursive>:
 8008c02:	4770      	bx	lr

08008c04 <__retarget_lock_release_recursive>:
 8008c04:	4770      	bx	lr

08008c06 <__swhatbuf_r>:
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	460e      	mov	r6, r1
 8008c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	b096      	sub	sp, #88	; 0x58
 8008c12:	4614      	mov	r4, r2
 8008c14:	461d      	mov	r5, r3
 8008c16:	da07      	bge.n	8008c28 <__swhatbuf_r+0x22>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	89b3      	ldrh	r3, [r6, #12]
 8008c1e:	061a      	lsls	r2, r3, #24
 8008c20:	d410      	bmi.n	8008c44 <__swhatbuf_r+0x3e>
 8008c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c26:	e00e      	b.n	8008c46 <__swhatbuf_r+0x40>
 8008c28:	466a      	mov	r2, sp
 8008c2a:	f000 fffb 	bl	8009c24 <_fstat_r>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	dbf2      	blt.n	8008c18 <__swhatbuf_r+0x12>
 8008c32:	9a01      	ldr	r2, [sp, #4]
 8008c34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c3c:	425a      	negs	r2, r3
 8008c3e:	415a      	adcs	r2, r3
 8008c40:	602a      	str	r2, [r5, #0]
 8008c42:	e7ee      	b.n	8008c22 <__swhatbuf_r+0x1c>
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	2000      	movs	r0, #0
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	b016      	add	sp, #88	; 0x58
 8008c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c50 <__smakebuf_r>:
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c54:	079d      	lsls	r5, r3, #30
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d507      	bpl.n	8008c6c <__smakebuf_r+0x1c>
 8008c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2301      	movs	r3, #1
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	b002      	add	sp, #8
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	f7ff ffc9 	bl	8008c06 <__swhatbuf_r>
 8008c74:	9900      	ldr	r1, [sp, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f000 fc1d 	bl	80094b8 <_malloc_r>
 8008c7e:	b948      	cbnz	r0, 8008c94 <__smakebuf_r+0x44>
 8008c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c84:	059a      	lsls	r2, r3, #22
 8008c86:	d4ef      	bmi.n	8008c68 <__smakebuf_r+0x18>
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	f043 0302 	orr.w	r3, r3, #2
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	e7e3      	b.n	8008c5c <__smakebuf_r+0xc>
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <__smakebuf_r+0x7c>)
 8008c96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	9b00      	ldr	r3, [sp, #0]
 8008ca4:	6163      	str	r3, [r4, #20]
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	6120      	str	r0, [r4, #16]
 8008caa:	b15b      	cbz	r3, 8008cc4 <__smakebuf_r+0x74>
 8008cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 ffc9 	bl	8009c48 <_isatty_r>
 8008cb6:	b128      	cbz	r0, 8008cc4 <__smakebuf_r+0x74>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	89a0      	ldrh	r0, [r4, #12]
 8008cc6:	4305      	orrs	r5, r0
 8008cc8:	81a5      	strh	r5, [r4, #12]
 8008cca:	e7cd      	b.n	8008c68 <__smakebuf_r+0x18>
 8008ccc:	08008a55 	.word	0x08008a55

08008cd0 <malloc>:
 8008cd0:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <malloc+0xc>)
 8008cd2:	4601      	mov	r1, r0
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	f000 bbef 	b.w	80094b8 <_malloc_r>
 8008cda:	bf00      	nop
 8008cdc:	20000024 	.word	0x20000024

08008ce0 <memcpy>:
 8008ce0:	440a      	add	r2, r1
 8008ce2:	4291      	cmp	r1, r2
 8008ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ce8:	d100      	bne.n	8008cec <memcpy+0xc>
 8008cea:	4770      	bx	lr
 8008cec:	b510      	push	{r4, lr}
 8008cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cf6:	4291      	cmp	r1, r2
 8008cf8:	d1f9      	bne.n	8008cee <memcpy+0xe>
 8008cfa:	bd10      	pop	{r4, pc}

08008cfc <_Balloc>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d00:	4604      	mov	r4, r0
 8008d02:	460d      	mov	r5, r1
 8008d04:	b976      	cbnz	r6, 8008d24 <_Balloc+0x28>
 8008d06:	2010      	movs	r0, #16
 8008d08:	f7ff ffe2 	bl	8008cd0 <malloc>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d10:	b920      	cbnz	r0, 8008d1c <_Balloc+0x20>
 8008d12:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <_Balloc+0x78>)
 8008d14:	4818      	ldr	r0, [pc, #96]	; (8008d78 <_Balloc+0x7c>)
 8008d16:	2166      	movs	r1, #102	; 0x66
 8008d18:	f000 ff44 	bl	8009ba4 <__assert_func>
 8008d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d20:	6006      	str	r6, [r0, #0]
 8008d22:	60c6      	str	r6, [r0, #12]
 8008d24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d26:	68f3      	ldr	r3, [r6, #12]
 8008d28:	b183      	cbz	r3, 8008d4c <_Balloc+0x50>
 8008d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d32:	b9b8      	cbnz	r0, 8008d64 <_Balloc+0x68>
 8008d34:	2101      	movs	r1, #1
 8008d36:	fa01 f605 	lsl.w	r6, r1, r5
 8008d3a:	1d72      	adds	r2, r6, #5
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	4620      	mov	r0, r4
 8008d40:	f000 fb5a 	bl	80093f8 <_calloc_r>
 8008d44:	b160      	cbz	r0, 8008d60 <_Balloc+0x64>
 8008d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d4a:	e00e      	b.n	8008d6a <_Balloc+0x6e>
 8008d4c:	2221      	movs	r2, #33	; 0x21
 8008d4e:	2104      	movs	r1, #4
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 fb51 	bl	80093f8 <_calloc_r>
 8008d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d58:	60f0      	str	r0, [r6, #12]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e4      	bne.n	8008d2a <_Balloc+0x2e>
 8008d60:	2000      	movs	r0, #0
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	6802      	ldr	r2, [r0, #0]
 8008d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d70:	e7f7      	b.n	8008d62 <_Balloc+0x66>
 8008d72:	bf00      	nop
 8008d74:	0800ec9d 	.word	0x0800ec9d
 8008d78:	0800ed84 	.word	0x0800ed84

08008d7c <_Bfree>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d80:	4605      	mov	r5, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b976      	cbnz	r6, 8008da4 <_Bfree+0x28>
 8008d86:	2010      	movs	r0, #16
 8008d88:	f7ff ffa2 	bl	8008cd0 <malloc>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	6268      	str	r0, [r5, #36]	; 0x24
 8008d90:	b920      	cbnz	r0, 8008d9c <_Bfree+0x20>
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <_Bfree+0x3c>)
 8008d94:	4809      	ldr	r0, [pc, #36]	; (8008dbc <_Bfree+0x40>)
 8008d96:	218a      	movs	r1, #138	; 0x8a
 8008d98:	f000 ff04 	bl	8009ba4 <__assert_func>
 8008d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da0:	6006      	str	r6, [r0, #0]
 8008da2:	60c6      	str	r6, [r0, #12]
 8008da4:	b13c      	cbz	r4, 8008db6 <_Bfree+0x3a>
 8008da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008da8:	6862      	ldr	r2, [r4, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db0:	6021      	str	r1, [r4, #0]
 8008db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	0800ec9d 	.word	0x0800ec9d
 8008dbc:	0800ed84 	.word	0x0800ed84

08008dc0 <__multadd>:
 8008dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	690e      	ldr	r6, [r1, #16]
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	4698      	mov	r8, r3
 8008dca:	460c      	mov	r4, r1
 8008dcc:	f101 0014 	add.w	r0, r1, #20
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	6805      	ldr	r5, [r0, #0]
 8008dd4:	b2a9      	uxth	r1, r5
 8008dd6:	fb02 8101 	mla	r1, r2, r1, r8
 8008dda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008dde:	0c2d      	lsrs	r5, r5, #16
 8008de0:	fb02 c505 	mla	r5, r2, r5, ip
 8008de4:	b289      	uxth	r1, r1
 8008de6:	3301      	adds	r3, #1
 8008de8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008dec:	429e      	cmp	r6, r3
 8008dee:	f840 1b04 	str.w	r1, [r0], #4
 8008df2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008df6:	dcec      	bgt.n	8008dd2 <__multadd+0x12>
 8008df8:	f1b8 0f00 	cmp.w	r8, #0
 8008dfc:	d022      	beq.n	8008e44 <__multadd+0x84>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	42b3      	cmp	r3, r6
 8008e02:	dc19      	bgt.n	8008e38 <__multadd+0x78>
 8008e04:	6861      	ldr	r1, [r4, #4]
 8008e06:	4638      	mov	r0, r7
 8008e08:	3101      	adds	r1, #1
 8008e0a:	f7ff ff77 	bl	8008cfc <_Balloc>
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b928      	cbnz	r0, 8008e1e <__multadd+0x5e>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <__multadd+0x8c>)
 8008e16:	480e      	ldr	r0, [pc, #56]	; (8008e50 <__multadd+0x90>)
 8008e18:	21b5      	movs	r1, #181	; 0xb5
 8008e1a:	f000 fec3 	bl	8009ba4 <__assert_func>
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	3202      	adds	r2, #2
 8008e22:	f104 010c 	add.w	r1, r4, #12
 8008e26:	0092      	lsls	r2, r2, #2
 8008e28:	300c      	adds	r0, #12
 8008e2a:	f7ff ff59 	bl	8008ce0 <memcpy>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4638      	mov	r0, r7
 8008e32:	f7ff ffa3 	bl	8008d7c <_Bfree>
 8008e36:	462c      	mov	r4, r5
 8008e38:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e42:	6126      	str	r6, [r4, #16]
 8008e44:	4620      	mov	r0, r4
 8008e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4a:	bf00      	nop
 8008e4c:	0800ed13 	.word	0x0800ed13
 8008e50:	0800ed84 	.word	0x0800ed84

08008e54 <__hi0bits>:
 8008e54:	0c03      	lsrs	r3, r0, #16
 8008e56:	041b      	lsls	r3, r3, #16
 8008e58:	b9d3      	cbnz	r3, 8008e90 <__hi0bits+0x3c>
 8008e5a:	0400      	lsls	r0, r0, #16
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e62:	bf04      	itt	eq
 8008e64:	0200      	lsleq	r0, r0, #8
 8008e66:	3308      	addeq	r3, #8
 8008e68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e6c:	bf04      	itt	eq
 8008e6e:	0100      	lsleq	r0, r0, #4
 8008e70:	3304      	addeq	r3, #4
 8008e72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e76:	bf04      	itt	eq
 8008e78:	0080      	lsleq	r0, r0, #2
 8008e7a:	3302      	addeq	r3, #2
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	db05      	blt.n	8008e8c <__hi0bits+0x38>
 8008e80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e84:	f103 0301 	add.w	r3, r3, #1
 8008e88:	bf08      	it	eq
 8008e8a:	2320      	moveq	r3, #32
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	4770      	bx	lr
 8008e90:	2300      	movs	r3, #0
 8008e92:	e7e4      	b.n	8008e5e <__hi0bits+0xa>

08008e94 <__lo0bits>:
 8008e94:	6803      	ldr	r3, [r0, #0]
 8008e96:	f013 0207 	ands.w	r2, r3, #7
 8008e9a:	4601      	mov	r1, r0
 8008e9c:	d00b      	beq.n	8008eb6 <__lo0bits+0x22>
 8008e9e:	07da      	lsls	r2, r3, #31
 8008ea0:	d424      	bmi.n	8008eec <__lo0bits+0x58>
 8008ea2:	0798      	lsls	r0, r3, #30
 8008ea4:	bf49      	itett	mi
 8008ea6:	085b      	lsrmi	r3, r3, #1
 8008ea8:	089b      	lsrpl	r3, r3, #2
 8008eaa:	2001      	movmi	r0, #1
 8008eac:	600b      	strmi	r3, [r1, #0]
 8008eae:	bf5c      	itt	pl
 8008eb0:	600b      	strpl	r3, [r1, #0]
 8008eb2:	2002      	movpl	r0, #2
 8008eb4:	4770      	bx	lr
 8008eb6:	b298      	uxth	r0, r3
 8008eb8:	b9b0      	cbnz	r0, 8008ee8 <__lo0bits+0x54>
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	2010      	movs	r0, #16
 8008ebe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ec2:	bf04      	itt	eq
 8008ec4:	0a1b      	lsreq	r3, r3, #8
 8008ec6:	3008      	addeq	r0, #8
 8008ec8:	071a      	lsls	r2, r3, #28
 8008eca:	bf04      	itt	eq
 8008ecc:	091b      	lsreq	r3, r3, #4
 8008ece:	3004      	addeq	r0, #4
 8008ed0:	079a      	lsls	r2, r3, #30
 8008ed2:	bf04      	itt	eq
 8008ed4:	089b      	lsreq	r3, r3, #2
 8008ed6:	3002      	addeq	r0, #2
 8008ed8:	07da      	lsls	r2, r3, #31
 8008eda:	d403      	bmi.n	8008ee4 <__lo0bits+0x50>
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	f100 0001 	add.w	r0, r0, #1
 8008ee2:	d005      	beq.n	8008ef0 <__lo0bits+0x5c>
 8008ee4:	600b      	str	r3, [r1, #0]
 8008ee6:	4770      	bx	lr
 8008ee8:	4610      	mov	r0, r2
 8008eea:	e7e8      	b.n	8008ebe <__lo0bits+0x2a>
 8008eec:	2000      	movs	r0, #0
 8008eee:	4770      	bx	lr
 8008ef0:	2020      	movs	r0, #32
 8008ef2:	4770      	bx	lr

08008ef4 <__i2b>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	2101      	movs	r1, #1
 8008efa:	f7ff feff 	bl	8008cfc <_Balloc>
 8008efe:	4602      	mov	r2, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <__i2b+0x1a>
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <__i2b+0x24>)
 8008f04:	4805      	ldr	r0, [pc, #20]	; (8008f1c <__i2b+0x28>)
 8008f06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f0a:	f000 fe4b 	bl	8009ba4 <__assert_func>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	6144      	str	r4, [r0, #20]
 8008f12:	6103      	str	r3, [r0, #16]
 8008f14:	bd10      	pop	{r4, pc}
 8008f16:	bf00      	nop
 8008f18:	0800ed13 	.word	0x0800ed13
 8008f1c:	0800ed84 	.word	0x0800ed84

08008f20 <__multiply>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	4614      	mov	r4, r2
 8008f26:	690a      	ldr	r2, [r1, #16]
 8008f28:	6923      	ldr	r3, [r4, #16]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	bfb8      	it	lt
 8008f2e:	460b      	movlt	r3, r1
 8008f30:	460d      	mov	r5, r1
 8008f32:	bfbc      	itt	lt
 8008f34:	4625      	movlt	r5, r4
 8008f36:	461c      	movlt	r4, r3
 8008f38:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f40:	68ab      	ldr	r3, [r5, #8]
 8008f42:	6869      	ldr	r1, [r5, #4]
 8008f44:	eb0a 0709 	add.w	r7, sl, r9
 8008f48:	42bb      	cmp	r3, r7
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	bfb8      	it	lt
 8008f4e:	3101      	addlt	r1, #1
 8008f50:	f7ff fed4 	bl	8008cfc <_Balloc>
 8008f54:	b930      	cbnz	r0, 8008f64 <__multiply+0x44>
 8008f56:	4602      	mov	r2, r0
 8008f58:	4b42      	ldr	r3, [pc, #264]	; (8009064 <__multiply+0x144>)
 8008f5a:	4843      	ldr	r0, [pc, #268]	; (8009068 <__multiply+0x148>)
 8008f5c:	f240 115d 	movw	r1, #349	; 0x15d
 8008f60:	f000 fe20 	bl	8009ba4 <__assert_func>
 8008f64:	f100 0614 	add.w	r6, r0, #20
 8008f68:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f6c:	4633      	mov	r3, r6
 8008f6e:	2200      	movs	r2, #0
 8008f70:	4543      	cmp	r3, r8
 8008f72:	d31e      	bcc.n	8008fb2 <__multiply+0x92>
 8008f74:	f105 0c14 	add.w	ip, r5, #20
 8008f78:	f104 0314 	add.w	r3, r4, #20
 8008f7c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008f80:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008f84:	9202      	str	r2, [sp, #8]
 8008f86:	ebac 0205 	sub.w	r2, ip, r5
 8008f8a:	3a15      	subs	r2, #21
 8008f8c:	f022 0203 	bic.w	r2, r2, #3
 8008f90:	3204      	adds	r2, #4
 8008f92:	f105 0115 	add.w	r1, r5, #21
 8008f96:	458c      	cmp	ip, r1
 8008f98:	bf38      	it	cc
 8008f9a:	2204      	movcc	r2, #4
 8008f9c:	9201      	str	r2, [sp, #4]
 8008f9e:	9a02      	ldr	r2, [sp, #8]
 8008fa0:	9303      	str	r3, [sp, #12]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d808      	bhi.n	8008fb8 <__multiply+0x98>
 8008fa6:	2f00      	cmp	r7, #0
 8008fa8:	dc55      	bgt.n	8009056 <__multiply+0x136>
 8008faa:	6107      	str	r7, [r0, #16]
 8008fac:	b005      	add	sp, #20
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	f843 2b04 	str.w	r2, [r3], #4
 8008fb6:	e7db      	b.n	8008f70 <__multiply+0x50>
 8008fb8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fbc:	f1ba 0f00 	cmp.w	sl, #0
 8008fc0:	d020      	beq.n	8009004 <__multiply+0xe4>
 8008fc2:	f105 0e14 	add.w	lr, r5, #20
 8008fc6:	46b1      	mov	r9, r6
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008fce:	f8d9 b000 	ldr.w	fp, [r9]
 8008fd2:	b2a1      	uxth	r1, r4
 8008fd4:	fa1f fb8b 	uxth.w	fp, fp
 8008fd8:	fb0a b101 	mla	r1, sl, r1, fp
 8008fdc:	4411      	add	r1, r2
 8008fde:	f8d9 2000 	ldr.w	r2, [r9]
 8008fe2:	0c24      	lsrs	r4, r4, #16
 8008fe4:	0c12      	lsrs	r2, r2, #16
 8008fe6:	fb0a 2404 	mla	r4, sl, r4, r2
 8008fea:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008fee:	b289      	uxth	r1, r1
 8008ff0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008ff4:	45f4      	cmp	ip, lr
 8008ff6:	f849 1b04 	str.w	r1, [r9], #4
 8008ffa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008ffe:	d8e4      	bhi.n	8008fca <__multiply+0xaa>
 8009000:	9901      	ldr	r1, [sp, #4]
 8009002:	5072      	str	r2, [r6, r1]
 8009004:	9a03      	ldr	r2, [sp, #12]
 8009006:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800900a:	3304      	adds	r3, #4
 800900c:	f1b9 0f00 	cmp.w	r9, #0
 8009010:	d01f      	beq.n	8009052 <__multiply+0x132>
 8009012:	6834      	ldr	r4, [r6, #0]
 8009014:	f105 0114 	add.w	r1, r5, #20
 8009018:	46b6      	mov	lr, r6
 800901a:	f04f 0a00 	mov.w	sl, #0
 800901e:	880a      	ldrh	r2, [r1, #0]
 8009020:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009024:	fb09 b202 	mla	r2, r9, r2, fp
 8009028:	4492      	add	sl, r2
 800902a:	b2a4      	uxth	r4, r4
 800902c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009030:	f84e 4b04 	str.w	r4, [lr], #4
 8009034:	f851 4b04 	ldr.w	r4, [r1], #4
 8009038:	f8be 2000 	ldrh.w	r2, [lr]
 800903c:	0c24      	lsrs	r4, r4, #16
 800903e:	fb09 2404 	mla	r4, r9, r4, r2
 8009042:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009046:	458c      	cmp	ip, r1
 8009048:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800904c:	d8e7      	bhi.n	800901e <__multiply+0xfe>
 800904e:	9a01      	ldr	r2, [sp, #4]
 8009050:	50b4      	str	r4, [r6, r2]
 8009052:	3604      	adds	r6, #4
 8009054:	e7a3      	b.n	8008f9e <__multiply+0x7e>
 8009056:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1a5      	bne.n	8008faa <__multiply+0x8a>
 800905e:	3f01      	subs	r7, #1
 8009060:	e7a1      	b.n	8008fa6 <__multiply+0x86>
 8009062:	bf00      	nop
 8009064:	0800ed13 	.word	0x0800ed13
 8009068:	0800ed84 	.word	0x0800ed84

0800906c <__pow5mult>:
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009070:	4615      	mov	r5, r2
 8009072:	f012 0203 	ands.w	r2, r2, #3
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	d007      	beq.n	800908c <__pow5mult+0x20>
 800907c:	4c25      	ldr	r4, [pc, #148]	; (8009114 <__pow5mult+0xa8>)
 800907e:	3a01      	subs	r2, #1
 8009080:	2300      	movs	r3, #0
 8009082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009086:	f7ff fe9b 	bl	8008dc0 <__multadd>
 800908a:	4607      	mov	r7, r0
 800908c:	10ad      	asrs	r5, r5, #2
 800908e:	d03d      	beq.n	800910c <__pow5mult+0xa0>
 8009090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009092:	b97c      	cbnz	r4, 80090b4 <__pow5mult+0x48>
 8009094:	2010      	movs	r0, #16
 8009096:	f7ff fe1b 	bl	8008cd0 <malloc>
 800909a:	4602      	mov	r2, r0
 800909c:	6270      	str	r0, [r6, #36]	; 0x24
 800909e:	b928      	cbnz	r0, 80090ac <__pow5mult+0x40>
 80090a0:	4b1d      	ldr	r3, [pc, #116]	; (8009118 <__pow5mult+0xac>)
 80090a2:	481e      	ldr	r0, [pc, #120]	; (800911c <__pow5mult+0xb0>)
 80090a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090a8:	f000 fd7c 	bl	8009ba4 <__assert_func>
 80090ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090b0:	6004      	str	r4, [r0, #0]
 80090b2:	60c4      	str	r4, [r0, #12]
 80090b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090bc:	b94c      	cbnz	r4, 80090d2 <__pow5mult+0x66>
 80090be:	f240 2171 	movw	r1, #625	; 0x271
 80090c2:	4630      	mov	r0, r6
 80090c4:	f7ff ff16 	bl	8008ef4 <__i2b>
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ce:	4604      	mov	r4, r0
 80090d0:	6003      	str	r3, [r0, #0]
 80090d2:	f04f 0900 	mov.w	r9, #0
 80090d6:	07eb      	lsls	r3, r5, #31
 80090d8:	d50a      	bpl.n	80090f0 <__pow5mult+0x84>
 80090da:	4639      	mov	r1, r7
 80090dc:	4622      	mov	r2, r4
 80090de:	4630      	mov	r0, r6
 80090e0:	f7ff ff1e 	bl	8008f20 <__multiply>
 80090e4:	4639      	mov	r1, r7
 80090e6:	4680      	mov	r8, r0
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff fe47 	bl	8008d7c <_Bfree>
 80090ee:	4647      	mov	r7, r8
 80090f0:	106d      	asrs	r5, r5, #1
 80090f2:	d00b      	beq.n	800910c <__pow5mult+0xa0>
 80090f4:	6820      	ldr	r0, [r4, #0]
 80090f6:	b938      	cbnz	r0, 8009108 <__pow5mult+0x9c>
 80090f8:	4622      	mov	r2, r4
 80090fa:	4621      	mov	r1, r4
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff ff0f 	bl	8008f20 <__multiply>
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	f8c0 9000 	str.w	r9, [r0]
 8009108:	4604      	mov	r4, r0
 800910a:	e7e4      	b.n	80090d6 <__pow5mult+0x6a>
 800910c:	4638      	mov	r0, r7
 800910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009112:	bf00      	nop
 8009114:	0800eed8 	.word	0x0800eed8
 8009118:	0800ec9d 	.word	0x0800ec9d
 800911c:	0800ed84 	.word	0x0800ed84

08009120 <__lshift>:
 8009120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009124:	460c      	mov	r4, r1
 8009126:	6849      	ldr	r1, [r1, #4]
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912e:	68a3      	ldr	r3, [r4, #8]
 8009130:	4607      	mov	r7, r0
 8009132:	4691      	mov	r9, r2
 8009134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009138:	f108 0601 	add.w	r6, r8, #1
 800913c:	42b3      	cmp	r3, r6
 800913e:	db0b      	blt.n	8009158 <__lshift+0x38>
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff fddb 	bl	8008cfc <_Balloc>
 8009146:	4605      	mov	r5, r0
 8009148:	b948      	cbnz	r0, 800915e <__lshift+0x3e>
 800914a:	4602      	mov	r2, r0
 800914c:	4b28      	ldr	r3, [pc, #160]	; (80091f0 <__lshift+0xd0>)
 800914e:	4829      	ldr	r0, [pc, #164]	; (80091f4 <__lshift+0xd4>)
 8009150:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009154:	f000 fd26 	bl	8009ba4 <__assert_func>
 8009158:	3101      	adds	r1, #1
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	e7ee      	b.n	800913c <__lshift+0x1c>
 800915e:	2300      	movs	r3, #0
 8009160:	f100 0114 	add.w	r1, r0, #20
 8009164:	f100 0210 	add.w	r2, r0, #16
 8009168:	4618      	mov	r0, r3
 800916a:	4553      	cmp	r3, sl
 800916c:	db33      	blt.n	80091d6 <__lshift+0xb6>
 800916e:	6920      	ldr	r0, [r4, #16]
 8009170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009174:	f104 0314 	add.w	r3, r4, #20
 8009178:	f019 091f 	ands.w	r9, r9, #31
 800917c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009184:	d02b      	beq.n	80091de <__lshift+0xbe>
 8009186:	f1c9 0e20 	rsb	lr, r9, #32
 800918a:	468a      	mov	sl, r1
 800918c:	2200      	movs	r2, #0
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	fa00 f009 	lsl.w	r0, r0, r9
 8009194:	4302      	orrs	r2, r0
 8009196:	f84a 2b04 	str.w	r2, [sl], #4
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	459c      	cmp	ip, r3
 80091a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091a4:	d8f3      	bhi.n	800918e <__lshift+0x6e>
 80091a6:	ebac 0304 	sub.w	r3, ip, r4
 80091aa:	3b15      	subs	r3, #21
 80091ac:	f023 0303 	bic.w	r3, r3, #3
 80091b0:	3304      	adds	r3, #4
 80091b2:	f104 0015 	add.w	r0, r4, #21
 80091b6:	4584      	cmp	ip, r0
 80091b8:	bf38      	it	cc
 80091ba:	2304      	movcc	r3, #4
 80091bc:	50ca      	str	r2, [r1, r3]
 80091be:	b10a      	cbz	r2, 80091c4 <__lshift+0xa4>
 80091c0:	f108 0602 	add.w	r6, r8, #2
 80091c4:	3e01      	subs	r6, #1
 80091c6:	4638      	mov	r0, r7
 80091c8:	612e      	str	r6, [r5, #16]
 80091ca:	4621      	mov	r1, r4
 80091cc:	f7ff fdd6 	bl	8008d7c <_Bfree>
 80091d0:	4628      	mov	r0, r5
 80091d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091da:	3301      	adds	r3, #1
 80091dc:	e7c5      	b.n	800916a <__lshift+0x4a>
 80091de:	3904      	subs	r1, #4
 80091e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80091e8:	459c      	cmp	ip, r3
 80091ea:	d8f9      	bhi.n	80091e0 <__lshift+0xc0>
 80091ec:	e7ea      	b.n	80091c4 <__lshift+0xa4>
 80091ee:	bf00      	nop
 80091f0:	0800ed13 	.word	0x0800ed13
 80091f4:	0800ed84 	.word	0x0800ed84

080091f8 <__mcmp>:
 80091f8:	b530      	push	{r4, r5, lr}
 80091fa:	6902      	ldr	r2, [r0, #16]
 80091fc:	690c      	ldr	r4, [r1, #16]
 80091fe:	1b12      	subs	r2, r2, r4
 8009200:	d10e      	bne.n	8009220 <__mcmp+0x28>
 8009202:	f100 0314 	add.w	r3, r0, #20
 8009206:	3114      	adds	r1, #20
 8009208:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800920c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009210:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009214:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009218:	42a5      	cmp	r5, r4
 800921a:	d003      	beq.n	8009224 <__mcmp+0x2c>
 800921c:	d305      	bcc.n	800922a <__mcmp+0x32>
 800921e:	2201      	movs	r2, #1
 8009220:	4610      	mov	r0, r2
 8009222:	bd30      	pop	{r4, r5, pc}
 8009224:	4283      	cmp	r3, r0
 8009226:	d3f3      	bcc.n	8009210 <__mcmp+0x18>
 8009228:	e7fa      	b.n	8009220 <__mcmp+0x28>
 800922a:	f04f 32ff 	mov.w	r2, #4294967295
 800922e:	e7f7      	b.n	8009220 <__mcmp+0x28>

08009230 <__mdiff>:
 8009230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009234:	460c      	mov	r4, r1
 8009236:	4606      	mov	r6, r0
 8009238:	4611      	mov	r1, r2
 800923a:	4620      	mov	r0, r4
 800923c:	4617      	mov	r7, r2
 800923e:	f7ff ffdb 	bl	80091f8 <__mcmp>
 8009242:	1e05      	subs	r5, r0, #0
 8009244:	d110      	bne.n	8009268 <__mdiff+0x38>
 8009246:	4629      	mov	r1, r5
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff fd57 	bl	8008cfc <_Balloc>
 800924e:	b930      	cbnz	r0, 800925e <__mdiff+0x2e>
 8009250:	4b39      	ldr	r3, [pc, #228]	; (8009338 <__mdiff+0x108>)
 8009252:	4602      	mov	r2, r0
 8009254:	f240 2132 	movw	r1, #562	; 0x232
 8009258:	4838      	ldr	r0, [pc, #224]	; (800933c <__mdiff+0x10c>)
 800925a:	f000 fca3 	bl	8009ba4 <__assert_func>
 800925e:	2301      	movs	r3, #1
 8009260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009268:	bfa4      	itt	ge
 800926a:	463b      	movge	r3, r7
 800926c:	4627      	movge	r7, r4
 800926e:	4630      	mov	r0, r6
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	bfa6      	itte	ge
 8009274:	461c      	movge	r4, r3
 8009276:	2500      	movge	r5, #0
 8009278:	2501      	movlt	r5, #1
 800927a:	f7ff fd3f 	bl	8008cfc <_Balloc>
 800927e:	b920      	cbnz	r0, 800928a <__mdiff+0x5a>
 8009280:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <__mdiff+0x108>)
 8009282:	4602      	mov	r2, r0
 8009284:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009288:	e7e6      	b.n	8009258 <__mdiff+0x28>
 800928a:	693e      	ldr	r6, [r7, #16]
 800928c:	60c5      	str	r5, [r0, #12]
 800928e:	6925      	ldr	r5, [r4, #16]
 8009290:	f107 0114 	add.w	r1, r7, #20
 8009294:	f104 0914 	add.w	r9, r4, #20
 8009298:	f100 0e14 	add.w	lr, r0, #20
 800929c:	f107 0210 	add.w	r2, r7, #16
 80092a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092a8:	46f2      	mov	sl, lr
 80092aa:	2700      	movs	r7, #0
 80092ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80092b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092b4:	fa1f f883 	uxth.w	r8, r3
 80092b8:	fa17 f78b 	uxtah	r7, r7, fp
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	eba7 0808 	sub.w	r8, r7, r8
 80092c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ca:	fa1f f888 	uxth.w	r8, r8
 80092ce:	141f      	asrs	r7, r3, #16
 80092d0:	454d      	cmp	r5, r9
 80092d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092d6:	f84a 3b04 	str.w	r3, [sl], #4
 80092da:	d8e7      	bhi.n	80092ac <__mdiff+0x7c>
 80092dc:	1b2b      	subs	r3, r5, r4
 80092de:	3b15      	subs	r3, #21
 80092e0:	f023 0303 	bic.w	r3, r3, #3
 80092e4:	3304      	adds	r3, #4
 80092e6:	3415      	adds	r4, #21
 80092e8:	42a5      	cmp	r5, r4
 80092ea:	bf38      	it	cc
 80092ec:	2304      	movcc	r3, #4
 80092ee:	4419      	add	r1, r3
 80092f0:	4473      	add	r3, lr
 80092f2:	469e      	mov	lr, r3
 80092f4:	460d      	mov	r5, r1
 80092f6:	4565      	cmp	r5, ip
 80092f8:	d30e      	bcc.n	8009318 <__mdiff+0xe8>
 80092fa:	f10c 0203 	add.w	r2, ip, #3
 80092fe:	1a52      	subs	r2, r2, r1
 8009300:	f022 0203 	bic.w	r2, r2, #3
 8009304:	3903      	subs	r1, #3
 8009306:	458c      	cmp	ip, r1
 8009308:	bf38      	it	cc
 800930a:	2200      	movcc	r2, #0
 800930c:	441a      	add	r2, r3
 800930e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009312:	b17b      	cbz	r3, 8009334 <__mdiff+0x104>
 8009314:	6106      	str	r6, [r0, #16]
 8009316:	e7a5      	b.n	8009264 <__mdiff+0x34>
 8009318:	f855 8b04 	ldr.w	r8, [r5], #4
 800931c:	fa17 f488 	uxtah	r4, r7, r8
 8009320:	1422      	asrs	r2, r4, #16
 8009322:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009326:	b2a4      	uxth	r4, r4
 8009328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800932c:	f84e 4b04 	str.w	r4, [lr], #4
 8009330:	1417      	asrs	r7, r2, #16
 8009332:	e7e0      	b.n	80092f6 <__mdiff+0xc6>
 8009334:	3e01      	subs	r6, #1
 8009336:	e7ea      	b.n	800930e <__mdiff+0xde>
 8009338:	0800ed13 	.word	0x0800ed13
 800933c:	0800ed84 	.word	0x0800ed84

08009340 <__d2b>:
 8009340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4689      	mov	r9, r1
 8009346:	2101      	movs	r1, #1
 8009348:	ec57 6b10 	vmov	r6, r7, d0
 800934c:	4690      	mov	r8, r2
 800934e:	f7ff fcd5 	bl	8008cfc <_Balloc>
 8009352:	4604      	mov	r4, r0
 8009354:	b930      	cbnz	r0, 8009364 <__d2b+0x24>
 8009356:	4602      	mov	r2, r0
 8009358:	4b25      	ldr	r3, [pc, #148]	; (80093f0 <__d2b+0xb0>)
 800935a:	4826      	ldr	r0, [pc, #152]	; (80093f4 <__d2b+0xb4>)
 800935c:	f240 310a 	movw	r1, #778	; 0x30a
 8009360:	f000 fc20 	bl	8009ba4 <__assert_func>
 8009364:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800936c:	bb35      	cbnz	r5, 80093bc <__d2b+0x7c>
 800936e:	2e00      	cmp	r6, #0
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	d028      	beq.n	80093c6 <__d2b+0x86>
 8009374:	4668      	mov	r0, sp
 8009376:	9600      	str	r6, [sp, #0]
 8009378:	f7ff fd8c 	bl	8008e94 <__lo0bits>
 800937c:	9900      	ldr	r1, [sp, #0]
 800937e:	b300      	cbz	r0, 80093c2 <__d2b+0x82>
 8009380:	9a01      	ldr	r2, [sp, #4]
 8009382:	f1c0 0320 	rsb	r3, r0, #32
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	430b      	orrs	r3, r1
 800938c:	40c2      	lsrs	r2, r0
 800938e:	6163      	str	r3, [r4, #20]
 8009390:	9201      	str	r2, [sp, #4]
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	61a3      	str	r3, [r4, #24]
 8009396:	2b00      	cmp	r3, #0
 8009398:	bf14      	ite	ne
 800939a:	2202      	movne	r2, #2
 800939c:	2201      	moveq	r2, #1
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	b1d5      	cbz	r5, 80093d8 <__d2b+0x98>
 80093a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093a6:	4405      	add	r5, r0
 80093a8:	f8c9 5000 	str.w	r5, [r9]
 80093ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093b0:	f8c8 0000 	str.w	r0, [r8]
 80093b4:	4620      	mov	r0, r4
 80093b6:	b003      	add	sp, #12
 80093b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093c0:	e7d5      	b.n	800936e <__d2b+0x2e>
 80093c2:	6161      	str	r1, [r4, #20]
 80093c4:	e7e5      	b.n	8009392 <__d2b+0x52>
 80093c6:	a801      	add	r0, sp, #4
 80093c8:	f7ff fd64 	bl	8008e94 <__lo0bits>
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	6163      	str	r3, [r4, #20]
 80093d0:	2201      	movs	r2, #1
 80093d2:	6122      	str	r2, [r4, #16]
 80093d4:	3020      	adds	r0, #32
 80093d6:	e7e3      	b.n	80093a0 <__d2b+0x60>
 80093d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093e0:	f8c9 0000 	str.w	r0, [r9]
 80093e4:	6918      	ldr	r0, [r3, #16]
 80093e6:	f7ff fd35 	bl	8008e54 <__hi0bits>
 80093ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093ee:	e7df      	b.n	80093b0 <__d2b+0x70>
 80093f0:	0800ed13 	.word	0x0800ed13
 80093f4:	0800ed84 	.word	0x0800ed84

080093f8 <_calloc_r>:
 80093f8:	b513      	push	{r0, r1, r4, lr}
 80093fa:	434a      	muls	r2, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	9201      	str	r2, [sp, #4]
 8009400:	f000 f85a 	bl	80094b8 <_malloc_r>
 8009404:	4604      	mov	r4, r0
 8009406:	b118      	cbz	r0, 8009410 <_calloc_r+0x18>
 8009408:	9a01      	ldr	r2, [sp, #4]
 800940a:	2100      	movs	r1, #0
 800940c:	f7fd fde4 	bl	8006fd8 <memset>
 8009410:	4620      	mov	r0, r4
 8009412:	b002      	add	sp, #8
 8009414:	bd10      	pop	{r4, pc}
	...

08009418 <_free_r>:
 8009418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800941a:	2900      	cmp	r1, #0
 800941c:	d048      	beq.n	80094b0 <_free_r+0x98>
 800941e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009422:	9001      	str	r0, [sp, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	f1a1 0404 	sub.w	r4, r1, #4
 800942a:	bfb8      	it	lt
 800942c:	18e4      	addlt	r4, r4, r3
 800942e:	f000 fc59 	bl	8009ce4 <__malloc_lock>
 8009432:	4a20      	ldr	r2, [pc, #128]	; (80094b4 <_free_r+0x9c>)
 8009434:	9801      	ldr	r0, [sp, #4]
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	4615      	mov	r5, r2
 800943a:	b933      	cbnz	r3, 800944a <_free_r+0x32>
 800943c:	6063      	str	r3, [r4, #4]
 800943e:	6014      	str	r4, [r2, #0]
 8009440:	b003      	add	sp, #12
 8009442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009446:	f000 bc53 	b.w	8009cf0 <__malloc_unlock>
 800944a:	42a3      	cmp	r3, r4
 800944c:	d90b      	bls.n	8009466 <_free_r+0x4e>
 800944e:	6821      	ldr	r1, [r4, #0]
 8009450:	1862      	adds	r2, r4, r1
 8009452:	4293      	cmp	r3, r2
 8009454:	bf04      	itt	eq
 8009456:	681a      	ldreq	r2, [r3, #0]
 8009458:	685b      	ldreq	r3, [r3, #4]
 800945a:	6063      	str	r3, [r4, #4]
 800945c:	bf04      	itt	eq
 800945e:	1852      	addeq	r2, r2, r1
 8009460:	6022      	streq	r2, [r4, #0]
 8009462:	602c      	str	r4, [r5, #0]
 8009464:	e7ec      	b.n	8009440 <_free_r+0x28>
 8009466:	461a      	mov	r2, r3
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	b10b      	cbz	r3, 8009470 <_free_r+0x58>
 800946c:	42a3      	cmp	r3, r4
 800946e:	d9fa      	bls.n	8009466 <_free_r+0x4e>
 8009470:	6811      	ldr	r1, [r2, #0]
 8009472:	1855      	adds	r5, r2, r1
 8009474:	42a5      	cmp	r5, r4
 8009476:	d10b      	bne.n	8009490 <_free_r+0x78>
 8009478:	6824      	ldr	r4, [r4, #0]
 800947a:	4421      	add	r1, r4
 800947c:	1854      	adds	r4, r2, r1
 800947e:	42a3      	cmp	r3, r4
 8009480:	6011      	str	r1, [r2, #0]
 8009482:	d1dd      	bne.n	8009440 <_free_r+0x28>
 8009484:	681c      	ldr	r4, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	6053      	str	r3, [r2, #4]
 800948a:	4421      	add	r1, r4
 800948c:	6011      	str	r1, [r2, #0]
 800948e:	e7d7      	b.n	8009440 <_free_r+0x28>
 8009490:	d902      	bls.n	8009498 <_free_r+0x80>
 8009492:	230c      	movs	r3, #12
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	e7d3      	b.n	8009440 <_free_r+0x28>
 8009498:	6825      	ldr	r5, [r4, #0]
 800949a:	1961      	adds	r1, r4, r5
 800949c:	428b      	cmp	r3, r1
 800949e:	bf04      	itt	eq
 80094a0:	6819      	ldreq	r1, [r3, #0]
 80094a2:	685b      	ldreq	r3, [r3, #4]
 80094a4:	6063      	str	r3, [r4, #4]
 80094a6:	bf04      	itt	eq
 80094a8:	1949      	addeq	r1, r1, r5
 80094aa:	6021      	streq	r1, [r4, #0]
 80094ac:	6054      	str	r4, [r2, #4]
 80094ae:	e7c7      	b.n	8009440 <_free_r+0x28>
 80094b0:	b003      	add	sp, #12
 80094b2:	bd30      	pop	{r4, r5, pc}
 80094b4:	200002e0 	.word	0x200002e0

080094b8 <_malloc_r>:
 80094b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ba:	1ccd      	adds	r5, r1, #3
 80094bc:	f025 0503 	bic.w	r5, r5, #3
 80094c0:	3508      	adds	r5, #8
 80094c2:	2d0c      	cmp	r5, #12
 80094c4:	bf38      	it	cc
 80094c6:	250c      	movcc	r5, #12
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	4606      	mov	r6, r0
 80094cc:	db01      	blt.n	80094d2 <_malloc_r+0x1a>
 80094ce:	42a9      	cmp	r1, r5
 80094d0:	d903      	bls.n	80094da <_malloc_r+0x22>
 80094d2:	230c      	movs	r3, #12
 80094d4:	6033      	str	r3, [r6, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094da:	f000 fc03 	bl	8009ce4 <__malloc_lock>
 80094de:	4921      	ldr	r1, [pc, #132]	; (8009564 <_malloc_r+0xac>)
 80094e0:	680a      	ldr	r2, [r1, #0]
 80094e2:	4614      	mov	r4, r2
 80094e4:	b99c      	cbnz	r4, 800950e <_malloc_r+0x56>
 80094e6:	4f20      	ldr	r7, [pc, #128]	; (8009568 <_malloc_r+0xb0>)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	b923      	cbnz	r3, 80094f6 <_malloc_r+0x3e>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 faf2 	bl	8009ad8 <_sbrk_r>
 80094f4:	6038      	str	r0, [r7, #0]
 80094f6:	4629      	mov	r1, r5
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 faed 	bl	8009ad8 <_sbrk_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d123      	bne.n	800954a <_malloc_r+0x92>
 8009502:	230c      	movs	r3, #12
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	4630      	mov	r0, r6
 8009508:	f000 fbf2 	bl	8009cf0 <__malloc_unlock>
 800950c:	e7e3      	b.n	80094d6 <_malloc_r+0x1e>
 800950e:	6823      	ldr	r3, [r4, #0]
 8009510:	1b5b      	subs	r3, r3, r5
 8009512:	d417      	bmi.n	8009544 <_malloc_r+0x8c>
 8009514:	2b0b      	cmp	r3, #11
 8009516:	d903      	bls.n	8009520 <_malloc_r+0x68>
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	441c      	add	r4, r3
 800951c:	6025      	str	r5, [r4, #0]
 800951e:	e004      	b.n	800952a <_malloc_r+0x72>
 8009520:	6863      	ldr	r3, [r4, #4]
 8009522:	42a2      	cmp	r2, r4
 8009524:	bf0c      	ite	eq
 8009526:	600b      	streq	r3, [r1, #0]
 8009528:	6053      	strne	r3, [r2, #4]
 800952a:	4630      	mov	r0, r6
 800952c:	f000 fbe0 	bl	8009cf0 <__malloc_unlock>
 8009530:	f104 000b 	add.w	r0, r4, #11
 8009534:	1d23      	adds	r3, r4, #4
 8009536:	f020 0007 	bic.w	r0, r0, #7
 800953a:	1ac2      	subs	r2, r0, r3
 800953c:	d0cc      	beq.n	80094d8 <_malloc_r+0x20>
 800953e:	1a1b      	subs	r3, r3, r0
 8009540:	50a3      	str	r3, [r4, r2]
 8009542:	e7c9      	b.n	80094d8 <_malloc_r+0x20>
 8009544:	4622      	mov	r2, r4
 8009546:	6864      	ldr	r4, [r4, #4]
 8009548:	e7cc      	b.n	80094e4 <_malloc_r+0x2c>
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0e3      	beq.n	800951c <_malloc_r+0x64>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4630      	mov	r0, r6
 8009558:	f000 fabe 	bl	8009ad8 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1dd      	bne.n	800951c <_malloc_r+0x64>
 8009560:	e7cf      	b.n	8009502 <_malloc_r+0x4a>
 8009562:	bf00      	nop
 8009564:	200002e0 	.word	0x200002e0
 8009568:	200002e4 	.word	0x200002e4

0800956c <__ssputs_r>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	688e      	ldr	r6, [r1, #8]
 8009572:	429e      	cmp	r6, r3
 8009574:	4682      	mov	sl, r0
 8009576:	460c      	mov	r4, r1
 8009578:	4690      	mov	r8, r2
 800957a:	461f      	mov	r7, r3
 800957c:	d838      	bhi.n	80095f0 <__ssputs_r+0x84>
 800957e:	898a      	ldrh	r2, [r1, #12]
 8009580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009584:	d032      	beq.n	80095ec <__ssputs_r+0x80>
 8009586:	6825      	ldr	r5, [r4, #0]
 8009588:	6909      	ldr	r1, [r1, #16]
 800958a:	eba5 0901 	sub.w	r9, r5, r1
 800958e:	6965      	ldr	r5, [r4, #20]
 8009590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009598:	3301      	adds	r3, #1
 800959a:	444b      	add	r3, r9
 800959c:	106d      	asrs	r5, r5, #1
 800959e:	429d      	cmp	r5, r3
 80095a0:	bf38      	it	cc
 80095a2:	461d      	movcc	r5, r3
 80095a4:	0553      	lsls	r3, r2, #21
 80095a6:	d531      	bpl.n	800960c <__ssputs_r+0xa0>
 80095a8:	4629      	mov	r1, r5
 80095aa:	f7ff ff85 	bl	80094b8 <_malloc_r>
 80095ae:	4606      	mov	r6, r0
 80095b0:	b950      	cbnz	r0, 80095c8 <__ssputs_r+0x5c>
 80095b2:	230c      	movs	r3, #12
 80095b4:	f8ca 3000 	str.w	r3, [sl]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c8:	6921      	ldr	r1, [r4, #16]
 80095ca:	464a      	mov	r2, r9
 80095cc:	f7ff fb88 	bl	8008ce0 <memcpy>
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095da:	81a3      	strh	r3, [r4, #12]
 80095dc:	6126      	str	r6, [r4, #16]
 80095de:	6165      	str	r5, [r4, #20]
 80095e0:	444e      	add	r6, r9
 80095e2:	eba5 0509 	sub.w	r5, r5, r9
 80095e6:	6026      	str	r6, [r4, #0]
 80095e8:	60a5      	str	r5, [r4, #8]
 80095ea:	463e      	mov	r6, r7
 80095ec:	42be      	cmp	r6, r7
 80095ee:	d900      	bls.n	80095f2 <__ssputs_r+0x86>
 80095f0:	463e      	mov	r6, r7
 80095f2:	4632      	mov	r2, r6
 80095f4:	6820      	ldr	r0, [r4, #0]
 80095f6:	4641      	mov	r1, r8
 80095f8:	f000 fb5a 	bl	8009cb0 <memmove>
 80095fc:	68a3      	ldr	r3, [r4, #8]
 80095fe:	6822      	ldr	r2, [r4, #0]
 8009600:	1b9b      	subs	r3, r3, r6
 8009602:	4432      	add	r2, r6
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	2000      	movs	r0, #0
 800960a:	e7db      	b.n	80095c4 <__ssputs_r+0x58>
 800960c:	462a      	mov	r2, r5
 800960e:	f000 fb75 	bl	8009cfc <_realloc_r>
 8009612:	4606      	mov	r6, r0
 8009614:	2800      	cmp	r0, #0
 8009616:	d1e1      	bne.n	80095dc <__ssputs_r+0x70>
 8009618:	6921      	ldr	r1, [r4, #16]
 800961a:	4650      	mov	r0, sl
 800961c:	f7ff fefc 	bl	8009418 <_free_r>
 8009620:	e7c7      	b.n	80095b2 <__ssputs_r+0x46>
	...

08009624 <_svfiprintf_r>:
 8009624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4698      	mov	r8, r3
 800962a:	898b      	ldrh	r3, [r1, #12]
 800962c:	061b      	lsls	r3, r3, #24
 800962e:	b09d      	sub	sp, #116	; 0x74
 8009630:	4607      	mov	r7, r0
 8009632:	460d      	mov	r5, r1
 8009634:	4614      	mov	r4, r2
 8009636:	d50e      	bpl.n	8009656 <_svfiprintf_r+0x32>
 8009638:	690b      	ldr	r3, [r1, #16]
 800963a:	b963      	cbnz	r3, 8009656 <_svfiprintf_r+0x32>
 800963c:	2140      	movs	r1, #64	; 0x40
 800963e:	f7ff ff3b 	bl	80094b8 <_malloc_r>
 8009642:	6028      	str	r0, [r5, #0]
 8009644:	6128      	str	r0, [r5, #16]
 8009646:	b920      	cbnz	r0, 8009652 <_svfiprintf_r+0x2e>
 8009648:	230c      	movs	r3, #12
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e0d1      	b.n	80097f6 <_svfiprintf_r+0x1d2>
 8009652:	2340      	movs	r3, #64	; 0x40
 8009654:	616b      	str	r3, [r5, #20]
 8009656:	2300      	movs	r3, #0
 8009658:	9309      	str	r3, [sp, #36]	; 0x24
 800965a:	2320      	movs	r3, #32
 800965c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009660:	f8cd 800c 	str.w	r8, [sp, #12]
 8009664:	2330      	movs	r3, #48	; 0x30
 8009666:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009810 <_svfiprintf_r+0x1ec>
 800966a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800966e:	f04f 0901 	mov.w	r9, #1
 8009672:	4623      	mov	r3, r4
 8009674:	469a      	mov	sl, r3
 8009676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967a:	b10a      	cbz	r2, 8009680 <_svfiprintf_r+0x5c>
 800967c:	2a25      	cmp	r2, #37	; 0x25
 800967e:	d1f9      	bne.n	8009674 <_svfiprintf_r+0x50>
 8009680:	ebba 0b04 	subs.w	fp, sl, r4
 8009684:	d00b      	beq.n	800969e <_svfiprintf_r+0x7a>
 8009686:	465b      	mov	r3, fp
 8009688:	4622      	mov	r2, r4
 800968a:	4629      	mov	r1, r5
 800968c:	4638      	mov	r0, r7
 800968e:	f7ff ff6d 	bl	800956c <__ssputs_r>
 8009692:	3001      	adds	r0, #1
 8009694:	f000 80aa 	beq.w	80097ec <_svfiprintf_r+0x1c8>
 8009698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969a:	445a      	add	r2, fp
 800969c:	9209      	str	r2, [sp, #36]	; 0x24
 800969e:	f89a 3000 	ldrb.w	r3, [sl]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 80a2 	beq.w	80097ec <_svfiprintf_r+0x1c8>
 80096a8:	2300      	movs	r3, #0
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b2:	f10a 0a01 	add.w	sl, sl, #1
 80096b6:	9304      	str	r3, [sp, #16]
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096be:	931a      	str	r3, [sp, #104]	; 0x68
 80096c0:	4654      	mov	r4, sl
 80096c2:	2205      	movs	r2, #5
 80096c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c8:	4851      	ldr	r0, [pc, #324]	; (8009810 <_svfiprintf_r+0x1ec>)
 80096ca:	f7f6 fd91 	bl	80001f0 <memchr>
 80096ce:	9a04      	ldr	r2, [sp, #16]
 80096d0:	b9d8      	cbnz	r0, 800970a <_svfiprintf_r+0xe6>
 80096d2:	06d0      	lsls	r0, r2, #27
 80096d4:	bf44      	itt	mi
 80096d6:	2320      	movmi	r3, #32
 80096d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096dc:	0711      	lsls	r1, r2, #28
 80096de:	bf44      	itt	mi
 80096e0:	232b      	movmi	r3, #43	; 0x2b
 80096e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e6:	f89a 3000 	ldrb.w	r3, [sl]
 80096ea:	2b2a      	cmp	r3, #42	; 0x2a
 80096ec:	d015      	beq.n	800971a <_svfiprintf_r+0xf6>
 80096ee:	9a07      	ldr	r2, [sp, #28]
 80096f0:	4654      	mov	r4, sl
 80096f2:	2000      	movs	r0, #0
 80096f4:	f04f 0c0a 	mov.w	ip, #10
 80096f8:	4621      	mov	r1, r4
 80096fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096fe:	3b30      	subs	r3, #48	; 0x30
 8009700:	2b09      	cmp	r3, #9
 8009702:	d94e      	bls.n	80097a2 <_svfiprintf_r+0x17e>
 8009704:	b1b0      	cbz	r0, 8009734 <_svfiprintf_r+0x110>
 8009706:	9207      	str	r2, [sp, #28]
 8009708:	e014      	b.n	8009734 <_svfiprintf_r+0x110>
 800970a:	eba0 0308 	sub.w	r3, r0, r8
 800970e:	fa09 f303 	lsl.w	r3, r9, r3
 8009712:	4313      	orrs	r3, r2
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	46a2      	mov	sl, r4
 8009718:	e7d2      	b.n	80096c0 <_svfiprintf_r+0x9c>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	1d19      	adds	r1, r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	9103      	str	r1, [sp, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	bfbb      	ittet	lt
 8009726:	425b      	neglt	r3, r3
 8009728:	f042 0202 	orrlt.w	r2, r2, #2
 800972c:	9307      	strge	r3, [sp, #28]
 800972e:	9307      	strlt	r3, [sp, #28]
 8009730:	bfb8      	it	lt
 8009732:	9204      	strlt	r2, [sp, #16]
 8009734:	7823      	ldrb	r3, [r4, #0]
 8009736:	2b2e      	cmp	r3, #46	; 0x2e
 8009738:	d10c      	bne.n	8009754 <_svfiprintf_r+0x130>
 800973a:	7863      	ldrb	r3, [r4, #1]
 800973c:	2b2a      	cmp	r3, #42	; 0x2a
 800973e:	d135      	bne.n	80097ac <_svfiprintf_r+0x188>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	1d1a      	adds	r2, r3, #4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	9203      	str	r2, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	bfb8      	it	lt
 800974c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009750:	3402      	adds	r4, #2
 8009752:	9305      	str	r3, [sp, #20]
 8009754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009820 <_svfiprintf_r+0x1fc>
 8009758:	7821      	ldrb	r1, [r4, #0]
 800975a:	2203      	movs	r2, #3
 800975c:	4650      	mov	r0, sl
 800975e:	f7f6 fd47 	bl	80001f0 <memchr>
 8009762:	b140      	cbz	r0, 8009776 <_svfiprintf_r+0x152>
 8009764:	2340      	movs	r3, #64	; 0x40
 8009766:	eba0 000a 	sub.w	r0, r0, sl
 800976a:	fa03 f000 	lsl.w	r0, r3, r0
 800976e:	9b04      	ldr	r3, [sp, #16]
 8009770:	4303      	orrs	r3, r0
 8009772:	3401      	adds	r4, #1
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977a:	4826      	ldr	r0, [pc, #152]	; (8009814 <_svfiprintf_r+0x1f0>)
 800977c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009780:	2206      	movs	r2, #6
 8009782:	f7f6 fd35 	bl	80001f0 <memchr>
 8009786:	2800      	cmp	r0, #0
 8009788:	d038      	beq.n	80097fc <_svfiprintf_r+0x1d8>
 800978a:	4b23      	ldr	r3, [pc, #140]	; (8009818 <_svfiprintf_r+0x1f4>)
 800978c:	bb1b      	cbnz	r3, 80097d6 <_svfiprintf_r+0x1b2>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	3307      	adds	r3, #7
 8009792:	f023 0307 	bic.w	r3, r3, #7
 8009796:	3308      	adds	r3, #8
 8009798:	9303      	str	r3, [sp, #12]
 800979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979c:	4433      	add	r3, r6
 800979e:	9309      	str	r3, [sp, #36]	; 0x24
 80097a0:	e767      	b.n	8009672 <_svfiprintf_r+0x4e>
 80097a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a6:	460c      	mov	r4, r1
 80097a8:	2001      	movs	r0, #1
 80097aa:	e7a5      	b.n	80096f8 <_svfiprintf_r+0xd4>
 80097ac:	2300      	movs	r3, #0
 80097ae:	3401      	adds	r4, #1
 80097b0:	9305      	str	r3, [sp, #20]
 80097b2:	4619      	mov	r1, r3
 80097b4:	f04f 0c0a 	mov.w	ip, #10
 80097b8:	4620      	mov	r0, r4
 80097ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097be:	3a30      	subs	r2, #48	; 0x30
 80097c0:	2a09      	cmp	r2, #9
 80097c2:	d903      	bls.n	80097cc <_svfiprintf_r+0x1a8>
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0c5      	beq.n	8009754 <_svfiprintf_r+0x130>
 80097c8:	9105      	str	r1, [sp, #20]
 80097ca:	e7c3      	b.n	8009754 <_svfiprintf_r+0x130>
 80097cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d0:	4604      	mov	r4, r0
 80097d2:	2301      	movs	r3, #1
 80097d4:	e7f0      	b.n	80097b8 <_svfiprintf_r+0x194>
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	462a      	mov	r2, r5
 80097dc:	4b0f      	ldr	r3, [pc, #60]	; (800981c <_svfiprintf_r+0x1f8>)
 80097de:	a904      	add	r1, sp, #16
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7fd fca1 	bl	8007128 <_printf_float>
 80097e6:	1c42      	adds	r2, r0, #1
 80097e8:	4606      	mov	r6, r0
 80097ea:	d1d6      	bne.n	800979a <_svfiprintf_r+0x176>
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	065b      	lsls	r3, r3, #25
 80097f0:	f53f af2c 	bmi.w	800964c <_svfiprintf_r+0x28>
 80097f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097f6:	b01d      	add	sp, #116	; 0x74
 80097f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fc:	ab03      	add	r3, sp, #12
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	462a      	mov	r2, r5
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <_svfiprintf_r+0x1f8>)
 8009804:	a904      	add	r1, sp, #16
 8009806:	4638      	mov	r0, r7
 8009808:	f7fd ff32 	bl	8007670 <_printf_i>
 800980c:	e7eb      	b.n	80097e6 <_svfiprintf_r+0x1c2>
 800980e:	bf00      	nop
 8009810:	0800eee4 	.word	0x0800eee4
 8009814:	0800eeee 	.word	0x0800eeee
 8009818:	08007129 	.word	0x08007129
 800981c:	0800956d 	.word	0x0800956d
 8009820:	0800eeea 	.word	0x0800eeea

08009824 <__sfputc_r>:
 8009824:	6893      	ldr	r3, [r2, #8]
 8009826:	3b01      	subs	r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	b410      	push	{r4}
 800982c:	6093      	str	r3, [r2, #8]
 800982e:	da08      	bge.n	8009842 <__sfputc_r+0x1e>
 8009830:	6994      	ldr	r4, [r2, #24]
 8009832:	42a3      	cmp	r3, r4
 8009834:	db01      	blt.n	800983a <__sfputc_r+0x16>
 8009836:	290a      	cmp	r1, #10
 8009838:	d103      	bne.n	8009842 <__sfputc_r+0x1e>
 800983a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983e:	f7fe b8eb 	b.w	8007a18 <__swbuf_r>
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	1c58      	adds	r0, r3, #1
 8009846:	6010      	str	r0, [r2, #0]
 8009848:	7019      	strb	r1, [r3, #0]
 800984a:	4608      	mov	r0, r1
 800984c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009850:	4770      	bx	lr

08009852 <__sfputs_r>:
 8009852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	4614      	mov	r4, r2
 800985a:	18d5      	adds	r5, r2, r3
 800985c:	42ac      	cmp	r4, r5
 800985e:	d101      	bne.n	8009864 <__sfputs_r+0x12>
 8009860:	2000      	movs	r0, #0
 8009862:	e007      	b.n	8009874 <__sfputs_r+0x22>
 8009864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009868:	463a      	mov	r2, r7
 800986a:	4630      	mov	r0, r6
 800986c:	f7ff ffda 	bl	8009824 <__sfputc_r>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d1f3      	bne.n	800985c <__sfputs_r+0xa>
 8009874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009878 <_vfiprintf_r>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	460d      	mov	r5, r1
 800987e:	b09d      	sub	sp, #116	; 0x74
 8009880:	4614      	mov	r4, r2
 8009882:	4698      	mov	r8, r3
 8009884:	4606      	mov	r6, r0
 8009886:	b118      	cbz	r0, 8009890 <_vfiprintf_r+0x18>
 8009888:	6983      	ldr	r3, [r0, #24]
 800988a:	b90b      	cbnz	r3, 8009890 <_vfiprintf_r+0x18>
 800988c:	f7ff f916 	bl	8008abc <__sinit>
 8009890:	4b89      	ldr	r3, [pc, #548]	; (8009ab8 <_vfiprintf_r+0x240>)
 8009892:	429d      	cmp	r5, r3
 8009894:	d11b      	bne.n	80098ce <_vfiprintf_r+0x56>
 8009896:	6875      	ldr	r5, [r6, #4]
 8009898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800989a:	07d9      	lsls	r1, r3, #31
 800989c:	d405      	bmi.n	80098aa <_vfiprintf_r+0x32>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	059a      	lsls	r2, r3, #22
 80098a2:	d402      	bmi.n	80098aa <_vfiprintf_r+0x32>
 80098a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a6:	f7ff f9ac 	bl	8008c02 <__retarget_lock_acquire_recursive>
 80098aa:	89ab      	ldrh	r3, [r5, #12]
 80098ac:	071b      	lsls	r3, r3, #28
 80098ae:	d501      	bpl.n	80098b4 <_vfiprintf_r+0x3c>
 80098b0:	692b      	ldr	r3, [r5, #16]
 80098b2:	b9eb      	cbnz	r3, 80098f0 <_vfiprintf_r+0x78>
 80098b4:	4629      	mov	r1, r5
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7fe f900 	bl	8007abc <__swsetup_r>
 80098bc:	b1c0      	cbz	r0, 80098f0 <_vfiprintf_r+0x78>
 80098be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c0:	07dc      	lsls	r4, r3, #31
 80098c2:	d50e      	bpl.n	80098e2 <_vfiprintf_r+0x6a>
 80098c4:	f04f 30ff 	mov.w	r0, #4294967295
 80098c8:	b01d      	add	sp, #116	; 0x74
 80098ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	4b7b      	ldr	r3, [pc, #492]	; (8009abc <_vfiprintf_r+0x244>)
 80098d0:	429d      	cmp	r5, r3
 80098d2:	d101      	bne.n	80098d8 <_vfiprintf_r+0x60>
 80098d4:	68b5      	ldr	r5, [r6, #8]
 80098d6:	e7df      	b.n	8009898 <_vfiprintf_r+0x20>
 80098d8:	4b79      	ldr	r3, [pc, #484]	; (8009ac0 <_vfiprintf_r+0x248>)
 80098da:	429d      	cmp	r5, r3
 80098dc:	bf08      	it	eq
 80098de:	68f5      	ldreq	r5, [r6, #12]
 80098e0:	e7da      	b.n	8009898 <_vfiprintf_r+0x20>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	0598      	lsls	r0, r3, #22
 80098e6:	d4ed      	bmi.n	80098c4 <_vfiprintf_r+0x4c>
 80098e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ea:	f7ff f98b 	bl	8008c04 <__retarget_lock_release_recursive>
 80098ee:	e7e9      	b.n	80098c4 <_vfiprintf_r+0x4c>
 80098f0:	2300      	movs	r3, #0
 80098f2:	9309      	str	r3, [sp, #36]	; 0x24
 80098f4:	2320      	movs	r3, #32
 80098f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fe:	2330      	movs	r3, #48	; 0x30
 8009900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac4 <_vfiprintf_r+0x24c>
 8009904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009908:	f04f 0901 	mov.w	r9, #1
 800990c:	4623      	mov	r3, r4
 800990e:	469a      	mov	sl, r3
 8009910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009914:	b10a      	cbz	r2, 800991a <_vfiprintf_r+0xa2>
 8009916:	2a25      	cmp	r2, #37	; 0x25
 8009918:	d1f9      	bne.n	800990e <_vfiprintf_r+0x96>
 800991a:	ebba 0b04 	subs.w	fp, sl, r4
 800991e:	d00b      	beq.n	8009938 <_vfiprintf_r+0xc0>
 8009920:	465b      	mov	r3, fp
 8009922:	4622      	mov	r2, r4
 8009924:	4629      	mov	r1, r5
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff93 	bl	8009852 <__sfputs_r>
 800992c:	3001      	adds	r0, #1
 800992e:	f000 80aa 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009934:	445a      	add	r2, fp
 8009936:	9209      	str	r2, [sp, #36]	; 0x24
 8009938:	f89a 3000 	ldrb.w	r3, [sl]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80a2 	beq.w	8009a86 <_vfiprintf_r+0x20e>
 8009942:	2300      	movs	r3, #0
 8009944:	f04f 32ff 	mov.w	r2, #4294967295
 8009948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800994c:	f10a 0a01 	add.w	sl, sl, #1
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009958:	931a      	str	r3, [sp, #104]	; 0x68
 800995a:	4654      	mov	r4, sl
 800995c:	2205      	movs	r2, #5
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	4858      	ldr	r0, [pc, #352]	; (8009ac4 <_vfiprintf_r+0x24c>)
 8009964:	f7f6 fc44 	bl	80001f0 <memchr>
 8009968:	9a04      	ldr	r2, [sp, #16]
 800996a:	b9d8      	cbnz	r0, 80099a4 <_vfiprintf_r+0x12c>
 800996c:	06d1      	lsls	r1, r2, #27
 800996e:	bf44      	itt	mi
 8009970:	2320      	movmi	r3, #32
 8009972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009976:	0713      	lsls	r3, r2, #28
 8009978:	bf44      	itt	mi
 800997a:	232b      	movmi	r3, #43	; 0x2b
 800997c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009980:	f89a 3000 	ldrb.w	r3, [sl]
 8009984:	2b2a      	cmp	r3, #42	; 0x2a
 8009986:	d015      	beq.n	80099b4 <_vfiprintf_r+0x13c>
 8009988:	9a07      	ldr	r2, [sp, #28]
 800998a:	4654      	mov	r4, sl
 800998c:	2000      	movs	r0, #0
 800998e:	f04f 0c0a 	mov.w	ip, #10
 8009992:	4621      	mov	r1, r4
 8009994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009998:	3b30      	subs	r3, #48	; 0x30
 800999a:	2b09      	cmp	r3, #9
 800999c:	d94e      	bls.n	8009a3c <_vfiprintf_r+0x1c4>
 800999e:	b1b0      	cbz	r0, 80099ce <_vfiprintf_r+0x156>
 80099a0:	9207      	str	r2, [sp, #28]
 80099a2:	e014      	b.n	80099ce <_vfiprintf_r+0x156>
 80099a4:	eba0 0308 	sub.w	r3, r0, r8
 80099a8:	fa09 f303 	lsl.w	r3, r9, r3
 80099ac:	4313      	orrs	r3, r2
 80099ae:	9304      	str	r3, [sp, #16]
 80099b0:	46a2      	mov	sl, r4
 80099b2:	e7d2      	b.n	800995a <_vfiprintf_r+0xe2>
 80099b4:	9b03      	ldr	r3, [sp, #12]
 80099b6:	1d19      	adds	r1, r3, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	9103      	str	r1, [sp, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfbb      	ittet	lt
 80099c0:	425b      	neglt	r3, r3
 80099c2:	f042 0202 	orrlt.w	r2, r2, #2
 80099c6:	9307      	strge	r3, [sp, #28]
 80099c8:	9307      	strlt	r3, [sp, #28]
 80099ca:	bfb8      	it	lt
 80099cc:	9204      	strlt	r2, [sp, #16]
 80099ce:	7823      	ldrb	r3, [r4, #0]
 80099d0:	2b2e      	cmp	r3, #46	; 0x2e
 80099d2:	d10c      	bne.n	80099ee <_vfiprintf_r+0x176>
 80099d4:	7863      	ldrb	r3, [r4, #1]
 80099d6:	2b2a      	cmp	r3, #42	; 0x2a
 80099d8:	d135      	bne.n	8009a46 <_vfiprintf_r+0x1ce>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	1d1a      	adds	r2, r3, #4
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	9203      	str	r2, [sp, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bfb8      	it	lt
 80099e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80099ea:	3402      	adds	r4, #2
 80099ec:	9305      	str	r3, [sp, #20]
 80099ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad4 <_vfiprintf_r+0x25c>
 80099f2:	7821      	ldrb	r1, [r4, #0]
 80099f4:	2203      	movs	r2, #3
 80099f6:	4650      	mov	r0, sl
 80099f8:	f7f6 fbfa 	bl	80001f0 <memchr>
 80099fc:	b140      	cbz	r0, 8009a10 <_vfiprintf_r+0x198>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	eba0 000a 	sub.w	r0, r0, sl
 8009a04:	fa03 f000 	lsl.w	r0, r3, r0
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	4303      	orrs	r3, r0
 8009a0c:	3401      	adds	r4, #1
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a14:	482c      	ldr	r0, [pc, #176]	; (8009ac8 <_vfiprintf_r+0x250>)
 8009a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	f7f6 fbe8 	bl	80001f0 <memchr>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d03f      	beq.n	8009aa4 <_vfiprintf_r+0x22c>
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <_vfiprintf_r+0x254>)
 8009a26:	bb1b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x1f8>
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	3307      	adds	r3, #7
 8009a2c:	f023 0307 	bic.w	r3, r3, #7
 8009a30:	3308      	adds	r3, #8
 8009a32:	9303      	str	r3, [sp, #12]
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	443b      	add	r3, r7
 8009a38:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3a:	e767      	b.n	800990c <_vfiprintf_r+0x94>
 8009a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a40:	460c      	mov	r4, r1
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7a5      	b.n	8009992 <_vfiprintf_r+0x11a>
 8009a46:	2300      	movs	r3, #0
 8009a48:	3401      	adds	r4, #1
 8009a4a:	9305      	str	r3, [sp, #20]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	f04f 0c0a 	mov.w	ip, #10
 8009a52:	4620      	mov	r0, r4
 8009a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a58:	3a30      	subs	r2, #48	; 0x30
 8009a5a:	2a09      	cmp	r2, #9
 8009a5c:	d903      	bls.n	8009a66 <_vfiprintf_r+0x1ee>
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0c5      	beq.n	80099ee <_vfiprintf_r+0x176>
 8009a62:	9105      	str	r1, [sp, #20]
 8009a64:	e7c3      	b.n	80099ee <_vfiprintf_r+0x176>
 8009a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e7f0      	b.n	8009a52 <_vfiprintf_r+0x1da>
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	462a      	mov	r2, r5
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <_vfiprintf_r+0x258>)
 8009a78:	a904      	add	r1, sp, #16
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7fd fb54 	bl	8007128 <_printf_float>
 8009a80:	4607      	mov	r7, r0
 8009a82:	1c78      	adds	r0, r7, #1
 8009a84:	d1d6      	bne.n	8009a34 <_vfiprintf_r+0x1bc>
 8009a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	d405      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	059a      	lsls	r2, r3, #22
 8009a90:	d402      	bmi.n	8009a98 <_vfiprintf_r+0x220>
 8009a92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a94:	f7ff f8b6 	bl	8008c04 <__retarget_lock_release_recursive>
 8009a98:	89ab      	ldrh	r3, [r5, #12]
 8009a9a:	065b      	lsls	r3, r3, #25
 8009a9c:	f53f af12 	bmi.w	80098c4 <_vfiprintf_r+0x4c>
 8009aa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa2:	e711      	b.n	80098c8 <_vfiprintf_r+0x50>
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <_vfiprintf_r+0x258>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7fd fdde 	bl	8007670 <_printf_i>
 8009ab4:	e7e4      	b.n	8009a80 <_vfiprintf_r+0x208>
 8009ab6:	bf00      	nop
 8009ab8:	0800ed44 	.word	0x0800ed44
 8009abc:	0800ed64 	.word	0x0800ed64
 8009ac0:	0800ed24 	.word	0x0800ed24
 8009ac4:	0800eee4 	.word	0x0800eee4
 8009ac8:	0800eeee 	.word	0x0800eeee
 8009acc:	08007129 	.word	0x08007129
 8009ad0:	08009853 	.word	0x08009853
 8009ad4:	0800eeea 	.word	0x0800eeea

08009ad8 <_sbrk_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d06      	ldr	r5, [pc, #24]	; (8009af4 <_sbrk_r+0x1c>)
 8009adc:	2300      	movs	r3, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	602b      	str	r3, [r5, #0]
 8009ae4:	f7f8 fad4 	bl	8002090 <_sbrk>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_sbrk_r+0x1a>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_sbrk_r+0x1a>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	20000480 	.word	0x20000480

08009af8 <__sread>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	460c      	mov	r4, r1
 8009afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b00:	f000 f922 	bl	8009d48 <_read_r>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	bfab      	itete	ge
 8009b08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b0c:	181b      	addge	r3, r3, r0
 8009b0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b12:	bfac      	ite	ge
 8009b14:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b16:	81a3      	strhlt	r3, [r4, #12]
 8009b18:	bd10      	pop	{r4, pc}

08009b1a <__swrite>:
 8009b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1e:	461f      	mov	r7, r3
 8009b20:	898b      	ldrh	r3, [r1, #12]
 8009b22:	05db      	lsls	r3, r3, #23
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	4616      	mov	r6, r2
 8009b2a:	d505      	bpl.n	8009b38 <__swrite+0x1e>
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	2302      	movs	r3, #2
 8009b32:	2200      	movs	r2, #0
 8009b34:	f000 f898 	bl	8009c68 <_lseek_r>
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b42:	81a3      	strh	r3, [r4, #12]
 8009b44:	4632      	mov	r2, r6
 8009b46:	463b      	mov	r3, r7
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	f000 b817 	b.w	8009b80 <_write_r>

08009b52 <__sseek>:
 8009b52:	b510      	push	{r4, lr}
 8009b54:	460c      	mov	r4, r1
 8009b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b5a:	f000 f885 	bl	8009c68 <_lseek_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	bf15      	itete	ne
 8009b64:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6e:	81a3      	strheq	r3, [r4, #12]
 8009b70:	bf18      	it	ne
 8009b72:	81a3      	strhne	r3, [r4, #12]
 8009b74:	bd10      	pop	{r4, pc}

08009b76 <__sclose>:
 8009b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b7a:	f000 b831 	b.w	8009be0 <_close_r>
	...

08009b80 <_write_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_write_r+0x20>)
 8009b84:	4604      	mov	r4, r0
 8009b86:	4608      	mov	r0, r1
 8009b88:	4611      	mov	r1, r2
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	602a      	str	r2, [r5, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f7f7 fb7e 	bl	8001290 <_write>
 8009b94:	1c43      	adds	r3, r0, #1
 8009b96:	d102      	bne.n	8009b9e <_write_r+0x1e>
 8009b98:	682b      	ldr	r3, [r5, #0]
 8009b9a:	b103      	cbz	r3, 8009b9e <_write_r+0x1e>
 8009b9c:	6023      	str	r3, [r4, #0]
 8009b9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ba0:	20000480 	.word	0x20000480

08009ba4 <__assert_func>:
 8009ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ba6:	4614      	mov	r4, r2
 8009ba8:	461a      	mov	r2, r3
 8009baa:	4b09      	ldr	r3, [pc, #36]	; (8009bd0 <__assert_func+0x2c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4605      	mov	r5, r0
 8009bb0:	68d8      	ldr	r0, [r3, #12]
 8009bb2:	b14c      	cbz	r4, 8009bc8 <__assert_func+0x24>
 8009bb4:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <__assert_func+0x30>)
 8009bb6:	9100      	str	r1, [sp, #0]
 8009bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bbc:	4906      	ldr	r1, [pc, #24]	; (8009bd8 <__assert_func+0x34>)
 8009bbe:	462b      	mov	r3, r5
 8009bc0:	f000 f81e 	bl	8009c00 <fiprintf>
 8009bc4:	f000 f8df 	bl	8009d86 <abort>
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <__assert_func+0x38>)
 8009bca:	461c      	mov	r4, r3
 8009bcc:	e7f3      	b.n	8009bb6 <__assert_func+0x12>
 8009bce:	bf00      	nop
 8009bd0:	20000024 	.word	0x20000024
 8009bd4:	0800eef5 	.word	0x0800eef5
 8009bd8:	0800ef02 	.word	0x0800ef02
 8009bdc:	0800ef30 	.word	0x0800ef30

08009be0 <_close_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_close_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f8 fa1b 	bl	8002026 <_close>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_close_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_close_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	20000480 	.word	0x20000480

08009c00 <fiprintf>:
 8009c00:	b40e      	push	{r1, r2, r3}
 8009c02:	b503      	push	{r0, r1, lr}
 8009c04:	4601      	mov	r1, r0
 8009c06:	ab03      	add	r3, sp, #12
 8009c08:	4805      	ldr	r0, [pc, #20]	; (8009c20 <fiprintf+0x20>)
 8009c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c0e:	6800      	ldr	r0, [r0, #0]
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	f7ff fe31 	bl	8009878 <_vfiprintf_r>
 8009c16:	b002      	add	sp, #8
 8009c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c1c:	b003      	add	sp, #12
 8009c1e:	4770      	bx	lr
 8009c20:	20000024 	.word	0x20000024

08009c24 <_fstat_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	; (8009c44 <_fstat_r+0x20>)
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	4611      	mov	r1, r2
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	f7f8 fa04 	bl	800203e <_fstat>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d102      	bne.n	8009c40 <_fstat_r+0x1c>
 8009c3a:	682b      	ldr	r3, [r5, #0]
 8009c3c:	b103      	cbz	r3, 8009c40 <_fstat_r+0x1c>
 8009c3e:	6023      	str	r3, [r4, #0]
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
 8009c42:	bf00      	nop
 8009c44:	20000480 	.word	0x20000480

08009c48 <_isatty_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	4d06      	ldr	r5, [pc, #24]	; (8009c64 <_isatty_r+0x1c>)
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4604      	mov	r4, r0
 8009c50:	4608      	mov	r0, r1
 8009c52:	602b      	str	r3, [r5, #0]
 8009c54:	f7f8 fa03 	bl	800205e <_isatty>
 8009c58:	1c43      	adds	r3, r0, #1
 8009c5a:	d102      	bne.n	8009c62 <_isatty_r+0x1a>
 8009c5c:	682b      	ldr	r3, [r5, #0]
 8009c5e:	b103      	cbz	r3, 8009c62 <_isatty_r+0x1a>
 8009c60:	6023      	str	r3, [r4, #0]
 8009c62:	bd38      	pop	{r3, r4, r5, pc}
 8009c64:	20000480 	.word	0x20000480

08009c68 <_lseek_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4d07      	ldr	r5, [pc, #28]	; (8009c88 <_lseek_r+0x20>)
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	602a      	str	r2, [r5, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	f7f8 f9fc 	bl	8002074 <_lseek>
 8009c7c:	1c43      	adds	r3, r0, #1
 8009c7e:	d102      	bne.n	8009c86 <_lseek_r+0x1e>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	b103      	cbz	r3, 8009c86 <_lseek_r+0x1e>
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	20000480 	.word	0x20000480

08009c8c <__ascii_mbtowc>:
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	b901      	cbnz	r1, 8009c92 <__ascii_mbtowc+0x6>
 8009c90:	a901      	add	r1, sp, #4
 8009c92:	b142      	cbz	r2, 8009ca6 <__ascii_mbtowc+0x1a>
 8009c94:	b14b      	cbz	r3, 8009caa <__ascii_mbtowc+0x1e>
 8009c96:	7813      	ldrb	r3, [r2, #0]
 8009c98:	600b      	str	r3, [r1, #0]
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	1e10      	subs	r0, r2, #0
 8009c9e:	bf18      	it	ne
 8009ca0:	2001      	movne	r0, #1
 8009ca2:	b002      	add	sp, #8
 8009ca4:	4770      	bx	lr
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	e7fb      	b.n	8009ca2 <__ascii_mbtowc+0x16>
 8009caa:	f06f 0001 	mvn.w	r0, #1
 8009cae:	e7f8      	b.n	8009ca2 <__ascii_mbtowc+0x16>

08009cb0 <memmove>:
 8009cb0:	4288      	cmp	r0, r1
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	eb01 0402 	add.w	r4, r1, r2
 8009cb8:	d902      	bls.n	8009cc0 <memmove+0x10>
 8009cba:	4284      	cmp	r4, r0
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	d807      	bhi.n	8009cd0 <memmove+0x20>
 8009cc0:	1e43      	subs	r3, r0, #1
 8009cc2:	42a1      	cmp	r1, r4
 8009cc4:	d008      	beq.n	8009cd8 <memmove+0x28>
 8009cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cce:	e7f8      	b.n	8009cc2 <memmove+0x12>
 8009cd0:	4402      	add	r2, r0
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	428a      	cmp	r2, r1
 8009cd6:	d100      	bne.n	8009cda <memmove+0x2a>
 8009cd8:	bd10      	pop	{r4, pc}
 8009cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ce2:	e7f7      	b.n	8009cd4 <memmove+0x24>

08009ce4 <__malloc_lock>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__malloc_lock+0x8>)
 8009ce6:	f7fe bf8c 	b.w	8008c02 <__retarget_lock_acquire_recursive>
 8009cea:	bf00      	nop
 8009cec:	20000478 	.word	0x20000478

08009cf0 <__malloc_unlock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__malloc_unlock+0x8>)
 8009cf2:	f7fe bf87 	b.w	8008c04 <__retarget_lock_release_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20000478 	.word	0x20000478

08009cfc <_realloc_r>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	4607      	mov	r7, r0
 8009d00:	4614      	mov	r4, r2
 8009d02:	460e      	mov	r6, r1
 8009d04:	b921      	cbnz	r1, 8009d10 <_realloc_r+0x14>
 8009d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d0a:	4611      	mov	r1, r2
 8009d0c:	f7ff bbd4 	b.w	80094b8 <_malloc_r>
 8009d10:	b922      	cbnz	r2, 8009d1c <_realloc_r+0x20>
 8009d12:	f7ff fb81 	bl	8009418 <_free_r>
 8009d16:	4625      	mov	r5, r4
 8009d18:	4628      	mov	r0, r5
 8009d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d1c:	f000 f83a 	bl	8009d94 <_malloc_usable_size_r>
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	d20f      	bcs.n	8009d44 <_realloc_r+0x48>
 8009d24:	4621      	mov	r1, r4
 8009d26:	4638      	mov	r0, r7
 8009d28:	f7ff fbc6 	bl	80094b8 <_malloc_r>
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d0f2      	beq.n	8009d18 <_realloc_r+0x1c>
 8009d32:	4631      	mov	r1, r6
 8009d34:	4622      	mov	r2, r4
 8009d36:	f7fe ffd3 	bl	8008ce0 <memcpy>
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff fb6b 	bl	8009418 <_free_r>
 8009d42:	e7e9      	b.n	8009d18 <_realloc_r+0x1c>
 8009d44:	4635      	mov	r5, r6
 8009d46:	e7e7      	b.n	8009d18 <_realloc_r+0x1c>

08009d48 <_read_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_read_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f8 f948 	bl	8001fec <_read>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_read_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_read_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	20000480 	.word	0x20000480

08009d6c <__ascii_wctomb>:
 8009d6c:	b149      	cbz	r1, 8009d82 <__ascii_wctomb+0x16>
 8009d6e:	2aff      	cmp	r2, #255	; 0xff
 8009d70:	bf85      	ittet	hi
 8009d72:	238a      	movhi	r3, #138	; 0x8a
 8009d74:	6003      	strhi	r3, [r0, #0]
 8009d76:	700a      	strbls	r2, [r1, #0]
 8009d78:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d7c:	bf98      	it	ls
 8009d7e:	2001      	movls	r0, #1
 8009d80:	4770      	bx	lr
 8009d82:	4608      	mov	r0, r1
 8009d84:	4770      	bx	lr

08009d86 <abort>:
 8009d86:	b508      	push	{r3, lr}
 8009d88:	2006      	movs	r0, #6
 8009d8a:	f000 f833 	bl	8009df4 <raise>
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f7f8 f922 	bl	8001fd8 <_exit>

08009d94 <_malloc_usable_size_r>:
 8009d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d98:	1f18      	subs	r0, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bfbc      	itt	lt
 8009d9e:	580b      	ldrlt	r3, [r1, r0]
 8009da0:	18c0      	addlt	r0, r0, r3
 8009da2:	4770      	bx	lr

08009da4 <_raise_r>:
 8009da4:	291f      	cmp	r1, #31
 8009da6:	b538      	push	{r3, r4, r5, lr}
 8009da8:	4604      	mov	r4, r0
 8009daa:	460d      	mov	r5, r1
 8009dac:	d904      	bls.n	8009db8 <_raise_r+0x14>
 8009dae:	2316      	movs	r3, #22
 8009db0:	6003      	str	r3, [r0, #0]
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009dba:	b112      	cbz	r2, 8009dc2 <_raise_r+0x1e>
 8009dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dc0:	b94b      	cbnz	r3, 8009dd6 <_raise_r+0x32>
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 f830 	bl	8009e28 <_getpid_r>
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4601      	mov	r1, r0
 8009dcc:	4620      	mov	r0, r4
 8009dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_kill_r>
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d00a      	beq.n	8009df0 <_raise_r+0x4c>
 8009dda:	1c59      	adds	r1, r3, #1
 8009ddc:	d103      	bne.n	8009de6 <_raise_r+0x42>
 8009dde:	2316      	movs	r3, #22
 8009de0:	6003      	str	r3, [r0, #0]
 8009de2:	2001      	movs	r0, #1
 8009de4:	e7e7      	b.n	8009db6 <_raise_r+0x12>
 8009de6:	2400      	movs	r4, #0
 8009de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009dec:	4628      	mov	r0, r5
 8009dee:	4798      	blx	r3
 8009df0:	2000      	movs	r0, #0
 8009df2:	e7e0      	b.n	8009db6 <_raise_r+0x12>

08009df4 <raise>:
 8009df4:	4b02      	ldr	r3, [pc, #8]	; (8009e00 <raise+0xc>)
 8009df6:	4601      	mov	r1, r0
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	f7ff bfd3 	b.w	8009da4 <_raise_r>
 8009dfe:	bf00      	nop
 8009e00:	20000024 	.word	0x20000024

08009e04 <_kill_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_kill_r+0x20>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	4611      	mov	r1, r2
 8009e10:	602b      	str	r3, [r5, #0]
 8009e12:	f7f8 f8d1 	bl	8001fb8 <_kill>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d102      	bne.n	8009e20 <_kill_r+0x1c>
 8009e1a:	682b      	ldr	r3, [r5, #0]
 8009e1c:	b103      	cbz	r3, 8009e20 <_kill_r+0x1c>
 8009e1e:	6023      	str	r3, [r4, #0]
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	20000480 	.word	0x20000480

08009e28 <_getpid_r>:
 8009e28:	f7f8 b8be 	b.w	8001fa8 <_getpid>

08009e2c <_init>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	bf00      	nop
 8009e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e32:	bc08      	pop	{r3}
 8009e34:	469e      	mov	lr, r3
 8009e36:	4770      	bx	lr

08009e38 <_fini>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr
