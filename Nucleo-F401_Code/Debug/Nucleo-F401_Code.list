
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004654  08004654  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004654  08004654  00014654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800465c  0800465c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  080046d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080046d8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c34d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002299  00000000  00000000  0002c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002efd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a56  00000000  00000000  0002f828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0b5  00000000  00000000  0004727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091351  00000000  00000000  00053333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4684  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000e46d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800458c 	.word	0x0800458c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800458c 	.word	0x0800458c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
void LCD1602_EnablePulse(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <LCD1602_EnablePulse+0x38>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <LCD1602_EnablePulse+0x3c>)
 8000b8e:	8811      	ldrh	r1, [r2, #0]
 8000b90:	2201      	movs	r2, #1
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f9c6 	bl	8002f24 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000b98:	230a      	movs	r3, #10
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f97c 	bl	8000e98 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <LCD1602_EnablePulse+0x38>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <LCD1602_EnablePulse+0x3c>)
 8000ba6:	8811      	ldrh	r1, [r2, #0]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 f9ba 	bl	8002f24 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(20);  // ORG VALUE =60
 8000bb0:	2014      	movs	r0, #20
 8000bb2:	f000 f971 	bl	8000e98 <LCD1602_TIM_MicorSecDelay>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	20000096 	.word	0x20000096

08000bc4 <LCD1602_RS>:
//2) RS control
void LCD1602_RS(bool state)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <LCD1602_RS+0x22>
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <LCD1602_RS+0x3c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <LCD1602_RS+0x40>)
 8000bda:	8811      	ldrh	r1, [r2, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 f9a0 	bl	8002f24 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000be4:	e007      	b.n	8000bf6 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LCD1602_RS+0x3c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <LCD1602_RS+0x40>)
 8000bec:	8811      	ldrh	r1, [r2, #0]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 f997 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000090 	.word	0x20000090
 8000c04:	20000094 	.word	0x20000094

08000c08 <LCD1602_write>:

//3) Write Parallel interface
void LCD1602_write(uint8_t byte)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	091b      	lsrs	r3, r3, #4
 8000c1e:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000c20:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <LCD1602_write+0x1a0>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d15a      	bne.n	8000cde <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000c28:	4b60      	ldr	r3, [pc, #384]	; (8000dac <LCD1602_write+0x1a4>)
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	4b60      	ldr	r3, [pc, #384]	; (8000db0 <LCD1602_write+0x1a8>)
 8000c2e:	8819      	ldrh	r1, [r3, #0]
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	f002 f973 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <LCD1602_write+0x1a4>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <LCD1602_write+0x1ac>)
 8000c44:	8819      	ldrh	r1, [r3, #0]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f002 f968 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000c54:	4b55      	ldr	r3, [pc, #340]	; (8000dac <LCD1602_write+0x1a4>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <LCD1602_write+0x1b0>)
 8000c5a:	8819      	ldrh	r1, [r3, #0]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	f002 f95d 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000c6a:	4b50      	ldr	r3, [pc, #320]	; (8000dac <LCD1602_write+0x1a4>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	4b53      	ldr	r3, [pc, #332]	; (8000dbc <LCD1602_write+0x1b4>)
 8000c70:	8819      	ldrh	r1, [r3, #0]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f002 f952 	bl	8002f24 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c80:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4b4f      	ldr	r3, [pc, #316]	; (8000dc4 <LCD1602_write+0x1bc>)
 8000c86:	8819      	ldrh	r1, [r3, #0]
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f002 f947 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c96:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	4b4b      	ldr	r3, [pc, #300]	; (8000dc8 <LCD1602_write+0x1c0>)
 8000c9c:	8819      	ldrh	r1, [r3, #0]
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	f002 f93c 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <LCD1602_write+0x1c4>)
 8000cb2:	8819      	ldrh	r1, [r3, #0]
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	f003 0304 	and.w	r3, r3, #4
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	f002 f931 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <LCD1602_write+0x1c8>)
 8000cc8:	8819      	ldrh	r1, [r3, #0]
 8000cca:	7bbb      	ldrb	r3, [r7, #14]
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f002 f926 	bl	8002f24 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000cd8:	f7ff ff54 	bl	8000b84 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000cdc:	e05f      	b.n	8000d9e <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000cde:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <LCD1602_write+0x1a0>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d15b      	bne.n	8000d9e <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <LCD1602_write+0x1bc>)
 8000cec:	8819      	ldrh	r1, [r3, #0]
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	f002 f914 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	4b31      	ldr	r3, [pc, #196]	; (8000dc8 <LCD1602_write+0x1c0>)
 8000d02:	8819      	ldrh	r1, [r3, #0]
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f002 f909 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <LCD1602_write+0x1c4>)
 8000d18:	8819      	ldrh	r1, [r3, #0]
 8000d1a:	7bbb      	ldrb	r3, [r7, #14]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	f002 f8fe 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <LCD1602_write+0x1c8>)
 8000d2e:	8819      	ldrh	r1, [r3, #0]
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f002 f8f3 	bl	8002f24 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000d3e:	f7ff ff21 	bl	8000b84 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <LCD1602_write+0x1bc>)
 8000d48:	8819      	ldrh	r1, [r3, #0]
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f002 f8e6 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <LCD1602_write+0x1c0>)
 8000d5e:	8819      	ldrh	r1, [r3, #0]
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f002 f8db 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <LCD1602_write+0x1c4>)
 8000d74:	8819      	ldrh	r1, [r3, #0]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f002 f8d0 	bl	8002f24 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <LCD1602_write+0x1b8>)
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <LCD1602_write+0x1c8>)
 8000d8a:	8819      	ldrh	r1, [r3, #0]
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f002 f8c5 	bl	8002f24 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000d9a:	f7ff fef3 	bl	8000b84 <LCD1602_EnablePulse>
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000098 	.word	0x20000098
 8000db0:	2000009c 	.word	0x2000009c
 8000db4:	2000009e 	.word	0x2000009e
 8000db8:	200000a0 	.word	0x200000a0
 8000dbc:	200000a2 	.word	0x200000a2
 8000dc0:	200000a4 	.word	0x200000a4
 8000dc4:	200000a8 	.word	0x200000a8
 8000dc8:	200000aa 	.word	0x200000aa
 8000dcc:	200000ac 	.word	0x200000ac
 8000dd0:	200000ae 	.word	0x200000ae
 8000dd4:	00000000 	.word	0x00000000

08000dd8 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
void LCD1602_TIM_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8000dde:	1d3a      	adds	r2, r7, #4
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fd28 	bl	800383c <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d103      	bne.n	8000dfa <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8000df2:	f002 fcfb 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8000df6:	61f8      	str	r0, [r7, #28]
 8000df8:	e004      	b.n	8000e04 <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8000dfa:	f002 fcf7 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8000e04:	69f8      	ldr	r0, [r7, #28]
 8000e06:	f7ff fca7 	bl	8000758 <__aeabi_ui2d>
 8000e0a:	a321      	add	r3, pc, #132	; (adr r3, 8000e90 <LCD1602_TIM_Config+0xb8>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fa36 	bl	8000280 <__aeabi_dmul>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fd16 	bl	800084c <__aeabi_d2uiz>
 8000e20:	4603      	mov	r3, r0
 8000e22:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <LCD1602_TIM_Config+0xb0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <LCD1602_TIM_Config+0xb0>)
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e36:	f023 0310 	bic.w	r3, r3, #16
 8000e3a:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e42:	f023 0301 	bic.w	r3, r3, #1
 8000e46:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e4e:	f023 0304 	bic.w	r3, r3, #4
 8000e52:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e6a:	2209      	movs	r2, #9
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <LCD1602_TIM_Config+0xb4>)
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	6113      	str	r3, [r2, #16]
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	a0b5ed8d 	.word	0xa0b5ed8d
 8000e94:	3eb0c6f7 	.word	0x3eb0c6f7

08000e98 <LCD1602_TIM_MicorSecDelay>:
void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8000ec0:	bf00      	nop
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <LCD1602_TIM_MicorSecDelay+0x44>)
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d1f9      	bne.n	8000ec2 <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	40000400 	.word	0x40000400

08000ee0 <LCD1602_writeCommand>:
//5) Write command
void LCD1602_writeCommand(uint8_t command)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fe6a 	bl	8000bc4 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe88 	bl	8000c08 <LCD1602_write>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LCD1602_writeData>:
//6) Write 8 bits data
void LCD1602_writeData(uint8_t data)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff fe5a 	bl	8000bc4 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe78 	bl	8000c08 <LCD1602_write>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <LCD1602_write4bitCommand>:
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
void LCD1602_write4bitCommand(uint8_t nibble)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	f003 030f 	and.w	r3, r3, #15
 8000f30:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff fe46 	bl	8000bc4 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <LCD1602_write4bitCommand+0x7c>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <LCD1602_write4bitCommand+0x80>)
 8000f3e:	8819      	ldrh	r1, [r3, #0]
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f001 ffeb 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <LCD1602_write4bitCommand+0x7c>)
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <LCD1602_write4bitCommand+0x84>)
 8000f54:	8819      	ldrh	r1, [r3, #0]
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f001 ffe0 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <LCD1602_write4bitCommand+0x7c>)
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <LCD1602_write4bitCommand+0x88>)
 8000f6a:	8819      	ldrh	r1, [r3, #0]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	f001 ffd5 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <LCD1602_write4bitCommand+0x7c>)
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <LCD1602_write4bitCommand+0x8c>)
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f001 ffca 	bl	8002f24 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8000f90:	f7ff fdf8 	bl	8000b84 <LCD1602_EnablePulse>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200000a4 	.word	0x200000a4
 8000fa0:	200000a8 	.word	0x200000a8
 8000fa4:	200000aa 	.word	0x200000aa
 8000fa8:	200000ac 	.word	0x200000ac
 8000fac:	200000ae 	.word	0x200000ae

08000fb0 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8000fc2:	4a27      	ldr	r2, [pc, #156]	; (8001060 <LCD1602_Begin4BIT+0xb0>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <LCD1602_Begin4BIT+0xb4>)
 8000fca:	897b      	ldrh	r3, [r7, #10]
 8000fcc:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8000fce:	4a26      	ldr	r2, [pc, #152]	; (8001068 <LCD1602_Begin4BIT+0xb8>)
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8000fd4:	4a25      	ldr	r2, [pc, #148]	; (800106c <LCD1602_Begin4BIT+0xbc>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8000fda:	4a25      	ldr	r2, [pc, #148]	; (8001070 <LCD1602_Begin4BIT+0xc0>)
 8000fdc:	8b3b      	ldrh	r3, [r7, #24]
 8000fde:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <LCD1602_Begin4BIT+0xc4>)
 8000fe2:	8bbb      	ldrh	r3, [r7, #28]
 8000fe4:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8000fe6:	4a24      	ldr	r2, [pc, #144]	; (8001078 <LCD1602_Begin4BIT+0xc8>)
 8000fe8:	8c3b      	ldrh	r3, [r7, #32]
 8000fea:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8000fec:	4a23      	ldr	r2, [pc, #140]	; (800107c <LCD1602_Begin4BIT+0xcc>)
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8000ff2:	f7ff fef1 	bl	8000dd8 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <LCD1602_Begin4BIT+0xd0>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <LCD1602_Begin4BIT+0xd4>)
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8001002:	2014      	movs	r0, #20
 8001004:	f000 fd72 	bl	8001aec <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8001008:	2003      	movs	r0, #3
 800100a:	f7ff ff89 	bl	8000f20 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 800100e:	2005      	movs	r0, #5
 8001010:	f000 fd6c 	bl	8001aec <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001014:	2003      	movs	r0, #3
 8001016:	f7ff ff83 	bl	8000f20 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fd66 	bl	8001aec <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8001020:	2003      	movs	r0, #3
 8001022:	f7ff ff7d 	bl	8000f20 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fd60 	bl	8001aec <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff ff77 	bl	8000f20 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 fd5a 	bl	8001aec <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001038:	200f      	movs	r0, #15
 800103a:	f7ff ff51 	bl	8000ee0 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff4e 	bl	8000ee0 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 fd51 	bl	8001aec <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 800104a:	2028      	movs	r0, #40	; 0x28
 800104c:	f7ff ff48 	bl	8000ee0 <LCD1602_writeCommand>
	HAL_Delay(3);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 fd4b 	bl	8001aec <HAL_Delay>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000090 	.word	0x20000090
 8001064:	20000094 	.word	0x20000094
 8001068:	20000096 	.word	0x20000096
 800106c:	200000a4 	.word	0x200000a4
 8001070:	200000a8 	.word	0x200000a8
 8001074:	200000aa 	.word	0x200000aa
 8001078:	200000ac 	.word	0x200000ac
 800107c:	200000ae 	.word	0x200000ae
 8001080:	20000000 	.word	0x20000000
 8001084:	20000002 	.word	0x20000002

08001088 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!= 0 ; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e009      	b.n	80010aa <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff2e 	bl	8000f00 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!= 0 ; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d805      	bhi.n	80010bc <LCD1602_print+0x34>
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1ec      	bne.n	8001096 <LCD1602_print+0xe>
	}
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ec:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fef5 	bl	8000ee0 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 80010f6:	e007      	b.n	8001108 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010fe:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff feec 	bl	8000ee0 <LCD1602_writeCommand>
}	
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <LCD1602_1stLine>:
void LCD1602_1stLine(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	LCD1602_setCursor(1,1);
 8001114:	2101      	movs	r1, #1
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff ffd4 	bl	80010c4 <LCD1602_setCursor>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <LCD1602_2ndLine>:
void LCD1602_2ndLine(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 8001124:	2101      	movs	r1, #1
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff ffcc 	bl	80010c4 <LCD1602_setCursor>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <LCD1602_noCursor+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f023 0302 	bic.w	r3, r3, #2
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <LCD1602_noCursor+0x20>)
 8001140:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <LCD1602_noCursor+0x20>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff feca 	bl	8000ee0 <LCD1602_writeCommand>
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000001 	.word	0x20000001

08001154 <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8001158:	2001      	movs	r0, #1
 800115a:	f7ff fec1 	bl	8000ee0 <LCD1602_writeCommand>
	HAL_Delay(3);
 800115e:	2003      	movs	r0, #3
 8001160:	f000 fcc4 	bl	8001aec <HAL_Delay>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <LCD1602_noBlink+0x20>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LCD1602_noBlink+0x20>)
 8001178:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 800117a:	4b03      	ldr	r3, [pc, #12]	; (8001188 <LCD1602_noBlink+0x20>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff feae 	bl	8000ee0 <LCD1602_writeCommand>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000001 	.word	0x20000001

0800118c <Buzzer_OnOff>:
	return (status == HAL_OK ? len : 0);
}

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e012      	b.n	80011c0 <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	480d      	ldr	r0, [pc, #52]	; (80011d4 <Buzzer_OnOff+0x48>)
 80011a0:	f001 fec0 	bl	8002f24 <HAL_GPIO_WritePin>
 80011a4:	200a      	movs	r0, #10
 80011a6:	f000 fca1 	bl	8001aec <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2102      	movs	r1, #2
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <Buzzer_OnOff+0x48>)
 80011b0:	f001 feb8 	bl	8002f24 <HAL_GPIO_WritePin>
 80011b4:	200a      	movs	r0, #10
 80011b6:	f000 fc99 	bl	8001aec <HAL_Delay>
	for(int i=0;i< times ; i++)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbe8      	blt.n	800119a <Buzzer_OnOff+0xe>
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020400 	.word	0x40020400

080011d8 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <Key_input+0x58>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f023 030f 	bic.w	r3, r3, #15
 80011e8:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2bf0      	cmp	r3, #240	; 0xf0
 80011ee:	d10d      	bne.n	800120c <Key_input+0x34>
    { if(key_flag == 0)
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <Key_input+0x5c>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <Key_input+0x24>
        return key;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	e014      	b.n	8001226 <Key_input+0x4e>
      else
        { HAL_Delay(20);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f000 fc75 	bl	8001aec <HAL_Delay>
          key_flag = 0;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <Key_input+0x5c>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
          return key;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	e00c      	b.n	8001226 <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 800120c:	4b09      	ldr	r3, [pc, #36]	; (8001234 <Key_input+0x5c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	e006      	b.n	8001226 <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ffb7 	bl	800118c <Buzzer_OnOff>
          key_flag = 1;
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <Key_input+0x5c>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
          return key;
 8001224:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020400 	.word	0x40020400
 8001234:	200000b0 	.word	0x200000b0

08001238 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_ADC1_Init+0x98>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MX_ADC1_Init+0x9c>)
 800124e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001256:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_ADC1_Init+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001266:	2201      	movs	r2, #1
 8001268:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_ADC1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MX_ADC1_Init+0x98>)
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <MX_ADC1_Init+0xa0>)
 800127c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001286:	2201      	movs	r2, #1
 8001288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_ADC1_Init+0x98>)
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_ADC1_Init+0x98>)
 8001294:	2201      	movs	r2, #1
 8001296:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_ADC1_Init+0x98>)
 800129a:	f000 fc4b 	bl	8001b34 <HAL_ADC_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 fa60 	bl	8001768 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80012b0:	2304      	movs	r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b4:	463b      	mov	r3, r7
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_ADC1_Init+0x98>)
 80012ba:	f000 fd8d 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012c4:	f000 fa50 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000c0 	.word	0x200000c0
 80012d4:	40012000 	.word	0x40012000
 80012d8:	0f000001 	.word	0x0f000001

080012dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a2f      	ldr	r2, [pc, #188]	; (80013b8 <HAL_ADC_MspInit+0xdc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d157      	bne.n	80013ae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a2d      	ldr	r2, [pc, #180]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a26      	ldr	r2, [pc, #152]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <HAL_ADC_MspInit+0xe0>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	4619      	mov	r1, r3
 8001348:	481d      	ldr	r0, [pc, #116]	; (80013c0 <HAL_ADC_MspInit+0xe4>)
 800134a:	f001 fc67 	bl	8002c1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0xec>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800136c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001374:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001384:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001392:	480c      	ldr	r0, [pc, #48]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 8001394:	f001 f8d2 	bl	800253c <HAL_DMA_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800139e:	f000 f9e3 	bl	8001768 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 80013a6:	639a      	str	r2, [r3, #56]	; 0x38
 80013a8:	4a06      	ldr	r2, [pc, #24]	; (80013c4 <HAL_ADC_MspInit+0xe8>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40012000 	.word	0x40012000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	20000108 	.word	0x20000108
 80013c8:	40026410 	.word	0x40026410

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_DMA_Init+0x3c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <MX_DMA_Init+0x3c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_DMA_Init+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	; 0x38
 80013f4:	f001 f86b 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	; 0x38
 80013fa:	f001 f884 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	; 0x28
 8001410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <MX_GPIO_Init+0x138>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a46      	ldr	r2, [pc, #280]	; (8001544 <MX_GPIO_Init+0x138>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <MX_GPIO_Init+0x138>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <MX_GPIO_Init+0x138>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a3f      	ldr	r2, [pc, #252]	; (8001544 <MX_GPIO_Init+0x138>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <MX_GPIO_Init+0x138>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <MX_GPIO_Init+0x138>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a38      	ldr	r2, [pc, #224]	; (8001544 <MX_GPIO_Init+0x138>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_GPIO_Init+0x138>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <MX_GPIO_Init+0x138>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a31      	ldr	r2, [pc, #196]	; (8001544 <MX_GPIO_Init+0x138>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <MX_GPIO_Init+0x138>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	482c      	ldr	r0, [pc, #176]	; (8001548 <MX_GPIO_Init+0x13c>)
 8001498:	f001 fd44 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2102      	movs	r1, #2
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <MX_GPIO_Init+0x140>)
 80014a2:	f001 fd3f 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80014ac:	4828      	ldr	r0, [pc, #160]	; (8001550 <MX_GPIO_Init+0x144>)
 80014ae:	f001 fd39 	bl	8002f24 <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <MX_GPIO_Init+0x148>)
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4822      	ldr	r0, [pc, #136]	; (8001550 <MX_GPIO_Init+0x144>)
 80014c8:	f001 fba8 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014cc:	2320      	movs	r3, #32
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4819      	ldr	r0, [pc, #100]	; (8001548 <MX_GPIO_Init+0x13c>)
 80014e4:	f001 fb9a 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80014e8:	2302      	movs	r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4813      	ldr	r0, [pc, #76]	; (800154c <MX_GPIO_Init+0x140>)
 8001500:	f001 fb8c 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001504:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8001508:	617b      	str	r3, [r7, #20]
                          |E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <MX_GPIO_Init+0x144>)
 800151e:	f001 fb7d 	bl	8002c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 8001522:	23f0      	movs	r3, #240	; 0xf0
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_GPIO_Init+0x140>)
 8001536:	f001 fb71 	bl	8002c1c <HAL_GPIO_Init>

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020400 	.word	0x40020400
 8001550:	40020800 	.word	0x40020800
 8001554:	10210000 	.word	0x10210000

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint16_t Adc_Value[2], NewValue = 0, PreValue = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	82bb      	strh	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 fa4f 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f893 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f7ff ff4d 	bl	800140c <MX_GPIO_Init>
  MX_DMA_Init();
 8001572:	f7ff ff2b 	bl	80013cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001576:	f000 f9ab 	bl	80018d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800157a:	f7ff fe5d 	bl	8001238 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 800157e:	f107 0310 	add.w	r3, r7, #16
 8001582:	2201      	movs	r2, #1
 8001584:	4619      	mov	r1, r3
 8001586:	4839      	ldr	r0, [pc, #228]	; (800166c <main+0x114>)
 8001588:	f000 fb18 	bl	8001bbc <HAL_ADC_Start_DMA>

  LCD1602_Begin4BIT(RS_GPIO_Port,RS_Pin,E_Pin,D4_GPIO_Port,D4_Pin,D5_Pin,D6_Pin,D7_Pin);
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	9303      	str	r3, [sp, #12]
 8001592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	2340      	movs	r3, #64	; 0x40
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x118>)
 80015a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015aa:	4831      	ldr	r0, [pc, #196]	; (8001670 <main+0x118>)
 80015ac:	f7ff fd00 	bl	8000fb0 <LCD1602_Begin4BIT>

  LCD1602_clear();
 80015b0:	f7ff fdd0 	bl	8001154 <LCD1602_clear>
  LCD1602_1stLine();
 80015b4:	f7ff fdac 	bl	8001110 <LCD1602_1stLine>
  LCD1602_print("Start LCD");
 80015b8:	482e      	ldr	r0, [pc, #184]	; (8001674 <main+0x11c>)
 80015ba:	f7ff fd65 	bl	8001088 <LCD1602_print>
  HAL_Delay(2000);
 80015be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c2:	f000 fa93 	bl	8001aec <HAL_Delay>
  LCD1602_clear();
 80015c6:	f7ff fdc5 	bl	8001154 <LCD1602_clear>
  LCD1602_1stLine();	LCD1602_print("Zeus ADC :");
 80015ca:	f7ff fda1 	bl	8001110 <LCD1602_1stLine>
 80015ce:	482a      	ldr	r0, [pc, #168]	; (8001678 <main+0x120>)
 80015d0:	f7ff fd5a 	bl	8001088 <LCD1602_print>
  LCD1602_noCursor(); LCD1602_noBlink();
 80015d4:	f7ff fdac 	bl	8001130 <LCD1602_noCursor>
 80015d8:	f7ff fdc6 	bl	8001168 <LCD1602_noBlink>
  LCD1602_2ndLine();
 80015dc:	f7ff fda0 	bl	8001120 <LCD1602_2ndLine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fdd3 	bl	800118c <Buzzer_OnOff>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NewValue = Adc_Value[0]/41 ; // Newvalue : 0~99
 80015e6:	8a3b      	ldrh	r3, [r7, #16]
 80015e8:	4a24      	ldr	r2, [pc, #144]	; (800167c <main+0x124>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	82bb      	strh	r3, [r7, #20]
	  if( PreValue != NewValue ) {
 80015f2:	8afa      	ldrh	r2, [r7, #22]
 80015f4:	8abb      	ldrh	r3, [r7, #20]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d00f      	beq.n	800161a <main+0xc2>
		  //Buzzer_OnOff(2);
		  sprintf( str, "%4d", NewValue );
 80015fa:	8aba      	ldrh	r2, [r7, #20]
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4920      	ldr	r1, [pc, #128]	; (8001680 <main+0x128>)
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fb95 	bl	8003d30 <siprintf>
		  PreValue =NewValue;
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	82fb      	strh	r3, [r7, #22]
		  LCD1602_setCursor(1, 12);
 800160a:	210c      	movs	r1, #12
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fd59 	bl	80010c4 <LCD1602_setCursor>
		  LCD1602_print( str );
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fd37 	bl	8001088 <LCD1602_print>
	  }

	  switch( Key_input() ) {
 800161a:	f7ff fddd 	bl	80011d8 <Key_input>
 800161e:	4603      	mov	r3, r0
 8001620:	2be0      	cmp	r3, #224	; 0xe0
 8001622:	d00f      	beq.n	8001644 <main+0xec>
 8001624:	2be0      	cmp	r3, #224	; 0xe0
 8001626:	dc1f      	bgt.n	8001668 <main+0x110>
 8001628:	2bd0      	cmp	r3, #208	; 0xd0
 800162a:	d011      	beq.n	8001650 <main+0xf8>
 800162c:	2bd0      	cmp	r3, #208	; 0xd0
 800162e:	dc1b      	bgt.n	8001668 <main+0x110>
 8001630:	2b70      	cmp	r3, #112	; 0x70
 8001632:	d013      	beq.n	800165c <main+0x104>
 8001634:	2bb0      	cmp	r3, #176	; 0xb0
 8001636:	d117      	bne.n	8001668 <main+0x110>
	  case KEY_UP:
		  LCD1602_2ndLine();
 8001638:	f7ff fd72 	bl	8001120 <LCD1602_2ndLine>
		  LCD1602_print("UP    pressed");
 800163c:	4811      	ldr	r0, [pc, #68]	; (8001684 <main+0x12c>)
 800163e:	f7ff fd23 	bl	8001088 <LCD1602_print>
		  break;
 8001642:	e012      	b.n	800166a <main+0x112>

	  case KEY_DOWN:
		  LCD1602_2ndLine();
 8001644:	f7ff fd6c 	bl	8001120 <LCD1602_2ndLine>
		  LCD1602_print("DOWN  pressed");
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <main+0x130>)
 800164a:	f7ff fd1d 	bl	8001088 <LCD1602_print>
		  break;
 800164e:	e00c      	b.n	800166a <main+0x112>

	  case KEY_RIGHT:
		  LCD1602_2ndLine();
 8001650:	f7ff fd66 	bl	8001120 <LCD1602_2ndLine>
		  LCD1602_print("RIGHT pressed");
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <main+0x134>)
 8001656:	f7ff fd17 	bl	8001088 <LCD1602_print>
		  break;
 800165a:	e006      	b.n	800166a <main+0x112>

	  case KEY_LEFT:
		  LCD1602_2ndLine();
 800165c:	f7ff fd60 	bl	8001120 <LCD1602_2ndLine>
		  LCD1602_print("LEFT  pressed");
 8001660:	480b      	ldr	r0, [pc, #44]	; (8001690 <main+0x138>)
 8001662:	f7ff fd11 	bl	8001088 <LCD1602_print>
		  break;
 8001666:	e000      	b.n	800166a <main+0x112>

	  default:
		  break;
 8001668:	bf00      	nop
	  NewValue = Adc_Value[0]/41 ; // Newvalue : 0~99
 800166a:	e7bc      	b.n	80015e6 <main+0x8e>
 800166c:	200000c0 	.word	0x200000c0
 8001670:	40020800 	.word	0x40020800
 8001674:	080045a4 	.word	0x080045a4
 8001678:	080045b0 	.word	0x080045b0
 800167c:	c7ce0c7d 	.word	0xc7ce0c7d
 8001680:	080045bc 	.word	0x080045bc
 8001684:	080045c0 	.word	0x080045c0
 8001688:	080045d0 	.word	0x080045d0
 800168c:	080045e0 	.word	0x080045e0
 8001690:	080045f0 	.word	0x080045f0

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	; 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2230      	movs	r2, #48	; 0x30
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fb3c 	bl	8003d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <SystemClock_Config+0xcc>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <SystemClock_Config+0xd0>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <SystemClock_Config+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001708:	2308      	movs	r3, #8
 800170a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800170c:	2354      	movs	r3, #84	; 0x54
 800170e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001714:	2307      	movs	r3, #7
 8001716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fc1b 	bl	8002f58 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001728:	f000 f81e 	bl	8001768 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2302      	movs	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	2102      	movs	r1, #2
 8001748:	4618      	mov	r0, r3
 800174a:	f001 fe7d 	bl	8003448 <HAL_RCC_ClockConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001754:	f000 f808 	bl	8001768 <Error_Handler>
  }
}
 8001758:	bf00      	nop
 800175a:	3750      	adds	r7, #80	; 0x50
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	4a0f      	ldr	r2, [pc, #60]	; (80017c4 <HAL_MspInit+0x4c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <HAL_MspInit+0x4c>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017b6:	2007      	movs	r0, #7
 80017b8:	f000 fe7e 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 f946 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <DMA2_Stream0_IRQHandler+0x10>)
 800182a:	f000 ff8d 	bl	8002748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000108 	.word	0x20000108

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f002 fa30 	bl	8003ccc <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20018000 	.word	0x20018000
 8001898:	00000400 	.word	0x00000400
 800189c:	200000b4 	.word	0x200000b4
 80018a0:	200001c0 	.word	0x200001c0

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <SystemInit+0x28>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <SystemInit+0x28>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SystemInit+0x28>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	609a      	str	r2, [r3, #8]
#endif
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_USART2_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART2_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART2_UART_Init+0x4c>)
 8001908:	f001 ffca 	bl	80038a0 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f7ff ff29 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000168 	.word	0x20000168
 8001920:	40004400 	.word	0x40004400

08001924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_UART_MspInit+0x84>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d12b      	bne.n	800199e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <HAL_UART_MspInit+0x88>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x88>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <HAL_UART_MspInit+0x88>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_UART_MspInit+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <HAL_UART_MspInit+0x88>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_UART_MspInit+0x88>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197e:	230c      	movs	r3, #12
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198e:	2307      	movs	r3, #7
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_UART_MspInit+0x8c>)
 800199a:	f001 f93f 	bl	8002c1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020000 	.word	0x40020000

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ba:	e003      	b.n	80019c4 <LoopCopyDataInit>

080019bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019c2:	3104      	adds	r1, #4

080019c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	; (80019f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019cc:	d3f6      	bcc.n	80019bc <CopyDataInit>
  ldr  r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d0:	e002      	b.n	80019d8 <LoopFillZerobss>

080019d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019d4:	f842 3b04 	str.w	r3, [r2], #4

080019d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019dc:	d3f9      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019de:	f7ff ff61 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f002 f979 	bl	8003cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fdb7 	bl	8001558 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80019f0:	08004664 	.word	0x08004664
  ldr  r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019f8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80019fc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001a00:	200001c0 	.word	0x200001c0

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 fd41 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff fe9c 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd59 	bl	8002522 <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 fd21 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	200001ac 	.word	0x200001ac

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200001ac 	.word	0x200001ac

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e033      	b.n	8001bb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff fbc2 	bl	80012dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d118      	bne.n	8001ba4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b7a:	f023 0302 	bic.w	r3, r3, #2
 8001b7e:	f043 0202 	orr.w	r2, r3, #2
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fa48 	bl	800201c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f023 0303 	bic.w	r3, r3, #3
 8001b9a:	f043 0201 	orr.w	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba2:	e001      	b.n	8001ba8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Start_DMA+0x1e>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e0ce      	b.n	8001d78 <HAL_ADC_Start_DMA+0x1bc>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d018      	beq.n	8001c22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c00:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <HAL_ADC_Start_DMA+0x1c4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_ADC_Start_DMA+0x1c8>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0c9a      	lsrs	r2, r3, #18
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c30:	d107      	bne.n	8001c42 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c40:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	f040 8086 	bne.w	8001d5e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d007      	beq.n	8001c84 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c90:	d106      	bne.n	8001ca0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f023 0206 	bic.w	r2, r3, #6
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c9e:	e002      	b.n	8001ca6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_ADC_Start_DMA+0x1cc>)
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_ADC_Start_DMA+0x1d0>)
 8001cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <HAL_ADC_Start_DMA+0x1d4>)
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc6:	4a33      	ldr	r2, [pc, #204]	; (8001d94 <HAL_ADC_Start_DMA+0x1d8>)
 8001cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ce2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	334c      	adds	r3, #76	; 0x4c
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f000 fcc8 	bl	8002698 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10f      	bne.n	8001d34 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d129      	bne.n	8001d76 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	e020      	b.n	8001d76 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_ADC_Start_DMA+0x1dc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d11b      	bne.n	8001d76 <HAL_ADC_Start_DMA+0x1ba>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d114      	bne.n	8001d76 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e00b      	b.n	8001d76 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f043 0210 	orr.w	r2, r3, #16
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000004 	.word	0x20000004
 8001d84:	431bde83 	.word	0x431bde83
 8001d88:	40012300 	.word	0x40012300
 8001d8c:	08002215 	.word	0x08002215
 8001d90:	080022cf 	.word	0x080022cf
 8001d94:	080022eb 	.word	0x080022eb
 8001d98:	40012000 	.word	0x40012000

08001d9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x1c>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e105      	b.n	8002000 <HAL_ADC_ConfigChannel+0x228>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d925      	bls.n	8001e50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68d9      	ldr	r1, [r3, #12]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	3b1e      	subs	r3, #30
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43da      	mvns	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	400a      	ands	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68d9      	ldr	r1, [r3, #12]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4403      	add	r3, r0
 8001e42:	3b1e      	subs	r3, #30
 8001e44:	409a      	lsls	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	e022      	b.n	8001e96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	2207      	movs	r2, #7
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	400a      	ands	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6919      	ldr	r1, [r3, #16]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	4618      	mov	r0, r3
 8001e86:	4603      	mov	r3, r0
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4403      	add	r3, r0
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d824      	bhi.n	8001ee8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b05      	subs	r3, #5
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b05      	subs	r3, #5
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	e04c      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d824      	bhi.n	8001f3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b23      	subs	r3, #35	; 0x23
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b23      	subs	r3, #35	; 0x23
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	e023      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b41      	subs	r3, #65	; 0x41
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b41      	subs	r3, #65	; 0x41
 8001f76:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_ADC_ConfigChannel+0x234>)
 8001f84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	; (8002010 <HAL_ADC_ConfigChannel+0x238>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d109      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1cc>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b12      	cmp	r3, #18
 8001f96:	d105      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	; (8002010 <HAL_ADC_ConfigChannel+0x238>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d123      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x21e>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d003      	beq.n	8001fbe <HAL_ADC_ConfigChannel+0x1e6>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b11      	cmp	r3, #17
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d111      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <HAL_ADC_ConfigChannel+0x23c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <HAL_ADC_ConfigChannel+0x240>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	0c9a      	lsrs	r2, r3, #18
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001fe8:	e002      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f9      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	40012300 	.word	0x40012300
 8002010:	40012000 	.word	0x40012000
 8002014:	20000004 	.word	0x20000004
 8002018:	431bde83 	.word	0x431bde83

0800201c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002024:	4b79      	ldr	r3, [pc, #484]	; (800220c <ADC_Init+0x1f0>)
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	431a      	orrs	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	021a      	lsls	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	4a58      	ldr	r2, [pc, #352]	; (8002210 <ADC_Init+0x1f4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d022      	beq.n	80020fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6899      	ldr	r1, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e00f      	b.n	800211a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002118:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0202 	bic.w	r2, r2, #2
 8002128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e1b      	ldrb	r3, [r3, #24]
 8002134:	005a      	lsls	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002156:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	3b01      	subs	r3, #1
 8002174:	035a      	lsls	r2, r3, #13
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e007      	b.n	8002190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800219e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	051a      	lsls	r2, r3, #20
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021d2:	025a      	lsls	r2, r3, #9
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	029a      	lsls	r2, r3, #10
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40012300 	.word	0x40012300
 8002210:	0f000001 	.word	0x0f000001

08002214 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800222a:	2b00      	cmp	r3, #0
 800222c:	d13c      	bne.n	80022a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d12b      	bne.n	80022a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d127      	bne.n	80022a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002268:	2b00      	cmp	r3, #0
 800226a:	d119      	bne.n	80022a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0220 	bic.w	r2, r2, #32
 800227a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff fd7b 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022a6:	e00e      	b.n	80022c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7ff fd85 	bl	8001dc4 <HAL_ADC_ErrorCallback>
}
 80022ba:	e004      	b.n	80022c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f7ff fd67 	bl	8001db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff fd5a 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff fac4 	bl	8001ad4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e099      	b.n	800268c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002578:	e00f      	b.n	800259a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257a:	f7ff faab 	bl	8001ad4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b05      	cmp	r3, #5
 8002586:	d908      	bls.n	800259a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e078      	b.n	800268c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e8      	bne.n	800257a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_DMA_Init+0x158>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4313      	orrs	r3, r2
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0307 	bic.w	r3, r3, #7
 800261a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b04      	cmp	r3, #4
 800262c:	d117      	bne.n	800265e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fa6f 	bl	8002b24 <DMA_CheckFifoParam>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800265a:	2301      	movs	r3, #1
 800265c:	e016      	b.n	800268c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa26 	bl	8002ab8 <DMA_CalcBaseAndBitshift>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	223f      	movs	r2, #63	; 0x3f
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	f010803f 	.word	0xf010803f

08002698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Start_IT+0x26>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e040      	b.n	8002740 <HAL_DMA_Start_IT+0xa8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d12f      	bne.n	8002732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f9b8 	bl	8002a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0216 	orr.w	r2, r2, #22
 8002706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0208 	orr.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e005      	b.n	800273e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002754:	4b92      	ldr	r3, [pc, #584]	; (80029a0 <HAL_DMA_IRQHandler+0x258>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a92      	ldr	r2, [pc, #584]	; (80029a4 <HAL_DMA_IRQHandler+0x25c>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	0a9b      	lsrs	r3, r3, #10
 8002760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	2208      	movs	r2, #8
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2208      	movs	r2, #8
 80027a2:	409a      	lsls	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2201      	movs	r2, #1
 80027ba:	409a      	lsls	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2201      	movs	r2, #1
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	f043 0202 	orr.w	r2, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2204      	movs	r2, #4
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	2204      	movs	r2, #4
 800280e:	409a      	lsls	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	f043 0204 	orr.w	r2, r3, #4
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	2210      	movs	r2, #16
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d043      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d03c      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2210      	movs	r2, #16
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d018      	beq.n	800288a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d024      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
 8002876:	e01f      	b.n	80028b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01b      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
 8002888:	e016      	b.n	80028b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d107      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0208 	bic.w	r2, r2, #8
 80028a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	2220      	movs	r2, #32
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 808e 	beq.w	80029e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8086 	beq.w	80029e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028de:	2220      	movs	r2, #32
 80028e0:	409a      	lsls	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d136      	bne.n	8002960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0216 	bic.w	r2, r2, #22
 8002900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_DMA_IRQHandler+0x1da>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0208 	bic.w	r2, r2, #8
 8002930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	223f      	movs	r2, #63	; 0x3f
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d07d      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
        }
        return;
 800295e:	e078      	b.n	8002a52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01c      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d108      	bne.n	800298e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	2b00      	cmp	r3, #0
 8002982:	d030      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e02b      	b.n	80029e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d027      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	4798      	blx	r3
 800299e:	e022      	b.n	80029e6 <HAL_DMA_IRQHandler+0x29e>
 80029a0:	20000004 	.word	0x20000004
 80029a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0210 	bic.w	r2, r2, #16
 80029c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d032      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d022      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2205      	movs	r2, #5
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d307      	bcc.n	8002a2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f2      	bne.n	8002a12 <HAL_DMA_IRQHandler+0x2ca>
 8002a2c:	e000      	b.n	8002a30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e000      	b.n	8002a54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a52:	bf00      	nop
    }
  }
}
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d108      	bne.n	8002a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a9a:	e007      	b.n	8002aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	60da      	str	r2, [r3, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3b10      	subs	r3, #16
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <DMA_CalcBaseAndBitshift+0x64>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d909      	bls.n	8002afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58
 8002af8:	e007      	b.n	8002b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	aaaaaaab 	.word	0xaaaaaaab
 8002b20:	08004618 	.word	0x08004618

08002b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11f      	bne.n	8002b7e <DMA_CheckFifoParam+0x5a>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d856      	bhi.n	8002bf2 <DMA_CheckFifoParam+0xce>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <DMA_CheckFifoParam+0x28>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b6f 	.word	0x08002b6f
 8002b54:	08002b5d 	.word	0x08002b5d
 8002b58:	08002bf3 	.word	0x08002bf3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d046      	beq.n	8002bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e043      	b.n	8002bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b76:	d140      	bne.n	8002bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e03d      	b.n	8002bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b86:	d121      	bne.n	8002bcc <DMA_CheckFifoParam+0xa8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d837      	bhi.n	8002bfe <DMA_CheckFifoParam+0xda>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <DMA_CheckFifoParam+0x70>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bab 	.word	0x08002bab
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002bbd 	.word	0x08002bbd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e030      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d025      	beq.n	8002c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bba:	e022      	b.n	8002c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bc4:	d11f      	bne.n	8002c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bca:	e01c      	b.n	8002c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d903      	bls.n	8002bda <DMA_CheckFifoParam+0xb6>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d003      	beq.n	8002be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bd8:	e018      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bde:	e015      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf0:	e00b      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e00a      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e008      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e006      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e004      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <DMA_CheckFifoParam+0xe8>
      break;
 8002c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop

08002c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c32:	2300      	movs	r3, #0
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e159      	b.n	8002eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c38:	2201      	movs	r2, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f040 8148 	bne.w	8002ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d005      	beq.n	8002c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d130      	bne.n	8002cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	2203      	movs	r2, #3
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f003 0201 	and.w	r2, r3, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d017      	beq.n	8002d0c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d123      	bne.n	8002d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	220f      	movs	r2, #15
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	08da      	lsrs	r2, r3, #3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3208      	adds	r2, #8
 8002d5a:	69b9      	ldr	r1, [r7, #24]
 8002d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80a2 	beq.w	8002ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b54      	ldr	r3, [pc, #336]	; (8002f04 <HAL_GPIO_Init+0x2e8>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dbe:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	089b      	lsrs	r3, r3, #2
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a49      	ldr	r2, [pc, #292]	; (8002f0c <HAL_GPIO_Init+0x2f0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x202>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a48      	ldr	r2, [pc, #288]	; (8002f10 <HAL_GPIO_Init+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x1fe>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a47      	ldr	r2, [pc, #284]	; (8002f14 <HAL_GPIO_Init+0x2f8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x1fa>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <HAL_GPIO_Init+0x2fc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x1f6>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a45      	ldr	r2, [pc, #276]	; (8002f1c <HAL_GPIO_Init+0x300>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x1f2>
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x204>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e30:	4935      	ldr	r1, [pc, #212]	; (8002f08 <HAL_GPIO_Init+0x2ec>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e62:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e68:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8c:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_GPIO_Init+0x304>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	f67f aea2 	bls.w	8002c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40013c00 	.word	0x40013c00

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e264      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d075      	beq.n	8003062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	4ba3      	ldr	r3, [pc, #652]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4ba0      	ldr	r3, [pc, #640]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d112      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4b99      	ldr	r3, [pc, #612]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05b      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d157      	bne.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e23f      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x74>
 8002fbe:	4b91      	ldr	r3, [pc, #580]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e01d      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a8a      	ldr	r2, [pc, #552]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002ff0:	4b84      	ldr	r3, [pc, #528]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a83      	ldr	r2, [pc, #524]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fe fd60 	bl	8001ad4 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fe fd5c 	bl	8001ad4 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e204      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0xc0>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fe fd4c 	bl	8001ad4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fe fd48 	bl	8001ad4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1f0      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0xe8>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d063      	beq.n	8003136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e1c4      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4952      	ldr	r1, [pc, #328]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	e03a      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x2b0>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fd01 	bl	8001ad4 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fcfd 	bl	8001ad4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1a5      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4940      	ldr	r1, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_OscConfig+0x2b0>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fce0 	bl	8001ad4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fe fcdc 	bl	8001ad4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e184      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fcc0 	bl	8001ad4 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fcbc 	bl	8001ad4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e164      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x200>
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fe fca9 	bl	8001ad4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe fca5 	bl	8001ad4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e14d      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a0 	beq.w	80032f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d121      	bne.n	8003232 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fc6b 	bl	8001ad4 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e011      	b.n	8003226 <HAL_RCC_OscConfig+0x2ce>
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	42470000 	.word	0x42470000
 800320c:	42470e80 	.word	0x42470e80
 8003210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fc5e 	bl	8001ad4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e106      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x4e4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x2f0>
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x312>
 8003250:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a7a      	ldr	r2, [pc, #488]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b78      	ldr	r3, [pc, #480]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a77      	ldr	r2, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x32a>
 800326a:	4b75      	ldr	r3, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a74      	ldr	r2, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	4b72      	ldr	r3, [pc, #456]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a71      	ldr	r2, [pc, #452]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fe fc23 	bl	8001ad4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fe fc1f 	bl	8001ad4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0c5      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x33a>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fc0d 	bl	8001ad4 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe fc09 	bl	8001ad4 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0af      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 809b 	beq.w	8003432 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d05c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d141      	bne.n	8003394 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe fbdd 	bl	8001ad4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331e:	f7fe fbd9 	bl	8001ad4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e081      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	4937      	ldr	r1, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fbb2 	bl	8001ad4 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe fbae 	bl	8001ad4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e056      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x41c>
 8003392:	e04e      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fe fb9b 	bl	8001ad4 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fb97 	bl	8001ad4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e03f      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x44a>
 80033c0:	e037      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e032      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d028      	beq.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d121      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d11a      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003404:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003406:	4293      	cmp	r3, r2
 8003408:	d111      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d107      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40007000 	.word	0x40007000
 8003440:	40023800 	.word	0x40023800
 8003444:	42470060 	.word	0x42470060

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d90c      	bls.n	8003484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e06f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e067      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fe facc 	bl	8001ad4 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fe fac8 	bl	8001ad4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fa2c 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	08004600 	.word	0x08004600
 800360c:	20000004 	.word	0x20000004
 8003610:	20000008 	.word	0x20000008

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	2300      	movs	r3, #0
 8003626:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362c:	4b67      	ldr	r3, [pc, #412]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 030c 	and.w	r3, r3, #12
 8003634:	2b08      	cmp	r3, #8
 8003636:	d00d      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0x40>
 8003638:	2b08      	cmp	r3, #8
 800363a:	f200 80bd 	bhi.w	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x34>
 8003642:	2b04      	cmp	r3, #4
 8003644:	d003      	beq.n	800364e <HAL_RCC_GetSysClockFreq+0x3a>
 8003646:	e0b7      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b61      	ldr	r3, [pc, #388]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800364a:	60bb      	str	r3, [r7, #8]
       break;
 800364c:	e0b7      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364e:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	e0b4      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003654:	4b5d      	ldr	r3, [pc, #372]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d04d      	beq.n	8003706 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	099b      	lsrs	r3, r3, #6
 8003670:	461a      	mov	r2, r3
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	f240 10ff 	movw	r0, #511	; 0x1ff
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	ea02 0800 	and.w	r8, r2, r0
 8003682:	ea03 0901 	and.w	r9, r3, r1
 8003686:	4640      	mov	r0, r8
 8003688:	4649      	mov	r1, r9
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003698:	0142      	lsls	r2, r0, #5
 800369a:	4610      	mov	r0, r2
 800369c:	4619      	mov	r1, r3
 800369e:	ebb0 0008 	subs.w	r0, r0, r8
 80036a2:	eb61 0109 	sbc.w	r1, r1, r9
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	018b      	lsls	r3, r1, #6
 80036b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036b4:	0182      	lsls	r2, r0, #6
 80036b6:	1a12      	subs	r2, r2, r0
 80036b8:	eb63 0301 	sbc.w	r3, r3, r1
 80036bc:	f04f 0000 	mov.w	r0, #0
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	00d9      	lsls	r1, r3, #3
 80036c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036ca:	00d0      	lsls	r0, r2, #3
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	eb12 0208 	adds.w	r2, r2, r8
 80036d4:	eb43 0309 	adc.w	r3, r3, r9
 80036d8:	f04f 0000 	mov.w	r0, #0
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	0299      	lsls	r1, r3, #10
 80036e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036e6:	0290      	lsls	r0, r2, #10
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f7fd f8c8 	bl	800088c <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4613      	mov	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e04a      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	099b      	lsrs	r3, r3, #6
 800370c:	461a      	mov	r2, r3
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	ea02 0400 	and.w	r4, r2, r0
 800371e:	ea03 0501 	and.w	r5, r3, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	014b      	lsls	r3, r1, #5
 8003730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003734:	0142      	lsls	r2, r0, #5
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	1b00      	subs	r0, r0, r4
 800373c:	eb61 0105 	sbc.w	r1, r1, r5
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	018b      	lsls	r3, r1, #6
 800374a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800374e:	0182      	lsls	r2, r0, #6
 8003750:	1a12      	subs	r2, r2, r0
 8003752:	eb63 0301 	sbc.w	r3, r3, r1
 8003756:	f04f 0000 	mov.w	r0, #0
 800375a:	f04f 0100 	mov.w	r1, #0
 800375e:	00d9      	lsls	r1, r3, #3
 8003760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003764:	00d0      	lsls	r0, r2, #3
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	1912      	adds	r2, r2, r4
 800376c:	eb45 0303 	adc.w	r3, r5, r3
 8003770:	f04f 0000 	mov.w	r0, #0
 8003774:	f04f 0100 	mov.w	r1, #0
 8003778:	0299      	lsls	r1, r3, #10
 800377a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800377e:	0290      	lsls	r0, r2, #10
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4610      	mov	r0, r2
 8003786:	4619      	mov	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	461a      	mov	r2, r3
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	f7fd f87c 	bl	800088c <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4613      	mov	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	3301      	adds	r3, #1
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	60bb      	str	r3, [r7, #8]
      break;
 80037b6:	e002      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ba:	60bb      	str	r3, [r7, #8]
      break;
 80037bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037be:	68bb      	ldr	r3, [r7, #8]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400

080037d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037da:	681b      	ldr	r3, [r3, #0]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000004 	.word	0x20000004

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff0 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	08004610 	.word	0x08004610

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffdc 	bl	80037d4 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0b5b      	lsrs	r3, r3, #13
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	08004610 	.word	0x08004610

0800383c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	220f      	movs	r2, #15
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	08db      	lsrs	r3, r3, #3
 8003876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RCC_GetClockConfig+0x60>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0207 	and.w	r2, r3, #7
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40023c00 	.word	0x40023c00

080038a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e03f      	b.n	8003932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe f82c 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f829 	bl	800393c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	b09f      	sub	sp, #124	; 0x7c
 8003942:	af00      	add	r7, sp, #0
 8003944:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	68d9      	ldr	r1, [r3, #12]
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	ea40 0301 	orr.w	r3, r0, r1
 800395c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	431a      	orrs	r2, r3
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	431a      	orrs	r2, r3
 800396e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4313      	orrs	r3, r2
 8003974:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003980:	f021 010c 	bic.w	r1, r1, #12
 8003984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800398a:	430b      	orrs	r3, r1
 800398c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399a:	6999      	ldr	r1, [r3, #24]
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	ea40 0301 	orr.w	r3, r0, r1
 80039a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4bc5      	ldr	r3, [pc, #788]	; (8003cc0 <UART_SetConfig+0x384>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d004      	beq.n	80039ba <UART_SetConfig+0x7e>
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4bc3      	ldr	r3, [pc, #780]	; (8003cc4 <UART_SetConfig+0x388>)
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039ba:	f7ff ff2b 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 80039be:	6778      	str	r0, [r7, #116]	; 0x74
 80039c0:	e002      	b.n	80039c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039c2:	f7ff ff13 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 80039c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	f040 80b6 	bne.w	8003b40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d6:	461c      	mov	r4, r3
 80039d8:	f04f 0500 	mov.w	r5, #0
 80039dc:	4622      	mov	r2, r4
 80039de:	462b      	mov	r3, r5
 80039e0:	1891      	adds	r1, r2, r2
 80039e2:	6439      	str	r1, [r7, #64]	; 0x40
 80039e4:	415b      	adcs	r3, r3
 80039e6:	647b      	str	r3, [r7, #68]	; 0x44
 80039e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039ec:	1912      	adds	r2, r2, r4
 80039ee:	eb45 0303 	adc.w	r3, r5, r3
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	00d9      	lsls	r1, r3, #3
 80039fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a00:	00d0      	lsls	r0, r2, #3
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	1911      	adds	r1, r2, r4
 8003a08:	6639      	str	r1, [r7, #96]	; 0x60
 8003a0a:	416b      	adcs	r3, r5
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	1891      	adds	r1, r2, r2
 8003a1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a1c:	415b      	adcs	r3, r3
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a28:	f7fc ff30 	bl	800088c <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4ba5      	ldr	r3, [pc, #660]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003a32:	fba3 2302 	umull	r2, r3, r3, r2
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	011e      	lsls	r6, r3, #4
 8003a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3c:	461c      	mov	r4, r3
 8003a3e:	f04f 0500 	mov.w	r5, #0
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	6339      	str	r1, [r7, #48]	; 0x30
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a52:	1912      	adds	r2, r2, r4
 8003a54:	eb45 0303 	adc.w	r3, r5, r3
 8003a58:	f04f 0000 	mov.w	r0, #0
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	00d9      	lsls	r1, r3, #3
 8003a62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a66:	00d0      	lsls	r0, r2, #3
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	1911      	adds	r1, r2, r4
 8003a6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a70:	416b      	adcs	r3, r5
 8003a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a82:	415b      	adcs	r3, r3
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a8e:	f7fc fefd 	bl	800088c <__aeabi_uldivmod>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	4b8c      	ldr	r3, [pc, #560]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003a98:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	3332      	adds	r3, #50	; 0x32
 8003aaa:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ab8:	441e      	add	r6, r3
 8003aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003abc:	4618      	mov	r0, r3
 8003abe:	f04f 0100 	mov.w	r1, #0
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	1894      	adds	r4, r2, r2
 8003ac8:	623c      	str	r4, [r7, #32]
 8003aca:	415b      	adcs	r3, r3
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ad2:	1812      	adds	r2, r2, r0
 8003ad4:	eb41 0303 	adc.w	r3, r1, r3
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	f04f 0500 	mov.w	r5, #0
 8003ae0:	00dd      	lsls	r5, r3, #3
 8003ae2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ae6:	00d4      	lsls	r4, r2, #3
 8003ae8:	4622      	mov	r2, r4
 8003aea:	462b      	mov	r3, r5
 8003aec:	1814      	adds	r4, r2, r0
 8003aee:	653c      	str	r4, [r7, #80]	; 0x50
 8003af0:	414b      	adcs	r3, r1
 8003af2:	657b      	str	r3, [r7, #84]	; 0x54
 8003af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	1891      	adds	r1, r2, r2
 8003b00:	61b9      	str	r1, [r7, #24]
 8003b02:	415b      	adcs	r3, r3
 8003b04:	61fb      	str	r3, [r7, #28]
 8003b06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b0e:	f7fc febd 	bl	800088c <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4b6c      	ldr	r3, [pc, #432]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003b18:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	2164      	movs	r1, #100	; 0x64
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3332      	adds	r3, #50	; 0x32
 8003b2a:	4a67      	ldr	r2, [pc, #412]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	f003 0207 	and.w	r2, r3, #7
 8003b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4432      	add	r2, r6
 8003b3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b3e:	e0b9      	b.n	8003cb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b42:	461c      	mov	r4, r3
 8003b44:	f04f 0500 	mov.w	r5, #0
 8003b48:	4622      	mov	r2, r4
 8003b4a:	462b      	mov	r3, r5
 8003b4c:	1891      	adds	r1, r2, r2
 8003b4e:	6139      	str	r1, [r7, #16]
 8003b50:	415b      	adcs	r3, r3
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b58:	1912      	adds	r2, r2, r4
 8003b5a:	eb45 0303 	adc.w	r3, r5, r3
 8003b5e:	f04f 0000 	mov.w	r0, #0
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	00d9      	lsls	r1, r3, #3
 8003b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b6c:	00d0      	lsls	r0, r2, #3
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	eb12 0804 	adds.w	r8, r2, r4
 8003b76:	eb43 0905 	adc.w	r9, r3, r5
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	008b      	lsls	r3, r1, #2
 8003b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b92:	0082      	lsls	r2, r0, #2
 8003b94:	4640      	mov	r0, r8
 8003b96:	4649      	mov	r1, r9
 8003b98:	f7fc fe78 	bl	800088c <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4b49      	ldr	r3, [pc, #292]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	011e      	lsls	r6, r3, #4
 8003baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bac:	4618      	mov	r0, r3
 8003bae:	f04f 0100 	mov.w	r1, #0
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	1894      	adds	r4, r2, r2
 8003bb8:	60bc      	str	r4, [r7, #8]
 8003bba:	415b      	adcs	r3, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc2:	1812      	adds	r2, r2, r0
 8003bc4:	eb41 0303 	adc.w	r3, r1, r3
 8003bc8:	f04f 0400 	mov.w	r4, #0
 8003bcc:	f04f 0500 	mov.w	r5, #0
 8003bd0:	00dd      	lsls	r5, r3, #3
 8003bd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bd6:	00d4      	lsls	r4, r2, #3
 8003bd8:	4622      	mov	r2, r4
 8003bda:	462b      	mov	r3, r5
 8003bdc:	1814      	adds	r4, r2, r0
 8003bde:	64bc      	str	r4, [r7, #72]	; 0x48
 8003be0:	414b      	adcs	r3, r1
 8003be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	008b      	lsls	r3, r1, #2
 8003bf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bfc:	0082      	lsls	r2, r0, #2
 8003bfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c02:	f7fc fe43 	bl	800088c <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	; 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c2a:	441e      	add	r6, r3
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	1894      	adds	r4, r2, r2
 8003c3a:	603c      	str	r4, [r7, #0]
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c44:	1812      	adds	r2, r2, r0
 8003c46:	eb41 0303 	adc.w	r3, r1, r3
 8003c4a:	f04f 0400 	mov.w	r4, #0
 8003c4e:	f04f 0500 	mov.w	r5, #0
 8003c52:	00dd      	lsls	r5, r3, #3
 8003c54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c58:	00d4      	lsls	r4, r2, #3
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	eb12 0a00 	adds.w	sl, r2, r0
 8003c62:	eb43 0b01 	adc.w	fp, r3, r1
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	008b      	lsls	r3, r1, #2
 8003c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c7e:	0082      	lsls	r2, r0, #2
 8003c80:	4650      	mov	r0, sl
 8003c82:	4659      	mov	r1, fp
 8003c84:	f7fc fe02 	bl	800088c <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2164      	movs	r1, #100	; 0x64
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	3332      	adds	r3, #50	; 0x32
 8003ca0:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <UART_SetConfig+0x38c>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	f003 020f 	and.w	r2, r3, #15
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4432      	add	r2, r6
 8003cb2:	609a      	str	r2, [r3, #8]
}
 8003cb4:	bf00      	nop
 8003cb6:	377c      	adds	r7, #124	; 0x7c
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40011400 	.word	0x40011400
 8003cc8:	51eb851f 	.word	0x51eb851f

08003ccc <__errno>:
 8003ccc:	4b01      	ldr	r3, [pc, #4]	; (8003cd4 <__errno+0x8>)
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000010 	.word	0x20000010

08003cd8 <__libc_init_array>:
 8003cd8:	b570      	push	{r4, r5, r6, lr}
 8003cda:	4d0d      	ldr	r5, [pc, #52]	; (8003d10 <__libc_init_array+0x38>)
 8003cdc:	4c0d      	ldr	r4, [pc, #52]	; (8003d14 <__libc_init_array+0x3c>)
 8003cde:	1b64      	subs	r4, r4, r5
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	2600      	movs	r6, #0
 8003ce4:	42a6      	cmp	r6, r4
 8003ce6:	d109      	bne.n	8003cfc <__libc_init_array+0x24>
 8003ce8:	4d0b      	ldr	r5, [pc, #44]	; (8003d18 <__libc_init_array+0x40>)
 8003cea:	4c0c      	ldr	r4, [pc, #48]	; (8003d1c <__libc_init_array+0x44>)
 8003cec:	f000 fc4e 	bl	800458c <_init>
 8003cf0:	1b64      	subs	r4, r4, r5
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	2600      	movs	r6, #0
 8003cf6:	42a6      	cmp	r6, r4
 8003cf8:	d105      	bne.n	8003d06 <__libc_init_array+0x2e>
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d00:	4798      	blx	r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	e7ee      	b.n	8003ce4 <__libc_init_array+0xc>
 8003d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d0a:	4798      	blx	r3
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	e7f2      	b.n	8003cf6 <__libc_init_array+0x1e>
 8003d10:	0800465c 	.word	0x0800465c
 8003d14:	0800465c 	.word	0x0800465c
 8003d18:	0800465c 	.word	0x0800465c
 8003d1c:	08004660 	.word	0x08004660

08003d20 <memset>:
 8003d20:	4402      	add	r2, r0
 8003d22:	4603      	mov	r3, r0
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d100      	bne.n	8003d2a <memset+0xa>
 8003d28:	4770      	bx	lr
 8003d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2e:	e7f9      	b.n	8003d24 <memset+0x4>

08003d30 <siprintf>:
 8003d30:	b40e      	push	{r1, r2, r3}
 8003d32:	b500      	push	{lr}
 8003d34:	b09c      	sub	sp, #112	; 0x70
 8003d36:	ab1d      	add	r3, sp, #116	; 0x74
 8003d38:	9002      	str	r0, [sp, #8]
 8003d3a:	9006      	str	r0, [sp, #24]
 8003d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d40:	4809      	ldr	r0, [pc, #36]	; (8003d68 <siprintf+0x38>)
 8003d42:	9107      	str	r1, [sp, #28]
 8003d44:	9104      	str	r1, [sp, #16]
 8003d46:	4909      	ldr	r1, [pc, #36]	; (8003d6c <siprintf+0x3c>)
 8003d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d4c:	9105      	str	r1, [sp, #20]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	a902      	add	r1, sp, #8
 8003d54:	f000 f868 	bl	8003e28 <_svfiprintf_r>
 8003d58:	9b02      	ldr	r3, [sp, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	b01c      	add	sp, #112	; 0x70
 8003d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d64:	b003      	add	sp, #12
 8003d66:	4770      	bx	lr
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	ffff0208 	.word	0xffff0208

08003d70 <__ssputs_r>:
 8003d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d74:	688e      	ldr	r6, [r1, #8]
 8003d76:	429e      	cmp	r6, r3
 8003d78:	4682      	mov	sl, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	4690      	mov	r8, r2
 8003d7e:	461f      	mov	r7, r3
 8003d80:	d838      	bhi.n	8003df4 <__ssputs_r+0x84>
 8003d82:	898a      	ldrh	r2, [r1, #12]
 8003d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d88:	d032      	beq.n	8003df0 <__ssputs_r+0x80>
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	6909      	ldr	r1, [r1, #16]
 8003d8e:	eba5 0901 	sub.w	r9, r5, r1
 8003d92:	6965      	ldr	r5, [r4, #20]
 8003d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	444b      	add	r3, r9
 8003da0:	106d      	asrs	r5, r5, #1
 8003da2:	429d      	cmp	r5, r3
 8003da4:	bf38      	it	cc
 8003da6:	461d      	movcc	r5, r3
 8003da8:	0553      	lsls	r3, r2, #21
 8003daa:	d531      	bpl.n	8003e10 <__ssputs_r+0xa0>
 8003dac:	4629      	mov	r1, r5
 8003dae:	f000 fb47 	bl	8004440 <_malloc_r>
 8003db2:	4606      	mov	r6, r0
 8003db4:	b950      	cbnz	r0, 8003dcc <__ssputs_r+0x5c>
 8003db6:	230c      	movs	r3, #12
 8003db8:	f8ca 3000 	str.w	r3, [sl]
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	6921      	ldr	r1, [r4, #16]
 8003dce:	464a      	mov	r2, r9
 8003dd0:	f000 fabe 	bl	8004350 <memcpy>
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	81a3      	strh	r3, [r4, #12]
 8003de0:	6126      	str	r6, [r4, #16]
 8003de2:	6165      	str	r5, [r4, #20]
 8003de4:	444e      	add	r6, r9
 8003de6:	eba5 0509 	sub.w	r5, r5, r9
 8003dea:	6026      	str	r6, [r4, #0]
 8003dec:	60a5      	str	r5, [r4, #8]
 8003dee:	463e      	mov	r6, r7
 8003df0:	42be      	cmp	r6, r7
 8003df2:	d900      	bls.n	8003df6 <__ssputs_r+0x86>
 8003df4:	463e      	mov	r6, r7
 8003df6:	4632      	mov	r2, r6
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	f000 fab6 	bl	800436c <memmove>
 8003e00:	68a3      	ldr	r3, [r4, #8]
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	1b9b      	subs	r3, r3, r6
 8003e06:	4432      	add	r2, r6
 8003e08:	60a3      	str	r3, [r4, #8]
 8003e0a:	6022      	str	r2, [r4, #0]
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	e7db      	b.n	8003dc8 <__ssputs_r+0x58>
 8003e10:	462a      	mov	r2, r5
 8003e12:	f000 fb6f 	bl	80044f4 <_realloc_r>
 8003e16:	4606      	mov	r6, r0
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d1e1      	bne.n	8003de0 <__ssputs_r+0x70>
 8003e1c:	6921      	ldr	r1, [r4, #16]
 8003e1e:	4650      	mov	r0, sl
 8003e20:	f000 fabe 	bl	80043a0 <_free_r>
 8003e24:	e7c7      	b.n	8003db6 <__ssputs_r+0x46>
	...

08003e28 <_svfiprintf_r>:
 8003e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	4698      	mov	r8, r3
 8003e2e:	898b      	ldrh	r3, [r1, #12]
 8003e30:	061b      	lsls	r3, r3, #24
 8003e32:	b09d      	sub	sp, #116	; 0x74
 8003e34:	4607      	mov	r7, r0
 8003e36:	460d      	mov	r5, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	d50e      	bpl.n	8003e5a <_svfiprintf_r+0x32>
 8003e3c:	690b      	ldr	r3, [r1, #16]
 8003e3e:	b963      	cbnz	r3, 8003e5a <_svfiprintf_r+0x32>
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	f000 fafd 	bl	8004440 <_malloc_r>
 8003e46:	6028      	str	r0, [r5, #0]
 8003e48:	6128      	str	r0, [r5, #16]
 8003e4a:	b920      	cbnz	r0, 8003e56 <_svfiprintf_r+0x2e>
 8003e4c:	230c      	movs	r3, #12
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	e0d1      	b.n	8003ffa <_svfiprintf_r+0x1d2>
 8003e56:	2340      	movs	r3, #64	; 0x40
 8003e58:	616b      	str	r3, [r5, #20]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5e:	2320      	movs	r3, #32
 8003e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e68:	2330      	movs	r3, #48	; 0x30
 8003e6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004014 <_svfiprintf_r+0x1ec>
 8003e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e72:	f04f 0901 	mov.w	r9, #1
 8003e76:	4623      	mov	r3, r4
 8003e78:	469a      	mov	sl, r3
 8003e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e7e:	b10a      	cbz	r2, 8003e84 <_svfiprintf_r+0x5c>
 8003e80:	2a25      	cmp	r2, #37	; 0x25
 8003e82:	d1f9      	bne.n	8003e78 <_svfiprintf_r+0x50>
 8003e84:	ebba 0b04 	subs.w	fp, sl, r4
 8003e88:	d00b      	beq.n	8003ea2 <_svfiprintf_r+0x7a>
 8003e8a:	465b      	mov	r3, fp
 8003e8c:	4622      	mov	r2, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	4638      	mov	r0, r7
 8003e92:	f7ff ff6d 	bl	8003d70 <__ssputs_r>
 8003e96:	3001      	adds	r0, #1
 8003e98:	f000 80aa 	beq.w	8003ff0 <_svfiprintf_r+0x1c8>
 8003e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e9e:	445a      	add	r2, fp
 8003ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80a2 	beq.w	8003ff0 <_svfiprintf_r+0x1c8>
 8003eac:	2300      	movs	r3, #0
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eb6:	f10a 0a01 	add.w	sl, sl, #1
 8003eba:	9304      	str	r3, [sp, #16]
 8003ebc:	9307      	str	r3, [sp, #28]
 8003ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ec4:	4654      	mov	r4, sl
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ecc:	4851      	ldr	r0, [pc, #324]	; (8004014 <_svfiprintf_r+0x1ec>)
 8003ece:	f7fc f987 	bl	80001e0 <memchr>
 8003ed2:	9a04      	ldr	r2, [sp, #16]
 8003ed4:	b9d8      	cbnz	r0, 8003f0e <_svfiprintf_r+0xe6>
 8003ed6:	06d0      	lsls	r0, r2, #27
 8003ed8:	bf44      	itt	mi
 8003eda:	2320      	movmi	r3, #32
 8003edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ee0:	0711      	lsls	r1, r2, #28
 8003ee2:	bf44      	itt	mi
 8003ee4:	232b      	movmi	r3, #43	; 0x2b
 8003ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eea:	f89a 3000 	ldrb.w	r3, [sl]
 8003eee:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef0:	d015      	beq.n	8003f1e <_svfiprintf_r+0xf6>
 8003ef2:	9a07      	ldr	r2, [sp, #28]
 8003ef4:	4654      	mov	r4, sl
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f04f 0c0a 	mov.w	ip, #10
 8003efc:	4621      	mov	r1, r4
 8003efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f02:	3b30      	subs	r3, #48	; 0x30
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d94e      	bls.n	8003fa6 <_svfiprintf_r+0x17e>
 8003f08:	b1b0      	cbz	r0, 8003f38 <_svfiprintf_r+0x110>
 8003f0a:	9207      	str	r2, [sp, #28]
 8003f0c:	e014      	b.n	8003f38 <_svfiprintf_r+0x110>
 8003f0e:	eba0 0308 	sub.w	r3, r0, r8
 8003f12:	fa09 f303 	lsl.w	r3, r9, r3
 8003f16:	4313      	orrs	r3, r2
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	46a2      	mov	sl, r4
 8003f1c:	e7d2      	b.n	8003ec4 <_svfiprintf_r+0x9c>
 8003f1e:	9b03      	ldr	r3, [sp, #12]
 8003f20:	1d19      	adds	r1, r3, #4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	9103      	str	r1, [sp, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bfbb      	ittet	lt
 8003f2a:	425b      	neglt	r3, r3
 8003f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f30:	9307      	strge	r3, [sp, #28]
 8003f32:	9307      	strlt	r3, [sp, #28]
 8003f34:	bfb8      	it	lt
 8003f36:	9204      	strlt	r2, [sp, #16]
 8003f38:	7823      	ldrb	r3, [r4, #0]
 8003f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003f3c:	d10c      	bne.n	8003f58 <_svfiprintf_r+0x130>
 8003f3e:	7863      	ldrb	r3, [r4, #1]
 8003f40:	2b2a      	cmp	r3, #42	; 0x2a
 8003f42:	d135      	bne.n	8003fb0 <_svfiprintf_r+0x188>
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	9203      	str	r2, [sp, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bfb8      	it	lt
 8003f50:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f54:	3402      	adds	r4, #2
 8003f56:	9305      	str	r3, [sp, #20]
 8003f58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004024 <_svfiprintf_r+0x1fc>
 8003f5c:	7821      	ldrb	r1, [r4, #0]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	4650      	mov	r0, sl
 8003f62:	f7fc f93d 	bl	80001e0 <memchr>
 8003f66:	b140      	cbz	r0, 8003f7a <_svfiprintf_r+0x152>
 8003f68:	2340      	movs	r3, #64	; 0x40
 8003f6a:	eba0 000a 	sub.w	r0, r0, sl
 8003f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	4303      	orrs	r3, r0
 8003f76:	3401      	adds	r4, #1
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f7e:	4826      	ldr	r0, [pc, #152]	; (8004018 <_svfiprintf_r+0x1f0>)
 8003f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f84:	2206      	movs	r2, #6
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d038      	beq.n	8004000 <_svfiprintf_r+0x1d8>
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <_svfiprintf_r+0x1f4>)
 8003f90:	bb1b      	cbnz	r3, 8003fda <_svfiprintf_r+0x1b2>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	3307      	adds	r3, #7
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa0:	4433      	add	r3, r6
 8003fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa4:	e767      	b.n	8003e76 <_svfiprintf_r+0x4e>
 8003fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003faa:	460c      	mov	r4, r1
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7a5      	b.n	8003efc <_svfiprintf_r+0xd4>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	3401      	adds	r4, #1
 8003fb4:	9305      	str	r3, [sp, #20]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 0c0a 	mov.w	ip, #10
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc2:	3a30      	subs	r2, #48	; 0x30
 8003fc4:	2a09      	cmp	r2, #9
 8003fc6:	d903      	bls.n	8003fd0 <_svfiprintf_r+0x1a8>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0c5      	beq.n	8003f58 <_svfiprintf_r+0x130>
 8003fcc:	9105      	str	r1, [sp, #20]
 8003fce:	e7c3      	b.n	8003f58 <_svfiprintf_r+0x130>
 8003fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fd4:	4604      	mov	r4, r0
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e7f0      	b.n	8003fbc <_svfiprintf_r+0x194>
 8003fda:	ab03      	add	r3, sp, #12
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	462a      	mov	r2, r5
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <_svfiprintf_r+0x1f8>)
 8003fe2:	a904      	add	r1, sp, #16
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f3af 8000 	nop.w
 8003fea:	1c42      	adds	r2, r0, #1
 8003fec:	4606      	mov	r6, r0
 8003fee:	d1d6      	bne.n	8003f9e <_svfiprintf_r+0x176>
 8003ff0:	89ab      	ldrh	r3, [r5, #12]
 8003ff2:	065b      	lsls	r3, r3, #25
 8003ff4:	f53f af2c 	bmi.w	8003e50 <_svfiprintf_r+0x28>
 8003ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ffa:	b01d      	add	sp, #116	; 0x74
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	ab03      	add	r3, sp, #12
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	462a      	mov	r2, r5
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <_svfiprintf_r+0x1f8>)
 8004008:	a904      	add	r1, sp, #16
 800400a:	4638      	mov	r0, r7
 800400c:	f000 f87a 	bl	8004104 <_printf_i>
 8004010:	e7eb      	b.n	8003fea <_svfiprintf_r+0x1c2>
 8004012:	bf00      	nop
 8004014:	08004620 	.word	0x08004620
 8004018:	0800462a 	.word	0x0800462a
 800401c:	00000000 	.word	0x00000000
 8004020:	08003d71 	.word	0x08003d71
 8004024:	08004626 	.word	0x08004626

08004028 <_printf_common>:
 8004028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	4616      	mov	r6, r2
 800402e:	4699      	mov	r9, r3
 8004030:	688a      	ldr	r2, [r1, #8]
 8004032:	690b      	ldr	r3, [r1, #16]
 8004034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004038:	4293      	cmp	r3, r2
 800403a:	bfb8      	it	lt
 800403c:	4613      	movlt	r3, r2
 800403e:	6033      	str	r3, [r6, #0]
 8004040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004044:	4607      	mov	r7, r0
 8004046:	460c      	mov	r4, r1
 8004048:	b10a      	cbz	r2, 800404e <_printf_common+0x26>
 800404a:	3301      	adds	r3, #1
 800404c:	6033      	str	r3, [r6, #0]
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	0699      	lsls	r1, r3, #26
 8004052:	bf42      	ittt	mi
 8004054:	6833      	ldrmi	r3, [r6, #0]
 8004056:	3302      	addmi	r3, #2
 8004058:	6033      	strmi	r3, [r6, #0]
 800405a:	6825      	ldr	r5, [r4, #0]
 800405c:	f015 0506 	ands.w	r5, r5, #6
 8004060:	d106      	bne.n	8004070 <_printf_common+0x48>
 8004062:	f104 0a19 	add.w	sl, r4, #25
 8004066:	68e3      	ldr	r3, [r4, #12]
 8004068:	6832      	ldr	r2, [r6, #0]
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	42ab      	cmp	r3, r5
 800406e:	dc26      	bgt.n	80040be <_printf_common+0x96>
 8004070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004074:	1e13      	subs	r3, r2, #0
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	bf18      	it	ne
 800407a:	2301      	movne	r3, #1
 800407c:	0692      	lsls	r2, r2, #26
 800407e:	d42b      	bmi.n	80040d8 <_printf_common+0xb0>
 8004080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004084:	4649      	mov	r1, r9
 8004086:	4638      	mov	r0, r7
 8004088:	47c0      	blx	r8
 800408a:	3001      	adds	r0, #1
 800408c:	d01e      	beq.n	80040cc <_printf_common+0xa4>
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	68e5      	ldr	r5, [r4, #12]
 8004092:	6832      	ldr	r2, [r6, #0]
 8004094:	f003 0306 	and.w	r3, r3, #6
 8004098:	2b04      	cmp	r3, #4
 800409a:	bf08      	it	eq
 800409c:	1aad      	subeq	r5, r5, r2
 800409e:	68a3      	ldr	r3, [r4, #8]
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	bf0c      	ite	eq
 80040a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040a8:	2500      	movne	r5, #0
 80040aa:	4293      	cmp	r3, r2
 80040ac:	bfc4      	itt	gt
 80040ae:	1a9b      	subgt	r3, r3, r2
 80040b0:	18ed      	addgt	r5, r5, r3
 80040b2:	2600      	movs	r6, #0
 80040b4:	341a      	adds	r4, #26
 80040b6:	42b5      	cmp	r5, r6
 80040b8:	d11a      	bne.n	80040f0 <_printf_common+0xc8>
 80040ba:	2000      	movs	r0, #0
 80040bc:	e008      	b.n	80040d0 <_printf_common+0xa8>
 80040be:	2301      	movs	r3, #1
 80040c0:	4652      	mov	r2, sl
 80040c2:	4649      	mov	r1, r9
 80040c4:	4638      	mov	r0, r7
 80040c6:	47c0      	blx	r8
 80040c8:	3001      	adds	r0, #1
 80040ca:	d103      	bne.n	80040d4 <_printf_common+0xac>
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d4:	3501      	adds	r5, #1
 80040d6:	e7c6      	b.n	8004066 <_printf_common+0x3e>
 80040d8:	18e1      	adds	r1, r4, r3
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	2030      	movs	r0, #48	; 0x30
 80040de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040e2:	4422      	add	r2, r4
 80040e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ec:	3302      	adds	r3, #2
 80040ee:	e7c7      	b.n	8004080 <_printf_common+0x58>
 80040f0:	2301      	movs	r3, #1
 80040f2:	4622      	mov	r2, r4
 80040f4:	4649      	mov	r1, r9
 80040f6:	4638      	mov	r0, r7
 80040f8:	47c0      	blx	r8
 80040fa:	3001      	adds	r0, #1
 80040fc:	d0e6      	beq.n	80040cc <_printf_common+0xa4>
 80040fe:	3601      	adds	r6, #1
 8004100:	e7d9      	b.n	80040b6 <_printf_common+0x8e>
	...

08004104 <_printf_i>:
 8004104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	460c      	mov	r4, r1
 800410a:	4691      	mov	r9, r2
 800410c:	7e27      	ldrb	r7, [r4, #24]
 800410e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004110:	2f78      	cmp	r7, #120	; 0x78
 8004112:	4680      	mov	r8, r0
 8004114:	469a      	mov	sl, r3
 8004116:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800411a:	d807      	bhi.n	800412c <_printf_i+0x28>
 800411c:	2f62      	cmp	r7, #98	; 0x62
 800411e:	d80a      	bhi.n	8004136 <_printf_i+0x32>
 8004120:	2f00      	cmp	r7, #0
 8004122:	f000 80d8 	beq.w	80042d6 <_printf_i+0x1d2>
 8004126:	2f58      	cmp	r7, #88	; 0x58
 8004128:	f000 80a3 	beq.w	8004272 <_printf_i+0x16e>
 800412c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004134:	e03a      	b.n	80041ac <_printf_i+0xa8>
 8004136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800413a:	2b15      	cmp	r3, #21
 800413c:	d8f6      	bhi.n	800412c <_printf_i+0x28>
 800413e:	a001      	add	r0, pc, #4	; (adr r0, 8004144 <_printf_i+0x40>)
 8004140:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004144:	0800419d 	.word	0x0800419d
 8004148:	080041b1 	.word	0x080041b1
 800414c:	0800412d 	.word	0x0800412d
 8004150:	0800412d 	.word	0x0800412d
 8004154:	0800412d 	.word	0x0800412d
 8004158:	0800412d 	.word	0x0800412d
 800415c:	080041b1 	.word	0x080041b1
 8004160:	0800412d 	.word	0x0800412d
 8004164:	0800412d 	.word	0x0800412d
 8004168:	0800412d 	.word	0x0800412d
 800416c:	0800412d 	.word	0x0800412d
 8004170:	080042bd 	.word	0x080042bd
 8004174:	080041e1 	.word	0x080041e1
 8004178:	0800429f 	.word	0x0800429f
 800417c:	0800412d 	.word	0x0800412d
 8004180:	0800412d 	.word	0x0800412d
 8004184:	080042df 	.word	0x080042df
 8004188:	0800412d 	.word	0x0800412d
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800412d 	.word	0x0800412d
 8004194:	0800412d 	.word	0x0800412d
 8004198:	080042a7 	.word	0x080042a7
 800419c:	680b      	ldr	r3, [r1, #0]
 800419e:	1d1a      	adds	r2, r3, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	600a      	str	r2, [r1, #0]
 80041a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a3      	b.n	80042f8 <_printf_i+0x1f4>
 80041b0:	6825      	ldr	r5, [r4, #0]
 80041b2:	6808      	ldr	r0, [r1, #0]
 80041b4:	062e      	lsls	r6, r5, #24
 80041b6:	f100 0304 	add.w	r3, r0, #4
 80041ba:	d50a      	bpl.n	80041d2 <_printf_i+0xce>
 80041bc:	6805      	ldr	r5, [r0, #0]
 80041be:	600b      	str	r3, [r1, #0]
 80041c0:	2d00      	cmp	r5, #0
 80041c2:	da03      	bge.n	80041cc <_printf_i+0xc8>
 80041c4:	232d      	movs	r3, #45	; 0x2d
 80041c6:	426d      	negs	r5, r5
 80041c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041cc:	485e      	ldr	r0, [pc, #376]	; (8004348 <_printf_i+0x244>)
 80041ce:	230a      	movs	r3, #10
 80041d0:	e019      	b.n	8004206 <_printf_i+0x102>
 80041d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041d6:	6805      	ldr	r5, [r0, #0]
 80041d8:	600b      	str	r3, [r1, #0]
 80041da:	bf18      	it	ne
 80041dc:	b22d      	sxthne	r5, r5
 80041de:	e7ef      	b.n	80041c0 <_printf_i+0xbc>
 80041e0:	680b      	ldr	r3, [r1, #0]
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	1d18      	adds	r0, r3, #4
 80041e6:	6008      	str	r0, [r1, #0]
 80041e8:	0628      	lsls	r0, r5, #24
 80041ea:	d501      	bpl.n	80041f0 <_printf_i+0xec>
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	e002      	b.n	80041f6 <_printf_i+0xf2>
 80041f0:	0669      	lsls	r1, r5, #25
 80041f2:	d5fb      	bpl.n	80041ec <_printf_i+0xe8>
 80041f4:	881d      	ldrh	r5, [r3, #0]
 80041f6:	4854      	ldr	r0, [pc, #336]	; (8004348 <_printf_i+0x244>)
 80041f8:	2f6f      	cmp	r7, #111	; 0x6f
 80041fa:	bf0c      	ite	eq
 80041fc:	2308      	moveq	r3, #8
 80041fe:	230a      	movne	r3, #10
 8004200:	2100      	movs	r1, #0
 8004202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004206:	6866      	ldr	r6, [r4, #4]
 8004208:	60a6      	str	r6, [r4, #8]
 800420a:	2e00      	cmp	r6, #0
 800420c:	bfa2      	ittt	ge
 800420e:	6821      	ldrge	r1, [r4, #0]
 8004210:	f021 0104 	bicge.w	r1, r1, #4
 8004214:	6021      	strge	r1, [r4, #0]
 8004216:	b90d      	cbnz	r5, 800421c <_printf_i+0x118>
 8004218:	2e00      	cmp	r6, #0
 800421a:	d04d      	beq.n	80042b8 <_printf_i+0x1b4>
 800421c:	4616      	mov	r6, r2
 800421e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004222:	fb03 5711 	mls	r7, r3, r1, r5
 8004226:	5dc7      	ldrb	r7, [r0, r7]
 8004228:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800422c:	462f      	mov	r7, r5
 800422e:	42bb      	cmp	r3, r7
 8004230:	460d      	mov	r5, r1
 8004232:	d9f4      	bls.n	800421e <_printf_i+0x11a>
 8004234:	2b08      	cmp	r3, #8
 8004236:	d10b      	bne.n	8004250 <_printf_i+0x14c>
 8004238:	6823      	ldr	r3, [r4, #0]
 800423a:	07df      	lsls	r7, r3, #31
 800423c:	d508      	bpl.n	8004250 <_printf_i+0x14c>
 800423e:	6923      	ldr	r3, [r4, #16]
 8004240:	6861      	ldr	r1, [r4, #4]
 8004242:	4299      	cmp	r1, r3
 8004244:	bfde      	ittt	le
 8004246:	2330      	movle	r3, #48	; 0x30
 8004248:	f806 3c01 	strble.w	r3, [r6, #-1]
 800424c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004250:	1b92      	subs	r2, r2, r6
 8004252:	6122      	str	r2, [r4, #16]
 8004254:	f8cd a000 	str.w	sl, [sp]
 8004258:	464b      	mov	r3, r9
 800425a:	aa03      	add	r2, sp, #12
 800425c:	4621      	mov	r1, r4
 800425e:	4640      	mov	r0, r8
 8004260:	f7ff fee2 	bl	8004028 <_printf_common>
 8004264:	3001      	adds	r0, #1
 8004266:	d14c      	bne.n	8004302 <_printf_i+0x1fe>
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	b004      	add	sp, #16
 800426e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004272:	4835      	ldr	r0, [pc, #212]	; (8004348 <_printf_i+0x244>)
 8004274:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	680e      	ldr	r6, [r1, #0]
 800427c:	061f      	lsls	r7, r3, #24
 800427e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004282:	600e      	str	r6, [r1, #0]
 8004284:	d514      	bpl.n	80042b0 <_printf_i+0x1ac>
 8004286:	07d9      	lsls	r1, r3, #31
 8004288:	bf44      	itt	mi
 800428a:	f043 0320 	orrmi.w	r3, r3, #32
 800428e:	6023      	strmi	r3, [r4, #0]
 8004290:	b91d      	cbnz	r5, 800429a <_printf_i+0x196>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	f023 0320 	bic.w	r3, r3, #32
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	2310      	movs	r3, #16
 800429c:	e7b0      	b.n	8004200 <_printf_i+0xfc>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2378      	movs	r3, #120	; 0x78
 80042a8:	4828      	ldr	r0, [pc, #160]	; (800434c <_printf_i+0x248>)
 80042aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042ae:	e7e3      	b.n	8004278 <_printf_i+0x174>
 80042b0:	065e      	lsls	r6, r3, #25
 80042b2:	bf48      	it	mi
 80042b4:	b2ad      	uxthmi	r5, r5
 80042b6:	e7e6      	b.n	8004286 <_printf_i+0x182>
 80042b8:	4616      	mov	r6, r2
 80042ba:	e7bb      	b.n	8004234 <_printf_i+0x130>
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	6826      	ldr	r6, [r4, #0]
 80042c0:	6960      	ldr	r0, [r4, #20]
 80042c2:	1d1d      	adds	r5, r3, #4
 80042c4:	600d      	str	r5, [r1, #0]
 80042c6:	0635      	lsls	r5, r6, #24
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	d501      	bpl.n	80042d0 <_printf_i+0x1cc>
 80042cc:	6018      	str	r0, [r3, #0]
 80042ce:	e002      	b.n	80042d6 <_printf_i+0x1d2>
 80042d0:	0671      	lsls	r1, r6, #25
 80042d2:	d5fb      	bpl.n	80042cc <_printf_i+0x1c8>
 80042d4:	8018      	strh	r0, [r3, #0]
 80042d6:	2300      	movs	r3, #0
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	4616      	mov	r6, r2
 80042dc:	e7ba      	b.n	8004254 <_printf_i+0x150>
 80042de:	680b      	ldr	r3, [r1, #0]
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	600a      	str	r2, [r1, #0]
 80042e4:	681e      	ldr	r6, [r3, #0]
 80042e6:	6862      	ldr	r2, [r4, #4]
 80042e8:	2100      	movs	r1, #0
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7fb ff78 	bl	80001e0 <memchr>
 80042f0:	b108      	cbz	r0, 80042f6 <_printf_i+0x1f2>
 80042f2:	1b80      	subs	r0, r0, r6
 80042f4:	6060      	str	r0, [r4, #4]
 80042f6:	6863      	ldr	r3, [r4, #4]
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004300:	e7a8      	b.n	8004254 <_printf_i+0x150>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d0ab      	beq.n	8004268 <_printf_i+0x164>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d413      	bmi.n	800433e <_printf_i+0x23a>
 8004316:	68e0      	ldr	r0, [r4, #12]
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	4298      	cmp	r0, r3
 800431c:	bfb8      	it	lt
 800431e:	4618      	movlt	r0, r3
 8004320:	e7a4      	b.n	800426c <_printf_i+0x168>
 8004322:	2301      	movs	r3, #1
 8004324:	4632      	mov	r2, r6
 8004326:	4649      	mov	r1, r9
 8004328:	4640      	mov	r0, r8
 800432a:	47d0      	blx	sl
 800432c:	3001      	adds	r0, #1
 800432e:	d09b      	beq.n	8004268 <_printf_i+0x164>
 8004330:	3501      	adds	r5, #1
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	9903      	ldr	r1, [sp, #12]
 8004336:	1a5b      	subs	r3, r3, r1
 8004338:	42ab      	cmp	r3, r5
 800433a:	dcf2      	bgt.n	8004322 <_printf_i+0x21e>
 800433c:	e7eb      	b.n	8004316 <_printf_i+0x212>
 800433e:	2500      	movs	r5, #0
 8004340:	f104 0619 	add.w	r6, r4, #25
 8004344:	e7f5      	b.n	8004332 <_printf_i+0x22e>
 8004346:	bf00      	nop
 8004348:	08004631 	.word	0x08004631
 800434c:	08004642 	.word	0x08004642

08004350 <memcpy>:
 8004350:	440a      	add	r2, r1
 8004352:	4291      	cmp	r1, r2
 8004354:	f100 33ff 	add.w	r3, r0, #4294967295
 8004358:	d100      	bne.n	800435c <memcpy+0xc>
 800435a:	4770      	bx	lr
 800435c:	b510      	push	{r4, lr}
 800435e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004366:	4291      	cmp	r1, r2
 8004368:	d1f9      	bne.n	800435e <memcpy+0xe>
 800436a:	bd10      	pop	{r4, pc}

0800436c <memmove>:
 800436c:	4288      	cmp	r0, r1
 800436e:	b510      	push	{r4, lr}
 8004370:	eb01 0402 	add.w	r4, r1, r2
 8004374:	d902      	bls.n	800437c <memmove+0x10>
 8004376:	4284      	cmp	r4, r0
 8004378:	4623      	mov	r3, r4
 800437a:	d807      	bhi.n	800438c <memmove+0x20>
 800437c:	1e43      	subs	r3, r0, #1
 800437e:	42a1      	cmp	r1, r4
 8004380:	d008      	beq.n	8004394 <memmove+0x28>
 8004382:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004386:	f803 2f01 	strb.w	r2, [r3, #1]!
 800438a:	e7f8      	b.n	800437e <memmove+0x12>
 800438c:	4402      	add	r2, r0
 800438e:	4601      	mov	r1, r0
 8004390:	428a      	cmp	r2, r1
 8004392:	d100      	bne.n	8004396 <memmove+0x2a>
 8004394:	bd10      	pop	{r4, pc}
 8004396:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800439a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439e:	e7f7      	b.n	8004390 <memmove+0x24>

080043a0 <_free_r>:
 80043a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043a2:	2900      	cmp	r1, #0
 80043a4:	d048      	beq.n	8004438 <_free_r+0x98>
 80043a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043aa:	9001      	str	r0, [sp, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f1a1 0404 	sub.w	r4, r1, #4
 80043b2:	bfb8      	it	lt
 80043b4:	18e4      	addlt	r4, r4, r3
 80043b6:	f000 f8d3 	bl	8004560 <__malloc_lock>
 80043ba:	4a20      	ldr	r2, [pc, #128]	; (800443c <_free_r+0x9c>)
 80043bc:	9801      	ldr	r0, [sp, #4]
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	4615      	mov	r5, r2
 80043c2:	b933      	cbnz	r3, 80043d2 <_free_r+0x32>
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6014      	str	r4, [r2, #0]
 80043c8:	b003      	add	sp, #12
 80043ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043ce:	f000 b8cd 	b.w	800456c <__malloc_unlock>
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d90b      	bls.n	80043ee <_free_r+0x4e>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	1862      	adds	r2, r4, r1
 80043da:	4293      	cmp	r3, r2
 80043dc:	bf04      	itt	eq
 80043de:	681a      	ldreq	r2, [r3, #0]
 80043e0:	685b      	ldreq	r3, [r3, #4]
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	bf04      	itt	eq
 80043e6:	1852      	addeq	r2, r2, r1
 80043e8:	6022      	streq	r2, [r4, #0]
 80043ea:	602c      	str	r4, [r5, #0]
 80043ec:	e7ec      	b.n	80043c8 <_free_r+0x28>
 80043ee:	461a      	mov	r2, r3
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	b10b      	cbz	r3, 80043f8 <_free_r+0x58>
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d9fa      	bls.n	80043ee <_free_r+0x4e>
 80043f8:	6811      	ldr	r1, [r2, #0]
 80043fa:	1855      	adds	r5, r2, r1
 80043fc:	42a5      	cmp	r5, r4
 80043fe:	d10b      	bne.n	8004418 <_free_r+0x78>
 8004400:	6824      	ldr	r4, [r4, #0]
 8004402:	4421      	add	r1, r4
 8004404:	1854      	adds	r4, r2, r1
 8004406:	42a3      	cmp	r3, r4
 8004408:	6011      	str	r1, [r2, #0]
 800440a:	d1dd      	bne.n	80043c8 <_free_r+0x28>
 800440c:	681c      	ldr	r4, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	6053      	str	r3, [r2, #4]
 8004412:	4421      	add	r1, r4
 8004414:	6011      	str	r1, [r2, #0]
 8004416:	e7d7      	b.n	80043c8 <_free_r+0x28>
 8004418:	d902      	bls.n	8004420 <_free_r+0x80>
 800441a:	230c      	movs	r3, #12
 800441c:	6003      	str	r3, [r0, #0]
 800441e:	e7d3      	b.n	80043c8 <_free_r+0x28>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf04      	itt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	6063      	str	r3, [r4, #4]
 800442e:	bf04      	itt	eq
 8004430:	1949      	addeq	r1, r1, r5
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	6054      	str	r4, [r2, #4]
 8004436:	e7c7      	b.n	80043c8 <_free_r+0x28>
 8004438:	b003      	add	sp, #12
 800443a:	bd30      	pop	{r4, r5, pc}
 800443c:	200000b8 	.word	0x200000b8

08004440 <_malloc_r>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	1ccd      	adds	r5, r1, #3
 8004444:	f025 0503 	bic.w	r5, r5, #3
 8004448:	3508      	adds	r5, #8
 800444a:	2d0c      	cmp	r5, #12
 800444c:	bf38      	it	cc
 800444e:	250c      	movcc	r5, #12
 8004450:	2d00      	cmp	r5, #0
 8004452:	4606      	mov	r6, r0
 8004454:	db01      	blt.n	800445a <_malloc_r+0x1a>
 8004456:	42a9      	cmp	r1, r5
 8004458:	d903      	bls.n	8004462 <_malloc_r+0x22>
 800445a:	230c      	movs	r3, #12
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	2000      	movs	r0, #0
 8004460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004462:	f000 f87d 	bl	8004560 <__malloc_lock>
 8004466:	4921      	ldr	r1, [pc, #132]	; (80044ec <_malloc_r+0xac>)
 8004468:	680a      	ldr	r2, [r1, #0]
 800446a:	4614      	mov	r4, r2
 800446c:	b99c      	cbnz	r4, 8004496 <_malloc_r+0x56>
 800446e:	4f20      	ldr	r7, [pc, #128]	; (80044f0 <_malloc_r+0xb0>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b923      	cbnz	r3, 800447e <_malloc_r+0x3e>
 8004474:	4621      	mov	r1, r4
 8004476:	4630      	mov	r0, r6
 8004478:	f000 f862 	bl	8004540 <_sbrk_r>
 800447c:	6038      	str	r0, [r7, #0]
 800447e:	4629      	mov	r1, r5
 8004480:	4630      	mov	r0, r6
 8004482:	f000 f85d 	bl	8004540 <_sbrk_r>
 8004486:	1c43      	adds	r3, r0, #1
 8004488:	d123      	bne.n	80044d2 <_malloc_r+0x92>
 800448a:	230c      	movs	r3, #12
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f86c 	bl	800456c <__malloc_unlock>
 8004494:	e7e3      	b.n	800445e <_malloc_r+0x1e>
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	1b5b      	subs	r3, r3, r5
 800449a:	d417      	bmi.n	80044cc <_malloc_r+0x8c>
 800449c:	2b0b      	cmp	r3, #11
 800449e:	d903      	bls.n	80044a8 <_malloc_r+0x68>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	441c      	add	r4, r3
 80044a4:	6025      	str	r5, [r4, #0]
 80044a6:	e004      	b.n	80044b2 <_malloc_r+0x72>
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	42a2      	cmp	r2, r4
 80044ac:	bf0c      	ite	eq
 80044ae:	600b      	streq	r3, [r1, #0]
 80044b0:	6053      	strne	r3, [r2, #4]
 80044b2:	4630      	mov	r0, r6
 80044b4:	f000 f85a 	bl	800456c <__malloc_unlock>
 80044b8:	f104 000b 	add.w	r0, r4, #11
 80044bc:	1d23      	adds	r3, r4, #4
 80044be:	f020 0007 	bic.w	r0, r0, #7
 80044c2:	1ac2      	subs	r2, r0, r3
 80044c4:	d0cc      	beq.n	8004460 <_malloc_r+0x20>
 80044c6:	1a1b      	subs	r3, r3, r0
 80044c8:	50a3      	str	r3, [r4, r2]
 80044ca:	e7c9      	b.n	8004460 <_malloc_r+0x20>
 80044cc:	4622      	mov	r2, r4
 80044ce:	6864      	ldr	r4, [r4, #4]
 80044d0:	e7cc      	b.n	800446c <_malloc_r+0x2c>
 80044d2:	1cc4      	adds	r4, r0, #3
 80044d4:	f024 0403 	bic.w	r4, r4, #3
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d0e3      	beq.n	80044a4 <_malloc_r+0x64>
 80044dc:	1a21      	subs	r1, r4, r0
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f82e 	bl	8004540 <_sbrk_r>
 80044e4:	3001      	adds	r0, #1
 80044e6:	d1dd      	bne.n	80044a4 <_malloc_r+0x64>
 80044e8:	e7cf      	b.n	800448a <_malloc_r+0x4a>
 80044ea:	bf00      	nop
 80044ec:	200000b8 	.word	0x200000b8
 80044f0:	200000bc 	.word	0x200000bc

080044f4 <_realloc_r>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	4607      	mov	r7, r0
 80044f8:	4614      	mov	r4, r2
 80044fa:	460e      	mov	r6, r1
 80044fc:	b921      	cbnz	r1, 8004508 <_realloc_r+0x14>
 80044fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004502:	4611      	mov	r1, r2
 8004504:	f7ff bf9c 	b.w	8004440 <_malloc_r>
 8004508:	b922      	cbnz	r2, 8004514 <_realloc_r+0x20>
 800450a:	f7ff ff49 	bl	80043a0 <_free_r>
 800450e:	4625      	mov	r5, r4
 8004510:	4628      	mov	r0, r5
 8004512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004514:	f000 f830 	bl	8004578 <_malloc_usable_size_r>
 8004518:	42a0      	cmp	r0, r4
 800451a:	d20f      	bcs.n	800453c <_realloc_r+0x48>
 800451c:	4621      	mov	r1, r4
 800451e:	4638      	mov	r0, r7
 8004520:	f7ff ff8e 	bl	8004440 <_malloc_r>
 8004524:	4605      	mov	r5, r0
 8004526:	2800      	cmp	r0, #0
 8004528:	d0f2      	beq.n	8004510 <_realloc_r+0x1c>
 800452a:	4631      	mov	r1, r6
 800452c:	4622      	mov	r2, r4
 800452e:	f7ff ff0f 	bl	8004350 <memcpy>
 8004532:	4631      	mov	r1, r6
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ff33 	bl	80043a0 <_free_r>
 800453a:	e7e9      	b.n	8004510 <_realloc_r+0x1c>
 800453c:	4635      	mov	r5, r6
 800453e:	e7e7      	b.n	8004510 <_realloc_r+0x1c>

08004540 <_sbrk_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4d06      	ldr	r5, [pc, #24]	; (800455c <_sbrk_r+0x1c>)
 8004544:	2300      	movs	r3, #0
 8004546:	4604      	mov	r4, r0
 8004548:	4608      	mov	r0, r1
 800454a:	602b      	str	r3, [r5, #0]
 800454c:	f7fd f974 	bl	8001838 <_sbrk>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_sbrk_r+0x1a>
 8004554:	682b      	ldr	r3, [r5, #0]
 8004556:	b103      	cbz	r3, 800455a <_sbrk_r+0x1a>
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	200001b0 	.word	0x200001b0

08004560 <__malloc_lock>:
 8004560:	4801      	ldr	r0, [pc, #4]	; (8004568 <__malloc_lock+0x8>)
 8004562:	f000 b811 	b.w	8004588 <__retarget_lock_acquire_recursive>
 8004566:	bf00      	nop
 8004568:	200001b8 	.word	0x200001b8

0800456c <__malloc_unlock>:
 800456c:	4801      	ldr	r0, [pc, #4]	; (8004574 <__malloc_unlock+0x8>)
 800456e:	f000 b80c 	b.w	800458a <__retarget_lock_release_recursive>
 8004572:	bf00      	nop
 8004574:	200001b8 	.word	0x200001b8

08004578 <_malloc_usable_size_r>:
 8004578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800457c:	1f18      	subs	r0, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfbc      	itt	lt
 8004582:	580b      	ldrlt	r3, [r1, r0]
 8004584:	18c0      	addlt	r0, r0, r3
 8004586:	4770      	bx	lr

08004588 <__retarget_lock_acquire_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_release_recursive>:
 800458a:	4770      	bx	lr

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
