
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051e4  08009d00  08009d00  00019d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eee4  0800eee4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eee4  0800eee4  0001eee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eeec  0800eeec  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eeec  0800eeec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eef0  0800eef0  0001eef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800eef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001f4  0800f0e8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800f0e8  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003adde  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a32  00000000  00000000  0005b002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  0005fa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  000612b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b192  00000000  00000000  00062910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c0de  00000000  00000000  0007daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2b73  00000000  00000000  00099b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013c6f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c4  00000000  00000000  0013c748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ce4 	.word	0x08009ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08009ce4 	.word	0x08009ce4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <I2C_LCD1602_Send_Command>:
#define LCD1_address 		0x4E // A0,A1,A2 OPEN->E

extern I2C_HandleTypeDef hi2c1;

void I2C_LCD1602_Send_Command(unsigned char command)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	char command_MSB, command_LSB;
	uint8_t I2C_cmd[4];
	command_MSB = ( command & 0xf0 );
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f023 030f 	bic.w	r3, r3, #15
 8000f60:	73fb      	strb	r3, [r7, #15]
	command_LSB = ( (command << 4) & 0xf0 ) ;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	011b      	lsls	r3, r3, #4
 8000f66:	73bb      	strb	r3, [r7, #14]

	I2C_cmd[ 0 ] = command_MSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	f043 030c 	orr.w	r3, r3, #12
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	723b      	strb	r3, [r7, #8]
	I2C_cmd[ 1 ] = command_MSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	727b      	strb	r3, [r7, #9]
	I2C_cmd[ 2 ] = command_LSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000f7c:	7bbb      	ldrb	r3, [r7, #14]
 8000f7e:	f043 030c 	orr.w	r3, r3, #12
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	72bb      	strb	r3, [r7, #10]
	I2C_cmd[ 3 ] = command_LSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_cmd, 4, 100 );
 8000f90:	f107 0208 	add.w	r2, r7, #8
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2304      	movs	r3, #4
 8000f9a:	214e      	movs	r1, #78	; 0x4e
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <I2C_LCD1602_Send_Command+0x5c>)
 8000f9e:	f004 f89d 	bl	80050dc <HAL_I2C_Master_Transmit>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000390 	.word	0x20000390

08000fb0 <I2C_LCD1602_Send_Data>:

void I2C_LCD1602_Send_Data(unsigned char data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	char data_MSB, data_LSB;
	uint8_t I2C_data[4];
	data_MSB = ( data & 0xf0 ) ;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f023 030f 	bic.w	r3, r3, #15
 8000fc0:	73fb      	strb	r3, [r7, #15]
	data_LSB =  ( (data << 4) & 0xf0 ) ;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	73bb      	strb	r3, [r7, #14]

	I2C_data[ 0 ] = data_MSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f043 030d 	orr.w	r3, r3, #13
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	723b      	strb	r3, [r7, #8]
	I2C_data[ 1 ] = data_MSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 0309 	orr.w	r3, r3, #9
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	727b      	strb	r3, [r7, #9]
	I2C_data[ 2 ] = data_LSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	f043 030d 	orr.w	r3, r3, #13
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	72bb      	strb	r3, [r7, #10]
	I2C_data[ 3 ] = data_LSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	f043 0309 	orr.w	r3, r3, #9
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_data, 4, 100 );
 8000ff0:	f107 0208 	add.w	r2, r7, #8
 8000ff4:	2364      	movs	r3, #100	; 0x64
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	214e      	movs	r1, #78	; 0x4e
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <I2C_LCD1602_Send_Data+0x5c>)
 8000ffe:	f004 f86d 	bl	80050dc <HAL_I2C_Master_Transmit>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000390 	.word	0x20000390

08001010 <I2C_LCD1602_Init>:

void I2C_LCD1602_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f002 fcb7 	bl	8003988 <HAL_Delay>

	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 800101a:	2030      	movs	r0, #48	; 0x30
 800101c:	f7ff ff98 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001020:	2005      	movs	r0, #5
 8001022:	f002 fcb1 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001026:	2030      	movs	r0, #48	; 0x30
 8001028:	f7ff ff92 	bl	8000f50 <I2C_LCD1602_Send_Command>
 800102c:	2005      	movs	r0, #5
 800102e:	f002 fcab 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8001032:	2030      	movs	r0, #48	; 0x30
 8001034:	f7ff ff8c 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001038:	2005      	movs	r0, #5
 800103a:	f002 fca5 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( MODE4bit ); HAL_Delay(5);
 800103e:	2020      	movs	r0, #32
 8001040:	f7ff ff86 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001044:	2005      	movs	r0, #5
 8001046:	f002 fc9f 	bl	8003988 <HAL_Delay>

	I2C_LCD1602_Send_Command(FUNCTIONSET ); HAL_Delay(5); // 4bit 2line font5x10
 800104a:	202c      	movs	r0, #44	; 0x2c
 800104c:	f7ff ff80 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001050:	2005      	movs	r0, #5
 8001052:	f002 fc99 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( DISPLAYON ); HAL_Delay(5);
 8001056:	200c      	movs	r0, #12
 8001058:	f7ff ff7a 	bl	8000f50 <I2C_LCD1602_Send_Command>
 800105c:	2005      	movs	r0, #5
 800105e:	f002 fc93 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( ALLCLR ); HAL_Delay(5);
 8001062:	2001      	movs	r0, #1
 8001064:	f7ff ff74 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001068:	2005      	movs	r0, #5
 800106a:	f002 fc8d 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command( ENTMODE ); HAL_Delay(5);
 800106e:	2006      	movs	r0, #6
 8001070:	f7ff ff6e 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001074:	2005      	movs	r0, #5
 8001076:	f002 fc87 	bl	8003988 <HAL_Delay>
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}

0800107e <I2C_LCD1602_Send_string>:

void I2C_LCD1602_Send_string( char *string)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	while( * string ) I2C_LCD1602_Send_Data( *string++ );
 8001086:	e006      	b.n	8001096 <I2C_LCD1602_Send_string+0x18>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff8d 	bl	8000fb0 <I2C_LCD1602_Send_Data>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f4      	bne.n	8001088 <I2C_LCD1602_Send_string+0xa>
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <I2C_LCD1602_GotoXY>:
void I2C_LCD1602_GotoXY(char x, char y)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	if( !y ) I2C_LCD1602_Send_Command( 0x80 | x );
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <I2C_LCD1602_GotoXY+0x26>
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff42 	bl	8000f50 <I2C_LCD1602_Send_Command>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
}
 80010cc:	e006      	b.n	80010dc <I2C_LCD1602_GotoXY+0x34>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff3a 	bl	8000f50 <I2C_LCD1602_Send_Command>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <I2C_LCD1602_Send_String_XY>:

void I2C_LCD1602_Send_String_XY( char x, char y, char *string )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	603a      	str	r2, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	460b      	mov	r3, r1
 80010f2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD1602_GotoXY( x , y );
 80010f4:	79ba      	ldrb	r2, [r7, #6]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4611      	mov	r1, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ffd4 	bl	80010a8 <I2C_LCD1602_GotoXY>
	I2C_LCD1602_Send_string( string );
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f7ff ffbc 	bl	800107e <I2C_LCD1602_Send_string>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <I2C_LCD1602_Clear>:
void I2C_LCD1602_BlinkOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x01); }
void I2C_LCD1602_CursorOn(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON | 0x02); }
void I2C_LCD1602_CursorOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x02); }

void I2C_LCD1602_Clear()
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
/*	I2C_LCD1602_Send_Command (0x80);
	for (int i=0; i<70; i++)
	{
		I2C_LCD1602_Send_Data (' ');
	}*/
	I2C_LCD1602_Send_Command(ALLCLR); HAL_Delay(1);
 8001112:	2001      	movs	r0, #1
 8001114:	f7ff ff1c 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001118:	2001      	movs	r0, #1
 800111a:	f002 fc35 	bl	8003988 <HAL_Delay>
	I2C_LCD1602_Send_Command(0x80); HAL_Delay(1);
 800111e:	2080      	movs	r0, #128	; 0x80
 8001120:	f7ff ff16 	bl	8000f50 <I2C_LCD1602_Send_Command>
 8001124:	2001      	movs	r0, #1
 8001126:	f002 fc2f 	bl	8003988 <HAL_Delay>
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_TIM_PeriodElapsedCallback>:
#include "SR04.h"

float SR04_Echo_HighTime= 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{	if( htim->Instance == TIM1 ) 	TIM1->SR =0;   }
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d102      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x18>
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40010000 	.word	0x40010000

08001158 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == SR04_ECHO_Pin )
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	2b10      	cmp	r3, #16
 8001166:	d113      	bne.n	8001190 <HAL_GPIO_EXTI_Callback+0x38>
	{
		TIM1->CNT =0;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_GPIO_EXTI_Callback+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
		while( HAL_GPIO_ReadPin( SR04_ECHO_GPIO_Port, SR04_ECHO_Pin) ) {
 800116e:	bf00      	nop
 8001170:	2110      	movs	r1, #16
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <HAL_GPIO_EXTI_Callback+0x44>)
 8001174:	f003 fe24 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f8      	bne.n	8001170 <HAL_GPIO_EXTI_Callback+0x18>
		}
		SR04_Echo_HighTime = TIM1->CNT ;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_GPIO_EXTI_Callback+0x40>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x48>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010000 	.word	0x40010000
 800119c:	40020800 	.word	0x40020800
 80011a0:	20000210 	.word	0x20000210
 80011a4:	00000000 	.word	0x00000000

080011a8 <SR04_Trigger_out>:


float SR04_Trigger_out(char microSec)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	4822      	ldr	r0, [pc, #136]	; (8001240 <SR04_Trigger_out+0x98>)
 80011b8:	f003 fe1a 	bl	8004df0 <HAL_GPIO_WritePin>
	TIM1->CNT =0;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <SR04_Trigger_out+0x9c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24

	while ( TIM1->CNT  < microSec ) {
 80011c2:	e004      	b.n	80011ce <SR04_Trigger_out+0x26>
		HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_SET); // Trigger Pin High for 10u sec
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <SR04_Trigger_out+0x98>)
 80011ca:	f003 fe11 	bl	8004df0 <HAL_GPIO_WritePin>
	while ( TIM1->CNT  < microSec ) {
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <SR04_Trigger_out+0x9c>)
 80011d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3f5      	bcc.n	80011c4 <SR04_Trigger_out+0x1c>
	}

	HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET); // Trigger Pin Low
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <SR04_Trigger_out+0x98>)
 80011de:	f003 fe07 	bl	8004df0 <HAL_GPIO_WritePin>

	HAL_Delay(10);
 80011e2:	200a      	movs	r0, #10
 80011e4:	f002 fbd0 	bl	8003988 <HAL_Delay>

	printf("%6.0f mm\r\n",SR04_Echo_HighTime*0.17 );
 80011e8:	4b17      	ldr	r3, [pc, #92]	; (8001248 <SR04_Trigger_out+0xa0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b3 	bl	8000558 <__aeabi_f2d>
 80011f2:	a311      	add	r3, pc, #68	; (adr r3, 8001238 <SR04_Trigger_out+0x90>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa06 	bl	8000608 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <SR04_Trigger_out+0xa4>)
 8001202:	f006 fab5 	bl	8007770 <iprintf>

	return SR04_Echo_HighTime*0.17;
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <SR04_Trigger_out+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9a4 	bl	8000558 <__aeabi_f2d>
 8001210:	a309      	add	r3, pc, #36	; (adr r3, 8001238 <SR04_Trigger_out+0x90>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9f7 	bl	8000608 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4610      	mov	r0, r2
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fcc9 	bl	8000bb8 <__aeabi_d2f>
 8001226:	4603      	mov	r3, r0
 8001228:	ee07 3a90 	vmov	s15, r3
}
 800122c:	eeb0 0a67 	vmov.f32	s0, s15
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	5c28f5c3 	.word	0x5c28f5c3
 800123c:	3fc5c28f 	.word	0x3fc5c28f
 8001240:	40020800 	.word	0x40020800
 8001244:	40010000 	.word	0x40010000
 8001248:	20000210 	.word	0x20000210
 800124c:	08009d00 	.word	0x08009d00

08001250 <_write>:


// =================  printf function for debugging ======================
extern UART_HandleTypeDef huart2;
int _write(int file, char *data, int len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2,(uint8_t *)data,len,1000);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	b29a      	uxth	r2, r3
 8001260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	4807      	ldr	r0, [pc, #28]	; (8001284 <_write+0x34>)
 8001268:	f005 fb41 	bl	80068ee <HAL_UART_Transmit>
 800126c:	4603      	mov	r3, r0
 800126e:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK ? len : 0);
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <_write+0x2a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e000      	b.n	800127c <_write+0x2c>
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000042c 	.word	0x2000042c

08001288 <Buzzer_OnOff>:

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e012      	b.n	80012bc <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <Buzzer_OnOff+0x48>)
 800129c:	f003 fda8 	bl	8004df0 <HAL_GPIO_WritePin>
 80012a0:	200a      	movs	r0, #10
 80012a2:	f002 fb71 	bl	8003988 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2102      	movs	r1, #2
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <Buzzer_OnOff+0x48>)
 80012ac:	f003 fda0 	bl	8004df0 <HAL_GPIO_WritePin>
 80012b0:	200a      	movs	r0, #10
 80012b2:	f002 fb69 	bl	8003988 <HAL_Delay>
	for(int i=0;i< times ; i++)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	dbe8      	blt.n	8001296 <Buzzer_OnOff+0xe>
	}
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020400 	.word	0x40020400

080012d4 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <Key_input+0x58>)
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f023 030f 	bic.w	r3, r3, #15
 80012e4:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2bf0      	cmp	r3, #240	; 0xf0
 80012ea:	d10d      	bne.n	8001308 <Key_input+0x34>
    { if(key_flag == 0)
 80012ec:	4b10      	ldr	r3, [pc, #64]	; (8001330 <Key_input+0x5c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <Key_input+0x24>
        return key;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	e014      	b.n	8001322 <Key_input+0x4e>
      else
        { HAL_Delay(20);
 80012f8:	2014      	movs	r0, #20
 80012fa:	f002 fb45 	bl	8003988 <HAL_Delay>
          key_flag = 0;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <Key_input+0x5c>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
          return key;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	e00c      	b.n	8001322 <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Key_input+0x5c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	e006      	b.n	8001322 <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f7ff ffb7 	bl	8001288 <Buzzer_OnOff>
          key_flag = 1;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <Key_input+0x5c>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
          return key;
 8001320:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40020400 	.word	0x40020400
 8001330:	20000214 	.word	0x20000214

08001334 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_ADC1_Init+0x98>)
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_ADC1_Init+0x9c>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_ADC1_Init+0x98>)
 800134e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001352:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_ADC1_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_ADC1_Init+0x98>)
 8001362:	2201      	movs	r2, #1
 8001364:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ADC1_Init+0x98>)
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <MX_ADC1_Init+0xa0>)
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_ADC1_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_ADC1_Init+0x98>)
 8001382:	2201      	movs	r2, #1
 8001384:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_ADC1_Init+0x98>)
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_ADC1_Init+0x98>)
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_ADC1_Init+0x98>)
 8001396:	f002 fb1b 	bl	80039d0 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fce2 	bl	8001d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80013ac:	2304      	movs	r3, #4
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_ADC1_Init+0x98>)
 80013b6:	f002 fc5d 	bl	8003c74 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fcd2 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002e8 	.word	0x200002e8
 80013d0:	40012000 	.word	0x40012000
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2f      	ldr	r2, [pc, #188]	; (80014b4 <HAL_ADC_MspInit+0xdc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d157      	bne.n	80014aa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6453      	str	r3, [r2, #68]	; 0x44
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_ADC_MspInit+0xe0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	481d      	ldr	r0, [pc, #116]	; (80014bc <HAL_ADC_MspInit+0xe4>)
 8001446:	f003 fb37 	bl	8004ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_ADC_MspInit+0xec>)
 800144e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001456:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 800145e:	2200      	movs	r2, #0
 8001460:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001468:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 800146c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001470:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001474:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001478:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001480:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 8001490:	f002 ffa2 	bl	80043d8 <HAL_DMA_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800149a:	f000 fc65 	bl	8001d68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38
 80014a4:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <HAL_ADC_MspInit+0xe8>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	20000330 	.word	0x20000330
 80014c4:	40026410 	.word	0x40026410

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_DMA_Init+0x3c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <MX_DMA_Init+0x3c>)
 80014d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_DMA_Init+0x3c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2038      	movs	r0, #56	; 0x38
 80014f0:	f002 ff3b 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014f4:	2038      	movs	r0, #56	; 0x38
 80014f6:	f002 ff54 	bl	80043a2 <HAL_NVIC_EnableIRQ>

}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a4f      	ldr	r2, [pc, #316]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a48      	ldr	r2, [pc, #288]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <MX_GPIO_Init+0x15c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b42      	ldr	r3, [pc, #264]	; (8001664 <MX_GPIO_Init+0x15c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a41      	ldr	r2, [pc, #260]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a3a      	ldr	r2, [pc, #232]	; (8001664 <MX_GPIO_Init+0x15c>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <MX_GPIO_Init+0x15c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2120      	movs	r1, #32
 8001592:	4835      	ldr	r0, [pc, #212]	; (8001668 <MX_GPIO_Init+0x160>)
 8001594:	f003 fc2c 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR04_TRIG_GPIO_Port, SR04_TRIG_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	4833      	ldr	r0, [pc, #204]	; (800166c <MX_GPIO_Init+0x164>)
 800159e:	f003 fc27 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2102      	movs	r1, #2
 80015a6:	4832      	ldr	r0, [pc, #200]	; (8001670 <MX_GPIO_Init+0x168>)
 80015a8:	f003 fc22 	bl	8004df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <MX_GPIO_Init+0x16c>)
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	482a      	ldr	r0, [pc, #168]	; (800166c <MX_GPIO_Init+0x164>)
 80015c2:	f003 fa79 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c6:	2320      	movs	r3, #32
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4822      	ldr	r0, [pc, #136]	; (8001668 <MX_GPIO_Init+0x160>)
 80015de:	f003 fa6b 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_ECHO_Pin;
 80015e2:	2310      	movs	r3, #16
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015e6:	4b24      	ldr	r3, [pc, #144]	; (8001678 <MX_GPIO_Init+0x170>)
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	481d      	ldr	r0, [pc, #116]	; (800166c <MX_GPIO_Init+0x164>)
 80015f6:	f003 fa5f 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR04_TRIG_Pin;
 80015fa:	2320      	movs	r3, #32
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4816      	ldr	r0, [pc, #88]	; (800166c <MX_GPIO_Init+0x164>)
 8001612:	f003 fa51 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001616:	2302      	movs	r3, #2
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161a:	2301      	movs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4810      	ldr	r0, [pc, #64]	; (8001670 <MX_GPIO_Init+0x168>)
 800162e:	f003 fa43 	bl	8004ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 8001632:	23f0      	movs	r3, #240	; 0xf0
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <MX_GPIO_Init+0x168>)
 8001646:	f003 fa37 	bl	8004ab8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	200a      	movs	r0, #10
 8001650:	f002 fe8b 	bl	800436a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001654:	200a      	movs	r0, #10
 8001656:	f002 fea4 	bl	80043a2 <HAL_NVIC_EnableIRQ>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020800 	.word	0x40020800
 8001670:	40020400 	.word	0x40020400
 8001674:	10210000 	.word	0x10210000
 8001678:	10110000 	.word	0x10110000

0800167c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_I2C1_Init+0x50>)
 8001682:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <MX_I2C1_Init+0x54>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_I2C1_Init+0x50>)
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <MX_I2C1_Init+0x58>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_I2C1_Init+0x50>)
 800169a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800169e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_I2C1_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_I2C1_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_I2C1_Init+0x50>)
 80016ba:	f003 fbcb 	bl	8004e54 <HAL_I2C_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016c4:	f000 fb50 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000390 	.word	0x20000390
 80016d0:	40005400 	.word	0x40005400
 80016d4:	000186a0 	.word	0x000186a0

080016d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_I2C_MspInit+0x84>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12c      	bne.n	8001754 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001716:	f44f 7340 	mov.w	r3, #768	; 0x300
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171c:	2312      	movs	r3, #18
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001720:	2301      	movs	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001728:	2304      	movs	r3, #4
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <HAL_I2C_MspInit+0x8c>)
 8001734:	f003 f9c0 	bl	8004ab8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_I2C_MspInit+0x88>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_I2C_MspInit+0x88>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	; 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40005400 	.word	0x40005400
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <Time_count>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status);
void Time_count()
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
	Second++;
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <Time_count+0x5c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <Time_count+0x5c>)
 8001776:	701a      	strb	r2, [r3, #0]
	if( Second > 59 )	{
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <Time_count+0x5c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b3b      	cmp	r3, #59	; 0x3b
 800177e:	d908      	bls.n	8001792 <Time_count+0x2a>
	  Minute ++;		Second = 0;
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <Time_count+0x60>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <Time_count+0x60>)
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <Time_count+0x5c>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	}
	if (Minute > 59 ) 	{
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <Time_count+0x60>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b3b      	cmp	r3, #59	; 0x3b
 8001798:	d908      	bls.n	80017ac <Time_count+0x44>
	  Hour++;			 Minute =0;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <Time_count+0x64>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <Time_count+0x64>)
 80017a4:	701a      	strb	r2, [r3, #0]
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <Time_count+0x60>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	}
	if( Hour > 11) Hour = 0;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <Time_count+0x64>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0b      	cmp	r3, #11
 80017b2:	d902      	bls.n	80017ba <Time_count+0x52>
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <Time_count+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000256 	.word	0x20000256
 80017c8:	20000255 	.word	0x20000255
 80017cc:	20000254 	.word	0x20000254

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f002 f865 	bl	80038a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f8b9 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f7ff fe93 	bl	8001508 <MX_GPIO_Init>
  MX_DMA_Init();
 80017e2:	f7ff fe71 	bl	80014c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017e6:	f000 fc71 	bl	80020cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017ea:	f7ff fda3 	bl	8001334 <MX_ADC1_Init>
  MX_I2C1_Init();
 80017ee:	f7ff ff45 	bl	800167c <MX_I2C1_Init>
  MX_TIM1_Init();
 80017f2:	f000 fbf3 	bl	8001fdc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  printf("Start Init\r\n");
 80017f6:	4848      	ldr	r0, [pc, #288]	; (8001918 <main+0x148>)
 80017f8:	f006 f840 	bl	800787c <puts>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2201      	movs	r2, #1
 8001802:	4619      	mov	r1, r3
 8001804:	4845      	ldr	r0, [pc, #276]	; (800191c <main+0x14c>)
 8001806:	f002 f927 	bl	8003a58 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 800180a:	4845      	ldr	r0, [pc, #276]	; (8001920 <main+0x150>)
 800180c:	f004 fc30 	bl	8006070 <HAL_TIM_Base_Start_IT>

  u8g_InitComFn(&u8g,&u8g_dev_ssd1306_128x64_i2c,u8g_com_hw_i2c_fn);
 8001810:	4a44      	ldr	r2, [pc, #272]	; (8001924 <main+0x154>)
 8001812:	4945      	ldr	r1, [pc, #276]	; (8001928 <main+0x158>)
 8001814:	4845      	ldr	r0, [pc, #276]	; (800192c <main+0x15c>)
 8001816:	f001 fc38 	bl	800308a <u8g_InitComFn>

  I2C_LCD1602_Init();
 800181a:	f7ff fbf9 	bl	8001010 <I2C_LCD1602_Init>

  I2C_LCD1602_Send_String_XY( 0 , 0, "Welcom Zeus");
 800181e:	4a44      	ldr	r2, [pc, #272]	; (8001930 <main+0x160>)
 8001820:	2100      	movs	r1, #0
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff fc5e 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
  I2C_LCD1602_Send_String_XY( 0 , 1, "I2C PCF8574");
 8001828:	4a42      	ldr	r2, [pc, #264]	; (8001934 <main+0x164>)
 800182a:	2101      	movs	r1, #1
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fc59 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
  HAL_Delay(2000);
 8001832:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001836:	f002 f8a7 	bl	8003988 <HAL_Delay>
  I2C_LCD1602_Clear();
 800183a:	f7ff fc68 	bl	800110e <I2C_LCD1602_Clear>

  sprintf( str, "start");
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	493d      	ldr	r1, [pc, #244]	; (8001938 <main+0x168>)
 8001842:	4618      	mov	r0, r3
 8001844:	f006 f822 	bl	800788c <siprintf>
  I2C_LCD1602_Send_string(str);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc17 	bl	800107e <I2C_LCD1602_Send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fd19 	bl	8001288 <Buzzer_OnOff>

  uint16_t AvgAdc=0;
 8001856:	2300      	movs	r3, #0
 8001858:	83bb      	strh	r3, [r7, #28]
  uint16_t count = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	83fb      	strh	r3, [r7, #30]

  float distance=0;
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  distance = SR04_Trigger_out(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f7ff fc9f 	bl	80011a8 <SR04_Trigger_out>
 800186a:	ed87 0a06 	vstr	s0, [r7, #24]
	  sprintf(str, "%5d mm",(int)distance );
 800186e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	ee17 2a90 	vmov	r2, s15
 800187c:	492f      	ldr	r1, [pc, #188]	; (800193c <main+0x16c>)
 800187e:	4618      	mov	r0, r3
 8001880:	f006 f804 	bl	800788c <siprintf>

	  u8g_xyputs( 10, 55, str,count++);
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	83fa      	strh	r2, [r7, #30]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	1d3a      	adds	r2, r7, #4
 800188e:	2137      	movs	r1, #55	; 0x37
 8001890:	200a      	movs	r0, #10
 8001892:	f000 f9f5 	bl	8001c80 <u8g_xyputs>
	  	  Time_count();
 8001896:	f7ff ff67 	bl	8001768 <Time_count>
	  	  if( count >100 ) count = 0;
 800189a:	8bfb      	ldrh	r3, [r7, #30]
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d901      	bls.n	80018a4 <main+0xd4>
 80018a0:	2300      	movs	r3, #0
 80018a2:	83fb      	strh	r3, [r7, #30]


	  u8g_xyputs( 10, 55, &str[0] ,count++);
 80018a4:	8bfb      	ldrh	r3, [r7, #30]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	83fa      	strh	r2, [r7, #30]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	2137      	movs	r1, #55	; 0x37
 80018b0:	200a      	movs	r0, #10
 80018b2:	f000 f9e5 	bl	8001c80 <u8g_xyputs>

	  Time_count();
 80018b6:	f7ff ff57 	bl	8001768 <Time_count>
	  if( count >100 ) count = 0;
 80018ba:	8bfb      	ldrh	r3, [r7, #30]
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d901      	bls.n	80018c4 <main+0xf4>
 80018c0:	2300      	movs	r3, #0
 80018c2:	83fb      	strh	r3, [r7, #30]

	  //HAL_Delay(500);



	  switch( Key_input() ) {
 80018c4:	f7ff fd06 	bl	80012d4 <Key_input>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2be0      	cmp	r3, #224	; 0xe0
 80018cc:	d00f      	beq.n	80018ee <main+0x11e>
 80018ce:	2be0      	cmp	r3, #224	; 0xe0
 80018d0:	dc1f      	bgt.n	8001912 <main+0x142>
 80018d2:	2bd0      	cmp	r3, #208	; 0xd0
 80018d4:	d011      	beq.n	80018fa <main+0x12a>
 80018d6:	2bd0      	cmp	r3, #208	; 0xd0
 80018d8:	dc1b      	bgt.n	8001912 <main+0x142>
 80018da:	2b70      	cmp	r3, #112	; 0x70
 80018dc:	d013      	beq.n	8001906 <main+0x136>
 80018de:	2bb0      	cmp	r3, #176	; 0xb0
 80018e0:	d117      	bne.n	8001912 <main+0x142>
	  case KEY_UP:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "UP    pressed");
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <main+0x170>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fbfc 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 80018ec:	e012      	b.n	8001914 <main+0x144>

	  case KEY_DOWN:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "DOWN  pressed");
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <main+0x174>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fbf6 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 80018f8:	e00c      	b.n	8001914 <main+0x144>

	  case KEY_RIGHT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "RIGHT pressed");
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <main+0x178>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fbf0 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001904:	e006      	b.n	8001914 <main+0x144>

	  case KEY_LEFT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "LEFT  pressed");
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <main+0x17c>)
 8001908:	2101      	movs	r1, #1
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fbea 	bl	80010e4 <I2C_LCD1602_Send_String_XY>
		  break;
 8001910:	e000      	b.n	8001914 <main+0x144>

	  default:
		  break;
 8001912:	bf00      	nop
	  distance = SR04_Trigger_out(10);
 8001914:	e7a6      	b.n	8001864 <main+0x94>
 8001916:	bf00      	nop
 8001918:	08009d0c 	.word	0x08009d0c
 800191c:	200002e8 	.word	0x200002e8
 8001920:	200003e4 	.word	0x200003e4
 8001924:	080021b1 	.word	0x080021b1
 8001928:	20000010 	.word	0x20000010
 800192c:	20000218 	.word	0x20000218
 8001930:	08009d18 	.word	0x08009d18
 8001934:	08009d24 	.word	0x08009d24
 8001938:	08009d30 	.word	0x08009d30
 800193c:	08009d38 	.word	0x08009d38
 8001940:	08009d40 	.word	0x08009d40
 8001944:	08009d50 	.word	0x08009d50
 8001948:	08009d60 	.word	0x08009d60
 800194c:	08009d70 	.word	0x08009d70

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	; 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2230      	movs	r2, #48	; 0x30
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f005 fa94 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <SystemClock_Config+0xcc>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <SystemClock_Config+0xcc>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <SystemClock_Config+0xcc>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <SystemClock_Config+0xd0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800199c:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <SystemClock_Config+0xd0>)
 800199e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ba:	2302      	movs	r3, #2
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c4:	2308      	movs	r3, #8
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80019c8:	2354      	movs	r3, #84	; 0x54
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fe87 	bl	80056ec <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019e4:	f000 f9c0 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ec:	2302      	movs	r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2102      	movs	r1, #2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f004 f8e9 	bl	8005bdc <HAL_RCC_ClockConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a10:	f000 f9aa 	bl	8001d68 <Error_Handler>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3750      	adds	r7, #80	; 0x50
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000

08001a24 <u8g_battery_status>:

/* USER CODE BEGIN 4 */

void u8g_battery_status(uint8_t x, uint8_t y, uint8_t percentage)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	71bb      	strb	r3, [r7, #6]
 8001a32:	4613      	mov	r3, r2
 8001a34:	717b      	strb	r3, [r7, #5]
	char str[5];
	u8g_DrawFrame(&u8g, x, y, 18, 7); // battery����
 8001a36:	79ba      	ldrb	r2, [r7, #6]
 8001a38:	79f9      	ldrb	r1, [r7, #7]
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2312      	movs	r3, #18
 8001a40:	488c      	ldr	r0, [pc, #560]	; (8001c74 <u8g_battery_status+0x250>)
 8001a42:	f001 fe93 	bl	800376c <u8g_DrawFrame>
	u8g_DrawFrame(&u8g, x+18,y+(5/2), 2,3); //battery����ǥ��
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	3312      	adds	r3, #18
 8001a4a:	b2d9      	uxtb	r1, r3
 8001a4c:	79bb      	ldrb	r3, [r7, #6]
 8001a4e:	3302      	adds	r3, #2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	2303      	movs	r3, #3
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2302      	movs	r3, #2
 8001a58:	4886      	ldr	r0, [pc, #536]	; (8001c74 <u8g_battery_status+0x250>)
 8001a5a:	f001 fe87 	bl	800376c <u8g_DrawFrame>
	uint8_t battery_step = 5;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	73fb      	strb	r3, [r7, #15]
	if( percentage > 90 ) 		battery_step =5;
 8001a62:	797b      	ldrb	r3, [r7, #5]
 8001a64:	2b5a      	cmp	r3, #90	; 0x5a
 8001a66:	d902      	bls.n	8001a6e <u8g_battery_status+0x4a>
 8001a68:	2305      	movs	r3, #5
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e01c      	b.n	8001aa8 <u8g_battery_status+0x84>
	else if (percentage <= 10 )	battery_step =0;
 8001a6e:	797b      	ldrb	r3, [r7, #5]
 8001a70:	2b0a      	cmp	r3, #10
 8001a72:	d802      	bhi.n	8001a7a <u8g_battery_status+0x56>
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e016      	b.n	8001aa8 <u8g_battery_status+0x84>
	else if (percentage <= 20 )	battery_step =1;
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	2b14      	cmp	r3, #20
 8001a7e:	d802      	bhi.n	8001a86 <u8g_battery_status+0x62>
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e010      	b.n	8001aa8 <u8g_battery_status+0x84>
	else if (percentage <= 40 )	battery_step =2;
 8001a86:	797b      	ldrb	r3, [r7, #5]
 8001a88:	2b28      	cmp	r3, #40	; 0x28
 8001a8a:	d802      	bhi.n	8001a92 <u8g_battery_status+0x6e>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e00a      	b.n	8001aa8 <u8g_battery_status+0x84>
	else if (percentage <= 60 )	battery_step =3;
 8001a92:	797b      	ldrb	r3, [r7, #5]
 8001a94:	2b3c      	cmp	r3, #60	; 0x3c
 8001a96:	d802      	bhi.n	8001a9e <u8g_battery_status+0x7a>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e004      	b.n	8001aa8 <u8g_battery_status+0x84>
	else if (percentage <= 80 )	battery_step =4;
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	2b50      	cmp	r3, #80	; 0x50
 8001aa2:	d801      	bhi.n	8001aa8 <u8g_battery_status+0x84>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	73fb      	strb	r3, [r7, #15]

	switch( battery_step )
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	f200 80c6 	bhi.w	8001c3e <u8g_battery_status+0x21a>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <u8g_battery_status+0x94>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001acd 	.word	0x08001acd
 8001abc:	08001ae7 	.word	0x08001ae7
 8001ac0:	08001b19 	.word	0x08001b19
 8001ac4:	08001b63 	.word	0x08001b63
 8001ac8:	08001bc5 	.word	0x08001bc5
	{
	case 1:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	b2d9      	uxtb	r1, r3
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	2305      	movs	r3, #5
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2302      	movs	r3, #2
 8001ade:	4865      	ldr	r0, [pc, #404]	; (8001c74 <u8g_battery_status+0x250>)
 8001ae0:	f001 fe8a 	bl	80037f8 <u8g_draw_box>
		break;
 8001ae4:	e0ab      	b.n	8001c3e <u8g_battery_status+0x21a>
	case 2:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	b2d9      	uxtb	r1, r3
 8001aec:	79bb      	ldrb	r3, [r7, #6]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	2305      	movs	r3, #5
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2302      	movs	r3, #2
 8001af8:	485e      	ldr	r0, [pc, #376]	; (8001c74 <u8g_battery_status+0x250>)
 8001afa:	f001 fe7d 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	3305      	adds	r3, #5
 8001b02:	b2d9      	uxtb	r1, r3
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	4858      	ldr	r0, [pc, #352]	; (8001c74 <u8g_battery_status+0x250>)
 8001b12:	f001 fe71 	bl	80037f8 <u8g_draw_box>
		break;
 8001b16:	e092      	b.n	8001c3e <u8g_battery_status+0x21a>
	case 3:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	2305      	movs	r3, #5
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	4852      	ldr	r0, [pc, #328]	; (8001c74 <u8g_battery_status+0x250>)
 8001b2c:	f001 fe64 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	3305      	adds	r3, #5
 8001b34:	b2d9      	uxtb	r1, r3
 8001b36:	79bb      	ldrb	r3, [r7, #6]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	2305      	movs	r3, #5
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2302      	movs	r3, #2
 8001b42:	484c      	ldr	r0, [pc, #304]	; (8001c74 <u8g_battery_status+0x250>)
 8001b44:	f001 fe58 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	b2d9      	uxtb	r1, r3
 8001b4e:	79bb      	ldrb	r3, [r7, #6]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	2305      	movs	r3, #5
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	4846      	ldr	r0, [pc, #280]	; (8001c74 <u8g_battery_status+0x250>)
 8001b5c:	f001 fe4c 	bl	80037f8 <u8g_draw_box>
		break;
 8001b60:	e06d      	b.n	8001c3e <u8g_battery_status+0x21a>
	case 4:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	3302      	adds	r3, #2
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	2305      	movs	r3, #5
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2302      	movs	r3, #2
 8001b74:	483f      	ldr	r0, [pc, #252]	; (8001c74 <u8g_battery_status+0x250>)
 8001b76:	f001 fe3f 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	3305      	adds	r3, #5
 8001b7e:	b2d9      	uxtb	r1, r3
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	2305      	movs	r3, #5
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	4839      	ldr	r0, [pc, #228]	; (8001c74 <u8g_battery_status+0x250>)
 8001b8e:	f001 fe33 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	3308      	adds	r3, #8
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	79bb      	ldrb	r3, [r7, #6]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	4833      	ldr	r0, [pc, #204]	; (8001c74 <u8g_battery_status+0x250>)
 8001ba6:	f001 fe27 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	330b      	adds	r3, #11
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	482d      	ldr	r0, [pc, #180]	; (8001c74 <u8g_battery_status+0x250>)
 8001bbe:	f001 fe1b 	bl	80037f8 <u8g_draw_box>
		break;
 8001bc2:	e03c      	b.n	8001c3e <u8g_battery_status+0x21a>
	case 5:
		u8g_draw_box(&u8g,x+2,y+1,2,5);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	4827      	ldr	r0, [pc, #156]	; (8001c74 <u8g_battery_status+0x250>)
 8001bd8:	f001 fe0e 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+5,y+1,2,5);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3305      	adds	r3, #5
 8001be0:	b2d9      	uxtb	r1, r3
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	2305      	movs	r3, #5
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2302      	movs	r3, #2
 8001bee:	4821      	ldr	r0, [pc, #132]	; (8001c74 <u8g_battery_status+0x250>)
 8001bf0:	f001 fe02 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+8,y+1,2,5);
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	b2d9      	uxtb	r1, r3
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	2305      	movs	r3, #5
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	481b      	ldr	r0, [pc, #108]	; (8001c74 <u8g_battery_status+0x250>)
 8001c08:	f001 fdf6 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+11,y+1,2,5);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	330b      	adds	r3, #11
 8001c10:	b2d9      	uxtb	r1, r3
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	2305      	movs	r3, #5
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	4815      	ldr	r0, [pc, #84]	; (8001c74 <u8g_battery_status+0x250>)
 8001c20:	f001 fdea 	bl	80037f8 <u8g_draw_box>
		u8g_draw_box(&u8g,x+14,y+1,2,5);
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	330e      	adds	r3, #14
 8001c28:	b2d9      	uxtb	r1, r3
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	2305      	movs	r3, #5
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2302      	movs	r3, #2
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <u8g_battery_status+0x250>)
 8001c38:	f001 fdde 	bl	80037f8 <u8g_draw_box>
		break;
 8001c3c:	bf00      	nop
	}
	u8g_SetFont( &u8g, u8g_font_courB08 );
 8001c3e:	490e      	ldr	r1, [pc, #56]	; (8001c78 <u8g_battery_status+0x254>)
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <u8g_battery_status+0x250>)
 8001c42:	f001 f8b7 	bl	8002db4 <u8g_SetFont>
	sprintf( str, "%d%%",percentage);
 8001c46:	797a      	ldrb	r2, [r7, #5]
 8001c48:	f107 0308 	add.w	r3, r7, #8
 8001c4c:	490b      	ldr	r1, [pc, #44]	; (8001c7c <u8g_battery_status+0x258>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f005 fe1c 	bl	800788c <siprintf>
	u8g_DrawStr( &u8g,  x-25,  y+7, str );
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	3b19      	subs	r3, #25
 8001c58:	b2d9      	uxtb	r1, r3
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	3307      	adds	r3, #7
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	f107 0308 	add.w	r3, r7, #8
 8001c64:	4803      	ldr	r0, [pc, #12]	; (8001c74 <u8g_battery_status+0x250>)
 8001c66:	f000 ffe0 	bl	8002c2a <u8g_DrawStr>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000218 	.word	0x20000218
 8001c78:	08009dfc 	.word	0x08009dfc
 8001c7c:	08009d80 	.word	0x08009d80

08001c80 <u8g_xyputs>:
void u8g_xyputs( uint8_t x, uint8_t y, char *str, uint8_t battery_status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	603a      	str	r2, [r7, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	71bb      	strb	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	717b      	strb	r3, [r7, #5]
	char Str_HM[20],Str_Sec[10];
	sprintf( Str_HM, "%02d:%02d", Hour, Minute);
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <u8g_xyputs+0xc4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <u8g_xyputs+0xc8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	f107 0014 	add.w	r0, r7, #20
 8001ca4:	4929      	ldr	r1, [pc, #164]	; (8001d4c <u8g_xyputs+0xcc>)
 8001ca6:	f005 fdf1 	bl	800788c <siprintf>
	sprintf( Str_Sec, "%02d", Second);
 8001caa:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <u8g_xyputs+0xd0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	4927      	ldr	r1, [pc, #156]	; (8001d54 <u8g_xyputs+0xd4>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 fde8 	bl	800788c <siprintf>
	u8g_FirstPage(&u8g);
 8001cbc:	4826      	ldr	r0, [pc, #152]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cbe:	f001 f9fc 	bl	80030ba <u8g_FirstPage>
	do
	{
		u8g_SetFont( &u8g, u8g_font_courB10 );
 8001cc2:	4926      	ldr	r1, [pc, #152]	; (8001d5c <u8g_xyputs+0xdc>)
 8001cc4:	4824      	ldr	r0, [pc, #144]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cc6:	f001 f875 	bl	8002db4 <u8g_SetFont>
		u8g_DrawStr( &u8g,  x,  y, str );
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	79f9      	ldrb	r1, [r7, #7]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4821      	ldr	r0, [pc, #132]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cd2:	f000 ffaa 	bl	8002c2a <u8g_DrawStr>

		//u8g_DrawBitmap(&u8g,10,1,16,52,Zeus_logo);
		u8g_SetFont( &u8g, u8g_font_osb21 );
 8001cd6:	4922      	ldr	r1, [pc, #136]	; (8001d60 <u8g_xyputs+0xe0>)
 8001cd8:	481f      	ldr	r0, [pc, #124]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cda:	f001 f86b 	bl	8002db4 <u8g_SetFont>
		u8g_DrawStr( &u8g, 35,40,&Str_HM[0]);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	2228      	movs	r2, #40	; 0x28
 8001ce4:	2123      	movs	r1, #35	; 0x23
 8001ce6:	481c      	ldr	r0, [pc, #112]	; (8001d58 <u8g_xyputs+0xd8>)
 8001ce8:	f000 ff9f 	bl	8002c2a <u8g_DrawStr>

		u8g_SetFont( &u8g, u8g_font_gdb11 );
 8001cec:	491d      	ldr	r1, [pc, #116]	; (8001d64 <u8g_xyputs+0xe4>)
 8001cee:	481a      	ldr	r0, [pc, #104]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cf0:	f001 f860 	bl	8002db4 <u8g_SetFont>
		u8g_DrawStr( &u8g, 108,38,&Str_Sec[0]);
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	2226      	movs	r2, #38	; 0x26
 8001cfa:	216c      	movs	r1, #108	; 0x6c
 8001cfc:	4816      	ldr	r0, [pc, #88]	; (8001d58 <u8g_xyputs+0xd8>)
 8001cfe:	f000 ff94 	bl	8002c2a <u8g_DrawStr>

		u8g_battery_status(100,6,battery_status);
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	461a      	mov	r2, r3
 8001d06:	2106      	movs	r1, #6
 8001d08:	2064      	movs	r0, #100	; 0x64
 8001d0a:	f7ff fe8b 	bl	8001a24 <u8g_battery_status>


		u8g_DrawFrame(&u8g,2,2,126,62);
 8001d0e:	233e      	movs	r3, #62	; 0x3e
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	237e      	movs	r3, #126	; 0x7e
 8001d14:	2202      	movs	r2, #2
 8001d16:	2102      	movs	r1, #2
 8001d18:	480f      	ldr	r0, [pc, #60]	; (8001d58 <u8g_xyputs+0xd8>)
 8001d1a:	f001 fd27 	bl	800376c <u8g_DrawFrame>
		u8g_DrawFrame(&u8g,1,1,127,63);
 8001d1e:	233f      	movs	r3, #63	; 0x3f
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	237f      	movs	r3, #127	; 0x7f
 8001d24:	2201      	movs	r2, #1
 8001d26:	2101      	movs	r1, #1
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <u8g_xyputs+0xd8>)
 8001d2a:	f001 fd1f 	bl	800376c <u8g_DrawFrame>
	} while( u8g_NextPage(&u8g));
 8001d2e:	480a      	ldr	r0, [pc, #40]	; (8001d58 <u8g_xyputs+0xd8>)
 8001d30:	f001 f9d1 	bl	80030d6 <u8g_NextPage>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1c3      	bne.n	8001cc2 <u8g_xyputs+0x42>
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000254 	.word	0x20000254
 8001d48:	20000255 	.word	0x20000255
 8001d4c:	08009d88 	.word	0x08009d88
 8001d50:	20000256 	.word	0x20000256
 8001d54:	08009d94 	.word	0x08009d94
 8001d58:	20000218 	.word	0x20000218
 8001d5c:	0800a778 	.word	0x0800a778
 8001d60:	0800c570 	.word	0x0800c570
 8001d64:	0800b494 	.word	0x0800b494

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001db6:	2006      	movs	r0, #6
 8001db8:	f002 facc 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <MemManage_Handler+0x4>

08001de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <BusFault_Handler+0x4>

08001de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <UsageFault_Handler+0x4>

08001dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1c:	f001 fd94 	bl	8003948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f002 fffb 	bl	8004e24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e3a:	f004 f97b 	bl	8006134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003e4 	.word	0x200003e4

08001e48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA2_Stream0_IRQHandler+0x10>)
 8001e4e:	f002 fbc9 	bl	80045e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000330 	.word	0x20000330

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
	return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_kill>:

int _kill(int pid, int sig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e76:	f004 ffdf 	bl	8006e38 <__errno>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2216      	movs	r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_exit>:

void _exit (int status)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e94:	f04f 31ff 	mov.w	r1, #4294967295
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x12>

08001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb2:	f3af 8000 	nop.w
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
	}

return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f02:	605a      	str	r2, [r3, #4]
	return 0;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_isatty>:

int _isatty(int file)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	return 1;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <_sbrk+0x5c>)
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <_sbrk+0x60>)
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <_sbrk+0x64>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <_sbrk+0x64>)
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <_sbrk+0x68>)
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d207      	bcs.n	8001f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f74:	f004 ff60 	bl	8006e38 <__errno>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e009      	b.n	8001f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_sbrk+0x64>)
 8001f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20018000 	.word	0x20018000
 8001fa4:	00000400 	.word	0x00000400
 8001fa8:	20000258 	.word	0x20000258
 8001fac:	20000488 	.word	0x20000488

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <SystemInit+0x28>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <SystemInit+0x28>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SystemInit+0x28>)
 8001fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fca:	609a      	str	r2, [r3, #8]
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe2:	f107 0308 	add.w	r3, r7, #8
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff0:	463b      	mov	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_TIM1_Init+0x98>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <MX_TIM1_Init+0x9c>)
 8001ffc:	601a      	str	r2, [r3, #0]

  htim1.Init.Prescaler = 84-1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM1_Init+0x98>)
 8002000:	2253      	movs	r2, #83	; 0x53
 8002002:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_TIM1_Init+0x98>)
 800200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_TIM1_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_TIM1_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_TIM1_Init+0x98>)
 8002026:	f003 ffd3 	bl	8005fd0 <HAL_TIM_Base_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002030:	f7ff fe9a 	bl	8001d68 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	60bb      	str	r3, [r7, #8]

  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800203a:	f107 0308 	add.w	r3, r7, #8
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <MX_TIM1_Init+0x98>)
 8002042:	f004 f97f 	bl	8006344 <HAL_TIM_ConfigClockSource>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800204c:	f7ff fe8c 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002058:	463b      	mov	r3, r7
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_TIM1_Init+0x98>)
 800205e:	f004 fb77 	bl	8006750 <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002068:	f7ff fe7e 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200003e4 	.word	0x200003e4
 8002078:	40010000 	.word	0x40010000

0800207c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]


  if(tim_baseHandle->Instance==TIM1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_TIM_Base_MspInit+0x48>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d115      	bne.n	80020ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_TIM_Base_MspInit+0x4c>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6453      	str	r3, [r2, #68]	; 0x44
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_TIM_Base_MspInit+0x4c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2019      	movs	r0, #25
 80020b0:	f002 f95b 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020b4:	2019      	movs	r0, #25
 80020b6:	f002 f974 	bl	80043a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40023800 	.word	0x40023800

080020cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <MX_USART2_UART_Init+0x50>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_USART2_UART_Init+0x4c>)
 8002104:	f004 fba6 	bl	8006854 <HAL_UART_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800210e:	f7ff fe2b 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000042c 	.word	0x2000042c
 800211c:	40004400 	.word	0x40004400

08002120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	; (80021a4 <HAL_UART_MspInit+0x84>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12b      	bne.n	800219a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_UART_MspInit+0x88>)
 800214c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_UART_MspInit+0x88>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800217a:	230c      	movs	r3, #12
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800218a:	2307      	movs	r3, #7
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_UART_MspInit+0x8c>)
 8002196:	f002 fc8f 	bl	8004ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40004400 	.word	0x40004400
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000

080021b0 <u8g_com_hw_i2c_fn>:
	 usleep(10);
 }
   
   
 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)  
 {  
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	f107 040c 	add.w	r4, r7, #12
 80021bc:	6020      	str	r0, [r4, #0]
 80021be:	4608      	mov	r0, r1
 80021c0:	4611      	mov	r1, r2
 80021c2:	1d3a      	adds	r2, r7, #4
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	f107 030b 	add.w	r3, r7, #11
 80021ca:	4602      	mov	r2, r0
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	f107 030a 	add.w	r3, r7, #10
 80021d2:	460a      	mov	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
  switch(msg)  
 80021d6:	f107 030b 	add.w	r3, r7, #11
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b07      	cmp	r3, #7
 80021de:	d86a      	bhi.n	80022b6 <u8g_com_hw_i2c_fn+0x106>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <u8g_com_hw_i2c_fn+0x38>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080022b7 	.word	0x080022b7
 80021ec:	080022b7 	.word	0x080022b7
 80021f0:	08002209 	.word	0x08002209
 80021f4:	080022b7 	.word	0x080022b7
 80021f8:	080022b7 	.word	0x080022b7
 80021fc:	08002223 	.word	0x08002223
 8002200:	0800224b 	.word	0x0800224b
 8002204:	0800224b 	.word	0x0800224b
    break;  
   
   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
	   //HAL_Delay(1);
	   //u8g_10MicroDelay();
    if (arg_val == 0)  
 8002208:	f107 030a 	add.w	r3, r7, #10
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <u8g_com_hw_i2c_fn+0x6a>
    {  
         control = 0;  
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <u8g_com_hw_i2c_fn+0x114>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
    }  
    else  
    {  
         control = 0x40;  
    }  
    break;  
 8002218:	e04d      	b.n	80022b6 <u8g_com_hw_i2c_fn+0x106>
         control = 0x40;  
 800221a:	4b2a      	ldr	r3, [pc, #168]	; (80022c4 <u8g_com_hw_i2c_fn+0x114>)
 800221c:	2240      	movs	r2, #64	; 0x40
 800221e:	701a      	strb	r2, [r3, #0]
    break;  
 8002220:	e049      	b.n	80022b6 <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_BYTE:  
   {  
        uint8_t buffer[2];  
        buffer[0] = control;  
 8002222:	4b28      	ldr	r3, [pc, #160]	; (80022c4 <u8g_com_hw_i2c_fn+0x114>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f887 33fc 	strb.w	r3, [r7, #1020]	; 0x3fc
        buffer[1] = arg_val;  
 800222a:	f107 030a 	add.w	r3, r7, #10
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f887 33fd 	strb.w	r3, [r7, #1021]	; 0x3fd
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);  
 8002234:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8002238:	f242 7310 	movw	r3, #10000	; 0x2710
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2178      	movs	r1, #120	; 0x78
 8002242:	4821      	ldr	r0, [pc, #132]	; (80022c8 <u8g_com_hw_i2c_fn+0x118>)
 8002244:	f002 ff4a 	bl	80050dc <HAL_I2C_Master_Transmit>
   }  
        break;  
 8002248:	e035      	b.n	80022b6 <u8g_com_hw_i2c_fn+0x106>
   
   case U8G_COM_MSG_WRITE_SEQ:  
   case U8G_COM_MSG_WRITE_SEQ_P:  
   {  
        uint8_t buffer[DATA_BUFFER_SIZE];  
           uint8_t *ptr = arg_ptr;  
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
           buffer[0] = control;  
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <u8g_com_hw_i2c_fn+0x114>)
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 800225c:	2301      	movs	r3, #1
 800225e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002262:	e011      	b.n	8002288 <u8g_com_hw_i2c_fn+0xd8>
           {  
                buffer[i] = *(ptr++);
 8002264:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 800226e:	7819      	ldrb	r1, [r3, #0]
 8002270:	f107 0214 	add.w	r2, r7, #20
 8002274:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002278:	4413      	add	r3, r2
 800227a:	460a      	mov	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
           for (int i = 1; i <= arg_val; i++)
 800227e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002288:	f107 030a 	add.w	r3, r7, #10
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8002292:	429a      	cmp	r2, r3
 8002294:	dde6      	ble.n	8002264 <u8g_com_hw_i2c_fn+0xb4>
           }  
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val+1, I2C_TIMEOUT);  
 8002296:	f107 030a 	add.w	r3, r7, #10
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f107 0214 	add.w	r2, r7, #20
 80022a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80022aa:	9100      	str	r1, [sp, #0]
 80022ac:	2178      	movs	r1, #120	; 0x78
 80022ae:	4806      	ldr	r0, [pc, #24]	; (80022c8 <u8g_com_hw_i2c_fn+0x118>)
 80022b0:	f002 ff14 	bl	80050dc <HAL_I2C_Master_Transmit>
   }  
   
    break;  
 80022b4:	bf00      	nop
  }  
  return 1;  
 80022b6:	2301      	movs	r3, #1
 }  
 80022b8:	4618      	mov	r0, r3
 80022ba:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd90      	pop	{r4, r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000025c 	.word	0x2000025c
 80022c8:	20000390 	.word	0x20000390

080022cc <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80022cc:	b490      	push	{r4, r7}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	70fb      	strb	r3, [r7, #3]
 80022de:	460b      	mov	r3, r1
 80022e0:	70bb      	strb	r3, [r7, #2]
 80022e2:	4613      	mov	r3, r2
 80022e4:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 80022e6:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 80022e8:	7e3b      	ldrb	r3, [r7, #24]
 80022ea:	4423      	add	r3, r4
 80022ec:	b2dc      	uxtb	r4, r3
  tmp--;
 80022ee:	4623      	mov	r3, r4
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002300:	73fa      	strb	r2, [r7, #15]
 8002302:	73bb      	strb	r3, [r7, #14]
 8002304:	78bb      	ldrb	r3, [r7, #2]
 8002306:	737b      	strb	r3, [r7, #13]
 8002308:	4623      	mov	r3, r4
 800230a:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 800230c:	7bba      	ldrb	r2, [r7, #14]
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	429a      	cmp	r2, r3
 8002312:	d30d      	bcc.n	8002330 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	7b3b      	ldrb	r3, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d801      	bhi.n	8002320 <u8g_IsBBXIntersection+0x54>
      return 1;
 800231c:	2301      	movs	r3, #1
 800231e:	e014      	b.n	800234a <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8002320:	7b7a      	ldrb	r2, [r7, #13]
 8002322:	7b3b      	ldrb	r3, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d901      	bls.n	800232c <u8g_IsBBXIntersection+0x60>
	return 1;
 8002328:	2301      	movs	r3, #1
 800232a:	e00e      	b.n	800234a <u8g_IsBBXIntersection+0x7e>
	return 0;
 800232c:	2300      	movs	r3, #0
 800232e:	e00c      	b.n	800234a <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	7b3b      	ldrb	r3, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d807      	bhi.n	8002348 <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8002338:	7b7a      	ldrb	r2, [r7, #13]
 800233a:	7b3b      	ldrb	r3, [r7, #12]
 800233c:	429a      	cmp	r2, r3
 800233e:	d901      	bls.n	8002344 <u8g_IsBBXIntersection+0x78>
	return 1;
 8002340:	2301      	movs	r3, #1
 8002342:	e002      	b.n	800234a <u8g_IsBBXIntersection+0x7e>
	return 0;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <u8g_IsBBXIntersection+0x7e>
      return 0;
 8002348:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <u8g_IsBBXIntersection+0x86>
    return 0; 
 800234e:	2300      	movs	r3, #0
 8002350:	e032      	b.n	80023b8 <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8002352:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8002354:	787b      	ldrb	r3, [r7, #1]
 8002356:	4423      	add	r3, r4
 8002358:	b2dc      	uxtb	r4, r3
  tmp--;
 800235a:	4623      	mov	r3, r4
 800235c:	3b01      	subs	r3, #1
 800235e:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800236c:	72fa      	strb	r2, [r7, #11]
 800236e:	72bb      	strb	r3, [r7, #10]
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	727b      	strb	r3, [r7, #9]
 8002374:	4623      	mov	r3, r4
 8002376:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8002378:	7aba      	ldrb	r2, [r7, #10]
 800237a:	7a7b      	ldrb	r3, [r7, #9]
 800237c:	429a      	cmp	r2, r3
 800237e:	d30d      	bcc.n	800239c <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8002380:	7afa      	ldrb	r2, [r7, #11]
 8002382:	7a3b      	ldrb	r3, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d801      	bhi.n	800238c <u8g_IsBBXIntersection+0xc0>
      return 1;
 8002388:	2301      	movs	r3, #1
 800238a:	e014      	b.n	80023b6 <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 800238c:	7a7a      	ldrb	r2, [r7, #9]
 800238e:	7a3b      	ldrb	r3, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	d901      	bls.n	8002398 <u8g_IsBBXIntersection+0xcc>
	return 1;
 8002394:	2301      	movs	r3, #1
 8002396:	e00e      	b.n	80023b6 <u8g_IsBBXIntersection+0xea>
	return 0;
 8002398:	2300      	movs	r3, #0
 800239a:	e00c      	b.n	80023b6 <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 800239c:	7afa      	ldrb	r2, [r7, #11]
 800239e:	7a3b      	ldrb	r3, [r7, #8]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d807      	bhi.n	80023b4 <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 80023a4:	7a7a      	ldrb	r2, [r7, #9]
 80023a6:	7a3b      	ldrb	r3, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d901      	bls.n	80023b0 <u8g_IsBBXIntersection+0xe4>
	return 1;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e002      	b.n	80023b6 <u8g_IsBBXIntersection+0xea>
	return 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e000      	b.n	80023b6 <u8g_IsBBXIntersection+0xea>
      return 0;
 80023b4:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 80023b6:	bf00      	nop
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc90      	pop	{r4, r7}
 80023c0:	4770      	bx	lr

080023c2 <u8g_InitCom>:
#include "u8g_arm.h"

extern void u8g_Delay(uint16_t val);

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 80023c2:	b590      	push	{r4, r7, lr}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	4613      	mov	r3, r2
 80023ce:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	689c      	ldr	r4, [r3, #8]
 80023d4:	79fa      	ldrb	r2, [r7, #7]
 80023d6:	2300      	movs	r3, #0
 80023d8:	2101      	movs	r1, #1
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	47a0      	blx	r4
 80023de:	4603      	mov	r3, r0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	689c      	ldr	r4, [r3, #8]
 80023fa:	79fa      	ldrb	r2, [r7, #7]
 80023fc:	2300      	movs	r3, #0
 80023fe:	2103      	movs	r1, #3
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	47a0      	blx	r4
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689c      	ldr	r4, [r3, #8]
 800241a:	2300      	movs	r3, #0
 800241c:	2200      	movs	r2, #0
 800241e:	2104      	movs	r1, #4
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	47a0      	blx	r4
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bd90      	pop	{r4, r7, pc}

0800242c <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689c      	ldr	r4, [r3, #8]
 800243a:	2300      	movs	r3, #0
 800243c:	2201      	movs	r2, #1
 800243e:	2104      	movs	r1, #4
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}

0800244c <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	689c      	ldr	r4, [r3, #8]
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	2300      	movs	r3, #0
 8002462:	2102      	movs	r1, #2
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	47a0      	blx	r4
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bd90      	pop	{r4, r7, pc}

08002470 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	4613      	mov	r3, r2
 800247c:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	689c      	ldr	r4, [r3, #8]
 8002482:	79fa      	ldrb	r2, [r7, #7]
 8002484:	2300      	movs	r3, #0
 8002486:	2105      	movs	r1, #5
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	47a0      	blx	r4
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}

08002496 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8002496:	b590      	push	{r4, r7, lr}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	689c      	ldr	r4, [r3, #8]
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2106      	movs	r1, #6
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	47a0      	blx	r4
 80024b4:	4603      	mov	r3, r0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}

080024be <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d110      	bne.n	80024fc <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 80024da:	7dbb      	ldrb	r3, [r7, #22]
 80024dc:	2bff      	cmp	r3, #255	; 0xff
 80024de:	d00a      	beq.n	80024f6 <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 80024e0:	7dbb      	ldrb	r3, [r7, #22]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f7ff ffc2 	bl	8002470 <u8g_WriteByte>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d15d      	bne.n	80025ae <u8g_WriteEscSeqP+0xf0>
          return 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e061      	b.n	80025ba <u8g_WriteEscSeqP+0xfc>
      }
      else
      {
        is_escape = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
 80024fa:	e058      	b.n	80025ae <u8g_WriteEscSeqP+0xf0>
      }
    }
    else
    {
      if ( value == 255 )
 80024fc:	7dbb      	ldrb	r3, [r7, #22]
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d10a      	bne.n	8002518 <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8002502:	7dbb      	ldrb	r3, [r7, #22]
 8002504:	461a      	mov	r2, r3
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ffb1 	bl	8002470 <u8g_WriteByte>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d14a      	bne.n	80025aa <u8g_WriteEscSeqP+0xec>
          return 0;
 8002514:	2300      	movs	r3, #0
 8002516:	e050      	b.n	80025ba <u8g_WriteEscSeqP+0xfc>
      }
      else if ( value == 254 )
 8002518:	7dbb      	ldrb	r3, [r7, #22]
 800251a:	2bfe      	cmp	r3, #254	; 0xfe
 800251c:	d04b      	beq.n	80025b6 <u8g_WriteEscSeqP+0xf8>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 800251e:	7dbb      	ldrb	r3, [r7, #22]
 8002520:	2bef      	cmp	r3, #239	; 0xef
 8002522:	d842      	bhi.n	80025aa <u8g_WriteEscSeqP+0xec>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8002524:	7dbb      	ldrb	r3, [r7, #22]
 8002526:	2bdf      	cmp	r3, #223	; 0xdf
 8002528:	d909      	bls.n	800253e <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 800252a:	7dbb      	ldrb	r3, [r7, #22]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff ff88 	bl	800244c <u8g_SetAddress>
 800253c:	e035      	b.n	80025aa <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xd0 )
 800253e:	7dbb      	ldrb	r3, [r7, #22]
 8002540:	2bcf      	cmp	r3, #207	; 0xcf
 8002542:	d909      	bls.n	8002558 <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8002544:	7dbb      	ldrb	r3, [r7, #22]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	b2db      	uxtb	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff ff49 	bl	80023e8 <u8g_SetChipSelect>
 8002556:	e028      	b.n	80025aa <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xc0 )
 8002558:	7dbb      	ldrb	r3, [r7, #22]
 800255a:	2bbf      	cmp	r3, #191	; 0xbf
 800255c:	d91a      	bls.n	8002594 <u8g_WriteEscSeqP+0xd6>
      {
        u8g_SetResetLow(u8g, dev);
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f7ff ff53 	bl	800240c <u8g_SetResetLow>
        value &= 0x0f;
 8002566:	7dbb      	ldrb	r3, [r7, #22]
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 800256e:	7dbb      	ldrb	r3, [r7, #22]
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8002574:	7dbb      	ldrb	r3, [r7, #22]
 8002576:	3302      	adds	r3, #2
 8002578:	75bb      	strb	r3, [r7, #22]
        HAL_Delay(value);
 800257a:	7dbb      	ldrb	r3, [r7, #22]
 800257c:	4618      	mov	r0, r3
 800257e:	f001 fa03 	bl	8003988 <HAL_Delay>
        u8g_SetResetHigh(u8g, dev);
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff ff51 	bl	800242c <u8g_SetResetHigh>
        HAL_Delay(value);
 800258a:	7dbb      	ldrb	r3, [r7, #22]
 800258c:	4618      	mov	r0, r3
 800258e:	f001 f9fb 	bl	8003988 <HAL_Delay>
 8002592:	e00a      	b.n	80025aa <u8g_WriteEscSeqP+0xec>
      }
      else if ( value >= 0xbe )
 8002594:	7dbb      	ldrb	r3, [r7, #22]
 8002596:	2bbd      	cmp	r3, #189	; 0xbd
 8002598:	d807      	bhi.n	80025aa <u8g_WriteEscSeqP+0xec>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 800259a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db03      	blt.n	80025aa <u8g_WriteEscSeqP+0xec>
      {
    	  HAL_Delay(value);
 80025a2:	7dbb      	ldrb	r3, [r7, #22]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f001 f9ef 	bl	8003988 <HAL_Delay>
      }
      is_escape = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 80025b4:	e78b      	b.n	80024ce <u8g_WriteEscSeqP+0x10>
        break;
 80025b6:	bf00      	nop
  }
  return 1;
 80025b8:	2301      	movs	r3, #1
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	72fb      	strb	r3, [r7, #11]
 80025d2:	4613      	mov	r3, r2
 80025d4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	2b06      	cmp	r3, #6
 80025da:	d811      	bhi.n	8002600 <u8g_com_null_fn+0x3c>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <u8g_com_null_fn+0x20>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002601 	.word	0x08002601
 80025e8:	08002601 	.word	0x08002601
 80025ec:	08002601 	.word	0x08002601
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002601 	.word	0x08002601
 80025f8:	08002601 	.word	0x08002601
 80025fc:	08002601 	.word	0x08002601
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	3b0a      	subs	r3, #10
 8002624:	2b0b      	cmp	r3, #11
 8002626:	d85b      	bhi.n	80026e0 <u8g_dev_ssd1306_128x64_fn+0xd0>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <u8g_dev_ssd1306_128x64_fn+0x20>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002661 	.word	0x08002661
 8002634:	080026e1 	.word	0x080026e1
 8002638:	080026e1 	.word	0x080026e1
 800263c:	080026e1 	.word	0x080026e1
 8002640:	080026e1 	.word	0x080026e1
 8002644:	080026e1 	.word	0x080026e1
 8002648:	080026c5 	.word	0x080026c5
 800264c:	080026d3 	.word	0x080026d3
 8002650:	080026e1 	.word	0x080026e1
 8002654:	080026e1 	.word	0x080026e1
 8002658:	080026e1 	.word	0x080026e1
 800265c:	08002677 	.word	0x08002677
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8002660:	2202      	movs	r2, #2
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff feac 	bl	80023c2 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 800266a:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <u8g_dev_ssd1306_128x64_fn+0xe8>)
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff ff25 	bl	80024be <u8g_WriteEscSeqP>
      break;
 8002674:	e034      	b.n	80026e0 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <u8g_dev_ssd1306_128x64_fn+0xec>)
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7ff ff1c 	bl	80024be <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff feeb 	bl	8002470 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 800269a:	2201      	movs	r2, #1
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fed4 	bl	800244c <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	68f9      	ldr	r1, [r7, #12]
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f000 fe53 	bl	8003354 <u8g_pb_WriteBuffer>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e01a      	b.n	80026ee <u8g_dev_ssd1306_128x64_fn+0xde>
        u8g_SetChipSelect(u8g, dev, 0);
 80026b8:	2200      	movs	r2, #0
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff fe93 	bl	80023e8 <u8g_SetChipSelect>
      }
      break;
 80026c2:	e00d      	b.n	80026e0 <u8g_dev_ssd1306_128x64_fn+0xd0>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <u8g_dev_ssd1306_128x64_fn+0xf0>)
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f7ff fef8 	bl	80024be <u8g_WriteEscSeqP>
      return 1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00d      	b.n	80026ee <u8g_dev_ssd1306_128x64_fn+0xde>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 80026d2:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <u8g_dev_ssd1306_128x64_fn+0xf4>)
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fef1 	bl	80024be <u8g_WriteEscSeqP>
      return 1;
 80026dc:	2301      	movs	r3, #1
 80026de:	e006      	b.n	80026ee <u8g_dev_ssd1306_128x64_fn+0xde>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fef4 	bl	80034d4 <u8g_dev_pb8v1_base_fn>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08009db4 	.word	0x08009db4
 80026fc:	08009ddc 	.word	0x08009ddc
 8002700:	08009de4 	.word	0x08009de4
 8002704:	08009df0 	.word	0x08009df0

08002708 <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	81fb      	strh	r3, [r7, #14]
    font++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3301      	adds	r3, #1
 800274a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800274c:	89fb      	ldrh	r3, [r7, #14]
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	b29a      	uxth	r2, r3
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	4413      	add	r3, r2
 800275c:	81fb      	strh	r3, [r7, #14]
    return pos;
 800275e:	89fb      	ldrh	r3, [r7, #14]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffc6 	bl	8002708 <u8g_font_get_byte>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffec 	bl	800276c <u8g_font_GetFormat>
 8002794:	4603      	mov	r3, r0
 8002796:	2b02      	cmp	r3, #2
 8002798:	d00a      	beq.n	80027b0 <u8g_font_GetFontGlyphStructureSize+0x2a>
 800279a:	2b02      	cmp	r3, #2
 800279c:	dc0a      	bgt.n	80027b4 <u8g_font_GetFontGlyphStructureSize+0x2e>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <u8g_font_GetFontGlyphStructureSize+0x22>
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d002      	beq.n	80027ac <u8g_font_GetFontGlyphStructureSize+0x26>
 80027a6:	e005      	b.n	80027b4 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 80027a8:	2306      	movs	r3, #6
 80027aa:	e004      	b.n	80027b6 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e002      	b.n	80027b6 <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 80027b0:	2306      	movs	r3, #6
 80027b2:	e000      	b.n	80027b6 <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 80027b4:	2303      	movs	r3, #3
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 80027c6:	2105      	movs	r1, #5
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff9d 	bl	8002708 <u8g_font_get_byte>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 80027e0:	2106      	movs	r1, #6
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <u8g_font_get_word>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 80027fa:	2108      	movs	r1, #8
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff95 	bl	800272c <u8g_font_get_word>
 8002802:	4603      	mov	r3, r0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 8002814:	210a      	movs	r1, #10
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff ff76 	bl	8002708 <u8g_font_get_byte>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 800282e:	210b      	movs	r1, #11
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff69 	bl	8002708 <u8g_font_get_byte>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 8002848:	210c      	movs	r1, #12
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ff5c 	bl	8002708 <u8g_font_get_byte>
 8002850:	4603      	mov	r3, r0
 8002852:	b25b      	sxtb	r3, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 8002864:	210d      	movs	r1, #13
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ff4e 	bl	8002708 <u8g_font_get_byte>
 800286c:	4603      	mov	r3, r0
 800286e:	b25b      	sxtb	r3, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8002880:	210e      	movs	r1, #14
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff40 	bl	8002708 <u8g_font_get_byte>
 8002888:	4603      	mov	r3, r0
 800288a:	b25b      	sxtb	r3, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 800289c:	210f      	movs	r1, #15
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff32 	bl	8002708 <u8g_font_get_byte>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b25b      	sxtb	r3, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 80028b8:	2110      	movs	r1, #16
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff24 	bl	8002708 <u8g_font_get_byte>
 80028c0:	4603      	mov	r3, r0
 80028c2:	b25b      	sxtb	r3, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff55 	bl	8002786 <u8g_font_GetFontGlyphStructureSize>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4413      	add	r3, r2
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff36 	bl	800276c <u8g_font_GetFormat>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <u8g_CopyGlyphDataToCache+0x1e>
 8002906:	2b02      	cmp	r3, #2
 8002908:	d11b      	bne.n	8002942 <u8g_CopyGlyphDataToCache+0x56>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	785a      	ldrb	r2, [r3, #1]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3303      	adds	r3, #3
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b25a      	sxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	3304      	adds	r3, #4
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b25a      	sxtb	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3305      	adds	r3, #5
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b25a      	sxtb	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	779a      	strb	r2, [r3, #30]
      break;
 8002940:	e034      	b.n	80029ac <u8g_CopyGlyphDataToCache+0xc0>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 8002948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	b25a      	sxtb	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3b02      	subs	r3, #2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	b25a      	sxtb	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 800296e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	b2da      	uxtb	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 80029a2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	771a      	strb	r2, [r3, #28]
    
      
      break;
 80029aa:	bf00      	nop
  }
}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	779a      	strb	r2, [r3, #30]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff feb4 	bl	800276c <u8g_font_GetFormat>
 8002a04:	4603      	mov	r3, r0
 8002a06:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff feba 	bl	8002786 <u8g_font_GetFontGlyphStructureSize>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 8002a16:	23ff      	movs	r3, #255	; 0xff
 8002a18:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 8002a1a:	7c3b      	ldrb	r3, [r7, #16]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <u8g_GetGlyph+0x3c>
    mask = 15;
 8002a20:	230f      	movs	r3, #15
 8002a22:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff feef 	bl	800280c <u8g_font_GetFontStartEncoding>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fef5 	bl	8002826 <u8g_font_GetFontEndEncoding>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fed4 	bl	80027f2 <u8g_font_GetEncoding97Pos>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d909      	bls.n	8002a68 <u8g_GetGlyph+0x80>
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8002a5a:	89bb      	ldrh	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
    start = 97;
 8002a62:	2361      	movs	r3, #97	; 0x61
 8002a64:	74fb      	strb	r3, [r7, #19]
 8002a66:	e016      	b.n	8002a96 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff feb3 	bl	80027d8 <u8g_font_GetEncoding65Pos>
 8002a72:	4603      	mov	r3, r0
 8002a74:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d909      	bls.n	8002a90 <u8g_GetGlyph+0xa8>
 8002a7c:	89bb      	ldrh	r3, [r7, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 8002a82:	89bb      	ldrh	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
      start = 65;
 8002a8a:	2341      	movs	r3, #65	; 0x41
 8002a8c:	74fb      	strb	r3, [r7, #19]
 8002a8e:	e002      	b.n	8002a96 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3311      	adds	r3, #17
 8002a94:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	7bbb      	ldrb	r3, [r7, #14]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d904      	bls.n	8002aa8 <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ff88 	bl	80029b4 <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e032      	b.n	8002b0e <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8002aac:	7cba      	ldrb	r2, [r7, #18]
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d828      	bhi.n	8002b06 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2bff      	cmp	r3, #255	; 0xff
 8002aba:	d103      	bne.n	8002ac4 <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e017      	b.n	8002af4 <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 8002ac4:	7cba      	ldrb	r2, [r7, #18]
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d105      	bne.n	8002ad8 <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff0c 	bl	80028ec <u8g_CopyGlyphDataToCache>
          return p;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	e01a      	b.n	8002b0e <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3302      	adds	r3, #2
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	7c7b      	ldrb	r3, [r7, #17]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 8002af4:	7cba      	ldrb	r2, [r7, #18]
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d003      	beq.n	8002b04 <u8g_GetGlyph+0x11c>
        break;
      i++;
 8002afc:	7cbb      	ldrb	r3, [r7, #18]
 8002afe:	3301      	adds	r3, #1
 8002b00:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 8002b02:	e7d7      	b.n	8002ab4 <u8g_GetGlyph+0xcc>
        break;
 8002b04:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ff54 	bl	80029b4 <u8g_FillEmptyGlyphCache>
    
  return NULL;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b088      	sub	sp, #32
 8002b1a:	af02      	add	r7, sp, #8
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	4608      	mov	r0, r1
 8002b20:	4611      	mov	r1, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	70fb      	strb	r3, [r7, #3]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70bb      	strb	r3, [r7, #2]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 8002b30:	787b      	ldrb	r3, [r7, #1]
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff57 	bl	80029e8 <u8g_GetGlyph>
 8002b3a:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <u8g_draw_glyph+0x30>
      return 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e06d      	b.n	8002c22 <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff febd 	bl	80028cc <u8g_font_GetGlyphDataStart>
 8002b52:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7fdb      	ldrb	r3, [r3, #31]
 8002b58:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b60:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	78ba      	ldrb	r2, [r7, #2]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	70bb      	strb	r3, [r7, #2]
  y--;
 8002b7e:	78bb      	ldrb	r3, [r7, #2]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 8002b84:	78ba      	ldrb	r2, [r7, #2]
 8002b86:	7abb      	ldrb	r3, [r7, #10]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	7af8      	ldrb	r0, [r7, #11]
 8002b92:	78f9      	ldrb	r1, [r7, #3]
 8002b94:	7abb      	ldrb	r3, [r7, #10]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4603      	mov	r3, r0
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fb96 	bl	80022cc <u8g_IsBBXIntersection>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d103      	bne.n	8002bae <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002bac:	e039      	b.n	8002c22 <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	3307      	adds	r3, #7
 8002bb2:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	08db      	lsrs	r3, r3, #3
 8002bb8:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8002bba:	78bb      	ldrb	r3, [r7, #2]
 8002bbc:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8002bbe:	7c3a      	ldrb	r2, [r7, #16]
 8002bc0:	7abb      	ldrb	r3, [r7, #10]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	743b      	strb	r3, [r7, #16]
  iy++;
 8002bc6:	7c3b      	ldrb	r3, [r7, #16]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8002bcc:	2300      	movs	r3, #0
 8002bce:	74bb      	strb	r3, [r7, #18]
 8002bd0:	e020      	b.n	8002c14 <u8g_draw_glyph+0xfe>
  {
    ix = x;
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	74fb      	strb	r3, [r7, #19]
 8002bda:	e011      	b.n	8002c00 <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	7c3a      	ldrb	r2, [r7, #16]
 8002be2:	7c79      	ldrb	r1, [r7, #17]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2300      	movs	r3, #0
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa8b 	bl	8003104 <u8g_Draw8Pixel>
      data++;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
      ix+=8;
 8002bf4:	7c7b      	ldrb	r3, [r7, #17]
 8002bf6:	3308      	adds	r3, #8
 8002bf8:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	74fb      	strb	r3, [r7, #19]
 8002c00:	7cfa      	ldrb	r2, [r7, #19]
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3e9      	bcc.n	8002bdc <u8g_draw_glyph+0xc6>
    }
    iy++;
 8002c08:	7c3b      	ldrb	r3, [r7, #16]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 8002c0e:	7cbb      	ldrb	r3, [r7, #18]
 8002c10:	3301      	adds	r3, #1
 8002c12:	74bb      	strb	r3, [r7, #18]
 8002c14:	7cba      	ldrb	r2, [r7, #18]
 8002c16:	7abb      	ldrb	r3, [r7, #10]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3da      	bcc.n	8002bd2 <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	72fb      	strb	r3, [r7, #11]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	4798      	blx	r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	7abb      	ldrb	r3, [r7, #10]
 8002c4e:	4413      	add	r3, r2
 8002c50:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 8002c52:	e013      	b.n	8002c7c <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	7aba      	ldrb	r2, [r7, #10]
 8002c5a:	7af9      	ldrb	r1, [r7, #11]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f7ff ff5a 	bl	8002b16 <u8g_draw_glyph>
 8002c62:	4603      	mov	r3, r0
 8002c64:	75bb      	strb	r3, [r7, #22]
    x += d;
 8002c66:	7dba      	ldrb	r2, [r7, #22]
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	72fb      	strb	r3, [r7, #11]
    t += d;
 8002c6e:	7dba      	ldrb	r2, [r7, #22]
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	4413      	add	r3, r2
 8002c74:	75fb      	strb	r3, [r7, #23]
    s++;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e7      	bne.n	8002c54 <u8g_DrawStr+0x2a>
  }
  return t;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06b      	beq.n	8002d76 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d114      	bne.n	8002cd2 <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fd86 	bl	80027be <u8g_font_GetCapitalAHeight>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b25a      	sxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fdbd 	bl	8002840 <u8g_font_GetLowerGDescent>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002cd0:	e02d      	b.n	8002d2e <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d114      	bne.n	8002d06 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fdd7 	bl	8002894 <u8g_font_GetFontXAscent>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fddb 	bl	80028b0 <u8g_font_GetFontXDescent>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002d04:	e013      	b.n	8002d2e <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff fda6 	bl	800285c <u8g_font_GetFontAscent>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fdaa 	bl	8002878 <u8g_font_GetFontDescent>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8002d34:	b21a      	sxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8002d3c:	b21b      	sxth	r3, r3
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d00d      	beq.n	8002d6a <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8002d4e:	89fb      	ldrh	r3, [r7, #14]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	89fa      	ldrh	r2, [r7, #14]
 8002d5e:	fb12 f303 	smulbb	r3, r2, r3
 8002d62:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	099b      	lsrs	r3, r3, #6
 8002d68:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002d74:	e000      	b.n	8002d78 <u8g_UpdateRefHeight+0xea>
    return;
 8002d76:	bf00      	nop
}
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return 0;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <u8g_SetFontPosBaseline+0x1c>)
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	08002d7f 	.word	0x08002d7f

08002db4 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d008      	beq.n	8002dda <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ff5d 	bl	8002c8e <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ffdd 	bl	8002d94 <u8g_SetFontPosBaseline>
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	603b      	str	r3, [r7, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681c      	ldr	r4, [r3, #0]
 8002df6:	79fa      	ldrb	r2, [r7, #7]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	47a0      	blx	r4
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd90      	pop	{r4, r7, pc}

08002e0a <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	2002      	movs	r0, #2
 8002e1a:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	220a      	movs	r2, #10
 8002e20:	6839      	ldr	r1, [r7, #0]
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ffdd 	bl	8002de2 <u8g_call_dev_fn>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2003      	movs	r0, #3
 8002e32:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	2000      	movs	r0, #0
 8002e3a:	4798      	blx	r3
  return r;
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	2002      	movs	r0, #2
 8002e56:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 8002e60:	2300      	movs	r3, #0
 8002e62:	2214      	movs	r2, #20
 8002e64:	6839      	ldr	r1, [r7, #0]
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7ff ffbb 	bl	8002de2 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	2217      	movs	r2, #23
 8002e72:	6839      	ldr	r1, [r7, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffb4 	bl	8002de2 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	2000      	movs	r0, #0
 8002e80:	4798      	blx	r3
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	2002      	movs	r0, #2
 8002e9a:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2215      	movs	r2, #21
 8002ea8:	6839      	ldr	r1, [r7, #0]
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff99 	bl	8002de2 <u8g_call_dev_fn>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3338      	adds	r3, #56	; 0x38
 8002ebe:	2217      	movs	r2, #23
 8002ec0:	6839      	ldr	r1, [r7, #0]
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ff8d 	bl	8002de2 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	2000      	movs	r0, #0
 8002ece:	4798      	blx	r3
  return r;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b086      	sub	sp, #24
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	460b      	mov	r3, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	332d      	adds	r3, #45	; 0x2d
 8002ef4:	617b      	str	r3, [r7, #20]
  arg->x = x;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	79fa      	ldrb	r2, [r7, #7]
 8002efa:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	79ba      	ldrb	r2, [r7, #6]
 8002f00:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f08:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f10:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	223b      	movs	r2, #59	; 0x3b
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff ff62 	bl	8002de2 <u8g_call_dev_fn>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 8002f30:	f107 030f 	add.w	r3, r7, #15
 8002f34:	2246      	movs	r2, #70	; 0x46
 8002f36:	6839      	ldr	r1, [r7, #0]
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff52 	bl	8002de2 <u8g_call_dev_fn>
  return r;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8002f52:	f107 030f 	add.w	r3, r7, #15
 8002f56:	2247      	movs	r2, #71	; 0x47
 8002f58:	6839      	ldr	r1, [r7, #0]
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff41 	bl	8002de2 <u8g_call_dev_fn>
  return r;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8002f74:	2300      	movs	r3, #0
 8002f76:	2248      	movs	r2, #72	; 0x48
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ff31 	bl	8002de2 <u8g_call_dev_fn>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ffc4 	bl	8002f26 <u8g_GetWidthLL>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4619      	mov	r1, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ffcb 	bl	8002f48 <u8g_GetHeightLL>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff ffd2 	bl	8002f6a <u8g_GetModeLL>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3338      	adds	r3, #56	; 0x38
 8002fd6:	2217      	movs	r2, #23
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff02 	bl	8002de2 <u8g_call_dev_fn>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2222      	movs	r2, #34	; 0x22
 800300c:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8003014:	2101      	movs	r1, #1
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f891 	bl	800313e <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff feb9 	bl	8002d94 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a02      	ldr	r2, [pc, #8]	; (8003058 <u8g_init_data+0x70>)
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

}
 8003050:	bf00      	nop
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	0800383b 	.word	0x0800383b

0800305c <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fecd 	bl	8002e0a <u8g_InitLL>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <u8g_Begin+0x1e>
    return 0;
 8003076:	2300      	movs	r3, #0
 8003078:	e003      	b.n	8003082 <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ff85 	bl	8002f8a <u8g_UpdateDimension>
  return 1;
 8003080:	2301      	movs	r3, #1
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f7ff ffa6 	bl	8002fe8 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f7ff ffd6 	bl	800305c <u8g_Begin>
 80030b0:	4603      	mov	r3, r0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f7ff febc 	bl	8002e46 <u8g_FirstPageLL>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff fec8 	bl	8002e8a <u8g_NextPageLL>
 80030fa:	4603      	mov	r3, r0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	70fb      	strb	r3, [r7, #3]
 8003116:	460b      	mov	r3, r1
 8003118:	70bb      	strb	r3, [r7, #2]
 800311a:	4613      	mov	r3, r2
 800311c:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	78b8      	ldrb	r0, [r7, #2]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	7c3b      	ldrb	r3, [r7, #16]
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	787b      	ldrb	r3, [r7, #1]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4603      	mov	r3, r0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fed2 	bl	8002eda <u8g_Draw8PixelLL>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	460b      	mov	r3, r1
 8003148:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	78db      	ldrb	r3, [r3, #3]
 8003178:	3b01      	subs	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	711a      	strb	r2, [r3, #4]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8003192:	b490      	push	{r4, r7}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	789a      	ldrb	r2, [r3, #2]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	789a      	ldrb	r2, [r3, #2]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d301      	bcc.n	80031ba <u8g_page_Next+0x28>
    return 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e018      	b.n	80031ec <u8g_page_Next+0x5a>
  p->page++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	791b      	ldrb	r3, [r3, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	4423      	add	r3, r4
 80031d0:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d304      	bcc.n	80031e4 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	785c      	ldrb	r4, [r3, #1]
    y1--;
 80031de:	4623      	mov	r3, r4
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4622      	mov	r2, r4
 80031e8:	70da      	strb	r2, [r3, #3]
  
  return 1;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc90      	pop	{r4, r7}
 80031f4:	4770      	bx	lr

080031f6 <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	795b      	ldrb	r3, [r3, #5]
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	60fa      	str	r2, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d1f6      	bne.n	8003214 <u8g_pb_Clear+0x1e>
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
 8003240:	4613      	mov	r3, r2
 8003242:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	78db      	ldrb	r3, [r3, #3]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	429a      	cmp	r2, r3
 800324c:	bf94      	ite	ls
 800324e:	2301      	movls	r3, #1
 8003250:	2300      	movhi	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	789b      	ldrb	r3, [r3, #2]
 800325a:	78ba      	ldrb	r2, [r7, #2]
 800325c:	429a      	cmp	r2, r3
 800325e:	bf2c      	ite	cs
 8003260:	2301      	movcs	r3, #1
 8003262:	2300      	movcc	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	78bb      	ldrb	r3, [r7, #2]
 800326c:	429a      	cmp	r2, r3
 800326e:	bf8c      	ite	hi
 8003270:	2301      	movhi	r3, #1
 8003272:	2300      	movls	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	7bbb      	ldrb	r3, [r7, #14]
 8003280:	4013      	ands	r3, r2
 8003282:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8003284:	7bba      	ldrb	r2, [r7, #14]
 8003286:	7b7b      	ldrb	r3, [r7, #13]
 8003288:	4013      	ands	r3, r2
 800328a:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 800328c:	7b7a      	ldrb	r2, [r7, #13]
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	7bbb      	ldrb	r3, [r7, #14]
 8003298:	4313      	orrs	r3, r2
 800329a:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 800329c:	7bfa      	ldrb	r2, [r7, #15]
 800329e:	7b7b      	ldrb	r3, [r7, #13]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2200      	movs	r2, #0
 80032c6:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	789a      	ldrb	r2, [r3, #2]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	795a      	ldrb	r2, [r3, #5]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	709a      	strb	r2, [r3, #2]
  box->x1--;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	789b      	ldrb	r3, [r3, #2]
 80032dc:	3b01      	subs	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	78da      	ldrb	r2, [r3, #3]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	70da      	strb	r2, [r3, #3]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	78db      	ldrb	r3, [r3, #3]
 8003310:	2b03      	cmp	r3, #3
 8003312:	d813      	bhi.n	800333c <u8g_pb_Is8PixelVisible+0x44>
 8003314:	a201      	add	r2, pc, #4	; (adr r2, 800331c <u8g_pb_Is8PixelVisible+0x24>)
 8003316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331a:	bf00      	nop
 800331c:	0800333d 	.word	0x0800333d
 8003320:	0800332d 	.word	0x0800332d
 8003324:	0800333d 	.word	0x0800333d
 8003328:	08003335 	.word	0x08003335
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	3308      	adds	r3, #8
 8003330:	73bb      	strb	r3, [r7, #14]
      break;
 8003332:	e003      	b.n	800333c <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	3b08      	subs	r3, #8
 8003338:	73fb      	strb	r3, [r7, #15]
      break;
 800333a:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 800333c:	7bba      	ldrb	r2, [r7, #14]
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff76 	bl	8003234 <u8g_pb_IsYIntersection>
 8003348:	4603      	mov	r3, r0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop

08003354 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	795a      	ldrb	r2, [r3, #5]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	68b8      	ldr	r0, [r7, #8]
 800336c:	f7ff f893 	bl	8002496 <u8g_WriteSequence>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 800337a:	b490      	push	{r4, r7}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	4608      	mov	r0, r1
 8003384:	4611      	mov	r1, r2
 8003386:	461a      	mov	r2, r3
 8003388:	4603      	mov	r3, r0
 800338a:	70fb      	strb	r3, [r7, #3]
 800338c:	460b      	mov	r3, r1
 800338e:	70bb      	strb	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	789b      	ldrb	r3, [r3, #2]
 800339e:	78ba      	ldrb	r2, [r7, #2]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 80033a4:	2401      	movs	r4, #1
  y &= 0x07;
 80033a6:	78bb      	ldrb	r3, [r7, #2]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 80033ae:	4622      	mov	r2, r4
 80033b0:	78bb      	ldrb	r3, [r7, #2]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	b2dc      	uxtb	r4, r3
  ptr += x;
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4413      	add	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 80033c0:	787b      	ldrb	r3, [r7, #1]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	4323      	orrs	r3, r4
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 80033d2:	e007      	b.n	80033e4 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 80033d4:	43e3      	mvns	r3, r4
 80033d6:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	4023      	ands	r3, r4
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	701a      	strb	r2, [r3, #0]
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc90      	pop	{r4, r7}
 80033ec:	4770      	bx	lr

080033ee <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	785a      	ldrb	r2, [r3, #1]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	429a      	cmp	r2, r3
 8003402:	d315      	bcc.n	8003430 <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	785a      	ldrb	r2, [r3, #1]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	429a      	cmp	r2, r3
 800340e:	d811      	bhi.n	8003434 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	795b      	ldrb	r3, [r3, #5]
 8003418:	429a      	cmp	r2, r3
 800341a:	d20d      	bcs.n	8003438 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	7819      	ldrb	r1, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	785a      	ldrb	r2, [r3, #1]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	791b      	ldrb	r3, [r3, #4]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ffa6 	bl	800337a <u8g_pb8v1_set_pixel>
 800342e:	e004      	b.n	800343a <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <u8g_pb8v1_SetPixel+0x4c>
    return;
 8003438:	bf00      	nop
}
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 800344e:	2300      	movs	r3, #0
 8003450:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	78db      	ldrb	r3, [r3, #3]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d81c      	bhi.n	8003498 <u8g_pb8v1_Set8PixelOpt2+0x58>
 800345e:	a201      	add	r2, pc, #4	; (adr r2, 8003464 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003475 	.word	0x08003475
 8003468:	0800347d 	.word	0x0800347d
 800346c:	08003485 	.word	0x08003485
 8003470:	0800348d 	.word	0x0800348d
  {
    case 0: dx++; break;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	3301      	adds	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
 800347a:	e00d      	b.n	8003498 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 1: dy++; break;
 800347c:	7bbb      	ldrb	r3, [r7, #14]
 800347e:	3301      	adds	r3, #1
 8003480:	73bb      	strb	r3, [r7, #14]
 8003482:	e009      	b.n	8003498 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 2: dx--; break;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	3b01      	subs	r3, #1
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e005      	b.n	8003498 <u8g_pb8v1_Set8PixelOpt2+0x58>
    case 3: dy--; break;
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	3b01      	subs	r3, #1
 8003490:	73bb      	strb	r3, [r7, #14]
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <u8g_pb8v1_Set8PixelOpt2+0x58>
  }
  
  do
 8003496:	bf00      	nop
  {
    if ( pixel & 128 )
 8003498:	b263      	sxtb	r3, r4
 800349a:	2b00      	cmp	r3, #0
 800349c:	da03      	bge.n	80034a6 <u8g_pb8v1_Set8PixelOpt2+0x66>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ffa4 	bl	80033ee <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4413      	add	r3, r2
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	785a      	ldrb	r2, [r3, #1]
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	4413      	add	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 80034c2:	0063      	lsls	r3, r4, #1
 80034c4:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 80034c6:	2c00      	cmp	r4, #0
 80034c8:	d1e5      	bne.n	8003496 <u8g_pb8v1_Set8PixelOpt2+0x56>
  
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd90      	pop	{r4, r7, pc}

080034d4 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	617b      	str	r3, [r7, #20]
  switch(msg)
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	3b0a      	subs	r3, #10
 80034ee:	2b3e      	cmp	r3, #62	; 0x3e
 80034f0:	f200 80ba 	bhi.w	8003668 <u8g_dev_pb8v1_base_fn+0x194>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <u8g_dev_pb8v1_base_fn+0x28>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003669 	.word	0x08003669
 8003500:	08003669 	.word	0x08003669
 8003504:	08003669 	.word	0x08003669
 8003508:	08003669 	.word	0x08003669
 800350c:	08003669 	.word	0x08003669
 8003510:	08003669 	.word	0x08003669
 8003514:	08003669 	.word	0x08003669
 8003518:	08003669 	.word	0x08003669
 800351c:	08003669 	.word	0x08003669
 8003520:	08003669 	.word	0x08003669
 8003524:	0800361b 	.word	0x0800361b
 8003528:	0800362b 	.word	0x0800362b
 800352c:	08003669 	.word	0x08003669
 8003530:	08003645 	.word	0x08003645
 8003534:	08003669 	.word	0x08003669
 8003538:	08003669 	.word	0x08003669
 800353c:	08003669 	.word	0x08003669
 8003540:	08003669 	.word	0x08003669
 8003544:	08003669 	.word	0x08003669
 8003548:	08003669 	.word	0x08003669
 800354c:	08003669 	.word	0x08003669
 8003550:	08003669 	.word	0x08003669
 8003554:	08003669 	.word	0x08003669
 8003558:	08003669 	.word	0x08003669
 800355c:	08003669 	.word	0x08003669
 8003560:	08003669 	.word	0x08003669
 8003564:	08003669 	.word	0x08003669
 8003568:	08003669 	.word	0x08003669
 800356c:	08003669 	.word	0x08003669
 8003570:	08003669 	.word	0x08003669
 8003574:	08003669 	.word	0x08003669
 8003578:	08003669 	.word	0x08003669
 800357c:	08003669 	.word	0x08003669
 8003580:	08003669 	.word	0x08003669
 8003584:	08003669 	.word	0x08003669
 8003588:	08003669 	.word	0x08003669
 800358c:	08003669 	.word	0x08003669
 8003590:	08003669 	.word	0x08003669
 8003594:	08003669 	.word	0x08003669
 8003598:	08003669 	.word	0x08003669
 800359c:	08003611 	.word	0x08003611
 80035a0:	08003669 	.word	0x08003669
 80035a4:	08003669 	.word	0x08003669
 80035a8:	08003669 	.word	0x08003669
 80035ac:	08003669 	.word	0x08003669
 80035b0:	08003669 	.word	0x08003669
 80035b4:	08003669 	.word	0x08003669
 80035b8:	08003669 	.word	0x08003669
 80035bc:	08003669 	.word	0x08003669
 80035c0:	080035f9 	.word	0x080035f9
 80035c4:	08003669 	.word	0x08003669
 80035c8:	08003669 	.word	0x08003669
 80035cc:	08003669 	.word	0x08003669
 80035d0:	08003669 	.word	0x08003669
 80035d4:	08003669 	.word	0x08003669
 80035d8:	08003669 	.word	0x08003669
 80035dc:	08003669 	.word	0x08003669
 80035e0:	08003669 	.word	0x08003669
 80035e4:	08003669 	.word	0x08003669
 80035e8:	08003669 	.word	0x08003669
 80035ec:	0800364f 	.word	0x0800364f
 80035f0:	08003659 	.word	0x08003659
 80035f4:	08003663 	.word	0x08003663
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 80035f8:	6839      	ldr	r1, [r7, #0]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff fe7c 	bl	80032f8 <u8g_pb_Is8PixelVisible>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d02f      	beq.n	8003666 <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7ff ff19 	bl	8003440 <u8g_pb8v1_Set8PixelOpt2>
      break;
 800360e:	e02a      	b.n	8003666 <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	6978      	ldr	r0, [r7, #20]
 8003614:	f7ff feeb 	bl	80033ee <u8g_pb8v1_SetPixel>
      break;
 8003618:	e026      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff fdeb 	bl	80031f6 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fd9b 	bl	800315e <u8g_page_First>
      break;
 8003628:	e01e      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fdb0 	bl	8003192 <u8g_page_Next>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 8003638:	2300      	movs	r3, #0
 800363a:	e016      	b.n	800366a <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f7ff fdda 	bl	80031f6 <u8g_pb_Clear>
      break;
 8003642:	e011      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff fe36 	bl	80032b8 <u8g_pb_GetPageBox>
      break;
 800364c:	e00c      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	795a      	ldrb	r2, [r3, #5]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	701a      	strb	r2, [r3, #0]
      break;
 8003656:	e007      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	785a      	ldrb	r2, [r3, #1]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	701a      	strb	r2, [r3, #0]
      break;
 8003660:	e002      	b.n	8003668 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 8003662:	2301      	movs	r3, #1
 8003664:	e001      	b.n	800366a <u8g_dev_pb8v1_base_fn+0x196>
      break;
 8003666:	bf00      	nop
  }
  return 1;
 8003668:	2301      	movs	r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <u8g_draw_hline>:
*/

#include "u8g.h"

void u8g_draw_hline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	70fb      	strb	r3, [r7, #3]
 8003686:	460b      	mov	r3, r1
 8003688:	70bb      	strb	r3, [r7, #2]
 800368a:	4613      	mov	r3, r2
 800368c:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 800368e:	23ff      	movs	r3, #255	; 0xff
 8003690:	73fb      	strb	r3, [r7, #15]
  while( w >= 8 )
 8003692:	e00d      	b.n	80036b0 <u8g_draw_hline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 8003694:	78ba      	ldrb	r2, [r7, #2]
 8003696:	78f9      	ldrb	r1, [r7, #3]
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff fd30 	bl	8003104 <u8g_Draw8Pixel>
    w-=8;
 80036a4:	787b      	ldrb	r3, [r7, #1]
 80036a6:	3b08      	subs	r3, #8
 80036a8:	707b      	strb	r3, [r7, #1]
    x+=8;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	3308      	adds	r3, #8
 80036ae:	70fb      	strb	r3, [r7, #3]
  while( w >= 8 )
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	2b07      	cmp	r3, #7
 80036b4:	d8ee      	bhi.n	8003694 <u8g_draw_hline+0x20>
  }
  if ( w != 0 )
 80036b6:	787b      	ldrb	r3, [r7, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <u8g_draw_hline+0x74>
  {
    w ^=7;
 80036bc:	787b      	ldrb	r3, [r7, #1]
 80036be:	f083 0307 	eor.w	r3, r3, #7
 80036c2:	707b      	strb	r3, [r7, #1]
    w++;
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	3301      	adds	r3, #1
 80036c8:	707b      	strb	r3, [r7, #1]
    pixel <<= w&7;
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	787b      	ldrb	r3, [r7, #1]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 0, pixel);
 80036d8:	78ba      	ldrb	r2, [r7, #2]
 80036da:	78f9      	ldrb	r1, [r7, #3]
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fd0e 	bl	8003104 <u8g_Draw8Pixel>
  }
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <u8g_draw_vline>:

void u8g_draw_vline(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t h)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	70fb      	strb	r3, [r7, #3]
 8003702:	460b      	mov	r3, r1
 8003704:	70bb      	strb	r3, [r7, #2]
 8003706:	4613      	mov	r3, r2
 8003708:	707b      	strb	r3, [r7, #1]
  uint8_t pixel = 0x0ff;
 800370a:	23ff      	movs	r3, #255	; 0xff
 800370c:	73fb      	strb	r3, [r7, #15]
  while( h >= 8 )
 800370e:	e00d      	b.n	800372c <u8g_draw_vline+0x3c>
  {
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	78f9      	ldrb	r1, [r7, #3]
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2301      	movs	r3, #1
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fcf2 	bl	8003104 <u8g_Draw8Pixel>
    h-=8;
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	3b08      	subs	r3, #8
 8003724:	707b      	strb	r3, [r7, #1]
    y+=8;
 8003726:	78bb      	ldrb	r3, [r7, #2]
 8003728:	3308      	adds	r3, #8
 800372a:	70bb      	strb	r3, [r7, #2]
  while( h >= 8 )
 800372c:	787b      	ldrb	r3, [r7, #1]
 800372e:	2b07      	cmp	r3, #7
 8003730:	d8ee      	bhi.n	8003710 <u8g_draw_vline+0x20>
  }
  if ( h != 0 )
 8003732:	787b      	ldrb	r3, [r7, #1]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d015      	beq.n	8003764 <u8g_draw_vline+0x74>
  {
    h ^=7;
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	f083 0307 	eor.w	r3, r3, #7
 800373e:	707b      	strb	r3, [r7, #1]
    h++;
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	3301      	adds	r3, #1
 8003744:	707b      	strb	r3, [r7, #1]
    pixel <<= h&7;
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	73fb      	strb	r3, [r7, #15]
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
 8003754:	78ba      	ldrb	r2, [r7, #2]
 8003756:	78f9      	ldrb	r1, [r7, #3]
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2301      	movs	r3, #1
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fcd0 	bl	8003104 <u8g_Draw8Pixel>
  }
}
 8003764:	bf00      	nop
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <u8g_DrawFrame>:
  u8g_draw_vline(u8g, x, y, w);
}

/* restrictions: w > 0 && h > 0 */
void u8g_DrawFrame(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	70bb      	strb	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
  u8g_uint_t xtmp = x;
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	73fb      	strb	r3, [r7, #15]
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
 800378a:	7878      	ldrb	r0, [r7, #1]
 800378c:	78ba      	ldrb	r2, [r7, #2]
 800378e:	78f9      	ldrb	r1, [r7, #3]
 8003790:	7e3b      	ldrb	r3, [r7, #24]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe fd98 	bl	80022cc <u8g_IsBBXIntersection>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d026      	beq.n	80037f0 <u8g_DrawFrame+0x84>
    return;

  
  u8g_draw_hline(u8g, x, y, w);
 80037a2:	787b      	ldrb	r3, [r7, #1]
 80037a4:	78ba      	ldrb	r2, [r7, #2]
 80037a6:	78f9      	ldrb	r1, [r7, #3]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff63 	bl	8003674 <u8g_draw_hline>
  u8g_draw_vline(u8g, x, y, h);
 80037ae:	7e3b      	ldrb	r3, [r7, #24]
 80037b0:	78ba      	ldrb	r2, [r7, #2]
 80037b2:	78f9      	ldrb	r1, [r7, #3]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff9b 	bl	80036f0 <u8g_draw_vline>
  x+=w;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	4413      	add	r3, r2
 80037c0:	70fb      	strb	r3, [r7, #3]
  x--;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	70fb      	strb	r3, [r7, #3]
  u8g_draw_vline(u8g, x, y, h);
 80037c8:	7e3b      	ldrb	r3, [r7, #24]
 80037ca:	78ba      	ldrb	r2, [r7, #2]
 80037cc:	78f9      	ldrb	r1, [r7, #3]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff8e 	bl	80036f0 <u8g_draw_vline>
  y+=h;
 80037d4:	78ba      	ldrb	r2, [r7, #2]
 80037d6:	7e3b      	ldrb	r3, [r7, #24]
 80037d8:	4413      	add	r3, r2
 80037da:	70bb      	strb	r3, [r7, #2]
  y--;
 80037dc:	78bb      	ldrb	r3, [r7, #2]
 80037de:	3b01      	subs	r3, #1
 80037e0:	70bb      	strb	r3, [r7, #2]
  u8g_draw_hline(u8g, xtmp, y, w);
 80037e2:	787b      	ldrb	r3, [r7, #1]
 80037e4:	78ba      	ldrb	r2, [r7, #2]
 80037e6:	7bf9      	ldrb	r1, [r7, #15]
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff43 	bl	8003674 <u8g_draw_hline>
 80037ee:	e000      	b.n	80037f2 <u8g_DrawFrame+0x86>
    return;
 80037f0:	bf00      	nop
}
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <u8g_draw_box>:

void u8g_draw_box(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	70fb      	strb	r3, [r7, #3]
 800380a:	460b      	mov	r3, r1
 800380c:	70bb      	strb	r3, [r7, #2]
 800380e:	4613      	mov	r3, r2
 8003810:	707b      	strb	r3, [r7, #1]
  do
  { 
    u8g_draw_hline(u8g, x, y, w);
 8003812:	787b      	ldrb	r3, [r7, #1]
 8003814:	78ba      	ldrb	r2, [r7, #2]
 8003816:	78f9      	ldrb	r1, [r7, #3]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff2b 	bl	8003674 <u8g_draw_hline>
    y++;    
 800381e:	78bb      	ldrb	r3, [r7, #2]
 8003820:	3301      	adds	r3, #1
 8003822:	70bb      	strb	r3, [r7, #2]
    h--;
 8003824:	7c3b      	ldrb	r3, [r7, #16]
 8003826:	3b01      	subs	r3, #1
 8003828:	743b      	strb	r3, [r7, #16]
  } while( h != 0 );
 800382a:	7c3b      	ldrb	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <u8g_draw_box+0x1a>
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003856:	e003      	b.n	8003860 <LoopCopyDataInit>

08003858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800385a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800385c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385e:	3104      	adds	r1, #4

08003860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003868:	d3f6      	bcc.n	8003858 <CopyDataInit>
  ldr  r2, =_sbss
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800386c:	e002      	b.n	8003874 <LoopFillZerobss>

0800386e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003870:	f842 3b04 	str.w	r3, [r2], #4

08003874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003878:	d3f9      	bcc.n	800386e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800387a:	f7fe fb99 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387e:	f003 fae1 	bl	8006e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003882:	f7fd ffa5 	bl	80017d0 <main>
  bx  lr    
 8003886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003888:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800388c:	0800eef4 	.word	0x0800eef4
  ldr  r0, =_sdata
 8003890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003894:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003898:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 800389c:	20000484 	.word	0x20000484

080038a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC_IRQHandler>
	...

080038a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_Init+0x40>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_Init+0x40>)
 80038ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_Init+0x40>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <HAL_Init+0x40>)
 80038ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <HAL_Init+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_Init+0x40>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 fd41 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f000 f808 	bl	80038e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038d8:	f7fe fa4e 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023c00 	.word	0x40023c00

080038e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_InitTick+0x54>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x58>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003902:	fbb2 f3f3 	udiv	r3, r2, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd59 	bl	80043be <HAL_SYSTICK_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e00e      	b.n	8003934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b0f      	cmp	r3, #15
 800391a:	d80a      	bhi.n	8003932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800391c:	2200      	movs	r2, #0
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f000 fd21 	bl	800436a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003928:	4a06      	ldr	r2, [pc, #24]	; (8003944 <HAL_InitTick+0x5c>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000000 	.word	0x20000000
 8003940:	20000020 	.word	0x20000020
 8003944:	2000001c 	.word	0x2000001c

08003948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x20>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <HAL_IncTick+0x24>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4413      	add	r3, r2
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_IncTick+0x24>)
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000020 	.word	0x20000020
 800396c:	20000470 	.word	0x20000470

08003970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_GetTick+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000470 	.word	0x20000470

08003988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7ff ffee 	bl	8003970 <HAL_GetTick>
 8003994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d005      	beq.n	80039ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039a2:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <HAL_Delay+0x44>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4413      	add	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039ae:	bf00      	nop
 80039b0:	f7ff ffde 	bl	8003970 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d8f7      	bhi.n	80039b0 <HAL_Delay+0x28>
  {
  }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000020 	.word	0x20000020

080039d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e033      	b.n	8003a4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fcf2 	bl	80013d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d118      	bne.n	8003a40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a16:	f023 0302 	bic.w	r3, r3, #2
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa48 	bl	8003eb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3e:	e001      	b.n	8003a44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Start_DMA+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0ce      	b.n	8003c14 <HAL_ADC_Start_DMA+0x1bc>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d018      	beq.n	8003abe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9c:	4b5f      	ldr	r3, [pc, #380]	; (8003c1c <HAL_ADC_Start_DMA+0x1c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5f      	ldr	r2, [pc, #380]	; (8003c20 <HAL_ADC_Start_DMA+0x1c8>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9a      	lsrs	r2, r3, #18
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ab0:	e002      	b.n	8003ab8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f9      	bne.n	8003ab2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003acc:	d107      	bne.n	8003ade <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 8086 	bne.w	8003bfa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d106      	bne.n	8003b3c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f023 0206 	bic.w	r2, r3, #6
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
 8003b3a:	e002      	b.n	8003b42 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <HAL_ADC_Start_DMA+0x1cc>)
 8003b4c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <HAL_ADC_Start_DMA+0x1d0>)
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	4a34      	ldr	r2, [pc, #208]	; (8003c2c <HAL_ADC_Start_DMA+0x1d4>)
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	4a33      	ldr	r2, [pc, #204]	; (8003c30 <HAL_ADC_Start_DMA+0x1d8>)
 8003b64:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b7e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	334c      	adds	r3, #76	; 0x4c
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f000 fcc8 	bl	8004534 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10f      	bne.n	8003bd0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d129      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bcc:	609a      	str	r2, [r3, #8]
 8003bce:	e020      	b.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	; (8003c34 <HAL_ADC_Start_DMA+0x1dc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d11b      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d114      	bne.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	e00b      	b.n	8003c12 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f043 0201 	orr.w	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	431bde83 	.word	0x431bde83
 8003c24:	40012300 	.word	0x40012300
 8003c28:	080040b1 	.word	0x080040b1
 8003c2c:	0800416b 	.word	0x0800416b
 8003c30:	08004187 	.word	0x08004187
 8003c34:	40012000 	.word	0x40012000

08003c38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x1c>
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	e105      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x228>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	d925      	bls.n	8003cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68d9      	ldr	r1, [r3, #12]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68d9      	ldr	r1, [r3, #12]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4603      	mov	r3, r0
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4403      	add	r3, r0
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e022      	b.n	8003d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	2207      	movs	r2, #7
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43da      	mvns	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6919      	ldr	r1, [r3, #16]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4618      	mov	r0, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4403      	add	r3, r0
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b06      	cmp	r3, #6
 8003d38:	d824      	bhi.n	8003d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b05      	subs	r3, #5
 8003d4c:	221f      	movs	r2, #31
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	400a      	ands	r2, r1
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b05      	subs	r3, #5
 8003d76:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	635a      	str	r2, [r3, #52]	; 0x34
 8003d82:	e04c      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b0c      	cmp	r3, #12
 8003d8a:	d824      	bhi.n	8003dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b23      	subs	r3, #35	; 0x23
 8003d9e:	221f      	movs	r2, #31
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43da      	mvns	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	400a      	ands	r2, r1
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	4618      	mov	r0, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3b23      	subs	r3, #35	; 0x23
 8003dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd4:	e023      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	3b41      	subs	r3, #65	; 0x41
 8003de8:	221f      	movs	r2, #31
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43da      	mvns	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	400a      	ands	r2, r1
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4618      	mov	r0, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b41      	subs	r3, #65	; 0x41
 8003e12:	fa00 f203 	lsl.w	r2, r0, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e1e:	4b22      	ldr	r3, [pc, #136]	; (8003ea8 <HAL_ADC_ConfigChannel+0x234>)
 8003e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b12      	cmp	r3, #18
 8003e32:	d105      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_ADC_ConfigChannel+0x238>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d123      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d003      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x1e6>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b11      	cmp	r3, #17
 8003e58:	d11b      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d111      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_ADC_ConfigChannel+0x23c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <HAL_ADC_ConfigChannel+0x240>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0c9a      	lsrs	r2, r3, #18
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e84:	e002      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f9      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	40012000 	.word	0x40012000
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	431bde83 	.word	0x431bde83

08003eb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec0:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <ADC_Init+0x1f0>)
 8003ec2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6859      	ldr	r1, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	021a      	lsls	r2, r3, #8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6899      	ldr	r1, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	4a58      	ldr	r2, [pc, #352]	; (80040ac <ADC_Init+0x1f4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6899      	ldr	r1, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	e00f      	b.n	8003fb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0202 	bic.w	r2, r2, #2
 8003fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6899      	ldr	r1, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7e1b      	ldrb	r3, [r3, #24]
 8003fd0:	005a      	lsls	r2, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6859      	ldr	r1, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	3b01      	subs	r3, #1
 8004010:	035a      	lsls	r2, r3, #13
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e007      	b.n	800402c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	3b01      	subs	r3, #1
 8004048:	051a      	lsls	r2, r3, #20
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800406e:	025a      	lsls	r2, r3, #9
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	029a      	lsls	r2, r3, #10
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	609a      	str	r2, [r3, #8]
}
 800409c:	bf00      	nop
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012300 	.word	0x40012300
 80040ac:	0f000001 	.word	0x0f000001

080040b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d13c      	bne.n	8004144 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d12b      	bne.n	800413c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d127      	bne.n	800413c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004104:	2b00      	cmp	r3, #0
 8004106:	d119      	bne.n	800413c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0220 	bic.w	r2, r2, #32
 8004116:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fd7b 	bl	8003c38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004142:	e00e      	b.n	8004162 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff fd85 	bl	8003c60 <HAL_ADC_ErrorCallback>
}
 8004156:	e004      	b.n	8004162 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f7ff fd67 	bl	8003c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2240      	movs	r2, #64	; 0x40
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f043 0204 	orr.w	r2, r3, #4
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f7ff fd5a 	bl	8003c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d0:	4013      	ands	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <__NVIC_SetPriorityGrouping+0x44>)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	60d3      	str	r3, [r2, #12]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000ed00 	.word	0xe000ed00

080041fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <__NVIC_GetPriorityGrouping+0x18>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	f003 0307 	and.w	r3, r3, #7
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	2b00      	cmp	r3, #0
 8004228:	db0b      	blt.n	8004242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4907      	ldr	r1, [pc, #28]	; (8004250 <__NVIC_EnableIRQ+0x38>)
 8004232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2001      	movs	r0, #1
 800423a:	fa00 f202 	lsl.w	r2, r0, r2
 800423e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000e100 	.word	0xe000e100

08004254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	4603      	mov	r3, r0
 800425c:	6039      	str	r1, [r7, #0]
 800425e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004264:	2b00      	cmp	r3, #0
 8004266:	db0a      	blt.n	800427e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	490c      	ldr	r1, [pc, #48]	; (80042a0 <__NVIC_SetPriority+0x4c>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	0112      	lsls	r2, r2, #4
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	440b      	add	r3, r1
 8004278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800427c:	e00a      	b.n	8004294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	4908      	ldr	r1, [pc, #32]	; (80042a4 <__NVIC_SetPriority+0x50>)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3b04      	subs	r3, #4
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	440b      	add	r3, r1
 8004292:	761a      	strb	r2, [r3, #24]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000e100 	.word	0xe000e100
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f1c3 0307 	rsb	r3, r3, #7
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	bf28      	it	cs
 80042c6:	2304      	movcs	r3, #4
 80042c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d902      	bls.n	80042d8 <NVIC_EncodePriority+0x30>
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3b03      	subs	r3, #3
 80042d6:	e000      	b.n	80042da <NVIC_EncodePriority+0x32>
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	43da      	mvns	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f0:	f04f 31ff 	mov.w	r1, #4294967295
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	43d9      	mvns	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004300:	4313      	orrs	r3, r2
         );
}
 8004302:	4618      	mov	r0, r3
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004320:	d301      	bcc.n	8004326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004322:	2301      	movs	r3, #1
 8004324:	e00f      	b.n	8004346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <SysTick_Config+0x40>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432e:	210f      	movs	r1, #15
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	f7ff ff8e 	bl	8004254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <SysTick_Config+0x40>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <SysTick_Config+0x40>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e000e010 	.word	0xe000e010

08004354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff29 	bl	80041b4 <__NVIC_SetPriorityGrouping>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800437c:	f7ff ff3e 	bl	80041fc <__NVIC_GetPriorityGrouping>
 8004380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7ff ff8e 	bl	80042a8 <NVIC_EncodePriority>
 800438c:	4602      	mov	r2, r0
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff5d 	bl	8004254 <__NVIC_SetPriority>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff31 	bl	8004218 <__NVIC_EnableIRQ>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ffa2 	bl	8004310 <SysTick_Config>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043e4:	f7ff fac4 	bl	8003970 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e099      	b.n	8004528 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004414:	e00f      	b.n	8004436 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004416:	f7ff faab 	bl	8003970 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b05      	cmp	r3, #5
 8004422:	d908      	bls.n	8004436 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e078      	b.n	8004528 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e8      	bne.n	8004416 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <HAL_DMA_Init+0x158>)
 8004450:	4013      	ands	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	2b04      	cmp	r3, #4
 800448e:	d107      	bne.n	80044a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4313      	orrs	r3, r2
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f023 0307 	bic.w	r3, r3, #7
 80044b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d117      	bne.n	80044fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa6f 	bl	80049c0 <DMA_CheckFifoParam>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044f6:	2301      	movs	r3, #1
 80044f8:	e016      	b.n	8004528 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fa26 	bl	8004954 <DMA_CalcBaseAndBitshift>
 8004508:	4603      	mov	r3, r0
 800450a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	223f      	movs	r2, #63	; 0x3f
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	f010803f 	.word	0xf010803f

08004534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_DMA_Start_IT+0x26>
 8004556:	2302      	movs	r3, #2
 8004558:	e040      	b.n	80045dc <HAL_DMA_Start_IT+0xa8>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	d12f      	bne.n	80045ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2202      	movs	r2, #2
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f9b8 	bl	80048f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	223f      	movs	r2, #63	; 0x3f
 800458e:	409a      	lsls	r2, r3
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0216 	orr.w	r2, r2, #22
 80045a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0208 	orr.w	r2, r2, #8
 80045ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e005      	b.n	80045da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
 80045d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045f0:	4b92      	ldr	r3, [pc, #584]	; (800483c <HAL_DMA_IRQHandler+0x258>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a92      	ldr	r2, [pc, #584]	; (8004840 <HAL_DMA_IRQHandler+0x25c>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	2208      	movs	r2, #8
 8004610:	409a      	lsls	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01a      	beq.n	8004650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0204 	bic.w	r2, r2, #4
 8004636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	2208      	movs	r2, #8
 800463e:	409a      	lsls	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f043 0201 	orr.w	r2, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004654:	2201      	movs	r2, #1
 8004656:	409a      	lsls	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4013      	ands	r3, r2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	2201      	movs	r2, #1
 8004674:	409a      	lsls	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	f043 0202 	orr.w	r2, r3, #2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468a:	2204      	movs	r2, #4
 800468c:	409a      	lsls	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	2204      	movs	r2, #4
 80046aa:	409a      	lsls	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c0:	2210      	movs	r2, #16
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d043      	beq.n	8004754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03c      	beq.n	8004754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	2210      	movs	r2, #16
 80046e0:	409a      	lsls	r2, r3
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d018      	beq.n	8004726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d024      	beq.n	8004754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
 8004712:	e01f      	b.n	8004754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
 8004724:	e016      	b.n	8004754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d107      	bne.n	8004744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0208 	bic.w	r2, r2, #8
 8004742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004758:	2220      	movs	r2, #32
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 808e 	beq.w	8004882 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8086 	beq.w	8004882 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	2220      	movs	r2, #32
 800477c:	409a      	lsls	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b05      	cmp	r3, #5
 800478c:	d136      	bne.n	80047fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0216 	bic.w	r2, r2, #22
 800479c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <HAL_DMA_IRQHandler+0x1da>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0208 	bic.w	r2, r2, #8
 80047cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	223f      	movs	r2, #63	; 0x3f
 80047d4:	409a      	lsls	r2, r3
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d07d      	beq.n	80048ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
        }
        return;
 80047fa:	e078      	b.n	80048ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01c      	beq.n	8004844 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	2b00      	cmp	r3, #0
 800481e:	d030      	beq.n	8004882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
 8004828:	e02b      	b.n	8004882 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d027      	beq.n	8004882 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e022      	b.n	8004882 <HAL_DMA_IRQHandler+0x29e>
 800483c:	20000000 	.word	0x20000000
 8004840:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0210 	bic.w	r2, r2, #16
 8004860:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d032      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d022      	beq.n	80048dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2205      	movs	r2, #5
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	3301      	adds	r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d307      	bcc.n	80048ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f2      	bne.n	80048ae <HAL_DMA_IRQHandler+0x2ca>
 80048c8:	e000      	b.n	80048cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80048ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4798      	blx	r3
 80048ec:	e000      	b.n	80048f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80048ee:	bf00      	nop
    }
  }
}
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop

080048f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d108      	bne.n	8004938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004936:	e007      	b.n	8004948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	3b10      	subs	r3, #16
 8004964:	4a14      	ldr	r2, [pc, #80]	; (80049b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800496e:	4a13      	ldr	r2, [pc, #76]	; (80049bc <DMA_CalcBaseAndBitshift+0x68>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b03      	cmp	r3, #3
 8004980:	d909      	bls.n	8004996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	1d1a      	adds	r2, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	659a      	str	r2, [r3, #88]	; 0x58
 8004994:	e007      	b.n	80049a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	aaaaaaab 	.word	0xaaaaaaab
 80049bc:	0800eafc 	.word	0x0800eafc

080049c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11f      	bne.n	8004a1a <DMA_CheckFifoParam+0x5a>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d856      	bhi.n	8004a8e <DMA_CheckFifoParam+0xce>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <DMA_CheckFifoParam+0x28>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a0b 	.word	0x08004a0b
 80049f0:	080049f9 	.word	0x080049f9
 80049f4:	08004a8f 	.word	0x08004a8f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d046      	beq.n	8004a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a08:	e043      	b.n	8004a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a12:	d140      	bne.n	8004a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a18:	e03d      	b.n	8004a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	d121      	bne.n	8004a68 <DMA_CheckFifoParam+0xa8>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d837      	bhi.n	8004a9a <DMA_CheckFifoParam+0xda>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <DMA_CheckFifoParam+0x70>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a47 	.word	0x08004a47
 8004a38:	08004a41 	.word	0x08004a41
 8004a3c:	08004a59 	.word	0x08004a59
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e030      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d025      	beq.n	8004a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e022      	b.n	8004a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a60:	d11f      	bne.n	8004aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a66:	e01c      	b.n	8004aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d903      	bls.n	8004a76 <DMA_CheckFifoParam+0xb6>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d003      	beq.n	8004a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a74:	e018      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
      break;
 8004a7a:	e015      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00e      	beq.n	8004aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e00b      	b.n	8004aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e00a      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004a92:	bf00      	nop
 8004a94:	e008      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004a96:	bf00      	nop
 8004a98:	e006      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e004      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e002      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004aa2:	bf00      	nop
 8004aa4:	e000      	b.n	8004aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop

08004ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	; 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	e159      	b.n	8004d88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	f040 8148 	bne.w	8004d82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d005      	beq.n	8004b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d130      	bne.n	8004b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	2203      	movs	r2, #3
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b40:	2201      	movs	r2, #1
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 0201 	and.w	r2, r3, #1
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d017      	beq.n	8004ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	2203      	movs	r2, #3
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 0303 	and.w	r3, r3, #3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d123      	bne.n	8004bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	08da      	lsrs	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3208      	adds	r2, #8
 8004bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	08da      	lsrs	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3208      	adds	r2, #8
 8004bf6:	69b9      	ldr	r1, [r7, #24]
 8004bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	2203      	movs	r2, #3
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	4013      	ands	r3, r2
 8004c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0203 	and.w	r2, r3, #3
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 80a2 	beq.w	8004d82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b57      	ldr	r3, [pc, #348]	; (8004da0 <HAL_GPIO_Init+0x2e8>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	4a56      	ldr	r2, [pc, #344]	; (8004da0 <HAL_GPIO_Init+0x2e8>)
 8004c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4e:	4b54      	ldr	r3, [pc, #336]	; (8004da0 <HAL_GPIO_Init+0x2e8>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c5a:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <HAL_GPIO_Init+0x2ec>)
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	3302      	adds	r3, #2
 8004c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	220f      	movs	r2, #15
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a49      	ldr	r2, [pc, #292]	; (8004da8 <HAL_GPIO_Init+0x2f0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d019      	beq.n	8004cba <HAL_GPIO_Init+0x202>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a48      	ldr	r2, [pc, #288]	; (8004dac <HAL_GPIO_Init+0x2f4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_GPIO_Init+0x1fe>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a47      	ldr	r2, [pc, #284]	; (8004db0 <HAL_GPIO_Init+0x2f8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00d      	beq.n	8004cb2 <HAL_GPIO_Init+0x1fa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a46      	ldr	r2, [pc, #280]	; (8004db4 <HAL_GPIO_Init+0x2fc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <HAL_GPIO_Init+0x1f6>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a45      	ldr	r2, [pc, #276]	; (8004db8 <HAL_GPIO_Init+0x300>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_GPIO_Init+0x1f2>
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	e008      	b.n	8004cbc <HAL_GPIO_Init+0x204>
 8004caa:	2307      	movs	r3, #7
 8004cac:	e006      	b.n	8004cbc <HAL_GPIO_Init+0x204>
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e004      	b.n	8004cbc <HAL_GPIO_Init+0x204>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e002      	b.n	8004cbc <HAL_GPIO_Init+0x204>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_GPIO_Init+0x204>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	f002 0203 	and.w	r2, r2, #3
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	4093      	lsls	r3, r2
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ccc:	4935      	ldr	r1, [pc, #212]	; (8004da4 <HAL_GPIO_Init+0x2ec>)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	089b      	lsrs	r3, r3, #2
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cda:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cfe:	4a2f      	ldr	r2, [pc, #188]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d04:	4b2d      	ldr	r3, [pc, #180]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	43db      	mvns	r3, r3
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	4013      	ands	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d28:	4a24      	ldr	r2, [pc, #144]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	43db      	mvns	r3, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d52:	4a1a      	ldr	r2, [pc, #104]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4013      	ands	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d7c:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <HAL_GPIO_Init+0x304>)
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	2b0f      	cmp	r3, #15
 8004d8c:	f67f aea2 	bls.w	8004ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	; 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40013800 	.word	0x40013800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40020800 	.word	0x40020800
 8004db4:	40020c00 	.word	0x40020c00
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40013c00 	.word	0x40013c00

08004dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e001      	b.n	8004de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e00:	787b      	ldrb	r3, [r7, #1]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e06:	887a      	ldrh	r2, [r7, #2]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e0c:	e003      	b.n	8004e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e0e:	887b      	ldrh	r3, [r7, #2]
 8004e10:	041a      	lsls	r2, r3, #16
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	619a      	str	r2, [r3, #24]
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e30:	695a      	ldr	r2, [r3, #20]
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d006      	beq.n	8004e48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e3a:	4a05      	ldr	r2, [pc, #20]	; (8004e50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fc f988 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40013c00 	.word	0x40013c00

08004e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e12b      	b.n	80050be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc fc2c 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f001 f862 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a81      	ldr	r2, [pc, #516]	; (80050c8 <HAL_I2C_Init+0x274>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d807      	bhi.n	8004ed8 <HAL_I2C_Init+0x84>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a80      	ldr	r2, [pc, #512]	; (80050cc <HAL_I2C_Init+0x278>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bf94      	ite	ls
 8004ed0:	2301      	movls	r3, #1
 8004ed2:	2300      	movhi	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e006      	b.n	8004ee6 <HAL_I2C_Init+0x92>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a7d      	ldr	r2, [pc, #500]	; (80050d0 <HAL_I2C_Init+0x27c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0e7      	b.n	80050be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a78      	ldr	r2, [pc, #480]	; (80050d4 <HAL_I2C_Init+0x280>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	; (80050c8 <HAL_I2C_Init+0x274>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <HAL_I2C_Init+0xd4>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e009      	b.n	8004f3c <HAL_I2C_Init+0xe8>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a69      	ldr	r2, [pc, #420]	; (80050d8 <HAL_I2C_Init+0x284>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	495c      	ldr	r1, [pc, #368]	; (80050c8 <HAL_I2C_Init+0x274>)
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	d819      	bhi.n	8004f90 <HAL_I2C_Init+0x13c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1e59      	subs	r1, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f70:	400b      	ands	r3, r1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_I2C_Init+0x138>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1e59      	subs	r1, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	e051      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e04f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <HAL_I2C_Init+0x168>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	440b      	add	r3, r1
 8004fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004faa:	3301      	adds	r3, #1
 8004fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e012      	b.n	8004fe2 <HAL_I2C_Init+0x18e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Init+0x196>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e022      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10e      	bne.n	8005010 <HAL_I2C_Init+0x1bc>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1e58      	subs	r0, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	440b      	add	r3, r1
 8005000:	fbb0 f3f3 	udiv	r3, r0, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500e:	e00f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	6809      	ldr	r1, [r1, #0]
 8005034:	4313      	orrs	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800505e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6911      	ldr	r1, [r2, #16]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	430b      	orrs	r3, r1
 8005072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	000186a0 	.word	0x000186a0
 80050cc:	001e847f 	.word	0x001e847f
 80050d0:	003d08ff 	.word	0x003d08ff
 80050d4:	431bde83 	.word	0x431bde83
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	461a      	mov	r2, r3
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
 80050ec:	4613      	mov	r3, r2
 80050ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7fe fc3e 	bl	8003970 <HAL_GetTick>
 80050f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b20      	cmp	r3, #32
 8005100:	f040 80e0 	bne.w	80052c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	2319      	movs	r3, #25
 800510a:	2201      	movs	r2, #1
 800510c:	4970      	ldr	r1, [pc, #448]	; (80052d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f964 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800511a:	2302      	movs	r3, #2
 800511c:	e0d3      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_I2C_Master_Transmit+0x50>
 8005128:	2302      	movs	r3, #2
 800512a:	e0cc      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d007      	beq.n	8005152 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005160:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2221      	movs	r2, #33	; 0x21
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2210      	movs	r2, #16
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	893a      	ldrh	r2, [r7, #8]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29a      	uxth	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005194:	8979      	ldrh	r1, [r7, #10]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6a3a      	ldr	r2, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f89c 	bl	80052d8 <I2C_MasterRequestWrite>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e08d      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051aa:	2300      	movs	r3, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051c0:	e066      	b.n	8005290 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	6a39      	ldr	r1, [r7, #32]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 f9de 	bl	8005588 <I2C_WaitOnTXEFlagUntilTimeout>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d107      	bne.n	80051ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e06b      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b04      	cmp	r3, #4
 800522a:	d11b      	bne.n	8005264 <HAL_I2C_Master_Transmit+0x188>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	d017      	beq.n	8005264 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	6a39      	ldr	r1, [r7, #32]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 f9ce 	bl	800560a <I2C_WaitOnBTFFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	2b04      	cmp	r3, #4
 800527a:	d107      	bne.n	800528c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e01a      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d194      	bne.n	80051c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	00100002 	.word	0x00100002
 80052d4:	ffff0000 	.word	0xffff0000

080052d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	460b      	mov	r3, r1
 80052e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d006      	beq.n	8005302 <I2C_MasterRequestWrite+0x2a>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d003      	beq.n	8005302 <I2C_MasterRequestWrite+0x2a>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005300:	d108      	bne.n	8005314 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e00b      	b.n	800532c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	2b12      	cmp	r3, #18
 800531a:	d107      	bne.n	800532c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f84f 	bl	80053dc <I2C_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005352:	d103      	bne.n	800535c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e035      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005368:	d108      	bne.n	800537c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536a:	897b      	ldrh	r3, [r7, #10]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	e01b      	b.n	80053b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800537c:	897b      	ldrh	r3, [r7, #10]
 800537e:	11db      	asrs	r3, r3, #7
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f063 030f 	orn	r3, r3, #15
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	490e      	ldr	r1, [pc, #56]	; (80053d4 <I2C_MasterRequestWrite+0xfc>)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f875 	bl	800548a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e010      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053aa:	897b      	ldrh	r3, [r7, #10]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	4907      	ldr	r1, [pc, #28]	; (80053d8 <I2C_MasterRequestWrite+0x100>)
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f865 	bl	800548a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010008 	.word	0x00010008
 80053d8:	00010002 	.word	0x00010002

080053dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	603b      	str	r3, [r7, #0]
 80053e8:	4613      	mov	r3, r2
 80053ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ec:	e025      	b.n	800543a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d021      	beq.n	800543a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fe fabb 	bl	8003970 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d116      	bne.n	800543a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e023      	b.n	8005482 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10d      	bne.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	43da      	mvns	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	e00c      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	43da      	mvns	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	429a      	cmp	r2, r3
 800547e:	d0b6      	beq.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
 8005496:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005498:	e051      	b.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a8:	d123      	bne.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f043 0204 	orr.w	r2, r3, #4
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e046      	b.n	8005580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d021      	beq.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fa:	f7fe fa39 	bl	8003970 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	429a      	cmp	r2, r3
 8005508:	d302      	bcc.n	8005510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d116      	bne.n	800553e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e020      	b.n	8005580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0c1b      	lsrs	r3, r3, #16
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d10c      	bne.n	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	43da      	mvns	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4013      	ands	r3, r2
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	bf14      	ite	ne
 800555a:	2301      	movne	r3, #1
 800555c:	2300      	moveq	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e00b      	b.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	43da      	mvns	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d18d      	bne.n	800549a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005594:	e02d      	b.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f878 	bl	800568c <I2C_IsAcknowledgeFailed>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e02d      	b.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d021      	beq.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ae:	f7fe f9df 	bl	8003970 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d302      	bcc.n	80055c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d116      	bne.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f043 0220 	orr.w	r2, r3, #32
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e007      	b.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b80      	cmp	r3, #128	; 0x80
 80055fe:	d1ca      	bne.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	60b9      	str	r1, [r7, #8]
 8005614:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005616:	e02d      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 f837 	bl	800568c <I2C_IsAcknowledgeFailed>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e02d      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d021      	beq.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fe f99e 	bl	8003970 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d116      	bne.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f043 0220 	orr.w	r2, r3, #32
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e007      	b.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b04      	cmp	r3, #4
 8005680:	d1ca      	bne.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800569e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a2:	d11b      	bne.n	80056dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f043 0204 	orr.w	r2, r3, #4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e264      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d075      	beq.n	80057f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800570a:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 030c 	and.w	r3, r3, #12
 8005712:	2b04      	cmp	r3, #4
 8005714:	d00c      	beq.n	8005730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005716:	4ba0      	ldr	r3, [pc, #640]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800571e:	2b08      	cmp	r3, #8
 8005720:	d112      	bne.n	8005748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005722:	4b9d      	ldr	r3, [pc, #628]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572e:	d10b      	bne.n	8005748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005730:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05b      	beq.n	80057f4 <HAL_RCC_OscConfig+0x108>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d157      	bne.n	80057f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e23f      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d106      	bne.n	8005760 <HAL_RCC_OscConfig+0x74>
 8005752:	4b91      	ldr	r3, [pc, #580]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a90      	ldr	r2, [pc, #576]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e01d      	b.n	800579c <HAL_RCC_OscConfig+0xb0>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005768:	d10c      	bne.n	8005784 <HAL_RCC_OscConfig+0x98>
 800576a:	4b8b      	ldr	r3, [pc, #556]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a8a      	ldr	r2, [pc, #552]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a87      	ldr	r2, [pc, #540]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	e00b      	b.n	800579c <HAL_RCC_OscConfig+0xb0>
 8005784:	4b84      	ldr	r3, [pc, #528]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a83      	ldr	r2, [pc, #524]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b81      	ldr	r3, [pc, #516]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a80      	ldr	r2, [pc, #512]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fe f8e4 	bl	8003970 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fe f8e0 	bl	8003970 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b64      	cmp	r3, #100	; 0x64
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e204      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b76      	ldr	r3, [pc, #472]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0xc0>
 80057ca:	e014      	b.n	80057f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fe f8d0 	bl	8003970 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d4:	f7fe f8cc 	bl	8003970 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e1f0      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057e6:	4b6c      	ldr	r3, [pc, #432]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0xe8>
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d063      	beq.n	80058ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005802:	4b65      	ldr	r3, [pc, #404]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800580e:	4b62      	ldr	r3, [pc, #392]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005816:	2b08      	cmp	r3, #8
 8005818:	d11c      	bne.n	8005854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800581a:	4b5f      	ldr	r3, [pc, #380]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d116      	bne.n	8005854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	4b5c      	ldr	r3, [pc, #368]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_RCC_OscConfig+0x152>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e1c4      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800583e:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4952      	ldr	r1, [pc, #328]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005852:	e03a      	b.n	80058ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800585c:	4b4f      	ldr	r3, [pc, #316]	; (800599c <HAL_RCC_OscConfig+0x2b0>)
 800585e:	2201      	movs	r2, #1
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fe f885 	bl	8003970 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586a:	f7fe f881 	bl	8003970 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1a5      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005888:	4b43      	ldr	r3, [pc, #268]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4940      	ldr	r1, [pc, #256]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	4313      	orrs	r3, r2
 800589a:	600b      	str	r3, [r1, #0]
 800589c:	e015      	b.n	80058ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589e:	4b3f      	ldr	r3, [pc, #252]	; (800599c <HAL_RCC_OscConfig+0x2b0>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe f864 	bl	8003970 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fe f860 	bl	8003970 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e184      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058be:	4b36      	ldr	r3, [pc, #216]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d030      	beq.n	8005938 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <HAL_RCC_OscConfig+0x2b4>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe f844 	bl	8003970 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058ec:	f7fe f840 	bl	8003970 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e164      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCC_OscConfig+0x200>
 800590a:	e015      	b.n	8005938 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800590c:	4b24      	ldr	r3, [pc, #144]	; (80059a0 <HAL_RCC_OscConfig+0x2b4>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005912:	f7fe f82d 	bl	8003970 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800591a:	f7fe f829 	bl	8003970 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e14d      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800592e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1f0      	bne.n	800591a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a0 	beq.w	8005a86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10f      	bne.n	8005976 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005956:	2300      	movs	r3, #0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	4a0e      	ldr	r2, [pc, #56]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	; 0x40
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597e:	2b00      	cmp	r3, #0
 8005980:	d121      	bne.n	80059c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a07      	ldr	r2, [pc, #28]	; (80059a4 <HAL_RCC_OscConfig+0x2b8>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598e:	f7fd ffef 	bl	8003970 <HAL_GetTick>
 8005992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005994:	e011      	b.n	80059ba <HAL_RCC_OscConfig+0x2ce>
 8005996:	bf00      	nop
 8005998:	40023800 	.word	0x40023800
 800599c:	42470000 	.word	0x42470000
 80059a0:	42470e80 	.word	0x42470e80
 80059a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a8:	f7fd ffe2 	bl	8003970 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e106      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ba:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <HAL_RCC_OscConfig+0x4e4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d106      	bne.n	80059dc <HAL_RCC_OscConfig+0x2f0>
 80059ce:	4b81      	ldr	r3, [pc, #516]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a80      	ldr	r2, [pc, #512]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
 80059da:	e01c      	b.n	8005a16 <HAL_RCC_OscConfig+0x32a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b05      	cmp	r3, #5
 80059e2:	d10c      	bne.n	80059fe <HAL_RCC_OscConfig+0x312>
 80059e4:	4b7b      	ldr	r3, [pc, #492]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a7a      	ldr	r2, [pc, #488]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059ea:	f043 0304 	orr.w	r3, r3, #4
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
 80059f0:	4b78      	ldr	r3, [pc, #480]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f4:	4a77      	ldr	r2, [pc, #476]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 80059f6:	f043 0301 	orr.w	r3, r3, #1
 80059fa:	6713      	str	r3, [r2, #112]	; 0x70
 80059fc:	e00b      	b.n	8005a16 <HAL_RCC_OscConfig+0x32a>
 80059fe:	4b75      	ldr	r3, [pc, #468]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	4a74      	ldr	r2, [pc, #464]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0a:	4b72      	ldr	r3, [pc, #456]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0e:	4a71      	ldr	r2, [pc, #452]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d015      	beq.n	8005a4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fd ffa7 	bl	8003970 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fd ffa3 	bl	8003970 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0c5      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ee      	beq.n	8005a26 <HAL_RCC_OscConfig+0x33a>
 8005a48:	e014      	b.n	8005a74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a4a:	f7fd ff91 	bl	8003970 <HAL_GetTick>
 8005a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	e00a      	b.n	8005a68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a52:	f7fd ff8d 	bl	8003970 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e0af      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a68:	4b5a      	ldr	r3, [pc, #360]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1ee      	bne.n	8005a52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4b56      	ldr	r3, [pc, #344]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	4a55      	ldr	r2, [pc, #340]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 809b 	beq.w	8005bc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a90:	4b50      	ldr	r3, [pc, #320]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 030c 	and.w	r3, r3, #12
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d05c      	beq.n	8005b56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d141      	bne.n	8005b28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aa4:	4b4c      	ldr	r3, [pc, #304]	; (8005bd8 <HAL_RCC_OscConfig+0x4ec>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aaa:	f7fd ff61 	bl	8003970 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ab0:	e008      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab2:	f7fd ff5d 	bl	8003970 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e081      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac4:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f0      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	019b      	lsls	r3, r3, #6
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	4937      	ldr	r1, [pc, #220]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005afa:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <HAL_RCC_OscConfig+0x4ec>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b00:	f7fd ff36 	bl	8003970 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b08:	f7fd ff32 	bl	8003970 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e056      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b1a:	4b2e      	ldr	r3, [pc, #184]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x41c>
 8005b26:	e04e      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b28:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_RCC_OscConfig+0x4ec>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2e:	f7fd ff1f 	bl	8003970 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fd ff1b 	bl	8003970 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e03f      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b48:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x44a>
 8005b54:	e037      	b.n	8005bc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e032      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <HAL_RCC_OscConfig+0x4e8>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d028      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d121      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d11a      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b92:	4013      	ands	r3, r2
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	3b01      	subs	r3, #1
 8005bac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d107      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d001      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3718      	adds	r7, #24
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40007000 	.word	0x40007000
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	42470060 	.word	0x42470060

08005bdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0cc      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b68      	ldr	r3, [pc, #416]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0307 	and.w	r3, r3, #7
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d90c      	bls.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b65      	ldr	r3, [pc, #404]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b63      	ldr	r3, [pc, #396]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0307 	and.w	r3, r3, #7
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0b8      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d020      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d005      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c30:	4b59      	ldr	r3, [pc, #356]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a58      	ldr	r2, [pc, #352]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c48:	4b53      	ldr	r3, [pc, #332]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4a52      	ldr	r2, [pc, #328]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c54:	4b50      	ldr	r3, [pc, #320]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	494d      	ldr	r1, [pc, #308]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d044      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d107      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7a:	4b47      	ldr	r3, [pc, #284]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d119      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e07f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d003      	beq.n	8005c9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c9a:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e06f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005caa:	4b3b      	ldr	r3, [pc, #236]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e067      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cba:	4b37      	ldr	r3, [pc, #220]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f023 0203 	bic.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	4934      	ldr	r1, [pc, #208]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ccc:	f7fd fe50 	bl	8003970 <HAL_GetTick>
 8005cd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd4:	f7fd fe4c 	bl	8003970 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e04f      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cea:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 020c 	and.w	r2, r3, #12
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d1eb      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	683a      	ldr	r2, [r7, #0]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d20c      	bcs.n	8005d24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0a:	4b22      	ldr	r3, [pc, #136]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	b2d2      	uxtb	r2, r2
 8005d10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d12:	4b20      	ldr	r3, [pc, #128]	; (8005d94 <HAL_RCC_ClockConfig+0x1b8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e032      	b.n	8005d8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d30:	4b19      	ldr	r3, [pc, #100]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4916      	ldr	r1, [pc, #88]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d4e:	4b12      	ldr	r3, [pc, #72]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	490e      	ldr	r1, [pc, #56]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d62:	f000 f821 	bl	8005da8 <HAL_RCC_GetSysClockFreq>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	091b      	lsrs	r3, r3, #4
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	490a      	ldr	r1, [pc, #40]	; (8005d9c <HAL_RCC_ClockConfig+0x1c0>)
 8005d74:	5ccb      	ldrb	r3, [r1, r3]
 8005d76:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d7e:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fd fdb0 	bl	80038e8 <HAL_InitTick>

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	40023c00 	.word	0x40023c00
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	08009d9c 	.word	0x08009d9c
 8005da0:	20000000 	.word	0x20000000
 8005da4:	2000001c 	.word	0x2000001c

08005da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	607b      	str	r3, [r7, #4]
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	2300      	movs	r3, #0
 8005dba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc0:	4b67      	ldr	r3, [pc, #412]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d00d      	beq.n	8005de8 <HAL_RCC_GetSysClockFreq+0x40>
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	f200 80bd 	bhi.w	8005f4c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x34>
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dda:	e0b7      	b.n	8005f4c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ddc:	4b61      	ldr	r3, [pc, #388]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005dde:	60bb      	str	r3, [r7, #8]
       break;
 8005de0:	e0b7      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005de4:	60bb      	str	r3, [r7, #8]
      break;
 8005de6:	e0b4      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005de8:	4b5d      	ldr	r3, [pc, #372]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005df0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005df2:	4b5b      	ldr	r3, [pc, #364]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d04d      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfe:	4b58      	ldr	r3, [pc, #352]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	099b      	lsrs	r3, r3, #6
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005e0e:	f04f 0100 	mov.w	r1, #0
 8005e12:	ea02 0800 	and.w	r8, r2, r0
 8005e16:	ea03 0901 	and.w	r9, r3, r1
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	f04f 0200 	mov.w	r2, #0
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	014b      	lsls	r3, r1, #5
 8005e28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e2c:	0142      	lsls	r2, r0, #5
 8005e2e:	4610      	mov	r0, r2
 8005e30:	4619      	mov	r1, r3
 8005e32:	ebb0 0008 	subs.w	r0, r0, r8
 8005e36:	eb61 0109 	sbc.w	r1, r1, r9
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	018b      	lsls	r3, r1, #6
 8005e44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e48:	0182      	lsls	r2, r0, #6
 8005e4a:	1a12      	subs	r2, r2, r0
 8005e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8005e50:	f04f 0000 	mov.w	r0, #0
 8005e54:	f04f 0100 	mov.w	r1, #0
 8005e58:	00d9      	lsls	r1, r3, #3
 8005e5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e5e:	00d0      	lsls	r0, r2, #3
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	eb12 0208 	adds.w	r2, r2, r8
 8005e68:	eb43 0309 	adc.w	r3, r3, r9
 8005e6c:	f04f 0000 	mov.w	r0, #0
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	0299      	lsls	r1, r3, #10
 8005e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e7a:	0290      	lsls	r0, r2, #10
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	f7fa fee4 	bl	8000c58 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4613      	mov	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e04a      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9a:	4b31      	ldr	r3, [pc, #196]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	099b      	lsrs	r3, r3, #6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	ea02 0400 	and.w	r4, r2, r0
 8005eb2:	ea03 0501 	and.w	r5, r3, r1
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	014b      	lsls	r3, r1, #5
 8005ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ec8:	0142      	lsls	r2, r0, #5
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	1b00      	subs	r0, r0, r4
 8005ed0:	eb61 0105 	sbc.w	r1, r1, r5
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	018b      	lsls	r3, r1, #6
 8005ede:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee2:	0182      	lsls	r2, r0, #6
 8005ee4:	1a12      	subs	r2, r2, r0
 8005ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eea:	f04f 0000 	mov.w	r0, #0
 8005eee:	f04f 0100 	mov.w	r1, #0
 8005ef2:	00d9      	lsls	r1, r3, #3
 8005ef4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef8:	00d0      	lsls	r0, r2, #3
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	1912      	adds	r2, r2, r4
 8005f00:	eb45 0303 	adc.w	r3, r5, r3
 8005f04:	f04f 0000 	mov.w	r0, #0
 8005f08:	f04f 0100 	mov.w	r1, #0
 8005f0c:	0299      	lsls	r1, r3, #10
 8005f0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f12:	0290      	lsls	r0, r2, #10
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	f7fa fe98 	bl	8000c58 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f30:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	60bb      	str	r3, [r7, #8]
      break;
 8005f4a:	e002      	b.n	8005f52 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f4e:	60bb      	str	r3, [r7, #8]
      break;
 8005f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f52:	68bb      	ldr	r3, [r7, #8]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800
 8005f64:	00f42400 	.word	0x00f42400

08005f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000000 	.word	0x20000000

08005f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f84:	f7ff fff0 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	0a9b      	lsrs	r3, r3, #10
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	4903      	ldr	r1, [pc, #12]	; (8005fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f96:	5ccb      	ldrb	r3, [r1, r3]
 8005f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	08009dac 	.word	0x08009dac

08005fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fac:	f7ff ffdc 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	0b5b      	lsrs	r3, r3, #13
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	4903      	ldr	r1, [pc, #12]	; (8005fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fbe:	5ccb      	ldrb	r3, [r1, r3]
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	08009dac 	.word	0x08009dac

08005fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e041      	b.n	8006066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc f840 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f000 fa84 	bl	800651c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e044      	b.n	8006112 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_TIM_Base_Start_IT+0xb0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d018      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x6c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b2:	d013      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x6c>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1a      	ldr	r2, [pc, #104]	; (8006124 <HAL_TIM_Base_Start_IT+0xb4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00e      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x6c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_TIM_Base_Start_IT+0xb8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d009      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x6c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a17      	ldr	r2, [pc, #92]	; (800612c <HAL_TIM_Base_Start_IT+0xbc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_Base_Start_IT+0x6c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a16      	ldr	r2, [pc, #88]	; (8006130 <HAL_TIM_Base_Start_IT+0xc0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d111      	bne.n	8006100 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d010      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fe:	e007      	b.n	8006110 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0201 	orr.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40014000 	.word	0x40014000

08006134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b02      	cmp	r3, #2
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0202 	mvn.w	r2, #2
 8006160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f9b2 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9a4 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f9b5 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0204 	mvn.w	r2, #4
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2202      	movs	r2, #2
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f988 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f97a 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f98b 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0208 	mvn.w	r2, #8
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2204      	movs	r2, #4
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f95e 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f950 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f961 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b10      	cmp	r3, #16
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b10      	cmp	r3, #16
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0210 	mvn.w	r2, #16
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2208      	movs	r2, #8
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f934 	bl	80064e0 <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f926 	bl	80064cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f937 	bl	80064f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0201 	mvn.w	r2, #1
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fa ff3c 	bl	8001130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 faae 	bl	8006840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d10e      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d107      	bne.n	8006310 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f8fc 	bl	8006508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d10e      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b20      	cmp	r3, #32
 800632a:	d107      	bne.n	800633c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0220 	mvn.w	r2, #32
 8006334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa78 	bl	800682c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800633c:	bf00      	nop
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_TIM_ConfigClockSource+0x18>
 8006358:	2302      	movs	r3, #2
 800635a:	e0b3      	b.n	80064c4 <HAL_TIM_ConfigClockSource+0x180>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800637a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006394:	d03e      	beq.n	8006414 <HAL_TIM_ConfigClockSource+0xd0>
 8006396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639a:	f200 8087 	bhi.w	80064ac <HAL_TIM_ConfigClockSource+0x168>
 800639e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a2:	f000 8085 	beq.w	80064b0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063aa:	d87f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063ac:	2b70      	cmp	r3, #112	; 0x70
 80063ae:	d01a      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xa2>
 80063b0:	2b70      	cmp	r3, #112	; 0x70
 80063b2:	d87b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063b4:	2b60      	cmp	r3, #96	; 0x60
 80063b6:	d050      	beq.n	800645a <HAL_TIM_ConfigClockSource+0x116>
 80063b8:	2b60      	cmp	r3, #96	; 0x60
 80063ba:	d877      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063bc:	2b50      	cmp	r3, #80	; 0x50
 80063be:	d03c      	beq.n	800643a <HAL_TIM_ConfigClockSource+0xf6>
 80063c0:	2b50      	cmp	r3, #80	; 0x50
 80063c2:	d873      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d058      	beq.n	800647a <HAL_TIM_ConfigClockSource+0x136>
 80063c8:	2b40      	cmp	r3, #64	; 0x40
 80063ca:	d86f      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d064      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d86b      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d060      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d867      	bhi.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05c      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d05a      	beq.n	800649a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063e4:	e062      	b.n	80064ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6899      	ldr	r1, [r3, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f000 f98b 	bl	8006710 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	609a      	str	r2, [r3, #8]
      break;
 8006412:	e04e      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6818      	ldr	r0, [r3, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6899      	ldr	r1, [r3, #8]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f000 f974 	bl	8006710 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006436:	609a      	str	r2, [r3, #8]
      break;
 8006438:	e03b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	461a      	mov	r2, r3
 8006448:	f000 f8e8 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2150      	movs	r1, #80	; 0x50
 8006452:	4618      	mov	r0, r3
 8006454:	f000 f941 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8006458:	e02b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6859      	ldr	r1, [r3, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	461a      	mov	r2, r3
 8006468:	f000 f907 	bl	800667a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2160      	movs	r1, #96	; 0x60
 8006472:	4618      	mov	r0, r3
 8006474:	f000 f931 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8006478:	e01b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	6859      	ldr	r1, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	461a      	mov	r2, r3
 8006488:	f000 f8c8 	bl	800661c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2140      	movs	r1, #64	; 0x40
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f921 	bl	80066da <TIM_ITRx_SetConfig>
      break;
 8006498:	e00b      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4610      	mov	r0, r2
 80064a6:	f000 f918 	bl	80066da <TIM_ITRx_SetConfig>
        break;
 80064aa:	e002      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a34      	ldr	r2, [pc, #208]	; (8006600 <TIM_Base_SetConfig+0xe4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00f      	beq.n	8006554 <TIM_Base_SetConfig+0x38>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653a:	d00b      	beq.n	8006554 <TIM_Base_SetConfig+0x38>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a31      	ldr	r2, [pc, #196]	; (8006604 <TIM_Base_SetConfig+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0x38>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a30      	ldr	r2, [pc, #192]	; (8006608 <TIM_Base_SetConfig+0xec>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x38>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2f      	ldr	r2, [pc, #188]	; (800660c <TIM_Base_SetConfig+0xf0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a25      	ldr	r2, [pc, #148]	; (8006600 <TIM_Base_SetConfig+0xe4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01b      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006574:	d017      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a22      	ldr	r2, [pc, #136]	; (8006604 <TIM_Base_SetConfig+0xe8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a21      	ldr	r2, [pc, #132]	; (8006608 <TIM_Base_SetConfig+0xec>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00f      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <TIM_Base_SetConfig+0xf0>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00b      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <TIM_Base_SetConfig+0xf4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d007      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <TIM_Base_SetConfig+0xf8>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d003      	beq.n	80065a6 <TIM_Base_SetConfig+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <TIM_Base_SetConfig+0xfc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d108      	bne.n	80065b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a08      	ldr	r2, [pc, #32]	; (8006600 <TIM_Base_SetConfig+0xe4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d103      	bne.n	80065ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	615a      	str	r2, [r3, #20]
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40010000 	.word	0x40010000
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40000c00 	.word	0x40000c00
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 030a 	bic.w	r3, r3, #10
 8006658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	621a      	str	r2, [r3, #32]
}
 800666e:	bf00      	nop
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667a:	b480      	push	{r7}
 800667c:	b087      	sub	sp, #28
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f023 0210 	bic.w	r2, r3, #16
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	031b      	lsls	r3, r3, #12
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f043 0307 	orr.w	r3, r3, #7
 80066fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	021a      	lsls	r2, r3, #8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	431a      	orrs	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4313      	orrs	r3, r2
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	609a      	str	r2, [r3, #8]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006764:	2302      	movs	r3, #2
 8006766:	e050      	b.n	800680a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1c      	ldr	r2, [pc, #112]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d013      	beq.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a16      	ldr	r2, [pc, #88]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a13      	ldr	r2, [pc, #76]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d10c      	bne.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	40010000 	.word	0x40010000
 800681c:	40000400 	.word	0x40000400
 8006820:	40000800 	.word	0x40000800
 8006824:	40000c00 	.word	0x40000c00
 8006828:	40014000 	.word	0x40014000

0800682c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e03f      	b.n	80068e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fb fc50 	bl	8002120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2224      	movs	r2, #36	; 0x24
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f905 	bl	8006aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b08a      	sub	sp, #40	; 0x28
 80068f2:	af02      	add	r7, sp, #8
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	603b      	str	r3, [r7, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b20      	cmp	r3, #32
 800690c:	d17c      	bne.n	8006a08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_UART_Transmit+0x2c>
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e075      	b.n	8006a0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_UART_Transmit+0x3e>
 8006928:	2302      	movs	r3, #2
 800692a:	e06e      	b.n	8006a0a <HAL_UART_Transmit+0x11c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2221      	movs	r2, #33	; 0x21
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006942:	f7fd f815 	bl	8003970 <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695c:	d108      	bne.n	8006970 <HAL_UART_Transmit+0x82>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e003      	b.n	8006978 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006980:	e02a      	b.n	80069d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2180      	movs	r1, #128	; 0x80
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f840 	bl	8006a12 <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e036      	b.n	8006a0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10b      	bne.n	80069ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	3302      	adds	r3, #2
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	e007      	b.n	80069ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3301      	adds	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1cf      	bne.n	8006982 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2200      	movs	r2, #0
 80069ea:	2140      	movs	r1, #64	; 0x40
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 f810 	bl	8006a12 <UART_WaitOnFlagUntilTimeout>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e006      	b.n	8006a0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a22:	e02c      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d028      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a32:	f7fc ff9d 	bl	8003970 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d21d      	bcs.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a50:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e00f      	b.n	8006a9e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d0c3      	beq.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	b09f      	sub	sp, #124	; 0x7c
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	68d9      	ldr	r1, [r3, #12]
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	ea40 0301 	orr.w	r3, r0, r1
 8006ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	431a      	orrs	r2, r3
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006aec:	f021 010c 	bic.w	r1, r1, #12
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af6:	430b      	orrs	r3, r1
 8006af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b06:	6999      	ldr	r1, [r3, #24]
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	ea40 0301 	orr.w	r3, r0, r1
 8006b10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4bc5      	ldr	r3, [pc, #788]	; (8006e2c <UART_SetConfig+0x384>)
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d004      	beq.n	8006b26 <UART_SetConfig+0x7e>
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4bc3      	ldr	r3, [pc, #780]	; (8006e30 <UART_SetConfig+0x388>)
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d103      	bne.n	8006b2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b26:	f7ff fa3f 	bl	8005fa8 <HAL_RCC_GetPCLK2Freq>
 8006b2a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b2c:	e002      	b.n	8006b34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b2e:	f7ff fa27 	bl	8005f80 <HAL_RCC_GetPCLK1Freq>
 8006b32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b3c:	f040 80b6 	bne.w	8006cac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b42:	461c      	mov	r4, r3
 8006b44:	f04f 0500 	mov.w	r5, #0
 8006b48:	4622      	mov	r2, r4
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	1891      	adds	r1, r2, r2
 8006b4e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b50:	415b      	adcs	r3, r3
 8006b52:	647b      	str	r3, [r7, #68]	; 0x44
 8006b54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b58:	1912      	adds	r2, r2, r4
 8006b5a:	eb45 0303 	adc.w	r3, r5, r3
 8006b5e:	f04f 0000 	mov.w	r0, #0
 8006b62:	f04f 0100 	mov.w	r1, #0
 8006b66:	00d9      	lsls	r1, r3, #3
 8006b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b6c:	00d0      	lsls	r0, r2, #3
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	1911      	adds	r1, r2, r4
 8006b74:	6639      	str	r1, [r7, #96]	; 0x60
 8006b76:	416b      	adcs	r3, r5
 8006b78:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	1891      	adds	r1, r2, r2
 8006b86:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b88:	415b      	adcs	r3, r3
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b94:	f7fa f860 	bl	8000c58 <__aeabi_uldivmod>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4ba5      	ldr	r3, [pc, #660]	; (8006e34 <UART_SetConfig+0x38c>)
 8006b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8006ba2:	095b      	lsrs	r3, r3, #5
 8006ba4:	011e      	lsls	r6, r3, #4
 8006ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba8:	461c      	mov	r4, r3
 8006baa:	f04f 0500 	mov.w	r5, #0
 8006bae:	4622      	mov	r2, r4
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	1891      	adds	r1, r2, r2
 8006bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bb6:	415b      	adcs	r3, r3
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bbe:	1912      	adds	r2, r2, r4
 8006bc0:	eb45 0303 	adc.w	r3, r5, r3
 8006bc4:	f04f 0000 	mov.w	r0, #0
 8006bc8:	f04f 0100 	mov.w	r1, #0
 8006bcc:	00d9      	lsls	r1, r3, #3
 8006bce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd2:	00d0      	lsls	r0, r2, #3
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	1911      	adds	r1, r2, r4
 8006bda:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bdc:	416b      	adcs	r3, r5
 8006bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	461a      	mov	r2, r3
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	1891      	adds	r1, r2, r2
 8006bec:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bee:	415b      	adcs	r3, r3
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bf6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bfa:	f7fa f82d 	bl	8000c58 <__aeabi_uldivmod>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	4b8c      	ldr	r3, [pc, #560]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c04:	fba3 1302 	umull	r1, r3, r3, r2
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	2164      	movs	r1, #100	; 0x64
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	3332      	adds	r3, #50	; 0x32
 8006c16:	4a87      	ldr	r2, [pc, #540]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c18:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c24:	441e      	add	r6, r3
 8006c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f04f 0100 	mov.w	r1, #0
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	1894      	adds	r4, r2, r2
 8006c34:	623c      	str	r4, [r7, #32]
 8006c36:	415b      	adcs	r3, r3
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c3e:	1812      	adds	r2, r2, r0
 8006c40:	eb41 0303 	adc.w	r3, r1, r3
 8006c44:	f04f 0400 	mov.w	r4, #0
 8006c48:	f04f 0500 	mov.w	r5, #0
 8006c4c:	00dd      	lsls	r5, r3, #3
 8006c4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c52:	00d4      	lsls	r4, r2, #3
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	1814      	adds	r4, r2, r0
 8006c5a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c5c:	414b      	adcs	r3, r1
 8006c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	1891      	adds	r1, r2, r2
 8006c6c:	61b9      	str	r1, [r7, #24]
 8006c6e:	415b      	adcs	r3, r3
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c7a:	f7f9 ffed 	bl	8000c58 <__aeabi_uldivmod>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c84:	fba3 1302 	umull	r1, r3, r3, r2
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	2164      	movs	r1, #100	; 0x64
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	3332      	adds	r3, #50	; 0x32
 8006c96:	4a67      	ldr	r2, [pc, #412]	; (8006e34 <UART_SetConfig+0x38c>)
 8006c98:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	f003 0207 	and.w	r2, r3, #7
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4432      	add	r2, r6
 8006ca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006caa:	e0b9      	b.n	8006e20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cae:	461c      	mov	r4, r3
 8006cb0:	f04f 0500 	mov.w	r5, #0
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	462b      	mov	r3, r5
 8006cb8:	1891      	adds	r1, r2, r2
 8006cba:	6139      	str	r1, [r7, #16]
 8006cbc:	415b      	adcs	r3, r3
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cc4:	1912      	adds	r2, r2, r4
 8006cc6:	eb45 0303 	adc.w	r3, r5, r3
 8006cca:	f04f 0000 	mov.w	r0, #0
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	00d9      	lsls	r1, r3, #3
 8006cd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cd8:	00d0      	lsls	r0, r2, #3
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	eb12 0804 	adds.w	r8, r2, r4
 8006ce2:	eb43 0905 	adc.w	r9, r3, r5
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f04f 0100 	mov.w	r1, #0
 8006cf0:	f04f 0200 	mov.w	r2, #0
 8006cf4:	f04f 0300 	mov.w	r3, #0
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cfe:	0082      	lsls	r2, r0, #2
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 ffa8 	bl	8000c58 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b49      	ldr	r3, [pc, #292]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011e      	lsls	r6, r3, #4
 8006d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	1894      	adds	r4, r2, r2
 8006d24:	60bc      	str	r4, [r7, #8]
 8006d26:	415b      	adcs	r3, r3
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d2e:	1812      	adds	r2, r2, r0
 8006d30:	eb41 0303 	adc.w	r3, r1, r3
 8006d34:	f04f 0400 	mov.w	r4, #0
 8006d38:	f04f 0500 	mov.w	r5, #0
 8006d3c:	00dd      	lsls	r5, r3, #3
 8006d3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d42:	00d4      	lsls	r4, r2, #3
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	1814      	adds	r4, r2, r0
 8006d4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d4c:	414b      	adcs	r3, r1
 8006d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f04f 0100 	mov.w	r1, #0
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	008b      	lsls	r3, r1, #2
 8006d64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d68:	0082      	lsls	r2, r0, #2
 8006d6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d6e:	f7f9 ff73 	bl	8000c58 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b2f      	ldr	r3, [pc, #188]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <UART_SetConfig+0x38c>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d96:	441e      	add	r6, r3
 8006d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	1894      	adds	r4, r2, r2
 8006da6:	603c      	str	r4, [r7, #0]
 8006da8:	415b      	adcs	r3, r3
 8006daa:	607b      	str	r3, [r7, #4]
 8006dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db0:	1812      	adds	r2, r2, r0
 8006db2:	eb41 0303 	adc.w	r3, r1, r3
 8006db6:	f04f 0400 	mov.w	r4, #0
 8006dba:	f04f 0500 	mov.w	r5, #0
 8006dbe:	00dd      	lsls	r5, r3, #3
 8006dc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dc4:	00d4      	lsls	r4, r2, #3
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	462b      	mov	r3, r5
 8006dca:	eb12 0a00 	adds.w	sl, r2, r0
 8006dce:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f04f 0100 	mov.w	r1, #0
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	008b      	lsls	r3, r1, #2
 8006de6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dea:	0082      	lsls	r2, r0, #2
 8006dec:	4650      	mov	r0, sl
 8006dee:	4659      	mov	r1, fp
 8006df0:	f7f9 ff32 	bl	8000c58 <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <UART_SetConfig+0x38c>)
 8006dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	2164      	movs	r1, #100	; 0x64
 8006e02:	fb01 f303 	mul.w	r3, r1, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	011b      	lsls	r3, r3, #4
 8006e0a:	3332      	adds	r3, #50	; 0x32
 8006e0c:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <UART_SetConfig+0x38c>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4432      	add	r2, r6
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	377c      	adds	r7, #124	; 0x7c
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40011000 	.word	0x40011000
 8006e30:	40011400 	.word	0x40011400
 8006e34:	51eb851f 	.word	0x51eb851f

08006e38 <__errno>:
 8006e38:	4b01      	ldr	r3, [pc, #4]	; (8006e40 <__errno+0x8>)
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000024 	.word	0x20000024

08006e44 <__libc_init_array>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	4d0d      	ldr	r5, [pc, #52]	; (8006e7c <__libc_init_array+0x38>)
 8006e48:	4c0d      	ldr	r4, [pc, #52]	; (8006e80 <__libc_init_array+0x3c>)
 8006e4a:	1b64      	subs	r4, r4, r5
 8006e4c:	10a4      	asrs	r4, r4, #2
 8006e4e:	2600      	movs	r6, #0
 8006e50:	42a6      	cmp	r6, r4
 8006e52:	d109      	bne.n	8006e68 <__libc_init_array+0x24>
 8006e54:	4d0b      	ldr	r5, [pc, #44]	; (8006e84 <__libc_init_array+0x40>)
 8006e56:	4c0c      	ldr	r4, [pc, #48]	; (8006e88 <__libc_init_array+0x44>)
 8006e58:	f002 ff44 	bl	8009ce4 <_init>
 8006e5c:	1b64      	subs	r4, r4, r5
 8006e5e:	10a4      	asrs	r4, r4, #2
 8006e60:	2600      	movs	r6, #0
 8006e62:	42a6      	cmp	r6, r4
 8006e64:	d105      	bne.n	8006e72 <__libc_init_array+0x2e>
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6c:	4798      	blx	r3
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7ee      	b.n	8006e50 <__libc_init_array+0xc>
 8006e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e76:	4798      	blx	r3
 8006e78:	3601      	adds	r6, #1
 8006e7a:	e7f2      	b.n	8006e62 <__libc_init_array+0x1e>
 8006e7c:	0800eeec 	.word	0x0800eeec
 8006e80:	0800eeec 	.word	0x0800eeec
 8006e84:	0800eeec 	.word	0x0800eeec
 8006e88:	0800eef0 	.word	0x0800eef0

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <__cvt>:
 8006e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	ec55 4b10 	vmov	r4, r5, d0
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	460e      	mov	r6, r1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	462b      	mov	r3, r5
 8006eac:	bfbb      	ittet	lt
 8006eae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eb2:	461d      	movlt	r5, r3
 8006eb4:	2300      	movge	r3, #0
 8006eb6:	232d      	movlt	r3, #45	; 0x2d
 8006eb8:	700b      	strb	r3, [r1, #0]
 8006eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ec0:	4691      	mov	r9, r2
 8006ec2:	f023 0820 	bic.w	r8, r3, #32
 8006ec6:	bfbc      	itt	lt
 8006ec8:	4622      	movlt	r2, r4
 8006eca:	4614      	movlt	r4, r2
 8006ecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ed0:	d005      	beq.n	8006ede <__cvt+0x42>
 8006ed2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ed6:	d100      	bne.n	8006eda <__cvt+0x3e>
 8006ed8:	3601      	adds	r6, #1
 8006eda:	2102      	movs	r1, #2
 8006edc:	e000      	b.n	8006ee0 <__cvt+0x44>
 8006ede:	2103      	movs	r1, #3
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	ab02      	add	r3, sp, #8
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	ec45 4b10 	vmov	d0, r4, r5
 8006eec:	4653      	mov	r3, sl
 8006eee:	4632      	mov	r2, r6
 8006ef0:	f000 fe3a 	bl	8007b68 <_dtoa_r>
 8006ef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ef8:	4607      	mov	r7, r0
 8006efa:	d102      	bne.n	8006f02 <__cvt+0x66>
 8006efc:	f019 0f01 	tst.w	r9, #1
 8006f00:	d022      	beq.n	8006f48 <__cvt+0xac>
 8006f02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f06:	eb07 0906 	add.w	r9, r7, r6
 8006f0a:	d110      	bne.n	8006f2e <__cvt+0x92>
 8006f0c:	783b      	ldrb	r3, [r7, #0]
 8006f0e:	2b30      	cmp	r3, #48	; 0x30
 8006f10:	d10a      	bne.n	8006f28 <__cvt+0x8c>
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f1e:	b918      	cbnz	r0, 8006f28 <__cvt+0x8c>
 8006f20:	f1c6 0601 	rsb	r6, r6, #1
 8006f24:	f8ca 6000 	str.w	r6, [sl]
 8006f28:	f8da 3000 	ldr.w	r3, [sl]
 8006f2c:	4499      	add	r9, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	4620      	mov	r0, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7f9 fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f3a:	b108      	cbz	r0, 8006f40 <__cvt+0xa4>
 8006f3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f40:	2230      	movs	r2, #48	; 0x30
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	454b      	cmp	r3, r9
 8006f46:	d307      	bcc.n	8006f58 <__cvt+0xbc>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f4c:	1bdb      	subs	r3, r3, r7
 8006f4e:	4638      	mov	r0, r7
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	b004      	add	sp, #16
 8006f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	9103      	str	r1, [sp, #12]
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e7f0      	b.n	8006f42 <__cvt+0xa6>

08006f60 <__exponent>:
 8006f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f62:	4603      	mov	r3, r0
 8006f64:	2900      	cmp	r1, #0
 8006f66:	bfb8      	it	lt
 8006f68:	4249      	neglt	r1, r1
 8006f6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f6e:	bfb4      	ite	lt
 8006f70:	222d      	movlt	r2, #45	; 0x2d
 8006f72:	222b      	movge	r2, #43	; 0x2b
 8006f74:	2909      	cmp	r1, #9
 8006f76:	7042      	strb	r2, [r0, #1]
 8006f78:	dd2a      	ble.n	8006fd0 <__exponent+0x70>
 8006f7a:	f10d 0407 	add.w	r4, sp, #7
 8006f7e:	46a4      	mov	ip, r4
 8006f80:	270a      	movs	r7, #10
 8006f82:	46a6      	mov	lr, r4
 8006f84:	460a      	mov	r2, r1
 8006f86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006f8e:	3530      	adds	r5, #48	; 0x30
 8006f90:	2a63      	cmp	r2, #99	; 0x63
 8006f92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	dcf1      	bgt.n	8006f82 <__exponent+0x22>
 8006f9e:	3130      	adds	r1, #48	; 0x30
 8006fa0:	f1ae 0502 	sub.w	r5, lr, #2
 8006fa4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fa8:	1c44      	adds	r4, r0, #1
 8006faa:	4629      	mov	r1, r5
 8006fac:	4561      	cmp	r1, ip
 8006fae:	d30a      	bcc.n	8006fc6 <__exponent+0x66>
 8006fb0:	f10d 0209 	add.w	r2, sp, #9
 8006fb4:	eba2 020e 	sub.w	r2, r2, lr
 8006fb8:	4565      	cmp	r5, ip
 8006fba:	bf88      	it	hi
 8006fbc:	2200      	movhi	r2, #0
 8006fbe:	4413      	add	r3, r2
 8006fc0:	1a18      	subs	r0, r3, r0
 8006fc2:	b003      	add	sp, #12
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006fce:	e7ed      	b.n	8006fac <__exponent+0x4c>
 8006fd0:	2330      	movs	r3, #48	; 0x30
 8006fd2:	3130      	adds	r1, #48	; 0x30
 8006fd4:	7083      	strb	r3, [r0, #2]
 8006fd6:	70c1      	strb	r1, [r0, #3]
 8006fd8:	1d03      	adds	r3, r0, #4
 8006fda:	e7f1      	b.n	8006fc0 <__exponent+0x60>

08006fdc <_printf_float>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	ed2d 8b02 	vpush	{d8}
 8006fe4:	b08d      	sub	sp, #52	; 0x34
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fec:	4616      	mov	r6, r2
 8006fee:	461f      	mov	r7, r3
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	f001 fd5d 	bl	8008ab0 <_localeconv_r>
 8006ff6:	f8d0 a000 	ldr.w	sl, [r0]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7f9 f8f0 	bl	80001e0 <strlen>
 8007000:	2300      	movs	r3, #0
 8007002:	930a      	str	r3, [sp, #40]	; 0x28
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	9305      	str	r3, [sp, #20]
 8007008:	f8d8 3000 	ldr.w	r3, [r8]
 800700c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	f103 0208 	add.w	r2, r3, #8
 800701a:	f8c8 2000 	str.w	r2, [r8]
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007026:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800702a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800702e:	9307      	str	r3, [sp, #28]
 8007030:	f8cd 8018 	str.w	r8, [sp, #24]
 8007034:	ee08 0a10 	vmov	s16, r0
 8007038:	4b9f      	ldr	r3, [pc, #636]	; (80072b8 <_printf_float+0x2dc>)
 800703a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800703e:	f04f 32ff 	mov.w	r2, #4294967295
 8007042:	f7f9 fd7b 	bl	8000b3c <__aeabi_dcmpun>
 8007046:	bb88      	cbnz	r0, 80070ac <_printf_float+0xd0>
 8007048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800704c:	4b9a      	ldr	r3, [pc, #616]	; (80072b8 <_printf_float+0x2dc>)
 800704e:	f04f 32ff 	mov.w	r2, #4294967295
 8007052:	f7f9 fd55 	bl	8000b00 <__aeabi_dcmple>
 8007056:	bb48      	cbnz	r0, 80070ac <_printf_float+0xd0>
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fd44 	bl	8000aec <__aeabi_dcmplt>
 8007064:	b110      	cbz	r0, 800706c <_printf_float+0x90>
 8007066:	232d      	movs	r3, #45	; 0x2d
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800706c:	4b93      	ldr	r3, [pc, #588]	; (80072bc <_printf_float+0x2e0>)
 800706e:	4894      	ldr	r0, [pc, #592]	; (80072c0 <_printf_float+0x2e4>)
 8007070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007074:	bf94      	ite	ls
 8007076:	4698      	movls	r8, r3
 8007078:	4680      	movhi	r8, r0
 800707a:	2303      	movs	r3, #3
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	9b05      	ldr	r3, [sp, #20]
 8007080:	f023 0204 	bic.w	r2, r3, #4
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	f04f 0900 	mov.w	r9, #0
 800708a:	9700      	str	r7, [sp, #0]
 800708c:	4633      	mov	r3, r6
 800708e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007090:	4621      	mov	r1, r4
 8007092:	4628      	mov	r0, r5
 8007094:	f000 f9d8 	bl	8007448 <_printf_common>
 8007098:	3001      	adds	r0, #1
 800709a:	f040 8090 	bne.w	80071be <_printf_float+0x1e2>
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	b00d      	add	sp, #52	; 0x34
 80070a4:	ecbd 8b02 	vpop	{d8}
 80070a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ac:	4642      	mov	r2, r8
 80070ae:	464b      	mov	r3, r9
 80070b0:	4640      	mov	r0, r8
 80070b2:	4649      	mov	r1, r9
 80070b4:	f7f9 fd42 	bl	8000b3c <__aeabi_dcmpun>
 80070b8:	b140      	cbz	r0, 80070cc <_printf_float+0xf0>
 80070ba:	464b      	mov	r3, r9
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bfbc      	itt	lt
 80070c0:	232d      	movlt	r3, #45	; 0x2d
 80070c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070c6:	487f      	ldr	r0, [pc, #508]	; (80072c4 <_printf_float+0x2e8>)
 80070c8:	4b7f      	ldr	r3, [pc, #508]	; (80072c8 <_printf_float+0x2ec>)
 80070ca:	e7d1      	b.n	8007070 <_printf_float+0x94>
 80070cc:	6863      	ldr	r3, [r4, #4]
 80070ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070d2:	9206      	str	r2, [sp, #24]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	d13f      	bne.n	8007158 <_printf_float+0x17c>
 80070d8:	2306      	movs	r3, #6
 80070da:	6063      	str	r3, [r4, #4]
 80070dc:	9b05      	ldr	r3, [sp, #20]
 80070de:	6861      	ldr	r1, [r4, #4]
 80070e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070e4:	2300      	movs	r3, #0
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	ab0a      	add	r3, sp, #40	; 0x28
 80070ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070ee:	ab09      	add	r3, sp, #36	; 0x24
 80070f0:	ec49 8b10 	vmov	d0, r8, r9
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7ff fecd 	bl	8006e9c <__cvt>
 8007102:	9b06      	ldr	r3, [sp, #24]
 8007104:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007106:	2b47      	cmp	r3, #71	; 0x47
 8007108:	4680      	mov	r8, r0
 800710a:	d108      	bne.n	800711e <_printf_float+0x142>
 800710c:	1cc8      	adds	r0, r1, #3
 800710e:	db02      	blt.n	8007116 <_printf_float+0x13a>
 8007110:	6863      	ldr	r3, [r4, #4]
 8007112:	4299      	cmp	r1, r3
 8007114:	dd41      	ble.n	800719a <_printf_float+0x1be>
 8007116:	f1ab 0b02 	sub.w	fp, fp, #2
 800711a:	fa5f fb8b 	uxtb.w	fp, fp
 800711e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007122:	d820      	bhi.n	8007166 <_printf_float+0x18a>
 8007124:	3901      	subs	r1, #1
 8007126:	465a      	mov	r2, fp
 8007128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800712c:	9109      	str	r1, [sp, #36]	; 0x24
 800712e:	f7ff ff17 	bl	8006f60 <__exponent>
 8007132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007134:	1813      	adds	r3, r2, r0
 8007136:	2a01      	cmp	r2, #1
 8007138:	4681      	mov	r9, r0
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	dc02      	bgt.n	8007144 <_printf_float+0x168>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	07d2      	lsls	r2, r2, #31
 8007142:	d501      	bpl.n	8007148 <_printf_float+0x16c>
 8007144:	3301      	adds	r3, #1
 8007146:	6123      	str	r3, [r4, #16]
 8007148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800714c:	2b00      	cmp	r3, #0
 800714e:	d09c      	beq.n	800708a <_printf_float+0xae>
 8007150:	232d      	movs	r3, #45	; 0x2d
 8007152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007156:	e798      	b.n	800708a <_printf_float+0xae>
 8007158:	9a06      	ldr	r2, [sp, #24]
 800715a:	2a47      	cmp	r2, #71	; 0x47
 800715c:	d1be      	bne.n	80070dc <_printf_float+0x100>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1bc      	bne.n	80070dc <_printf_float+0x100>
 8007162:	2301      	movs	r3, #1
 8007164:	e7b9      	b.n	80070da <_printf_float+0xfe>
 8007166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800716a:	d118      	bne.n	800719e <_printf_float+0x1c2>
 800716c:	2900      	cmp	r1, #0
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	dd0b      	ble.n	800718a <_printf_float+0x1ae>
 8007172:	6121      	str	r1, [r4, #16]
 8007174:	b913      	cbnz	r3, 800717c <_printf_float+0x1a0>
 8007176:	6822      	ldr	r2, [r4, #0]
 8007178:	07d0      	lsls	r0, r2, #31
 800717a:	d502      	bpl.n	8007182 <_printf_float+0x1a6>
 800717c:	3301      	adds	r3, #1
 800717e:	440b      	add	r3, r1
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	65a1      	str	r1, [r4, #88]	; 0x58
 8007184:	f04f 0900 	mov.w	r9, #0
 8007188:	e7de      	b.n	8007148 <_printf_float+0x16c>
 800718a:	b913      	cbnz	r3, 8007192 <_printf_float+0x1b6>
 800718c:	6822      	ldr	r2, [r4, #0]
 800718e:	07d2      	lsls	r2, r2, #31
 8007190:	d501      	bpl.n	8007196 <_printf_float+0x1ba>
 8007192:	3302      	adds	r3, #2
 8007194:	e7f4      	b.n	8007180 <_printf_float+0x1a4>
 8007196:	2301      	movs	r3, #1
 8007198:	e7f2      	b.n	8007180 <_printf_float+0x1a4>
 800719a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800719e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a0:	4299      	cmp	r1, r3
 80071a2:	db05      	blt.n	80071b0 <_printf_float+0x1d4>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	6121      	str	r1, [r4, #16]
 80071a8:	07d8      	lsls	r0, r3, #31
 80071aa:	d5ea      	bpl.n	8007182 <_printf_float+0x1a6>
 80071ac:	1c4b      	adds	r3, r1, #1
 80071ae:	e7e7      	b.n	8007180 <_printf_float+0x1a4>
 80071b0:	2900      	cmp	r1, #0
 80071b2:	bfd4      	ite	le
 80071b4:	f1c1 0202 	rsble	r2, r1, #2
 80071b8:	2201      	movgt	r2, #1
 80071ba:	4413      	add	r3, r2
 80071bc:	e7e0      	b.n	8007180 <_printf_float+0x1a4>
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	055a      	lsls	r2, r3, #21
 80071c2:	d407      	bmi.n	80071d4 <_printf_float+0x1f8>
 80071c4:	6923      	ldr	r3, [r4, #16]
 80071c6:	4642      	mov	r2, r8
 80071c8:	4631      	mov	r1, r6
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b8      	blx	r7
 80071ce:	3001      	adds	r0, #1
 80071d0:	d12c      	bne.n	800722c <_printf_float+0x250>
 80071d2:	e764      	b.n	800709e <_printf_float+0xc2>
 80071d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071d8:	f240 80e0 	bls.w	800739c <_printf_float+0x3c0>
 80071dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	f7f9 fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d034      	beq.n	8007256 <_printf_float+0x27a>
 80071ec:	4a37      	ldr	r2, [pc, #220]	; (80072cc <_printf_float+0x2f0>)
 80071ee:	2301      	movs	r3, #1
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	47b8      	blx	r7
 80071f6:	3001      	adds	r0, #1
 80071f8:	f43f af51 	beq.w	800709e <_printf_float+0xc2>
 80071fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007200:	429a      	cmp	r2, r3
 8007202:	db02      	blt.n	800720a <_printf_float+0x22e>
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	07d8      	lsls	r0, r3, #31
 8007208:	d510      	bpl.n	800722c <_printf_float+0x250>
 800720a:	ee18 3a10 	vmov	r3, s16
 800720e:	4652      	mov	r2, sl
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f af41 	beq.w	800709e <_printf_float+0xc2>
 800721c:	f04f 0800 	mov.w	r8, #0
 8007220:	f104 091a 	add.w	r9, r4, #26
 8007224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007226:	3b01      	subs	r3, #1
 8007228:	4543      	cmp	r3, r8
 800722a:	dc09      	bgt.n	8007240 <_printf_float+0x264>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	f100 8105 	bmi.w	800743e <_printf_float+0x462>
 8007234:	68e0      	ldr	r0, [r4, #12]
 8007236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007238:	4298      	cmp	r0, r3
 800723a:	bfb8      	it	lt
 800723c:	4618      	movlt	r0, r3
 800723e:	e730      	b.n	80070a2 <_printf_float+0xc6>
 8007240:	2301      	movs	r3, #1
 8007242:	464a      	mov	r2, r9
 8007244:	4631      	mov	r1, r6
 8007246:	4628      	mov	r0, r5
 8007248:	47b8      	blx	r7
 800724a:	3001      	adds	r0, #1
 800724c:	f43f af27 	beq.w	800709e <_printf_float+0xc2>
 8007250:	f108 0801 	add.w	r8, r8, #1
 8007254:	e7e6      	b.n	8007224 <_printf_float+0x248>
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	dc39      	bgt.n	80072d0 <_printf_float+0x2f4>
 800725c:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <_printf_float+0x2f0>)
 800725e:	2301      	movs	r3, #1
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	f43f af19 	beq.w	800709e <_printf_float+0xc2>
 800726c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007270:	4313      	orrs	r3, r2
 8007272:	d102      	bne.n	800727a <_printf_float+0x29e>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07d9      	lsls	r1, r3, #31
 8007278:	d5d8      	bpl.n	800722c <_printf_float+0x250>
 800727a:	ee18 3a10 	vmov	r3, s16
 800727e:	4652      	mov	r2, sl
 8007280:	4631      	mov	r1, r6
 8007282:	4628      	mov	r0, r5
 8007284:	47b8      	blx	r7
 8007286:	3001      	adds	r0, #1
 8007288:	f43f af09 	beq.w	800709e <_printf_float+0xc2>
 800728c:	f04f 0900 	mov.w	r9, #0
 8007290:	f104 0a1a 	add.w	sl, r4, #26
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	425b      	negs	r3, r3
 8007298:	454b      	cmp	r3, r9
 800729a:	dc01      	bgt.n	80072a0 <_printf_float+0x2c4>
 800729c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729e:	e792      	b.n	80071c6 <_printf_float+0x1ea>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4652      	mov	r2, sl
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f aef7 	beq.w	800709e <_printf_float+0xc2>
 80072b0:	f109 0901 	add.w	r9, r9, #1
 80072b4:	e7ee      	b.n	8007294 <_printf_float+0x2b8>
 80072b6:	bf00      	nop
 80072b8:	7fefffff 	.word	0x7fefffff
 80072bc:	0800eb08 	.word	0x0800eb08
 80072c0:	0800eb0c 	.word	0x0800eb0c
 80072c4:	0800eb14 	.word	0x0800eb14
 80072c8:	0800eb10 	.word	0x0800eb10
 80072cc:	0800eb18 	.word	0x0800eb18
 80072d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bfa8      	it	ge
 80072d8:	461a      	movge	r2, r3
 80072da:	2a00      	cmp	r2, #0
 80072dc:	4691      	mov	r9, r2
 80072de:	dc37      	bgt.n	8007350 <_printf_float+0x374>
 80072e0:	f04f 0b00 	mov.w	fp, #0
 80072e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e8:	f104 021a 	add.w	r2, r4, #26
 80072ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ee:	9305      	str	r3, [sp, #20]
 80072f0:	eba3 0309 	sub.w	r3, r3, r9
 80072f4:	455b      	cmp	r3, fp
 80072f6:	dc33      	bgt.n	8007360 <_printf_float+0x384>
 80072f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072fc:	429a      	cmp	r2, r3
 80072fe:	db3b      	blt.n	8007378 <_printf_float+0x39c>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	07da      	lsls	r2, r3, #31
 8007304:	d438      	bmi.n	8007378 <_printf_float+0x39c>
 8007306:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007308:	9b05      	ldr	r3, [sp, #20]
 800730a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	eba2 0901 	sub.w	r9, r2, r1
 8007312:	4599      	cmp	r9, r3
 8007314:	bfa8      	it	ge
 8007316:	4699      	movge	r9, r3
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	dc35      	bgt.n	800738a <_printf_float+0x3ae>
 800731e:	f04f 0800 	mov.w	r8, #0
 8007322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007326:	f104 0a1a 	add.w	sl, r4, #26
 800732a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	eba3 0309 	sub.w	r3, r3, r9
 8007334:	4543      	cmp	r3, r8
 8007336:	f77f af79 	ble.w	800722c <_printf_float+0x250>
 800733a:	2301      	movs	r3, #1
 800733c:	4652      	mov	r2, sl
 800733e:	4631      	mov	r1, r6
 8007340:	4628      	mov	r0, r5
 8007342:	47b8      	blx	r7
 8007344:	3001      	adds	r0, #1
 8007346:	f43f aeaa 	beq.w	800709e <_printf_float+0xc2>
 800734a:	f108 0801 	add.w	r8, r8, #1
 800734e:	e7ec      	b.n	800732a <_printf_float+0x34e>
 8007350:	4613      	mov	r3, r2
 8007352:	4631      	mov	r1, r6
 8007354:	4642      	mov	r2, r8
 8007356:	4628      	mov	r0, r5
 8007358:	47b8      	blx	r7
 800735a:	3001      	adds	r0, #1
 800735c:	d1c0      	bne.n	80072e0 <_printf_float+0x304>
 800735e:	e69e      	b.n	800709e <_printf_float+0xc2>
 8007360:	2301      	movs	r3, #1
 8007362:	4631      	mov	r1, r6
 8007364:	4628      	mov	r0, r5
 8007366:	9205      	str	r2, [sp, #20]
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f ae97 	beq.w	800709e <_printf_float+0xc2>
 8007370:	9a05      	ldr	r2, [sp, #20]
 8007372:	f10b 0b01 	add.w	fp, fp, #1
 8007376:	e7b9      	b.n	80072ec <_printf_float+0x310>
 8007378:	ee18 3a10 	vmov	r3, s16
 800737c:	4652      	mov	r2, sl
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d1be      	bne.n	8007306 <_printf_float+0x32a>
 8007388:	e689      	b.n	800709e <_printf_float+0xc2>
 800738a:	9a05      	ldr	r2, [sp, #20]
 800738c:	464b      	mov	r3, r9
 800738e:	4442      	add	r2, r8
 8007390:	4631      	mov	r1, r6
 8007392:	4628      	mov	r0, r5
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	d1c1      	bne.n	800731e <_printf_float+0x342>
 800739a:	e680      	b.n	800709e <_printf_float+0xc2>
 800739c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739e:	2a01      	cmp	r2, #1
 80073a0:	dc01      	bgt.n	80073a6 <_printf_float+0x3ca>
 80073a2:	07db      	lsls	r3, r3, #31
 80073a4:	d538      	bpl.n	8007418 <_printf_float+0x43c>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4642      	mov	r2, r8
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	f43f ae74 	beq.w	800709e <_printf_float+0xc2>
 80073b6:	ee18 3a10 	vmov	r3, s16
 80073ba:	4652      	mov	r2, sl
 80073bc:	4631      	mov	r1, r6
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	f43f ae6b 	beq.w	800709e <_printf_float+0xc2>
 80073c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	f7f9 fb82 	bl	8000ad8 <__aeabi_dcmpeq>
 80073d4:	b9d8      	cbnz	r0, 800740e <_printf_float+0x432>
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	f108 0201 	add.w	r2, r8, #1
 80073dc:	3b01      	subs	r3, #1
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	d10e      	bne.n	8007406 <_printf_float+0x42a>
 80073e8:	e659      	b.n	800709e <_printf_float+0xc2>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4652      	mov	r2, sl
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	f43f ae52 	beq.w	800709e <_printf_float+0xc2>
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007400:	3b01      	subs	r3, #1
 8007402:	4543      	cmp	r3, r8
 8007404:	dcf1      	bgt.n	80073ea <_printf_float+0x40e>
 8007406:	464b      	mov	r3, r9
 8007408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800740c:	e6dc      	b.n	80071c8 <_printf_float+0x1ec>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0a1a 	add.w	sl, r4, #26
 8007416:	e7f2      	b.n	80073fe <_printf_float+0x422>
 8007418:	2301      	movs	r3, #1
 800741a:	4642      	mov	r2, r8
 800741c:	e7df      	b.n	80073de <_printf_float+0x402>
 800741e:	2301      	movs	r3, #1
 8007420:	464a      	mov	r2, r9
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae38 	beq.w	800709e <_printf_float+0xc2>
 800742e:	f108 0801 	add.w	r8, r8, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007436:	1a5b      	subs	r3, r3, r1
 8007438:	4543      	cmp	r3, r8
 800743a:	dcf0      	bgt.n	800741e <_printf_float+0x442>
 800743c:	e6fa      	b.n	8007234 <_printf_float+0x258>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 0919 	add.w	r9, r4, #25
 8007446:	e7f4      	b.n	8007432 <_printf_float+0x456>

08007448 <_printf_common>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	4616      	mov	r6, r2
 800744e:	4699      	mov	r9, r3
 8007450:	688a      	ldr	r2, [r1, #8]
 8007452:	690b      	ldr	r3, [r1, #16]
 8007454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007458:	4293      	cmp	r3, r2
 800745a:	bfb8      	it	lt
 800745c:	4613      	movlt	r3, r2
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007464:	4607      	mov	r7, r0
 8007466:	460c      	mov	r4, r1
 8007468:	b10a      	cbz	r2, 800746e <_printf_common+0x26>
 800746a:	3301      	adds	r3, #1
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	0699      	lsls	r1, r3, #26
 8007472:	bf42      	ittt	mi
 8007474:	6833      	ldrmi	r3, [r6, #0]
 8007476:	3302      	addmi	r3, #2
 8007478:	6033      	strmi	r3, [r6, #0]
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	f015 0506 	ands.w	r5, r5, #6
 8007480:	d106      	bne.n	8007490 <_printf_common+0x48>
 8007482:	f104 0a19 	add.w	sl, r4, #25
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	6832      	ldr	r2, [r6, #0]
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	42ab      	cmp	r3, r5
 800748e:	dc26      	bgt.n	80074de <_printf_common+0x96>
 8007490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007494:	1e13      	subs	r3, r2, #0
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	bf18      	it	ne
 800749a:	2301      	movne	r3, #1
 800749c:	0692      	lsls	r2, r2, #26
 800749e:	d42b      	bmi.n	80074f8 <_printf_common+0xb0>
 80074a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d01e      	beq.n	80074ec <_printf_common+0xa4>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	68e5      	ldr	r5, [r4, #12]
 80074b2:	6832      	ldr	r2, [r6, #0]
 80074b4:	f003 0306 	and.w	r3, r3, #6
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	bf08      	it	eq
 80074bc:	1aad      	subeq	r5, r5, r2
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	6922      	ldr	r2, [r4, #16]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	2600      	movs	r6, #0
 80074d4:	341a      	adds	r4, #26
 80074d6:	42b5      	cmp	r5, r6
 80074d8:	d11a      	bne.n	8007510 <_printf_common+0xc8>
 80074da:	2000      	movs	r0, #0
 80074dc:	e008      	b.n	80074f0 <_printf_common+0xa8>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4649      	mov	r1, r9
 80074e4:	4638      	mov	r0, r7
 80074e6:	47c0      	blx	r8
 80074e8:	3001      	adds	r0, #1
 80074ea:	d103      	bne.n	80074f4 <_printf_common+0xac>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	3501      	adds	r5, #1
 80074f6:	e7c6      	b.n	8007486 <_printf_common+0x3e>
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	2030      	movs	r0, #48	; 0x30
 80074fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007502:	4422      	add	r2, r4
 8007504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800750c:	3302      	adds	r3, #2
 800750e:	e7c7      	b.n	80074a0 <_printf_common+0x58>
 8007510:	2301      	movs	r3, #1
 8007512:	4622      	mov	r2, r4
 8007514:	4649      	mov	r1, r9
 8007516:	4638      	mov	r0, r7
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d0e6      	beq.n	80074ec <_printf_common+0xa4>
 800751e:	3601      	adds	r6, #1
 8007520:	e7d9      	b.n	80074d6 <_printf_common+0x8e>
	...

08007524 <_printf_i>:
 8007524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	4691      	mov	r9, r2
 800752c:	7e27      	ldrb	r7, [r4, #24]
 800752e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007530:	2f78      	cmp	r7, #120	; 0x78
 8007532:	4680      	mov	r8, r0
 8007534:	469a      	mov	sl, r3
 8007536:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800753a:	d807      	bhi.n	800754c <_printf_i+0x28>
 800753c:	2f62      	cmp	r7, #98	; 0x62
 800753e:	d80a      	bhi.n	8007556 <_printf_i+0x32>
 8007540:	2f00      	cmp	r7, #0
 8007542:	f000 80d8 	beq.w	80076f6 <_printf_i+0x1d2>
 8007546:	2f58      	cmp	r7, #88	; 0x58
 8007548:	f000 80a3 	beq.w	8007692 <_printf_i+0x16e>
 800754c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007554:	e03a      	b.n	80075cc <_printf_i+0xa8>
 8007556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800755a:	2b15      	cmp	r3, #21
 800755c:	d8f6      	bhi.n	800754c <_printf_i+0x28>
 800755e:	a001      	add	r0, pc, #4	; (adr r0, 8007564 <_printf_i+0x40>)
 8007560:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075d1 	.word	0x080075d1
 800756c:	0800754d 	.word	0x0800754d
 8007570:	0800754d 	.word	0x0800754d
 8007574:	0800754d 	.word	0x0800754d
 8007578:	0800754d 	.word	0x0800754d
 800757c:	080075d1 	.word	0x080075d1
 8007580:	0800754d 	.word	0x0800754d
 8007584:	0800754d 	.word	0x0800754d
 8007588:	0800754d 	.word	0x0800754d
 800758c:	0800754d 	.word	0x0800754d
 8007590:	080076dd 	.word	0x080076dd
 8007594:	08007601 	.word	0x08007601
 8007598:	080076bf 	.word	0x080076bf
 800759c:	0800754d 	.word	0x0800754d
 80075a0:	0800754d 	.word	0x0800754d
 80075a4:	080076ff 	.word	0x080076ff
 80075a8:	0800754d 	.word	0x0800754d
 80075ac:	08007601 	.word	0x08007601
 80075b0:	0800754d 	.word	0x0800754d
 80075b4:	0800754d 	.word	0x0800754d
 80075b8:	080076c7 	.word	0x080076c7
 80075bc:	680b      	ldr	r3, [r1, #0]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	600a      	str	r2, [r1, #0]
 80075c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0a3      	b.n	8007718 <_printf_i+0x1f4>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	6808      	ldr	r0, [r1, #0]
 80075d4:	062e      	lsls	r6, r5, #24
 80075d6:	f100 0304 	add.w	r3, r0, #4
 80075da:	d50a      	bpl.n	80075f2 <_printf_i+0xce>
 80075dc:	6805      	ldr	r5, [r0, #0]
 80075de:	600b      	str	r3, [r1, #0]
 80075e0:	2d00      	cmp	r5, #0
 80075e2:	da03      	bge.n	80075ec <_printf_i+0xc8>
 80075e4:	232d      	movs	r3, #45	; 0x2d
 80075e6:	426d      	negs	r5, r5
 80075e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ec:	485e      	ldr	r0, [pc, #376]	; (8007768 <_printf_i+0x244>)
 80075ee:	230a      	movs	r3, #10
 80075f0:	e019      	b.n	8007626 <_printf_i+0x102>
 80075f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075f6:	6805      	ldr	r5, [r0, #0]
 80075f8:	600b      	str	r3, [r1, #0]
 80075fa:	bf18      	it	ne
 80075fc:	b22d      	sxthne	r5, r5
 80075fe:	e7ef      	b.n	80075e0 <_printf_i+0xbc>
 8007600:	680b      	ldr	r3, [r1, #0]
 8007602:	6825      	ldr	r5, [r4, #0]
 8007604:	1d18      	adds	r0, r3, #4
 8007606:	6008      	str	r0, [r1, #0]
 8007608:	0628      	lsls	r0, r5, #24
 800760a:	d501      	bpl.n	8007610 <_printf_i+0xec>
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	e002      	b.n	8007616 <_printf_i+0xf2>
 8007610:	0669      	lsls	r1, r5, #25
 8007612:	d5fb      	bpl.n	800760c <_printf_i+0xe8>
 8007614:	881d      	ldrh	r5, [r3, #0]
 8007616:	4854      	ldr	r0, [pc, #336]	; (8007768 <_printf_i+0x244>)
 8007618:	2f6f      	cmp	r7, #111	; 0x6f
 800761a:	bf0c      	ite	eq
 800761c:	2308      	moveq	r3, #8
 800761e:	230a      	movne	r3, #10
 8007620:	2100      	movs	r1, #0
 8007622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007626:	6866      	ldr	r6, [r4, #4]
 8007628:	60a6      	str	r6, [r4, #8]
 800762a:	2e00      	cmp	r6, #0
 800762c:	bfa2      	ittt	ge
 800762e:	6821      	ldrge	r1, [r4, #0]
 8007630:	f021 0104 	bicge.w	r1, r1, #4
 8007634:	6021      	strge	r1, [r4, #0]
 8007636:	b90d      	cbnz	r5, 800763c <_printf_i+0x118>
 8007638:	2e00      	cmp	r6, #0
 800763a:	d04d      	beq.n	80076d8 <_printf_i+0x1b4>
 800763c:	4616      	mov	r6, r2
 800763e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007642:	fb03 5711 	mls	r7, r3, r1, r5
 8007646:	5dc7      	ldrb	r7, [r0, r7]
 8007648:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800764c:	462f      	mov	r7, r5
 800764e:	42bb      	cmp	r3, r7
 8007650:	460d      	mov	r5, r1
 8007652:	d9f4      	bls.n	800763e <_printf_i+0x11a>
 8007654:	2b08      	cmp	r3, #8
 8007656:	d10b      	bne.n	8007670 <_printf_i+0x14c>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	07df      	lsls	r7, r3, #31
 800765c:	d508      	bpl.n	8007670 <_printf_i+0x14c>
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	6861      	ldr	r1, [r4, #4]
 8007662:	4299      	cmp	r1, r3
 8007664:	bfde      	ittt	le
 8007666:	2330      	movle	r3, #48	; 0x30
 8007668:	f806 3c01 	strble.w	r3, [r6, #-1]
 800766c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007670:	1b92      	subs	r2, r2, r6
 8007672:	6122      	str	r2, [r4, #16]
 8007674:	f8cd a000 	str.w	sl, [sp]
 8007678:	464b      	mov	r3, r9
 800767a:	aa03      	add	r2, sp, #12
 800767c:	4621      	mov	r1, r4
 800767e:	4640      	mov	r0, r8
 8007680:	f7ff fee2 	bl	8007448 <_printf_common>
 8007684:	3001      	adds	r0, #1
 8007686:	d14c      	bne.n	8007722 <_printf_i+0x1fe>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b004      	add	sp, #16
 800768e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007692:	4835      	ldr	r0, [pc, #212]	; (8007768 <_printf_i+0x244>)
 8007694:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	680e      	ldr	r6, [r1, #0]
 800769c:	061f      	lsls	r7, r3, #24
 800769e:	f856 5b04 	ldr.w	r5, [r6], #4
 80076a2:	600e      	str	r6, [r1, #0]
 80076a4:	d514      	bpl.n	80076d0 <_printf_i+0x1ac>
 80076a6:	07d9      	lsls	r1, r3, #31
 80076a8:	bf44      	itt	mi
 80076aa:	f043 0320 	orrmi.w	r3, r3, #32
 80076ae:	6023      	strmi	r3, [r4, #0]
 80076b0:	b91d      	cbnz	r5, 80076ba <_printf_i+0x196>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f023 0320 	bic.w	r3, r3, #32
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	2310      	movs	r3, #16
 80076bc:	e7b0      	b.n	8007620 <_printf_i+0xfc>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	2378      	movs	r3, #120	; 0x78
 80076c8:	4828      	ldr	r0, [pc, #160]	; (800776c <_printf_i+0x248>)
 80076ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076ce:	e7e3      	b.n	8007698 <_printf_i+0x174>
 80076d0:	065e      	lsls	r6, r3, #25
 80076d2:	bf48      	it	mi
 80076d4:	b2ad      	uxthmi	r5, r5
 80076d6:	e7e6      	b.n	80076a6 <_printf_i+0x182>
 80076d8:	4616      	mov	r6, r2
 80076da:	e7bb      	b.n	8007654 <_printf_i+0x130>
 80076dc:	680b      	ldr	r3, [r1, #0]
 80076de:	6826      	ldr	r6, [r4, #0]
 80076e0:	6960      	ldr	r0, [r4, #20]
 80076e2:	1d1d      	adds	r5, r3, #4
 80076e4:	600d      	str	r5, [r1, #0]
 80076e6:	0635      	lsls	r5, r6, #24
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0x1cc>
 80076ec:	6018      	str	r0, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <_printf_i+0x1d2>
 80076f0:	0671      	lsls	r1, r6, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0x1c8>
 80076f4:	8018      	strh	r0, [r3, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	4616      	mov	r6, r2
 80076fc:	e7ba      	b.n	8007674 <_printf_i+0x150>
 80076fe:	680b      	ldr	r3, [r1, #0]
 8007700:	1d1a      	adds	r2, r3, #4
 8007702:	600a      	str	r2, [r1, #0]
 8007704:	681e      	ldr	r6, [r3, #0]
 8007706:	6862      	ldr	r2, [r4, #4]
 8007708:	2100      	movs	r1, #0
 800770a:	4630      	mov	r0, r6
 800770c:	f7f8 fd70 	bl	80001f0 <memchr>
 8007710:	b108      	cbz	r0, 8007716 <_printf_i+0x1f2>
 8007712:	1b80      	subs	r0, r0, r6
 8007714:	6060      	str	r0, [r4, #4]
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	2300      	movs	r3, #0
 800771c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007720:	e7a8      	b.n	8007674 <_printf_i+0x150>
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	4632      	mov	r2, r6
 8007726:	4649      	mov	r1, r9
 8007728:	4640      	mov	r0, r8
 800772a:	47d0      	blx	sl
 800772c:	3001      	adds	r0, #1
 800772e:	d0ab      	beq.n	8007688 <_printf_i+0x164>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	d413      	bmi.n	800775e <_printf_i+0x23a>
 8007736:	68e0      	ldr	r0, [r4, #12]
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	4298      	cmp	r0, r3
 800773c:	bfb8      	it	lt
 800773e:	4618      	movlt	r0, r3
 8007740:	e7a4      	b.n	800768c <_printf_i+0x168>
 8007742:	2301      	movs	r3, #1
 8007744:	4632      	mov	r2, r6
 8007746:	4649      	mov	r1, r9
 8007748:	4640      	mov	r0, r8
 800774a:	47d0      	blx	sl
 800774c:	3001      	adds	r0, #1
 800774e:	d09b      	beq.n	8007688 <_printf_i+0x164>
 8007750:	3501      	adds	r5, #1
 8007752:	68e3      	ldr	r3, [r4, #12]
 8007754:	9903      	ldr	r1, [sp, #12]
 8007756:	1a5b      	subs	r3, r3, r1
 8007758:	42ab      	cmp	r3, r5
 800775a:	dcf2      	bgt.n	8007742 <_printf_i+0x21e>
 800775c:	e7eb      	b.n	8007736 <_printf_i+0x212>
 800775e:	2500      	movs	r5, #0
 8007760:	f104 0619 	add.w	r6, r4, #25
 8007764:	e7f5      	b.n	8007752 <_printf_i+0x22e>
 8007766:	bf00      	nop
 8007768:	0800eb1a 	.word	0x0800eb1a
 800776c:	0800eb2b 	.word	0x0800eb2b

08007770 <iprintf>:
 8007770:	b40f      	push	{r0, r1, r2, r3}
 8007772:	4b0a      	ldr	r3, [pc, #40]	; (800779c <iprintf+0x2c>)
 8007774:	b513      	push	{r0, r1, r4, lr}
 8007776:	681c      	ldr	r4, [r3, #0]
 8007778:	b124      	cbz	r4, 8007784 <iprintf+0x14>
 800777a:	69a3      	ldr	r3, [r4, #24]
 800777c:	b913      	cbnz	r3, 8007784 <iprintf+0x14>
 800777e:	4620      	mov	r0, r4
 8007780:	f001 f8f8 	bl	8008974 <__sinit>
 8007784:	ab05      	add	r3, sp, #20
 8007786:	9a04      	ldr	r2, [sp, #16]
 8007788:	68a1      	ldr	r1, [r4, #8]
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	4620      	mov	r0, r4
 800778e:	f001 ffcf 	bl	8009730 <_vfiprintf_r>
 8007792:	b002      	add	sp, #8
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	b004      	add	sp, #16
 800779a:	4770      	bx	lr
 800779c:	20000024 	.word	0x20000024

080077a0 <_puts_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	4605      	mov	r5, r0
 80077a6:	b118      	cbz	r0, 80077b0 <_puts_r+0x10>
 80077a8:	6983      	ldr	r3, [r0, #24]
 80077aa:	b90b      	cbnz	r3, 80077b0 <_puts_r+0x10>
 80077ac:	f001 f8e2 	bl	8008974 <__sinit>
 80077b0:	69ab      	ldr	r3, [r5, #24]
 80077b2:	68ac      	ldr	r4, [r5, #8]
 80077b4:	b913      	cbnz	r3, 80077bc <_puts_r+0x1c>
 80077b6:	4628      	mov	r0, r5
 80077b8:	f001 f8dc 	bl	8008974 <__sinit>
 80077bc:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <_puts_r+0xd0>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d120      	bne.n	8007804 <_puts_r+0x64>
 80077c2:	686c      	ldr	r4, [r5, #4]
 80077c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c6:	07db      	lsls	r3, r3, #31
 80077c8:	d405      	bmi.n	80077d6 <_puts_r+0x36>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	0598      	lsls	r0, r3, #22
 80077ce:	d402      	bmi.n	80077d6 <_puts_r+0x36>
 80077d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077d2:	f001 f972 	bl	8008aba <__retarget_lock_acquire_recursive>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	0719      	lsls	r1, r3, #28
 80077da:	d51d      	bpl.n	8007818 <_puts_r+0x78>
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	b1db      	cbz	r3, 8007818 <_puts_r+0x78>
 80077e0:	3e01      	subs	r6, #1
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077e8:	3b01      	subs	r3, #1
 80077ea:	60a3      	str	r3, [r4, #8]
 80077ec:	bb39      	cbnz	r1, 800783e <_puts_r+0x9e>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da38      	bge.n	8007864 <_puts_r+0xc4>
 80077f2:	4622      	mov	r2, r4
 80077f4:	210a      	movs	r1, #10
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f868 	bl	80078cc <__swbuf_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d011      	beq.n	8007824 <_puts_r+0x84>
 8007800:	250a      	movs	r5, #10
 8007802:	e011      	b.n	8007828 <_puts_r+0x88>
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <_puts_r+0xd4>)
 8007806:	429c      	cmp	r4, r3
 8007808:	d101      	bne.n	800780e <_puts_r+0x6e>
 800780a:	68ac      	ldr	r4, [r5, #8]
 800780c:	e7da      	b.n	80077c4 <_puts_r+0x24>
 800780e:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <_puts_r+0xd8>)
 8007810:	429c      	cmp	r4, r3
 8007812:	bf08      	it	eq
 8007814:	68ec      	ldreq	r4, [r5, #12]
 8007816:	e7d5      	b.n	80077c4 <_puts_r+0x24>
 8007818:	4621      	mov	r1, r4
 800781a:	4628      	mov	r0, r5
 800781c:	f000 f8a8 	bl	8007970 <__swsetup_r>
 8007820:	2800      	cmp	r0, #0
 8007822:	d0dd      	beq.n	80077e0 <_puts_r+0x40>
 8007824:	f04f 35ff 	mov.w	r5, #4294967295
 8007828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800782a:	07da      	lsls	r2, r3, #31
 800782c:	d405      	bmi.n	800783a <_puts_r+0x9a>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	059b      	lsls	r3, r3, #22
 8007832:	d402      	bmi.n	800783a <_puts_r+0x9a>
 8007834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007836:	f001 f941 	bl	8008abc <__retarget_lock_release_recursive>
 800783a:	4628      	mov	r0, r5
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	2b00      	cmp	r3, #0
 8007840:	da04      	bge.n	800784c <_puts_r+0xac>
 8007842:	69a2      	ldr	r2, [r4, #24]
 8007844:	429a      	cmp	r2, r3
 8007846:	dc06      	bgt.n	8007856 <_puts_r+0xb6>
 8007848:	290a      	cmp	r1, #10
 800784a:	d004      	beq.n	8007856 <_puts_r+0xb6>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	6022      	str	r2, [r4, #0]
 8007852:	7019      	strb	r1, [r3, #0]
 8007854:	e7c5      	b.n	80077e2 <_puts_r+0x42>
 8007856:	4622      	mov	r2, r4
 8007858:	4628      	mov	r0, r5
 800785a:	f000 f837 	bl	80078cc <__swbuf_r>
 800785e:	3001      	adds	r0, #1
 8007860:	d1bf      	bne.n	80077e2 <_puts_r+0x42>
 8007862:	e7df      	b.n	8007824 <_puts_r+0x84>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	250a      	movs	r5, #10
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	6022      	str	r2, [r4, #0]
 800786c:	701d      	strb	r5, [r3, #0]
 800786e:	e7db      	b.n	8007828 <_puts_r+0x88>
 8007870:	0800ebf0 	.word	0x0800ebf0
 8007874:	0800ec10 	.word	0x0800ec10
 8007878:	0800ebd0 	.word	0x0800ebd0

0800787c <puts>:
 800787c:	4b02      	ldr	r3, [pc, #8]	; (8007888 <puts+0xc>)
 800787e:	4601      	mov	r1, r0
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	f7ff bf8d 	b.w	80077a0 <_puts_r>
 8007886:	bf00      	nop
 8007888:	20000024 	.word	0x20000024

0800788c <siprintf>:
 800788c:	b40e      	push	{r1, r2, r3}
 800788e:	b500      	push	{lr}
 8007890:	b09c      	sub	sp, #112	; 0x70
 8007892:	ab1d      	add	r3, sp, #116	; 0x74
 8007894:	9002      	str	r0, [sp, #8]
 8007896:	9006      	str	r0, [sp, #24]
 8007898:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800789c:	4809      	ldr	r0, [pc, #36]	; (80078c4 <siprintf+0x38>)
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	4909      	ldr	r1, [pc, #36]	; (80078c8 <siprintf+0x3c>)
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	a902      	add	r1, sp, #8
 80078b0:	f001 fe14 	bl	80094dc <_svfiprintf_r>
 80078b4:	9b02      	ldr	r3, [sp, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	b01c      	add	sp, #112	; 0x70
 80078bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c0:	b003      	add	sp, #12
 80078c2:	4770      	bx	lr
 80078c4:	20000024 	.word	0x20000024
 80078c8:	ffff0208 	.word	0xffff0208

080078cc <__swbuf_r>:
 80078cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ce:	460e      	mov	r6, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	4605      	mov	r5, r0
 80078d4:	b118      	cbz	r0, 80078de <__swbuf_r+0x12>
 80078d6:	6983      	ldr	r3, [r0, #24]
 80078d8:	b90b      	cbnz	r3, 80078de <__swbuf_r+0x12>
 80078da:	f001 f84b 	bl	8008974 <__sinit>
 80078de:	4b21      	ldr	r3, [pc, #132]	; (8007964 <__swbuf_r+0x98>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	d12b      	bne.n	800793c <__swbuf_r+0x70>
 80078e4:	686c      	ldr	r4, [r5, #4]
 80078e6:	69a3      	ldr	r3, [r4, #24]
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	071a      	lsls	r2, r3, #28
 80078ee:	d52f      	bpl.n	8007950 <__swbuf_r+0x84>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b36b      	cbz	r3, 8007950 <__swbuf_r+0x84>
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	6820      	ldr	r0, [r4, #0]
 80078f8:	1ac0      	subs	r0, r0, r3
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	b2f6      	uxtb	r6, r6
 80078fe:	4283      	cmp	r3, r0
 8007900:	4637      	mov	r7, r6
 8007902:	dc04      	bgt.n	800790e <__swbuf_r+0x42>
 8007904:	4621      	mov	r1, r4
 8007906:	4628      	mov	r0, r5
 8007908:	f000 ffa0 	bl	800884c <_fflush_r>
 800790c:	bb30      	cbnz	r0, 800795c <__swbuf_r+0x90>
 800790e:	68a3      	ldr	r3, [r4, #8]
 8007910:	3b01      	subs	r3, #1
 8007912:	60a3      	str	r3, [r4, #8]
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	6022      	str	r2, [r4, #0]
 800791a:	701e      	strb	r6, [r3, #0]
 800791c:	6963      	ldr	r3, [r4, #20]
 800791e:	3001      	adds	r0, #1
 8007920:	4283      	cmp	r3, r0
 8007922:	d004      	beq.n	800792e <__swbuf_r+0x62>
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d506      	bpl.n	8007938 <__swbuf_r+0x6c>
 800792a:	2e0a      	cmp	r6, #10
 800792c:	d104      	bne.n	8007938 <__swbuf_r+0x6c>
 800792e:	4621      	mov	r1, r4
 8007930:	4628      	mov	r0, r5
 8007932:	f000 ff8b 	bl	800884c <_fflush_r>
 8007936:	b988      	cbnz	r0, 800795c <__swbuf_r+0x90>
 8007938:	4638      	mov	r0, r7
 800793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800793c:	4b0a      	ldr	r3, [pc, #40]	; (8007968 <__swbuf_r+0x9c>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d101      	bne.n	8007946 <__swbuf_r+0x7a>
 8007942:	68ac      	ldr	r4, [r5, #8]
 8007944:	e7cf      	b.n	80078e6 <__swbuf_r+0x1a>
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <__swbuf_r+0xa0>)
 8007948:	429c      	cmp	r4, r3
 800794a:	bf08      	it	eq
 800794c:	68ec      	ldreq	r4, [r5, #12]
 800794e:	e7ca      	b.n	80078e6 <__swbuf_r+0x1a>
 8007950:	4621      	mov	r1, r4
 8007952:	4628      	mov	r0, r5
 8007954:	f000 f80c 	bl	8007970 <__swsetup_r>
 8007958:	2800      	cmp	r0, #0
 800795a:	d0cb      	beq.n	80078f4 <__swbuf_r+0x28>
 800795c:	f04f 37ff 	mov.w	r7, #4294967295
 8007960:	e7ea      	b.n	8007938 <__swbuf_r+0x6c>
 8007962:	bf00      	nop
 8007964:	0800ebf0 	.word	0x0800ebf0
 8007968:	0800ec10 	.word	0x0800ec10
 800796c:	0800ebd0 	.word	0x0800ebd0

08007970 <__swsetup_r>:
 8007970:	4b32      	ldr	r3, [pc, #200]	; (8007a3c <__swsetup_r+0xcc>)
 8007972:	b570      	push	{r4, r5, r6, lr}
 8007974:	681d      	ldr	r5, [r3, #0]
 8007976:	4606      	mov	r6, r0
 8007978:	460c      	mov	r4, r1
 800797a:	b125      	cbz	r5, 8007986 <__swsetup_r+0x16>
 800797c:	69ab      	ldr	r3, [r5, #24]
 800797e:	b913      	cbnz	r3, 8007986 <__swsetup_r+0x16>
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fff7 	bl	8008974 <__sinit>
 8007986:	4b2e      	ldr	r3, [pc, #184]	; (8007a40 <__swsetup_r+0xd0>)
 8007988:	429c      	cmp	r4, r3
 800798a:	d10f      	bne.n	80079ac <__swsetup_r+0x3c>
 800798c:	686c      	ldr	r4, [r5, #4]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007994:	0719      	lsls	r1, r3, #28
 8007996:	d42c      	bmi.n	80079f2 <__swsetup_r+0x82>
 8007998:	06dd      	lsls	r5, r3, #27
 800799a:	d411      	bmi.n	80079c0 <__swsetup_r+0x50>
 800799c:	2309      	movs	r3, #9
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079a4:	81a3      	strh	r3, [r4, #12]
 80079a6:	f04f 30ff 	mov.w	r0, #4294967295
 80079aa:	e03e      	b.n	8007a2a <__swsetup_r+0xba>
 80079ac:	4b25      	ldr	r3, [pc, #148]	; (8007a44 <__swsetup_r+0xd4>)
 80079ae:	429c      	cmp	r4, r3
 80079b0:	d101      	bne.n	80079b6 <__swsetup_r+0x46>
 80079b2:	68ac      	ldr	r4, [r5, #8]
 80079b4:	e7eb      	b.n	800798e <__swsetup_r+0x1e>
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <__swsetup_r+0xd8>)
 80079b8:	429c      	cmp	r4, r3
 80079ba:	bf08      	it	eq
 80079bc:	68ec      	ldreq	r4, [r5, #12]
 80079be:	e7e6      	b.n	800798e <__swsetup_r+0x1e>
 80079c0:	0758      	lsls	r0, r3, #29
 80079c2:	d512      	bpl.n	80079ea <__swsetup_r+0x7a>
 80079c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c6:	b141      	cbz	r1, 80079da <__swsetup_r+0x6a>
 80079c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <__swsetup_r+0x66>
 80079d0:	4630      	mov	r0, r6
 80079d2:	f001 fc7d 	bl	80092d0 <_free_r>
 80079d6:	2300      	movs	r3, #0
 80079d8:	6363      	str	r3, [r4, #52]	; 0x34
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	2300      	movs	r3, #0
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f043 0308 	orr.w	r3, r3, #8
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	b94b      	cbnz	r3, 8007a0a <__swsetup_r+0x9a>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a00:	d003      	beq.n	8007a0a <__swsetup_r+0x9a>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	f001 f87f 	bl	8008b08 <__smakebuf_r>
 8007a0a:	89a0      	ldrh	r0, [r4, #12]
 8007a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a10:	f010 0301 	ands.w	r3, r0, #1
 8007a14:	d00a      	beq.n	8007a2c <__swsetup_r+0xbc>
 8007a16:	2300      	movs	r3, #0
 8007a18:	60a3      	str	r3, [r4, #8]
 8007a1a:	6963      	ldr	r3, [r4, #20]
 8007a1c:	425b      	negs	r3, r3
 8007a1e:	61a3      	str	r3, [r4, #24]
 8007a20:	6923      	ldr	r3, [r4, #16]
 8007a22:	b943      	cbnz	r3, 8007a36 <__swsetup_r+0xc6>
 8007a24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a28:	d1ba      	bne.n	80079a0 <__swsetup_r+0x30>
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	0781      	lsls	r1, r0, #30
 8007a2e:	bf58      	it	pl
 8007a30:	6963      	ldrpl	r3, [r4, #20]
 8007a32:	60a3      	str	r3, [r4, #8]
 8007a34:	e7f4      	b.n	8007a20 <__swsetup_r+0xb0>
 8007a36:	2000      	movs	r0, #0
 8007a38:	e7f7      	b.n	8007a2a <__swsetup_r+0xba>
 8007a3a:	bf00      	nop
 8007a3c:	20000024 	.word	0x20000024
 8007a40:	0800ebf0 	.word	0x0800ebf0
 8007a44:	0800ec10 	.word	0x0800ec10
 8007a48:	0800ebd0 	.word	0x0800ebd0

08007a4c <quorem>:
 8007a4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a50:	6903      	ldr	r3, [r0, #16]
 8007a52:	690c      	ldr	r4, [r1, #16]
 8007a54:	42a3      	cmp	r3, r4
 8007a56:	4607      	mov	r7, r0
 8007a58:	f2c0 8081 	blt.w	8007b5e <quorem+0x112>
 8007a5c:	3c01      	subs	r4, #1
 8007a5e:	f101 0814 	add.w	r8, r1, #20
 8007a62:	f100 0514 	add.w	r5, r0, #20
 8007a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a74:	3301      	adds	r3, #1
 8007a76:	429a      	cmp	r2, r3
 8007a78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a80:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a84:	d331      	bcc.n	8007aea <quorem+0x9e>
 8007a86:	f04f 0e00 	mov.w	lr, #0
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	46ac      	mov	ip, r5
 8007a8e:	46f2      	mov	sl, lr
 8007a90:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a94:	b293      	uxth	r3, r2
 8007a96:	fb06 e303 	mla	r3, r6, r3, lr
 8007a9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8007aa4:	0c12      	lsrs	r2, r2, #16
 8007aa6:	f8dc a000 	ldr.w	sl, [ip]
 8007aaa:	fb06 e202 	mla	r2, r6, r2, lr
 8007aae:	fa13 f38a 	uxtah	r3, r3, sl
 8007ab2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ab6:	fa1f fa82 	uxth.w	sl, r2
 8007aba:	f8dc 2000 	ldr.w	r2, [ip]
 8007abe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ac2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007acc:	4581      	cmp	r9, r0
 8007ace:	f84c 3b04 	str.w	r3, [ip], #4
 8007ad2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ad6:	d2db      	bcs.n	8007a90 <quorem+0x44>
 8007ad8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007adc:	b92b      	cbnz	r3, 8007aea <quorem+0x9e>
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	3b04      	subs	r3, #4
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	d32e      	bcc.n	8007b46 <quorem+0xfa>
 8007ae8:	613c      	str	r4, [r7, #16]
 8007aea:	4638      	mov	r0, r7
 8007aec:	f001 fae0 	bl	80090b0 <__mcmp>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	db24      	blt.n	8007b3e <quorem+0xf2>
 8007af4:	3601      	adds	r6, #1
 8007af6:	4628      	mov	r0, r5
 8007af8:	f04f 0c00 	mov.w	ip, #0
 8007afc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b00:	f8d0 e000 	ldr.w	lr, [r0]
 8007b04:	b293      	uxth	r3, r2
 8007b06:	ebac 0303 	sub.w	r3, ip, r3
 8007b0a:	0c12      	lsrs	r2, r2, #16
 8007b0c:	fa13 f38e 	uxtah	r3, r3, lr
 8007b10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b1e:	45c1      	cmp	r9, r8
 8007b20:	f840 3b04 	str.w	r3, [r0], #4
 8007b24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b28:	d2e8      	bcs.n	8007afc <quorem+0xb0>
 8007b2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b32:	b922      	cbnz	r2, 8007b3e <quorem+0xf2>
 8007b34:	3b04      	subs	r3, #4
 8007b36:	429d      	cmp	r5, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	d30a      	bcc.n	8007b52 <quorem+0x106>
 8007b3c:	613c      	str	r4, [r7, #16]
 8007b3e:	4630      	mov	r0, r6
 8007b40:	b003      	add	sp, #12
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	3b04      	subs	r3, #4
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	d1cc      	bne.n	8007ae8 <quorem+0x9c>
 8007b4e:	3c01      	subs	r4, #1
 8007b50:	e7c7      	b.n	8007ae2 <quorem+0x96>
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	3b04      	subs	r3, #4
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	d1f0      	bne.n	8007b3c <quorem+0xf0>
 8007b5a:	3c01      	subs	r4, #1
 8007b5c:	e7eb      	b.n	8007b36 <quorem+0xea>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e7ee      	b.n	8007b40 <quorem+0xf4>
 8007b62:	0000      	movs	r0, r0
 8007b64:	0000      	movs	r0, r0
	...

08007b68 <_dtoa_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	ed2d 8b02 	vpush	{d8}
 8007b70:	ec57 6b10 	vmov	r6, r7, d0
 8007b74:	b095      	sub	sp, #84	; 0x54
 8007b76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b7c:	9105      	str	r1, [sp, #20]
 8007b7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b82:	4604      	mov	r4, r0
 8007b84:	9209      	str	r2, [sp, #36]	; 0x24
 8007b86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b88:	b975      	cbnz	r5, 8007ba8 <_dtoa_r+0x40>
 8007b8a:	2010      	movs	r0, #16
 8007b8c:	f000 fffc 	bl	8008b88 <malloc>
 8007b90:	4602      	mov	r2, r0
 8007b92:	6260      	str	r0, [r4, #36]	; 0x24
 8007b94:	b920      	cbnz	r0, 8007ba0 <_dtoa_r+0x38>
 8007b96:	4bb2      	ldr	r3, [pc, #712]	; (8007e60 <_dtoa_r+0x2f8>)
 8007b98:	21ea      	movs	r1, #234	; 0xea
 8007b9a:	48b2      	ldr	r0, [pc, #712]	; (8007e64 <_dtoa_r+0x2fc>)
 8007b9c:	f001 ff5e 	bl	8009a5c <__assert_func>
 8007ba0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ba4:	6005      	str	r5, [r0, #0]
 8007ba6:	60c5      	str	r5, [r0, #12]
 8007ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007baa:	6819      	ldr	r1, [r3, #0]
 8007bac:	b151      	cbz	r1, 8007bc4 <_dtoa_r+0x5c>
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	604a      	str	r2, [r1, #4]
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4093      	lsls	r3, r2
 8007bb6:	608b      	str	r3, [r1, #8]
 8007bb8:	4620      	mov	r0, r4
 8007bba:	f001 f83b 	bl	8008c34 <_Bfree>
 8007bbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	1e3b      	subs	r3, r7, #0
 8007bc6:	bfb9      	ittee	lt
 8007bc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	9303      	strlt	r3, [sp, #12]
 8007bce:	2300      	movge	r3, #0
 8007bd0:	f8c8 3000 	strge.w	r3, [r8]
 8007bd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007bd8:	4ba3      	ldr	r3, [pc, #652]	; (8007e68 <_dtoa_r+0x300>)
 8007bda:	bfbc      	itt	lt
 8007bdc:	2201      	movlt	r2, #1
 8007bde:	f8c8 2000 	strlt.w	r2, [r8]
 8007be2:	ea33 0309 	bics.w	r3, r3, r9
 8007be6:	d11b      	bne.n	8007c20 <_dtoa_r+0xb8>
 8007be8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bea:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bf4:	4333      	orrs	r3, r6
 8007bf6:	f000 857a 	beq.w	80086ee <_dtoa_r+0xb86>
 8007bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bfc:	b963      	cbnz	r3, 8007c18 <_dtoa_r+0xb0>
 8007bfe:	4b9b      	ldr	r3, [pc, #620]	; (8007e6c <_dtoa_r+0x304>)
 8007c00:	e024      	b.n	8007c4c <_dtoa_r+0xe4>
 8007c02:	4b9b      	ldr	r3, [pc, #620]	; (8007e70 <_dtoa_r+0x308>)
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	9800      	ldr	r0, [sp, #0]
 8007c0e:	b015      	add	sp, #84	; 0x54
 8007c10:	ecbd 8b02 	vpop	{d8}
 8007c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c18:	4b94      	ldr	r3, [pc, #592]	; (8007e6c <_dtoa_r+0x304>)
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	3303      	adds	r3, #3
 8007c1e:	e7f3      	b.n	8007c08 <_dtoa_r+0xa0>
 8007c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c24:	2200      	movs	r2, #0
 8007c26:	ec51 0b17 	vmov	r0, r1, d7
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c30:	f7f8 ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c34:	4680      	mov	r8, r0
 8007c36:	b158      	cbz	r0, 8007c50 <_dtoa_r+0xe8>
 8007c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8551 	beq.w	80086e8 <_dtoa_r+0xb80>
 8007c46:	488b      	ldr	r0, [pc, #556]	; (8007e74 <_dtoa_r+0x30c>)
 8007c48:	6018      	str	r0, [r3, #0]
 8007c4a:	1e43      	subs	r3, r0, #1
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	e7dd      	b.n	8007c0c <_dtoa_r+0xa4>
 8007c50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c54:	aa12      	add	r2, sp, #72	; 0x48
 8007c56:	a913      	add	r1, sp, #76	; 0x4c
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 facd 	bl	80091f8 <__d2b>
 8007c5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c62:	4683      	mov	fp, r0
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	d07c      	beq.n	8007d62 <_dtoa_r+0x1fa>
 8007c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c82:	4b7d      	ldr	r3, [pc, #500]	; (8007e78 <_dtoa_r+0x310>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 fb05 	bl	8000298 <__aeabi_dsub>
 8007c8e:	a36e      	add	r3, pc, #440	; (adr r3, 8007e48 <_dtoa_r+0x2e0>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fcb8 	bl	8000608 <__aeabi_dmul>
 8007c98:	a36d      	add	r3, pc, #436	; (adr r3, 8007e50 <_dtoa_r+0x2e8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fafd 	bl	800029c <__adddf3>
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	460f      	mov	r7, r1
 8007ca8:	f7f8 fc44 	bl	8000534 <__aeabi_i2d>
 8007cac:	a36a      	add	r3, pc, #424	; (adr r3, 8007e58 <_dtoa_r+0x2f0>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	f7f8 fca9 	bl	8000608 <__aeabi_dmul>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 faed 	bl	800029c <__adddf3>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	f7f8 ff4f 	bl	8000b68 <__aeabi_d2iz>
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4682      	mov	sl, r0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f7f8 ff0a 	bl	8000aec <__aeabi_dcmplt>
 8007cd8:	b148      	cbz	r0, 8007cee <_dtoa_r+0x186>
 8007cda:	4650      	mov	r0, sl
 8007cdc:	f7f8 fc2a 	bl	8000534 <__aeabi_i2d>
 8007ce0:	4632      	mov	r2, r6
 8007ce2:	463b      	mov	r3, r7
 8007ce4:	f7f8 fef8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ce8:	b908      	cbnz	r0, 8007cee <_dtoa_r+0x186>
 8007cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cee:	f1ba 0f16 	cmp.w	sl, #22
 8007cf2:	d854      	bhi.n	8007d9e <_dtoa_r+0x236>
 8007cf4:	4b61      	ldr	r3, [pc, #388]	; (8007e7c <_dtoa_r+0x314>)
 8007cf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007d02:	f7f8 fef3 	bl	8000aec <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d04b      	beq.n	8007da2 <_dtoa_r+0x23a>
 8007d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d0e:	2300      	movs	r3, #0
 8007d10:	930e      	str	r3, [sp, #56]	; 0x38
 8007d12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d14:	1b5d      	subs	r5, r3, r5
 8007d16:	1e6b      	subs	r3, r5, #1
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	bf43      	ittte	mi
 8007d1c:	2300      	movmi	r3, #0
 8007d1e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007d22:	9304      	strmi	r3, [sp, #16]
 8007d24:	f04f 0800 	movpl.w	r8, #0
 8007d28:	f1ba 0f00 	cmp.w	sl, #0
 8007d2c:	db3b      	blt.n	8007da6 <_dtoa_r+0x23e>
 8007d2e:	9b04      	ldr	r3, [sp, #16]
 8007d30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d34:	4453      	add	r3, sl
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9306      	str	r3, [sp, #24]
 8007d3c:	9b05      	ldr	r3, [sp, #20]
 8007d3e:	2b09      	cmp	r3, #9
 8007d40:	d869      	bhi.n	8007e16 <_dtoa_r+0x2ae>
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	bfc4      	itt	gt
 8007d46:	3b04      	subgt	r3, #4
 8007d48:	9305      	strgt	r3, [sp, #20]
 8007d4a:	9b05      	ldr	r3, [sp, #20]
 8007d4c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d50:	bfcc      	ite	gt
 8007d52:	2500      	movgt	r5, #0
 8007d54:	2501      	movle	r5, #1
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d869      	bhi.n	8007e2e <_dtoa_r+0x2c6>
 8007d5a:	e8df f003 	tbb	[pc, r3]
 8007d5e:	4e2c      	.short	0x4e2c
 8007d60:	5a4c      	.short	0x5a4c
 8007d62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d66:	441d      	add	r5, r3
 8007d68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	bfc1      	itttt	gt
 8007d70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d78:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d80:	bfda      	itte	le
 8007d82:	f1c3 0320 	rsble	r3, r3, #32
 8007d86:	fa06 f003 	lslle.w	r0, r6, r3
 8007d8a:	4318      	orrgt	r0, r3
 8007d8c:	f7f8 fbc2 	bl	8000514 <__aeabi_ui2d>
 8007d90:	2301      	movs	r3, #1
 8007d92:	4606      	mov	r6, r0
 8007d94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d98:	3d01      	subs	r5, #1
 8007d9a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d9c:	e771      	b.n	8007c82 <_dtoa_r+0x11a>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e7b6      	b.n	8007d10 <_dtoa_r+0x1a8>
 8007da2:	900e      	str	r0, [sp, #56]	; 0x38
 8007da4:	e7b5      	b.n	8007d12 <_dtoa_r+0x1aa>
 8007da6:	f1ca 0300 	rsb	r3, sl, #0
 8007daa:	9306      	str	r3, [sp, #24]
 8007dac:	2300      	movs	r3, #0
 8007dae:	eba8 080a 	sub.w	r8, r8, sl
 8007db2:	930d      	str	r3, [sp, #52]	; 0x34
 8007db4:	e7c2      	b.n	8007d3c <_dtoa_r+0x1d4>
 8007db6:	2300      	movs	r3, #0
 8007db8:	9308      	str	r3, [sp, #32]
 8007dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dc39      	bgt.n	8007e34 <_dtoa_r+0x2cc>
 8007dc0:	f04f 0901 	mov.w	r9, #1
 8007dc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dc8:	464b      	mov	r3, r9
 8007dca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007dce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	6042      	str	r2, [r0, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	f102 0614 	add.w	r6, r2, #20
 8007dda:	429e      	cmp	r6, r3
 8007ddc:	6841      	ldr	r1, [r0, #4]
 8007dde:	d92f      	bls.n	8007e40 <_dtoa_r+0x2d8>
 8007de0:	4620      	mov	r0, r4
 8007de2:	f000 fee7 	bl	8008bb4 <_Balloc>
 8007de6:	9000      	str	r0, [sp, #0]
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d14b      	bne.n	8007e84 <_dtoa_r+0x31c>
 8007dec:	4b24      	ldr	r3, [pc, #144]	; (8007e80 <_dtoa_r+0x318>)
 8007dee:	4602      	mov	r2, r0
 8007df0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007df4:	e6d1      	b.n	8007b9a <_dtoa_r+0x32>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e7de      	b.n	8007db8 <_dtoa_r+0x250>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	9308      	str	r3, [sp, #32]
 8007dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e00:	eb0a 0903 	add.w	r9, sl, r3
 8007e04:	f109 0301 	add.w	r3, r9, #1
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	bfb8      	it	lt
 8007e0e:	2301      	movlt	r3, #1
 8007e10:	e7dd      	b.n	8007dce <_dtoa_r+0x266>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7f2      	b.n	8007dfc <_dtoa_r+0x294>
 8007e16:	2501      	movs	r5, #1
 8007e18:	2300      	movs	r3, #0
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	9508      	str	r5, [sp, #32]
 8007e1e:	f04f 39ff 	mov.w	r9, #4294967295
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e28:	2312      	movs	r3, #18
 8007e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2c:	e7cf      	b.n	8007dce <_dtoa_r+0x266>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	e7f4      	b.n	8007e1e <_dtoa_r+0x2b6>
 8007e34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e38:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	e7c6      	b.n	8007dce <_dtoa_r+0x266>
 8007e40:	3101      	adds	r1, #1
 8007e42:	6041      	str	r1, [r0, #4]
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	e7c6      	b.n	8007dd6 <_dtoa_r+0x26e>
 8007e48:	636f4361 	.word	0x636f4361
 8007e4c:	3fd287a7 	.word	0x3fd287a7
 8007e50:	8b60c8b3 	.word	0x8b60c8b3
 8007e54:	3fc68a28 	.word	0x3fc68a28
 8007e58:	509f79fb 	.word	0x509f79fb
 8007e5c:	3fd34413 	.word	0x3fd34413
 8007e60:	0800eb49 	.word	0x0800eb49
 8007e64:	0800eb60 	.word	0x0800eb60
 8007e68:	7ff00000 	.word	0x7ff00000
 8007e6c:	0800eb45 	.word	0x0800eb45
 8007e70:	0800eb3c 	.word	0x0800eb3c
 8007e74:	0800eb19 	.word	0x0800eb19
 8007e78:	3ff80000 	.word	0x3ff80000
 8007e7c:	0800ecb8 	.word	0x0800ecb8
 8007e80:	0800ebbf 	.word	0x0800ebbf
 8007e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e86:	9a00      	ldr	r2, [sp, #0]
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	9b01      	ldr	r3, [sp, #4]
 8007e8c:	2b0e      	cmp	r3, #14
 8007e8e:	f200 80ad 	bhi.w	8007fec <_dtoa_r+0x484>
 8007e92:	2d00      	cmp	r5, #0
 8007e94:	f000 80aa 	beq.w	8007fec <_dtoa_r+0x484>
 8007e98:	f1ba 0f00 	cmp.w	sl, #0
 8007e9c:	dd36      	ble.n	8007f0c <_dtoa_r+0x3a4>
 8007e9e:	4ac3      	ldr	r2, [pc, #780]	; (80081ac <_dtoa_r+0x644>)
 8007ea0:	f00a 030f 	and.w	r3, sl, #15
 8007ea4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ea8:	ed93 7b00 	vldr	d7, [r3]
 8007eac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007eb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007eb4:	eeb0 8a47 	vmov.f32	s16, s14
 8007eb8:	eef0 8a67 	vmov.f32	s17, s15
 8007ebc:	d016      	beq.n	8007eec <_dtoa_r+0x384>
 8007ebe:	4bbc      	ldr	r3, [pc, #752]	; (80081b0 <_dtoa_r+0x648>)
 8007ec0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ec8:	f7f8 fcc8 	bl	800085c <__aeabi_ddiv>
 8007ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed0:	f007 070f 	and.w	r7, r7, #15
 8007ed4:	2503      	movs	r5, #3
 8007ed6:	4eb6      	ldr	r6, [pc, #728]	; (80081b0 <_dtoa_r+0x648>)
 8007ed8:	b957      	cbnz	r7, 8007ef0 <_dtoa_r+0x388>
 8007eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ede:	ec53 2b18 	vmov	r2, r3, d8
 8007ee2:	f7f8 fcbb 	bl	800085c <__aeabi_ddiv>
 8007ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eea:	e029      	b.n	8007f40 <_dtoa_r+0x3d8>
 8007eec:	2502      	movs	r5, #2
 8007eee:	e7f2      	b.n	8007ed6 <_dtoa_r+0x36e>
 8007ef0:	07f9      	lsls	r1, r7, #31
 8007ef2:	d508      	bpl.n	8007f06 <_dtoa_r+0x39e>
 8007ef4:	ec51 0b18 	vmov	r0, r1, d8
 8007ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007efc:	f7f8 fb84 	bl	8000608 <__aeabi_dmul>
 8007f00:	ec41 0b18 	vmov	d8, r0, r1
 8007f04:	3501      	adds	r5, #1
 8007f06:	107f      	asrs	r7, r7, #1
 8007f08:	3608      	adds	r6, #8
 8007f0a:	e7e5      	b.n	8007ed8 <_dtoa_r+0x370>
 8007f0c:	f000 80a6 	beq.w	800805c <_dtoa_r+0x4f4>
 8007f10:	f1ca 0600 	rsb	r6, sl, #0
 8007f14:	4ba5      	ldr	r3, [pc, #660]	; (80081ac <_dtoa_r+0x644>)
 8007f16:	4fa6      	ldr	r7, [pc, #664]	; (80081b0 <_dtoa_r+0x648>)
 8007f18:	f006 020f 	and.w	r2, r6, #15
 8007f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f30:	1136      	asrs	r6, r6, #4
 8007f32:	2300      	movs	r3, #0
 8007f34:	2502      	movs	r5, #2
 8007f36:	2e00      	cmp	r6, #0
 8007f38:	f040 8085 	bne.w	8008046 <_dtoa_r+0x4de>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1d2      	bne.n	8007ee6 <_dtoa_r+0x37e>
 8007f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 808c 	beq.w	8008060 <_dtoa_r+0x4f8>
 8007f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f4c:	4b99      	ldr	r3, [pc, #612]	; (80081b4 <_dtoa_r+0x64c>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4630      	mov	r0, r6
 8007f52:	4639      	mov	r1, r7
 8007f54:	f7f8 fdca 	bl	8000aec <__aeabi_dcmplt>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	f000 8081 	beq.w	8008060 <_dtoa_r+0x4f8>
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d07d      	beq.n	8008060 <_dtoa_r+0x4f8>
 8007f64:	f1b9 0f00 	cmp.w	r9, #0
 8007f68:	dd3c      	ble.n	8007fe4 <_dtoa_r+0x47c>
 8007f6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	2200      	movs	r2, #0
 8007f72:	4b91      	ldr	r3, [pc, #580]	; (80081b8 <_dtoa_r+0x650>)
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fb46 	bl	8000608 <__aeabi_dmul>
 8007f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f80:	3501      	adds	r5, #1
 8007f82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	f7f8 fad2 	bl	8000534 <__aeabi_i2d>
 8007f90:	4632      	mov	r2, r6
 8007f92:	463b      	mov	r3, r7
 8007f94:	f7f8 fb38 	bl	8000608 <__aeabi_dmul>
 8007f98:	4b88      	ldr	r3, [pc, #544]	; (80081bc <_dtoa_r+0x654>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7f8 f97e 	bl	800029c <__adddf3>
 8007fa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007fa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d15c      	bne.n	800806a <_dtoa_r+0x502>
 8007fb0:	4b83      	ldr	r3, [pc, #524]	; (80081c0 <_dtoa_r+0x658>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	4639      	mov	r1, r7
 8007fb8:	f7f8 f96e 	bl	8000298 <__aeabi_dsub>
 8007fbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	460f      	mov	r7, r1
 8007fc4:	f7f8 fdb0 	bl	8000b28 <__aeabi_dcmpgt>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f040 8296 	bne.w	80084fa <_dtoa_r+0x992>
 8007fce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fd8:	4639      	mov	r1, r7
 8007fda:	f7f8 fd87 	bl	8000aec <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f040 8288 	bne.w	80084f4 <_dtoa_r+0x98c>
 8007fe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f2c0 8158 	blt.w	80082a4 <_dtoa_r+0x73c>
 8007ff4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ff8:	f300 8154 	bgt.w	80082a4 <_dtoa_r+0x73c>
 8007ffc:	4b6b      	ldr	r3, [pc, #428]	; (80081ac <_dtoa_r+0x644>)
 8007ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008002:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	f280 80e3 	bge.w	80081d4 <_dtoa_r+0x66c>
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	f300 80df 	bgt.w	80081d4 <_dtoa_r+0x66c>
 8008016:	f040 826d 	bne.w	80084f4 <_dtoa_r+0x98c>
 800801a:	4b69      	ldr	r3, [pc, #420]	; (80081c0 <_dtoa_r+0x658>)
 800801c:	2200      	movs	r2, #0
 800801e:	4640      	mov	r0, r8
 8008020:	4649      	mov	r1, r9
 8008022:	f7f8 faf1 	bl	8000608 <__aeabi_dmul>
 8008026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800802a:	f7f8 fd73 	bl	8000b14 <__aeabi_dcmpge>
 800802e:	9e01      	ldr	r6, [sp, #4]
 8008030:	4637      	mov	r7, r6
 8008032:	2800      	cmp	r0, #0
 8008034:	f040 8243 	bne.w	80084be <_dtoa_r+0x956>
 8008038:	9d00      	ldr	r5, [sp, #0]
 800803a:	2331      	movs	r3, #49	; 0x31
 800803c:	f805 3b01 	strb.w	r3, [r5], #1
 8008040:	f10a 0a01 	add.w	sl, sl, #1
 8008044:	e23f      	b.n	80084c6 <_dtoa_r+0x95e>
 8008046:	07f2      	lsls	r2, r6, #31
 8008048:	d505      	bpl.n	8008056 <_dtoa_r+0x4ee>
 800804a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800804e:	f7f8 fadb 	bl	8000608 <__aeabi_dmul>
 8008052:	3501      	adds	r5, #1
 8008054:	2301      	movs	r3, #1
 8008056:	1076      	asrs	r6, r6, #1
 8008058:	3708      	adds	r7, #8
 800805a:	e76c      	b.n	8007f36 <_dtoa_r+0x3ce>
 800805c:	2502      	movs	r5, #2
 800805e:	e76f      	b.n	8007f40 <_dtoa_r+0x3d8>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f8cd a01c 	str.w	sl, [sp, #28]
 8008066:	930c      	str	r3, [sp, #48]	; 0x30
 8008068:	e78d      	b.n	8007f86 <_dtoa_r+0x41e>
 800806a:	9900      	ldr	r1, [sp, #0]
 800806c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800806e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008070:	4b4e      	ldr	r3, [pc, #312]	; (80081ac <_dtoa_r+0x644>)
 8008072:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008076:	4401      	add	r1, r0
 8008078:	9102      	str	r1, [sp, #8]
 800807a:	9908      	ldr	r1, [sp, #32]
 800807c:	eeb0 8a47 	vmov.f32	s16, s14
 8008080:	eef0 8a67 	vmov.f32	s17, s15
 8008084:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800808c:	2900      	cmp	r1, #0
 800808e:	d045      	beq.n	800811c <_dtoa_r+0x5b4>
 8008090:	494c      	ldr	r1, [pc, #304]	; (80081c4 <_dtoa_r+0x65c>)
 8008092:	2000      	movs	r0, #0
 8008094:	f7f8 fbe2 	bl	800085c <__aeabi_ddiv>
 8008098:	ec53 2b18 	vmov	r2, r3, d8
 800809c:	f7f8 f8fc 	bl	8000298 <__aeabi_dsub>
 80080a0:	9d00      	ldr	r5, [sp, #0]
 80080a2:	ec41 0b18 	vmov	d8, r0, r1
 80080a6:	4639      	mov	r1, r7
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7f8 fd5d 	bl	8000b68 <__aeabi_d2iz>
 80080ae:	900c      	str	r0, [sp, #48]	; 0x30
 80080b0:	f7f8 fa40 	bl	8000534 <__aeabi_i2d>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 f8ec 	bl	8000298 <__aeabi_dsub>
 80080c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c2:	3330      	adds	r3, #48	; 0x30
 80080c4:	f805 3b01 	strb.w	r3, [r5], #1
 80080c8:	ec53 2b18 	vmov	r2, r3, d8
 80080cc:	4606      	mov	r6, r0
 80080ce:	460f      	mov	r7, r1
 80080d0:	f7f8 fd0c 	bl	8000aec <__aeabi_dcmplt>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d165      	bne.n	80081a4 <_dtoa_r+0x63c>
 80080d8:	4632      	mov	r2, r6
 80080da:	463b      	mov	r3, r7
 80080dc:	4935      	ldr	r1, [pc, #212]	; (80081b4 <_dtoa_r+0x64c>)
 80080de:	2000      	movs	r0, #0
 80080e0:	f7f8 f8da 	bl	8000298 <__aeabi_dsub>
 80080e4:	ec53 2b18 	vmov	r2, r3, d8
 80080e8:	f7f8 fd00 	bl	8000aec <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f040 80b9 	bne.w	8008264 <_dtoa_r+0x6fc>
 80080f2:	9b02      	ldr	r3, [sp, #8]
 80080f4:	429d      	cmp	r5, r3
 80080f6:	f43f af75 	beq.w	8007fe4 <_dtoa_r+0x47c>
 80080fa:	4b2f      	ldr	r3, [pc, #188]	; (80081b8 <_dtoa_r+0x650>)
 80080fc:	ec51 0b18 	vmov	r0, r1, d8
 8008100:	2200      	movs	r2, #0
 8008102:	f7f8 fa81 	bl	8000608 <__aeabi_dmul>
 8008106:	4b2c      	ldr	r3, [pc, #176]	; (80081b8 <_dtoa_r+0x650>)
 8008108:	ec41 0b18 	vmov	d8, r0, r1
 800810c:	2200      	movs	r2, #0
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 fa79 	bl	8000608 <__aeabi_dmul>
 8008116:	4606      	mov	r6, r0
 8008118:	460f      	mov	r7, r1
 800811a:	e7c4      	b.n	80080a6 <_dtoa_r+0x53e>
 800811c:	ec51 0b17 	vmov	r0, r1, d7
 8008120:	f7f8 fa72 	bl	8000608 <__aeabi_dmul>
 8008124:	9b02      	ldr	r3, [sp, #8]
 8008126:	9d00      	ldr	r5, [sp, #0]
 8008128:	930c      	str	r3, [sp, #48]	; 0x30
 800812a:	ec41 0b18 	vmov	d8, r0, r1
 800812e:	4639      	mov	r1, r7
 8008130:	4630      	mov	r0, r6
 8008132:	f7f8 fd19 	bl	8000b68 <__aeabi_d2iz>
 8008136:	9011      	str	r0, [sp, #68]	; 0x44
 8008138:	f7f8 f9fc 	bl	8000534 <__aeabi_i2d>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4630      	mov	r0, r6
 8008142:	4639      	mov	r1, r7
 8008144:	f7f8 f8a8 	bl	8000298 <__aeabi_dsub>
 8008148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800814a:	3330      	adds	r3, #48	; 0x30
 800814c:	f805 3b01 	strb.w	r3, [r5], #1
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	429d      	cmp	r5, r3
 8008154:	4606      	mov	r6, r0
 8008156:	460f      	mov	r7, r1
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	d134      	bne.n	80081c8 <_dtoa_r+0x660>
 800815e:	4b19      	ldr	r3, [pc, #100]	; (80081c4 <_dtoa_r+0x65c>)
 8008160:	ec51 0b18 	vmov	r0, r1, d8
 8008164:	f7f8 f89a 	bl	800029c <__adddf3>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	4630      	mov	r0, r6
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fcda 	bl	8000b28 <__aeabi_dcmpgt>
 8008174:	2800      	cmp	r0, #0
 8008176:	d175      	bne.n	8008264 <_dtoa_r+0x6fc>
 8008178:	ec53 2b18 	vmov	r2, r3, d8
 800817c:	4911      	ldr	r1, [pc, #68]	; (80081c4 <_dtoa_r+0x65c>)
 800817e:	2000      	movs	r0, #0
 8008180:	f7f8 f88a 	bl	8000298 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4630      	mov	r0, r6
 800818a:	4639      	mov	r1, r7
 800818c:	f7f8 fcae 	bl	8000aec <__aeabi_dcmplt>
 8008190:	2800      	cmp	r0, #0
 8008192:	f43f af27 	beq.w	8007fe4 <_dtoa_r+0x47c>
 8008196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008198:	1e6b      	subs	r3, r5, #1
 800819a:	930c      	str	r3, [sp, #48]	; 0x30
 800819c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081a0:	2b30      	cmp	r3, #48	; 0x30
 80081a2:	d0f8      	beq.n	8008196 <_dtoa_r+0x62e>
 80081a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081a8:	e04a      	b.n	8008240 <_dtoa_r+0x6d8>
 80081aa:	bf00      	nop
 80081ac:	0800ecb8 	.word	0x0800ecb8
 80081b0:	0800ec90 	.word	0x0800ec90
 80081b4:	3ff00000 	.word	0x3ff00000
 80081b8:	40240000 	.word	0x40240000
 80081bc:	401c0000 	.word	0x401c0000
 80081c0:	40140000 	.word	0x40140000
 80081c4:	3fe00000 	.word	0x3fe00000
 80081c8:	4baf      	ldr	r3, [pc, #700]	; (8008488 <_dtoa_r+0x920>)
 80081ca:	f7f8 fa1d 	bl	8000608 <__aeabi_dmul>
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	e7ac      	b.n	800812e <_dtoa_r+0x5c6>
 80081d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081d8:	9d00      	ldr	r5, [sp, #0]
 80081da:	4642      	mov	r2, r8
 80081dc:	464b      	mov	r3, r9
 80081de:	4630      	mov	r0, r6
 80081e0:	4639      	mov	r1, r7
 80081e2:	f7f8 fb3b 	bl	800085c <__aeabi_ddiv>
 80081e6:	f7f8 fcbf 	bl	8000b68 <__aeabi_d2iz>
 80081ea:	9002      	str	r0, [sp, #8]
 80081ec:	f7f8 f9a2 	bl	8000534 <__aeabi_i2d>
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	f7f8 fa08 	bl	8000608 <__aeabi_dmul>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7f8 f84a 	bl	8000298 <__aeabi_dsub>
 8008204:	9e02      	ldr	r6, [sp, #8]
 8008206:	9f01      	ldr	r7, [sp, #4]
 8008208:	3630      	adds	r6, #48	; 0x30
 800820a:	f805 6b01 	strb.w	r6, [r5], #1
 800820e:	9e00      	ldr	r6, [sp, #0]
 8008210:	1bae      	subs	r6, r5, r6
 8008212:	42b7      	cmp	r7, r6
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	d137      	bne.n	800828a <_dtoa_r+0x722>
 800821a:	f7f8 f83f 	bl	800029c <__adddf3>
 800821e:	4642      	mov	r2, r8
 8008220:	464b      	mov	r3, r9
 8008222:	4606      	mov	r6, r0
 8008224:	460f      	mov	r7, r1
 8008226:	f7f8 fc7f 	bl	8000b28 <__aeabi_dcmpgt>
 800822a:	b9c8      	cbnz	r0, 8008260 <_dtoa_r+0x6f8>
 800822c:	4642      	mov	r2, r8
 800822e:	464b      	mov	r3, r9
 8008230:	4630      	mov	r0, r6
 8008232:	4639      	mov	r1, r7
 8008234:	f7f8 fc50 	bl	8000ad8 <__aeabi_dcmpeq>
 8008238:	b110      	cbz	r0, 8008240 <_dtoa_r+0x6d8>
 800823a:	9b02      	ldr	r3, [sp, #8]
 800823c:	07d9      	lsls	r1, r3, #31
 800823e:	d40f      	bmi.n	8008260 <_dtoa_r+0x6f8>
 8008240:	4620      	mov	r0, r4
 8008242:	4659      	mov	r1, fp
 8008244:	f000 fcf6 	bl	8008c34 <_Bfree>
 8008248:	2300      	movs	r3, #0
 800824a:	702b      	strb	r3, [r5, #0]
 800824c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800824e:	f10a 0001 	add.w	r0, sl, #1
 8008252:	6018      	str	r0, [r3, #0]
 8008254:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008256:	2b00      	cmp	r3, #0
 8008258:	f43f acd8 	beq.w	8007c0c <_dtoa_r+0xa4>
 800825c:	601d      	str	r5, [r3, #0]
 800825e:	e4d5      	b.n	8007c0c <_dtoa_r+0xa4>
 8008260:	f8cd a01c 	str.w	sl, [sp, #28]
 8008264:	462b      	mov	r3, r5
 8008266:	461d      	mov	r5, r3
 8008268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800826c:	2a39      	cmp	r2, #57	; 0x39
 800826e:	d108      	bne.n	8008282 <_dtoa_r+0x71a>
 8008270:	9a00      	ldr	r2, [sp, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d1f7      	bne.n	8008266 <_dtoa_r+0x6fe>
 8008276:	9a07      	ldr	r2, [sp, #28]
 8008278:	9900      	ldr	r1, [sp, #0]
 800827a:	3201      	adds	r2, #1
 800827c:	9207      	str	r2, [sp, #28]
 800827e:	2230      	movs	r2, #48	; 0x30
 8008280:	700a      	strb	r2, [r1, #0]
 8008282:	781a      	ldrb	r2, [r3, #0]
 8008284:	3201      	adds	r2, #1
 8008286:	701a      	strb	r2, [r3, #0]
 8008288:	e78c      	b.n	80081a4 <_dtoa_r+0x63c>
 800828a:	4b7f      	ldr	r3, [pc, #508]	; (8008488 <_dtoa_r+0x920>)
 800828c:	2200      	movs	r2, #0
 800828e:	f7f8 f9bb 	bl	8000608 <__aeabi_dmul>
 8008292:	2200      	movs	r2, #0
 8008294:	2300      	movs	r3, #0
 8008296:	4606      	mov	r6, r0
 8008298:	460f      	mov	r7, r1
 800829a:	f7f8 fc1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d09b      	beq.n	80081da <_dtoa_r+0x672>
 80082a2:	e7cd      	b.n	8008240 <_dtoa_r+0x6d8>
 80082a4:	9a08      	ldr	r2, [sp, #32]
 80082a6:	2a00      	cmp	r2, #0
 80082a8:	f000 80c4 	beq.w	8008434 <_dtoa_r+0x8cc>
 80082ac:	9a05      	ldr	r2, [sp, #20]
 80082ae:	2a01      	cmp	r2, #1
 80082b0:	f300 80a8 	bgt.w	8008404 <_dtoa_r+0x89c>
 80082b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082b6:	2a00      	cmp	r2, #0
 80082b8:	f000 80a0 	beq.w	80083fc <_dtoa_r+0x894>
 80082bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082c0:	9e06      	ldr	r6, [sp, #24]
 80082c2:	4645      	mov	r5, r8
 80082c4:	9a04      	ldr	r2, [sp, #16]
 80082c6:	2101      	movs	r1, #1
 80082c8:	441a      	add	r2, r3
 80082ca:	4620      	mov	r0, r4
 80082cc:	4498      	add	r8, r3
 80082ce:	9204      	str	r2, [sp, #16]
 80082d0:	f000 fd6c 	bl	8008dac <__i2b>
 80082d4:	4607      	mov	r7, r0
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	dd0b      	ble.n	80082f2 <_dtoa_r+0x78a>
 80082da:	9b04      	ldr	r3, [sp, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd08      	ble.n	80082f2 <_dtoa_r+0x78a>
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	9a04      	ldr	r2, [sp, #16]
 80082e4:	bfa8      	it	ge
 80082e6:	462b      	movge	r3, r5
 80082e8:	eba8 0803 	sub.w	r8, r8, r3
 80082ec:	1aed      	subs	r5, r5, r3
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	9304      	str	r3, [sp, #16]
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	b1fb      	cbz	r3, 8008336 <_dtoa_r+0x7ce>
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 809f 	beq.w	800843c <_dtoa_r+0x8d4>
 80082fe:	2e00      	cmp	r6, #0
 8008300:	dd11      	ble.n	8008326 <_dtoa_r+0x7be>
 8008302:	4639      	mov	r1, r7
 8008304:	4632      	mov	r2, r6
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fe0c 	bl	8008f24 <__pow5mult>
 800830c:	465a      	mov	r2, fp
 800830e:	4601      	mov	r1, r0
 8008310:	4607      	mov	r7, r0
 8008312:	4620      	mov	r0, r4
 8008314:	f000 fd60 	bl	8008dd8 <__multiply>
 8008318:	4659      	mov	r1, fp
 800831a:	9007      	str	r0, [sp, #28]
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fc89 	bl	8008c34 <_Bfree>
 8008322:	9b07      	ldr	r3, [sp, #28]
 8008324:	469b      	mov	fp, r3
 8008326:	9b06      	ldr	r3, [sp, #24]
 8008328:	1b9a      	subs	r2, r3, r6
 800832a:	d004      	beq.n	8008336 <_dtoa_r+0x7ce>
 800832c:	4659      	mov	r1, fp
 800832e:	4620      	mov	r0, r4
 8008330:	f000 fdf8 	bl	8008f24 <__pow5mult>
 8008334:	4683      	mov	fp, r0
 8008336:	2101      	movs	r1, #1
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fd37 	bl	8008dac <__i2b>
 800833e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008340:	2b00      	cmp	r3, #0
 8008342:	4606      	mov	r6, r0
 8008344:	dd7c      	ble.n	8008440 <_dtoa_r+0x8d8>
 8008346:	461a      	mov	r2, r3
 8008348:	4601      	mov	r1, r0
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fdea 	bl	8008f24 <__pow5mult>
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	2b01      	cmp	r3, #1
 8008354:	4606      	mov	r6, r0
 8008356:	dd76      	ble.n	8008446 <_dtoa_r+0x8de>
 8008358:	2300      	movs	r3, #0
 800835a:	9306      	str	r3, [sp, #24]
 800835c:	6933      	ldr	r3, [r6, #16]
 800835e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008362:	6918      	ldr	r0, [r3, #16]
 8008364:	f000 fcd2 	bl	8008d0c <__hi0bits>
 8008368:	f1c0 0020 	rsb	r0, r0, #32
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	4418      	add	r0, r3
 8008370:	f010 001f 	ands.w	r0, r0, #31
 8008374:	f000 8086 	beq.w	8008484 <_dtoa_r+0x91c>
 8008378:	f1c0 0320 	rsb	r3, r0, #32
 800837c:	2b04      	cmp	r3, #4
 800837e:	dd7f      	ble.n	8008480 <_dtoa_r+0x918>
 8008380:	f1c0 001c 	rsb	r0, r0, #28
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	4403      	add	r3, r0
 8008388:	4480      	add	r8, r0
 800838a:	4405      	add	r5, r0
 800838c:	9304      	str	r3, [sp, #16]
 800838e:	f1b8 0f00 	cmp.w	r8, #0
 8008392:	dd05      	ble.n	80083a0 <_dtoa_r+0x838>
 8008394:	4659      	mov	r1, fp
 8008396:	4642      	mov	r2, r8
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fe1d 	bl	8008fd8 <__lshift>
 800839e:	4683      	mov	fp, r0
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dd05      	ble.n	80083b2 <_dtoa_r+0x84a>
 80083a6:	4631      	mov	r1, r6
 80083a8:	461a      	mov	r2, r3
 80083aa:	4620      	mov	r0, r4
 80083ac:	f000 fe14 	bl	8008fd8 <__lshift>
 80083b0:	4606      	mov	r6, r0
 80083b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d069      	beq.n	800848c <_dtoa_r+0x924>
 80083b8:	4631      	mov	r1, r6
 80083ba:	4658      	mov	r0, fp
 80083bc:	f000 fe78 	bl	80090b0 <__mcmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	da63      	bge.n	800848c <_dtoa_r+0x924>
 80083c4:	2300      	movs	r3, #0
 80083c6:	4659      	mov	r1, fp
 80083c8:	220a      	movs	r2, #10
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 fc54 	bl	8008c78 <__multadd>
 80083d0:	9b08      	ldr	r3, [sp, #32]
 80083d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083d6:	4683      	mov	fp, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 818f 	beq.w	80086fc <_dtoa_r+0xb94>
 80083de:	4639      	mov	r1, r7
 80083e0:	2300      	movs	r3, #0
 80083e2:	220a      	movs	r2, #10
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fc47 	bl	8008c78 <__multadd>
 80083ea:	f1b9 0f00 	cmp.w	r9, #0
 80083ee:	4607      	mov	r7, r0
 80083f0:	f300 808e 	bgt.w	8008510 <_dtoa_r+0x9a8>
 80083f4:	9b05      	ldr	r3, [sp, #20]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	dc50      	bgt.n	800849c <_dtoa_r+0x934>
 80083fa:	e089      	b.n	8008510 <_dtoa_r+0x9a8>
 80083fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008402:	e75d      	b.n	80082c0 <_dtoa_r+0x758>
 8008404:	9b01      	ldr	r3, [sp, #4]
 8008406:	1e5e      	subs	r6, r3, #1
 8008408:	9b06      	ldr	r3, [sp, #24]
 800840a:	42b3      	cmp	r3, r6
 800840c:	bfbf      	itttt	lt
 800840e:	9b06      	ldrlt	r3, [sp, #24]
 8008410:	9606      	strlt	r6, [sp, #24]
 8008412:	1af2      	sublt	r2, r6, r3
 8008414:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008416:	bfb6      	itet	lt
 8008418:	189b      	addlt	r3, r3, r2
 800841a:	1b9e      	subge	r6, r3, r6
 800841c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800841e:	9b01      	ldr	r3, [sp, #4]
 8008420:	bfb8      	it	lt
 8008422:	2600      	movlt	r6, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	bfb5      	itete	lt
 8008428:	eba8 0503 	sublt.w	r5, r8, r3
 800842c:	9b01      	ldrge	r3, [sp, #4]
 800842e:	2300      	movlt	r3, #0
 8008430:	4645      	movge	r5, r8
 8008432:	e747      	b.n	80082c4 <_dtoa_r+0x75c>
 8008434:	9e06      	ldr	r6, [sp, #24]
 8008436:	9f08      	ldr	r7, [sp, #32]
 8008438:	4645      	mov	r5, r8
 800843a:	e74c      	b.n	80082d6 <_dtoa_r+0x76e>
 800843c:	9a06      	ldr	r2, [sp, #24]
 800843e:	e775      	b.n	800832c <_dtoa_r+0x7c4>
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	2b01      	cmp	r3, #1
 8008444:	dc18      	bgt.n	8008478 <_dtoa_r+0x910>
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	b9b3      	cbnz	r3, 8008478 <_dtoa_r+0x910>
 800844a:	9b03      	ldr	r3, [sp, #12]
 800844c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008450:	b9a3      	cbnz	r3, 800847c <_dtoa_r+0x914>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008458:	0d1b      	lsrs	r3, r3, #20
 800845a:	051b      	lsls	r3, r3, #20
 800845c:	b12b      	cbz	r3, 800846a <_dtoa_r+0x902>
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	3301      	adds	r3, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	f108 0801 	add.w	r8, r8, #1
 8008468:	2301      	movs	r3, #1
 800846a:	9306      	str	r3, [sp, #24]
 800846c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800846e:	2b00      	cmp	r3, #0
 8008470:	f47f af74 	bne.w	800835c <_dtoa_r+0x7f4>
 8008474:	2001      	movs	r0, #1
 8008476:	e779      	b.n	800836c <_dtoa_r+0x804>
 8008478:	2300      	movs	r3, #0
 800847a:	e7f6      	b.n	800846a <_dtoa_r+0x902>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	e7f4      	b.n	800846a <_dtoa_r+0x902>
 8008480:	d085      	beq.n	800838e <_dtoa_r+0x826>
 8008482:	4618      	mov	r0, r3
 8008484:	301c      	adds	r0, #28
 8008486:	e77d      	b.n	8008384 <_dtoa_r+0x81c>
 8008488:	40240000 	.word	0x40240000
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	dc38      	bgt.n	8008504 <_dtoa_r+0x99c>
 8008492:	9b05      	ldr	r3, [sp, #20]
 8008494:	2b02      	cmp	r3, #2
 8008496:	dd35      	ble.n	8008504 <_dtoa_r+0x99c>
 8008498:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800849c:	f1b9 0f00 	cmp.w	r9, #0
 80084a0:	d10d      	bne.n	80084be <_dtoa_r+0x956>
 80084a2:	4631      	mov	r1, r6
 80084a4:	464b      	mov	r3, r9
 80084a6:	2205      	movs	r2, #5
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fbe5 	bl	8008c78 <__multadd>
 80084ae:	4601      	mov	r1, r0
 80084b0:	4606      	mov	r6, r0
 80084b2:	4658      	mov	r0, fp
 80084b4:	f000 fdfc 	bl	80090b0 <__mcmp>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	f73f adbd 	bgt.w	8008038 <_dtoa_r+0x4d0>
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	9d00      	ldr	r5, [sp, #0]
 80084c2:	ea6f 0a03 	mvn.w	sl, r3
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	4631      	mov	r1, r6
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 fbb1 	bl	8008c34 <_Bfree>
 80084d2:	2f00      	cmp	r7, #0
 80084d4:	f43f aeb4 	beq.w	8008240 <_dtoa_r+0x6d8>
 80084d8:	f1b8 0f00 	cmp.w	r8, #0
 80084dc:	d005      	beq.n	80084ea <_dtoa_r+0x982>
 80084de:	45b8      	cmp	r8, r7
 80084e0:	d003      	beq.n	80084ea <_dtoa_r+0x982>
 80084e2:	4641      	mov	r1, r8
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 fba5 	bl	8008c34 <_Bfree>
 80084ea:	4639      	mov	r1, r7
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fba1 	bl	8008c34 <_Bfree>
 80084f2:	e6a5      	b.n	8008240 <_dtoa_r+0x6d8>
 80084f4:	2600      	movs	r6, #0
 80084f6:	4637      	mov	r7, r6
 80084f8:	e7e1      	b.n	80084be <_dtoa_r+0x956>
 80084fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008500:	4637      	mov	r7, r6
 8008502:	e599      	b.n	8008038 <_dtoa_r+0x4d0>
 8008504:	9b08      	ldr	r3, [sp, #32]
 8008506:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 80fd 	beq.w	800870a <_dtoa_r+0xba2>
 8008510:	2d00      	cmp	r5, #0
 8008512:	dd05      	ble.n	8008520 <_dtoa_r+0x9b8>
 8008514:	4639      	mov	r1, r7
 8008516:	462a      	mov	r2, r5
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fd5d 	bl	8008fd8 <__lshift>
 800851e:	4607      	mov	r7, r0
 8008520:	9b06      	ldr	r3, [sp, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d05c      	beq.n	80085e0 <_dtoa_r+0xa78>
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4620      	mov	r0, r4
 800852a:	f000 fb43 	bl	8008bb4 <_Balloc>
 800852e:	4605      	mov	r5, r0
 8008530:	b928      	cbnz	r0, 800853e <_dtoa_r+0x9d6>
 8008532:	4b80      	ldr	r3, [pc, #512]	; (8008734 <_dtoa_r+0xbcc>)
 8008534:	4602      	mov	r2, r0
 8008536:	f240 21ea 	movw	r1, #746	; 0x2ea
 800853a:	f7ff bb2e 	b.w	8007b9a <_dtoa_r+0x32>
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	3202      	adds	r2, #2
 8008542:	0092      	lsls	r2, r2, #2
 8008544:	f107 010c 	add.w	r1, r7, #12
 8008548:	300c      	adds	r0, #12
 800854a:	f000 fb25 	bl	8008b98 <memcpy>
 800854e:	2201      	movs	r2, #1
 8008550:	4629      	mov	r1, r5
 8008552:	4620      	mov	r0, r4
 8008554:	f000 fd40 	bl	8008fd8 <__lshift>
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	444b      	add	r3, r9
 8008562:	9307      	str	r3, [sp, #28]
 8008564:	9b02      	ldr	r3, [sp, #8]
 8008566:	f003 0301 	and.w	r3, r3, #1
 800856a:	46b8      	mov	r8, r7
 800856c:	9306      	str	r3, [sp, #24]
 800856e:	4607      	mov	r7, r0
 8008570:	9b01      	ldr	r3, [sp, #4]
 8008572:	4631      	mov	r1, r6
 8008574:	3b01      	subs	r3, #1
 8008576:	4658      	mov	r0, fp
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	f7ff fa67 	bl	8007a4c <quorem>
 800857e:	4603      	mov	r3, r0
 8008580:	3330      	adds	r3, #48	; 0x30
 8008582:	9004      	str	r0, [sp, #16]
 8008584:	4641      	mov	r1, r8
 8008586:	4658      	mov	r0, fp
 8008588:	9308      	str	r3, [sp, #32]
 800858a:	f000 fd91 	bl	80090b0 <__mcmp>
 800858e:	463a      	mov	r2, r7
 8008590:	4681      	mov	r9, r0
 8008592:	4631      	mov	r1, r6
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fda7 	bl	80090e8 <__mdiff>
 800859a:	68c2      	ldr	r2, [r0, #12]
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	4605      	mov	r5, r0
 80085a0:	bb02      	cbnz	r2, 80085e4 <_dtoa_r+0xa7c>
 80085a2:	4601      	mov	r1, r0
 80085a4:	4658      	mov	r0, fp
 80085a6:	f000 fd83 	bl	80090b0 <__mcmp>
 80085aa:	9b08      	ldr	r3, [sp, #32]
 80085ac:	4602      	mov	r2, r0
 80085ae:	4629      	mov	r1, r5
 80085b0:	4620      	mov	r0, r4
 80085b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80085b6:	f000 fb3d 	bl	8008c34 <_Bfree>
 80085ba:	9b05      	ldr	r3, [sp, #20]
 80085bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085be:	9d01      	ldr	r5, [sp, #4]
 80085c0:	ea43 0102 	orr.w	r1, r3, r2
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	430b      	orrs	r3, r1
 80085c8:	9b08      	ldr	r3, [sp, #32]
 80085ca:	d10d      	bne.n	80085e8 <_dtoa_r+0xa80>
 80085cc:	2b39      	cmp	r3, #57	; 0x39
 80085ce:	d029      	beq.n	8008624 <_dtoa_r+0xabc>
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	dd01      	ble.n	80085da <_dtoa_r+0xa72>
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	3331      	adds	r3, #49	; 0x31
 80085da:	9a02      	ldr	r2, [sp, #8]
 80085dc:	7013      	strb	r3, [r2, #0]
 80085de:	e774      	b.n	80084ca <_dtoa_r+0x962>
 80085e0:	4638      	mov	r0, r7
 80085e2:	e7b9      	b.n	8008558 <_dtoa_r+0x9f0>
 80085e4:	2201      	movs	r2, #1
 80085e6:	e7e2      	b.n	80085ae <_dtoa_r+0xa46>
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	db06      	blt.n	80085fc <_dtoa_r+0xa94>
 80085ee:	9905      	ldr	r1, [sp, #20]
 80085f0:	ea41 0909 	orr.w	r9, r1, r9
 80085f4:	9906      	ldr	r1, [sp, #24]
 80085f6:	ea59 0101 	orrs.w	r1, r9, r1
 80085fa:	d120      	bne.n	800863e <_dtoa_r+0xad6>
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	ddec      	ble.n	80085da <_dtoa_r+0xa72>
 8008600:	4659      	mov	r1, fp
 8008602:	2201      	movs	r2, #1
 8008604:	4620      	mov	r0, r4
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	f000 fce6 	bl	8008fd8 <__lshift>
 800860c:	4631      	mov	r1, r6
 800860e:	4683      	mov	fp, r0
 8008610:	f000 fd4e 	bl	80090b0 <__mcmp>
 8008614:	2800      	cmp	r0, #0
 8008616:	9b01      	ldr	r3, [sp, #4]
 8008618:	dc02      	bgt.n	8008620 <_dtoa_r+0xab8>
 800861a:	d1de      	bne.n	80085da <_dtoa_r+0xa72>
 800861c:	07da      	lsls	r2, r3, #31
 800861e:	d5dc      	bpl.n	80085da <_dtoa_r+0xa72>
 8008620:	2b39      	cmp	r3, #57	; 0x39
 8008622:	d1d8      	bne.n	80085d6 <_dtoa_r+0xa6e>
 8008624:	9a02      	ldr	r2, [sp, #8]
 8008626:	2339      	movs	r3, #57	; 0x39
 8008628:	7013      	strb	r3, [r2, #0]
 800862a:	462b      	mov	r3, r5
 800862c:	461d      	mov	r5, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008634:	2a39      	cmp	r2, #57	; 0x39
 8008636:	d050      	beq.n	80086da <_dtoa_r+0xb72>
 8008638:	3201      	adds	r2, #1
 800863a:	701a      	strb	r2, [r3, #0]
 800863c:	e745      	b.n	80084ca <_dtoa_r+0x962>
 800863e:	2a00      	cmp	r2, #0
 8008640:	dd03      	ble.n	800864a <_dtoa_r+0xae2>
 8008642:	2b39      	cmp	r3, #57	; 0x39
 8008644:	d0ee      	beq.n	8008624 <_dtoa_r+0xabc>
 8008646:	3301      	adds	r3, #1
 8008648:	e7c7      	b.n	80085da <_dtoa_r+0xa72>
 800864a:	9a01      	ldr	r2, [sp, #4]
 800864c:	9907      	ldr	r1, [sp, #28]
 800864e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008652:	428a      	cmp	r2, r1
 8008654:	d02a      	beq.n	80086ac <_dtoa_r+0xb44>
 8008656:	4659      	mov	r1, fp
 8008658:	2300      	movs	r3, #0
 800865a:	220a      	movs	r2, #10
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fb0b 	bl	8008c78 <__multadd>
 8008662:	45b8      	cmp	r8, r7
 8008664:	4683      	mov	fp, r0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	f04f 020a 	mov.w	r2, #10
 800866e:	4641      	mov	r1, r8
 8008670:	4620      	mov	r0, r4
 8008672:	d107      	bne.n	8008684 <_dtoa_r+0xb1c>
 8008674:	f000 fb00 	bl	8008c78 <__multadd>
 8008678:	4680      	mov	r8, r0
 800867a:	4607      	mov	r7, r0
 800867c:	9b01      	ldr	r3, [sp, #4]
 800867e:	3301      	adds	r3, #1
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	e775      	b.n	8008570 <_dtoa_r+0xa08>
 8008684:	f000 faf8 	bl	8008c78 <__multadd>
 8008688:	4639      	mov	r1, r7
 800868a:	4680      	mov	r8, r0
 800868c:	2300      	movs	r3, #0
 800868e:	220a      	movs	r2, #10
 8008690:	4620      	mov	r0, r4
 8008692:	f000 faf1 	bl	8008c78 <__multadd>
 8008696:	4607      	mov	r7, r0
 8008698:	e7f0      	b.n	800867c <_dtoa_r+0xb14>
 800869a:	f1b9 0f00 	cmp.w	r9, #0
 800869e:	9a00      	ldr	r2, [sp, #0]
 80086a0:	bfcc      	ite	gt
 80086a2:	464d      	movgt	r5, r9
 80086a4:	2501      	movle	r5, #1
 80086a6:	4415      	add	r5, r2
 80086a8:	f04f 0800 	mov.w	r8, #0
 80086ac:	4659      	mov	r1, fp
 80086ae:	2201      	movs	r2, #1
 80086b0:	4620      	mov	r0, r4
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	f000 fc90 	bl	8008fd8 <__lshift>
 80086b8:	4631      	mov	r1, r6
 80086ba:	4683      	mov	fp, r0
 80086bc:	f000 fcf8 	bl	80090b0 <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dcb2      	bgt.n	800862a <_dtoa_r+0xac2>
 80086c4:	d102      	bne.n	80086cc <_dtoa_r+0xb64>
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	07db      	lsls	r3, r3, #31
 80086ca:	d4ae      	bmi.n	800862a <_dtoa_r+0xac2>
 80086cc:	462b      	mov	r3, r5
 80086ce:	461d      	mov	r5, r3
 80086d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086d4:	2a30      	cmp	r2, #48	; 0x30
 80086d6:	d0fa      	beq.n	80086ce <_dtoa_r+0xb66>
 80086d8:	e6f7      	b.n	80084ca <_dtoa_r+0x962>
 80086da:	9a00      	ldr	r2, [sp, #0]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d1a5      	bne.n	800862c <_dtoa_r+0xac4>
 80086e0:	f10a 0a01 	add.w	sl, sl, #1
 80086e4:	2331      	movs	r3, #49	; 0x31
 80086e6:	e779      	b.n	80085dc <_dtoa_r+0xa74>
 80086e8:	4b13      	ldr	r3, [pc, #76]	; (8008738 <_dtoa_r+0xbd0>)
 80086ea:	f7ff baaf 	b.w	8007c4c <_dtoa_r+0xe4>
 80086ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f47f aa86 	bne.w	8007c02 <_dtoa_r+0x9a>
 80086f6:	4b11      	ldr	r3, [pc, #68]	; (800873c <_dtoa_r+0xbd4>)
 80086f8:	f7ff baa8 	b.w	8007c4c <_dtoa_r+0xe4>
 80086fc:	f1b9 0f00 	cmp.w	r9, #0
 8008700:	dc03      	bgt.n	800870a <_dtoa_r+0xba2>
 8008702:	9b05      	ldr	r3, [sp, #20]
 8008704:	2b02      	cmp	r3, #2
 8008706:	f73f aec9 	bgt.w	800849c <_dtoa_r+0x934>
 800870a:	9d00      	ldr	r5, [sp, #0]
 800870c:	4631      	mov	r1, r6
 800870e:	4658      	mov	r0, fp
 8008710:	f7ff f99c 	bl	8007a4c <quorem>
 8008714:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008718:	f805 3b01 	strb.w	r3, [r5], #1
 800871c:	9a00      	ldr	r2, [sp, #0]
 800871e:	1aaa      	subs	r2, r5, r2
 8008720:	4591      	cmp	r9, r2
 8008722:	ddba      	ble.n	800869a <_dtoa_r+0xb32>
 8008724:	4659      	mov	r1, fp
 8008726:	2300      	movs	r3, #0
 8008728:	220a      	movs	r2, #10
 800872a:	4620      	mov	r0, r4
 800872c:	f000 faa4 	bl	8008c78 <__multadd>
 8008730:	4683      	mov	fp, r0
 8008732:	e7eb      	b.n	800870c <_dtoa_r+0xba4>
 8008734:	0800ebbf 	.word	0x0800ebbf
 8008738:	0800eb18 	.word	0x0800eb18
 800873c:	0800eb3c 	.word	0x0800eb3c

08008740 <__sflush_r>:
 8008740:	898a      	ldrh	r2, [r1, #12]
 8008742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	4605      	mov	r5, r0
 8008748:	0710      	lsls	r0, r2, #28
 800874a:	460c      	mov	r4, r1
 800874c:	d458      	bmi.n	8008800 <__sflush_r+0xc0>
 800874e:	684b      	ldr	r3, [r1, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc05      	bgt.n	8008760 <__sflush_r+0x20>
 8008754:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008756:	2b00      	cmp	r3, #0
 8008758:	dc02      	bgt.n	8008760 <__sflush_r+0x20>
 800875a:	2000      	movs	r0, #0
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008762:	2e00      	cmp	r6, #0
 8008764:	d0f9      	beq.n	800875a <__sflush_r+0x1a>
 8008766:	2300      	movs	r3, #0
 8008768:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800876c:	682f      	ldr	r7, [r5, #0]
 800876e:	602b      	str	r3, [r5, #0]
 8008770:	d032      	beq.n	80087d8 <__sflush_r+0x98>
 8008772:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	075a      	lsls	r2, r3, #29
 8008778:	d505      	bpl.n	8008786 <__sflush_r+0x46>
 800877a:	6863      	ldr	r3, [r4, #4]
 800877c:	1ac0      	subs	r0, r0, r3
 800877e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008780:	b10b      	cbz	r3, 8008786 <__sflush_r+0x46>
 8008782:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008784:	1ac0      	subs	r0, r0, r3
 8008786:	2300      	movs	r3, #0
 8008788:	4602      	mov	r2, r0
 800878a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800878c:	6a21      	ldr	r1, [r4, #32]
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	89a3      	ldrh	r3, [r4, #12]
 8008796:	d106      	bne.n	80087a6 <__sflush_r+0x66>
 8008798:	6829      	ldr	r1, [r5, #0]
 800879a:	291d      	cmp	r1, #29
 800879c:	d82c      	bhi.n	80087f8 <__sflush_r+0xb8>
 800879e:	4a2a      	ldr	r2, [pc, #168]	; (8008848 <__sflush_r+0x108>)
 80087a0:	40ca      	lsrs	r2, r1
 80087a2:	07d6      	lsls	r6, r2, #31
 80087a4:	d528      	bpl.n	80087f8 <__sflush_r+0xb8>
 80087a6:	2200      	movs	r2, #0
 80087a8:	6062      	str	r2, [r4, #4]
 80087aa:	04d9      	lsls	r1, r3, #19
 80087ac:	6922      	ldr	r2, [r4, #16]
 80087ae:	6022      	str	r2, [r4, #0]
 80087b0:	d504      	bpl.n	80087bc <__sflush_r+0x7c>
 80087b2:	1c42      	adds	r2, r0, #1
 80087b4:	d101      	bne.n	80087ba <__sflush_r+0x7a>
 80087b6:	682b      	ldr	r3, [r5, #0]
 80087b8:	b903      	cbnz	r3, 80087bc <__sflush_r+0x7c>
 80087ba:	6560      	str	r0, [r4, #84]	; 0x54
 80087bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087be:	602f      	str	r7, [r5, #0]
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d0ca      	beq.n	800875a <__sflush_r+0x1a>
 80087c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087c8:	4299      	cmp	r1, r3
 80087ca:	d002      	beq.n	80087d2 <__sflush_r+0x92>
 80087cc:	4628      	mov	r0, r5
 80087ce:	f000 fd7f 	bl	80092d0 <_free_r>
 80087d2:	2000      	movs	r0, #0
 80087d4:	6360      	str	r0, [r4, #52]	; 0x34
 80087d6:	e7c1      	b.n	800875c <__sflush_r+0x1c>
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	2301      	movs	r3, #1
 80087dc:	4628      	mov	r0, r5
 80087de:	47b0      	blx	r6
 80087e0:	1c41      	adds	r1, r0, #1
 80087e2:	d1c7      	bne.n	8008774 <__sflush_r+0x34>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0c4      	beq.n	8008774 <__sflush_r+0x34>
 80087ea:	2b1d      	cmp	r3, #29
 80087ec:	d001      	beq.n	80087f2 <__sflush_r+0xb2>
 80087ee:	2b16      	cmp	r3, #22
 80087f0:	d101      	bne.n	80087f6 <__sflush_r+0xb6>
 80087f2:	602f      	str	r7, [r5, #0]
 80087f4:	e7b1      	b.n	800875a <__sflush_r+0x1a>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087fc:	81a3      	strh	r3, [r4, #12]
 80087fe:	e7ad      	b.n	800875c <__sflush_r+0x1c>
 8008800:	690f      	ldr	r7, [r1, #16]
 8008802:	2f00      	cmp	r7, #0
 8008804:	d0a9      	beq.n	800875a <__sflush_r+0x1a>
 8008806:	0793      	lsls	r3, r2, #30
 8008808:	680e      	ldr	r6, [r1, #0]
 800880a:	bf08      	it	eq
 800880c:	694b      	ldreq	r3, [r1, #20]
 800880e:	600f      	str	r7, [r1, #0]
 8008810:	bf18      	it	ne
 8008812:	2300      	movne	r3, #0
 8008814:	eba6 0807 	sub.w	r8, r6, r7
 8008818:	608b      	str	r3, [r1, #8]
 800881a:	f1b8 0f00 	cmp.w	r8, #0
 800881e:	dd9c      	ble.n	800875a <__sflush_r+0x1a>
 8008820:	6a21      	ldr	r1, [r4, #32]
 8008822:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008824:	4643      	mov	r3, r8
 8008826:	463a      	mov	r2, r7
 8008828:	4628      	mov	r0, r5
 800882a:	47b0      	blx	r6
 800882c:	2800      	cmp	r0, #0
 800882e:	dc06      	bgt.n	800883e <__sflush_r+0xfe>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295
 800883c:	e78e      	b.n	800875c <__sflush_r+0x1c>
 800883e:	4407      	add	r7, r0
 8008840:	eba8 0800 	sub.w	r8, r8, r0
 8008844:	e7e9      	b.n	800881a <__sflush_r+0xda>
 8008846:	bf00      	nop
 8008848:	20400001 	.word	0x20400001

0800884c <_fflush_r>:
 800884c:	b538      	push	{r3, r4, r5, lr}
 800884e:	690b      	ldr	r3, [r1, #16]
 8008850:	4605      	mov	r5, r0
 8008852:	460c      	mov	r4, r1
 8008854:	b913      	cbnz	r3, 800885c <_fflush_r+0x10>
 8008856:	2500      	movs	r5, #0
 8008858:	4628      	mov	r0, r5
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	b118      	cbz	r0, 8008866 <_fflush_r+0x1a>
 800885e:	6983      	ldr	r3, [r0, #24]
 8008860:	b90b      	cbnz	r3, 8008866 <_fflush_r+0x1a>
 8008862:	f000 f887 	bl	8008974 <__sinit>
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <_fflush_r+0x6c>)
 8008868:	429c      	cmp	r4, r3
 800886a:	d11b      	bne.n	80088a4 <_fflush_r+0x58>
 800886c:	686c      	ldr	r4, [r5, #4]
 800886e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d0ef      	beq.n	8008856 <_fflush_r+0xa>
 8008876:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008878:	07d0      	lsls	r0, r2, #31
 800887a:	d404      	bmi.n	8008886 <_fflush_r+0x3a>
 800887c:	0599      	lsls	r1, r3, #22
 800887e:	d402      	bmi.n	8008886 <_fflush_r+0x3a>
 8008880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008882:	f000 f91a 	bl	8008aba <__retarget_lock_acquire_recursive>
 8008886:	4628      	mov	r0, r5
 8008888:	4621      	mov	r1, r4
 800888a:	f7ff ff59 	bl	8008740 <__sflush_r>
 800888e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008890:	07da      	lsls	r2, r3, #31
 8008892:	4605      	mov	r5, r0
 8008894:	d4e0      	bmi.n	8008858 <_fflush_r+0xc>
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	059b      	lsls	r3, r3, #22
 800889a:	d4dd      	bmi.n	8008858 <_fflush_r+0xc>
 800889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800889e:	f000 f90d 	bl	8008abc <__retarget_lock_release_recursive>
 80088a2:	e7d9      	b.n	8008858 <_fflush_r+0xc>
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <_fflush_r+0x70>)
 80088a6:	429c      	cmp	r4, r3
 80088a8:	d101      	bne.n	80088ae <_fflush_r+0x62>
 80088aa:	68ac      	ldr	r4, [r5, #8]
 80088ac:	e7df      	b.n	800886e <_fflush_r+0x22>
 80088ae:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <_fflush_r+0x74>)
 80088b0:	429c      	cmp	r4, r3
 80088b2:	bf08      	it	eq
 80088b4:	68ec      	ldreq	r4, [r5, #12]
 80088b6:	e7da      	b.n	800886e <_fflush_r+0x22>
 80088b8:	0800ebf0 	.word	0x0800ebf0
 80088bc:	0800ec10 	.word	0x0800ec10
 80088c0:	0800ebd0 	.word	0x0800ebd0

080088c4 <std>:
 80088c4:	2300      	movs	r3, #0
 80088c6:	b510      	push	{r4, lr}
 80088c8:	4604      	mov	r4, r0
 80088ca:	e9c0 3300 	strd	r3, r3, [r0]
 80088ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088d2:	6083      	str	r3, [r0, #8]
 80088d4:	8181      	strh	r1, [r0, #12]
 80088d6:	6643      	str	r3, [r0, #100]	; 0x64
 80088d8:	81c2      	strh	r2, [r0, #14]
 80088da:	6183      	str	r3, [r0, #24]
 80088dc:	4619      	mov	r1, r3
 80088de:	2208      	movs	r2, #8
 80088e0:	305c      	adds	r0, #92	; 0x5c
 80088e2:	f7fe fad3 	bl	8006e8c <memset>
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <std+0x38>)
 80088e8:	6263      	str	r3, [r4, #36]	; 0x24
 80088ea:	4b05      	ldr	r3, [pc, #20]	; (8008900 <std+0x3c>)
 80088ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80088ee:	4b05      	ldr	r3, [pc, #20]	; (8008904 <std+0x40>)
 80088f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <std+0x44>)
 80088f4:	6224      	str	r4, [r4, #32]
 80088f6:	6323      	str	r3, [r4, #48]	; 0x30
 80088f8:	bd10      	pop	{r4, pc}
 80088fa:	bf00      	nop
 80088fc:	080099b1 	.word	0x080099b1
 8008900:	080099d3 	.word	0x080099d3
 8008904:	08009a0b 	.word	0x08009a0b
 8008908:	08009a2f 	.word	0x08009a2f

0800890c <_cleanup_r>:
 800890c:	4901      	ldr	r1, [pc, #4]	; (8008914 <_cleanup_r+0x8>)
 800890e:	f000 b8af 	b.w	8008a70 <_fwalk_reent>
 8008912:	bf00      	nop
 8008914:	0800884d 	.word	0x0800884d

08008918 <__sfmoreglue>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	1e4a      	subs	r2, r1, #1
 800891c:	2568      	movs	r5, #104	; 0x68
 800891e:	4355      	muls	r5, r2
 8008920:	460e      	mov	r6, r1
 8008922:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008926:	f000 fd23 	bl	8009370 <_malloc_r>
 800892a:	4604      	mov	r4, r0
 800892c:	b140      	cbz	r0, 8008940 <__sfmoreglue+0x28>
 800892e:	2100      	movs	r1, #0
 8008930:	e9c0 1600 	strd	r1, r6, [r0]
 8008934:	300c      	adds	r0, #12
 8008936:	60a0      	str	r0, [r4, #8]
 8008938:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800893c:	f7fe faa6 	bl	8006e8c <memset>
 8008940:	4620      	mov	r0, r4
 8008942:	bd70      	pop	{r4, r5, r6, pc}

08008944 <__sfp_lock_acquire>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sfp_lock_acquire+0x8>)
 8008946:	f000 b8b8 	b.w	8008aba <__retarget_lock_acquire_recursive>
 800894a:	bf00      	nop
 800894c:	2000047c 	.word	0x2000047c

08008950 <__sfp_lock_release>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sfp_lock_release+0x8>)
 8008952:	f000 b8b3 	b.w	8008abc <__retarget_lock_release_recursive>
 8008956:	bf00      	nop
 8008958:	2000047c 	.word	0x2000047c

0800895c <__sinit_lock_acquire>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sinit_lock_acquire+0x8>)
 800895e:	f000 b8ac 	b.w	8008aba <__retarget_lock_acquire_recursive>
 8008962:	bf00      	nop
 8008964:	20000477 	.word	0x20000477

08008968 <__sinit_lock_release>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__sinit_lock_release+0x8>)
 800896a:	f000 b8a7 	b.w	8008abc <__retarget_lock_release_recursive>
 800896e:	bf00      	nop
 8008970:	20000477 	.word	0x20000477

08008974 <__sinit>:
 8008974:	b510      	push	{r4, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	f7ff fff0 	bl	800895c <__sinit_lock_acquire>
 800897c:	69a3      	ldr	r3, [r4, #24]
 800897e:	b11b      	cbz	r3, 8008988 <__sinit+0x14>
 8008980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008984:	f7ff bff0 	b.w	8008968 <__sinit_lock_release>
 8008988:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800898c:	6523      	str	r3, [r4, #80]	; 0x50
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <__sinit+0x68>)
 8008990:	4a13      	ldr	r2, [pc, #76]	; (80089e0 <__sinit+0x6c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	62a2      	str	r2, [r4, #40]	; 0x28
 8008996:	42a3      	cmp	r3, r4
 8008998:	bf04      	itt	eq
 800899a:	2301      	moveq	r3, #1
 800899c:	61a3      	streq	r3, [r4, #24]
 800899e:	4620      	mov	r0, r4
 80089a0:	f000 f820 	bl	80089e4 <__sfp>
 80089a4:	6060      	str	r0, [r4, #4]
 80089a6:	4620      	mov	r0, r4
 80089a8:	f000 f81c 	bl	80089e4 <__sfp>
 80089ac:	60a0      	str	r0, [r4, #8]
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f818 	bl	80089e4 <__sfp>
 80089b4:	2200      	movs	r2, #0
 80089b6:	60e0      	str	r0, [r4, #12]
 80089b8:	2104      	movs	r1, #4
 80089ba:	6860      	ldr	r0, [r4, #4]
 80089bc:	f7ff ff82 	bl	80088c4 <std>
 80089c0:	68a0      	ldr	r0, [r4, #8]
 80089c2:	2201      	movs	r2, #1
 80089c4:	2109      	movs	r1, #9
 80089c6:	f7ff ff7d 	bl	80088c4 <std>
 80089ca:	68e0      	ldr	r0, [r4, #12]
 80089cc:	2202      	movs	r2, #2
 80089ce:	2112      	movs	r1, #18
 80089d0:	f7ff ff78 	bl	80088c4 <std>
 80089d4:	2301      	movs	r3, #1
 80089d6:	61a3      	str	r3, [r4, #24]
 80089d8:	e7d2      	b.n	8008980 <__sinit+0xc>
 80089da:	bf00      	nop
 80089dc:	0800eb04 	.word	0x0800eb04
 80089e0:	0800890d 	.word	0x0800890d

080089e4 <__sfp>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	4607      	mov	r7, r0
 80089e8:	f7ff ffac 	bl	8008944 <__sfp_lock_acquire>
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <__sfp+0x84>)
 80089ee:	681e      	ldr	r6, [r3, #0]
 80089f0:	69b3      	ldr	r3, [r6, #24]
 80089f2:	b913      	cbnz	r3, 80089fa <__sfp+0x16>
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff ffbd 	bl	8008974 <__sinit>
 80089fa:	3648      	adds	r6, #72	; 0x48
 80089fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	d503      	bpl.n	8008a0c <__sfp+0x28>
 8008a04:	6833      	ldr	r3, [r6, #0]
 8008a06:	b30b      	cbz	r3, 8008a4c <__sfp+0x68>
 8008a08:	6836      	ldr	r6, [r6, #0]
 8008a0a:	e7f7      	b.n	80089fc <__sfp+0x18>
 8008a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a10:	b9d5      	cbnz	r5, 8008a48 <__sfp+0x64>
 8008a12:	4b16      	ldr	r3, [pc, #88]	; (8008a6c <__sfp+0x88>)
 8008a14:	60e3      	str	r3, [r4, #12]
 8008a16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a1a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a1c:	f000 f84c 	bl	8008ab8 <__retarget_lock_init_recursive>
 8008a20:	f7ff ff96 	bl	8008950 <__sfp_lock_release>
 8008a24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a2c:	6025      	str	r5, [r4, #0]
 8008a2e:	61a5      	str	r5, [r4, #24]
 8008a30:	2208      	movs	r2, #8
 8008a32:	4629      	mov	r1, r5
 8008a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a38:	f7fe fa28 	bl	8006e8c <memset>
 8008a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a44:	4620      	mov	r0, r4
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	3468      	adds	r4, #104	; 0x68
 8008a4a:	e7d9      	b.n	8008a00 <__sfp+0x1c>
 8008a4c:	2104      	movs	r1, #4
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff ff62 	bl	8008918 <__sfmoreglue>
 8008a54:	4604      	mov	r4, r0
 8008a56:	6030      	str	r0, [r6, #0]
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1d5      	bne.n	8008a08 <__sfp+0x24>
 8008a5c:	f7ff ff78 	bl	8008950 <__sfp_lock_release>
 8008a60:	230c      	movs	r3, #12
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	e7ee      	b.n	8008a44 <__sfp+0x60>
 8008a66:	bf00      	nop
 8008a68:	0800eb04 	.word	0x0800eb04
 8008a6c:	ffff0001 	.word	0xffff0001

08008a70 <_fwalk_reent>:
 8008a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a74:	4606      	mov	r6, r0
 8008a76:	4688      	mov	r8, r1
 8008a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a7c:	2700      	movs	r7, #0
 8008a7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a82:	f1b9 0901 	subs.w	r9, r9, #1
 8008a86:	d505      	bpl.n	8008a94 <_fwalk_reent+0x24>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d1f7      	bne.n	8008a7e <_fwalk_reent+0xe>
 8008a8e:	4638      	mov	r0, r7
 8008a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a94:	89ab      	ldrh	r3, [r5, #12]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d907      	bls.n	8008aaa <_fwalk_reent+0x3a>
 8008a9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	d003      	beq.n	8008aaa <_fwalk_reent+0x3a>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	47c0      	blx	r8
 8008aa8:	4307      	orrs	r7, r0
 8008aaa:	3568      	adds	r5, #104	; 0x68
 8008aac:	e7e9      	b.n	8008a82 <_fwalk_reent+0x12>
	...

08008ab0 <_localeconv_r>:
 8008ab0:	4800      	ldr	r0, [pc, #0]	; (8008ab4 <_localeconv_r+0x4>)
 8008ab2:	4770      	bx	lr
 8008ab4:	20000178 	.word	0x20000178

08008ab8 <__retarget_lock_init_recursive>:
 8008ab8:	4770      	bx	lr

08008aba <__retarget_lock_acquire_recursive>:
 8008aba:	4770      	bx	lr

08008abc <__retarget_lock_release_recursive>:
 8008abc:	4770      	bx	lr

08008abe <__swhatbuf_r>:
 8008abe:	b570      	push	{r4, r5, r6, lr}
 8008ac0:	460e      	mov	r6, r1
 8008ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	b096      	sub	sp, #88	; 0x58
 8008aca:	4614      	mov	r4, r2
 8008acc:	461d      	mov	r5, r3
 8008ace:	da07      	bge.n	8008ae0 <__swhatbuf_r+0x22>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	89b3      	ldrh	r3, [r6, #12]
 8008ad6:	061a      	lsls	r2, r3, #24
 8008ad8:	d410      	bmi.n	8008afc <__swhatbuf_r+0x3e>
 8008ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ade:	e00e      	b.n	8008afe <__swhatbuf_r+0x40>
 8008ae0:	466a      	mov	r2, sp
 8008ae2:	f000 fffb 	bl	8009adc <_fstat_r>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	dbf2      	blt.n	8008ad0 <__swhatbuf_r+0x12>
 8008aea:	9a01      	ldr	r2, [sp, #4]
 8008aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008af4:	425a      	negs	r2, r3
 8008af6:	415a      	adcs	r2, r3
 8008af8:	602a      	str	r2, [r5, #0]
 8008afa:	e7ee      	b.n	8008ada <__swhatbuf_r+0x1c>
 8008afc:	2340      	movs	r3, #64	; 0x40
 8008afe:	2000      	movs	r0, #0
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	b016      	add	sp, #88	; 0x58
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b08 <__smakebuf_r>:
 8008b08:	898b      	ldrh	r3, [r1, #12]
 8008b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b0c:	079d      	lsls	r5, r3, #30
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	d507      	bpl.n	8008b24 <__smakebuf_r+0x1c>
 8008b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	6123      	str	r3, [r4, #16]
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	6163      	str	r3, [r4, #20]
 8008b20:	b002      	add	sp, #8
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	ab01      	add	r3, sp, #4
 8008b26:	466a      	mov	r2, sp
 8008b28:	f7ff ffc9 	bl	8008abe <__swhatbuf_r>
 8008b2c:	9900      	ldr	r1, [sp, #0]
 8008b2e:	4605      	mov	r5, r0
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 fc1d 	bl	8009370 <_malloc_r>
 8008b36:	b948      	cbnz	r0, 8008b4c <__smakebuf_r+0x44>
 8008b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b3c:	059a      	lsls	r2, r3, #22
 8008b3e:	d4ef      	bmi.n	8008b20 <__smakebuf_r+0x18>
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	f043 0302 	orr.w	r3, r3, #2
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	e7e3      	b.n	8008b14 <__smakebuf_r+0xc>
 8008b4c:	4b0d      	ldr	r3, [pc, #52]	; (8008b84 <__smakebuf_r+0x7c>)
 8008b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	6020      	str	r0, [r4, #0]
 8008b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b58:	81a3      	strh	r3, [r4, #12]
 8008b5a:	9b00      	ldr	r3, [sp, #0]
 8008b5c:	6163      	str	r3, [r4, #20]
 8008b5e:	9b01      	ldr	r3, [sp, #4]
 8008b60:	6120      	str	r0, [r4, #16]
 8008b62:	b15b      	cbz	r3, 8008b7c <__smakebuf_r+0x74>
 8008b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 ffc9 	bl	8009b00 <_isatty_r>
 8008b6e:	b128      	cbz	r0, 8008b7c <__smakebuf_r+0x74>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	f043 0301 	orr.w	r3, r3, #1
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	89a0      	ldrh	r0, [r4, #12]
 8008b7e:	4305      	orrs	r5, r0
 8008b80:	81a5      	strh	r5, [r4, #12]
 8008b82:	e7cd      	b.n	8008b20 <__smakebuf_r+0x18>
 8008b84:	0800890d 	.word	0x0800890d

08008b88 <malloc>:
 8008b88:	4b02      	ldr	r3, [pc, #8]	; (8008b94 <malloc+0xc>)
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	f000 bbef 	b.w	8009370 <_malloc_r>
 8008b92:	bf00      	nop
 8008b94:	20000024 	.word	0x20000024

08008b98 <memcpy>:
 8008b98:	440a      	add	r2, r1
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba0:	d100      	bne.n	8008ba4 <memcpy+0xc>
 8008ba2:	4770      	bx	lr
 8008ba4:	b510      	push	{r4, lr}
 8008ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bae:	4291      	cmp	r1, r2
 8008bb0:	d1f9      	bne.n	8008ba6 <memcpy+0xe>
 8008bb2:	bd10      	pop	{r4, pc}

08008bb4 <_Balloc>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	b976      	cbnz	r6, 8008bdc <_Balloc+0x28>
 8008bbe:	2010      	movs	r0, #16
 8008bc0:	f7ff ffe2 	bl	8008b88 <malloc>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6260      	str	r0, [r4, #36]	; 0x24
 8008bc8:	b920      	cbnz	r0, 8008bd4 <_Balloc+0x20>
 8008bca:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <_Balloc+0x78>)
 8008bcc:	4818      	ldr	r0, [pc, #96]	; (8008c30 <_Balloc+0x7c>)
 8008bce:	2166      	movs	r1, #102	; 0x66
 8008bd0:	f000 ff44 	bl	8009a5c <__assert_func>
 8008bd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bd8:	6006      	str	r6, [r0, #0]
 8008bda:	60c6      	str	r6, [r0, #12]
 8008bdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008bde:	68f3      	ldr	r3, [r6, #12]
 8008be0:	b183      	cbz	r3, 8008c04 <_Balloc+0x50>
 8008be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bea:	b9b8      	cbnz	r0, 8008c1c <_Balloc+0x68>
 8008bec:	2101      	movs	r1, #1
 8008bee:	fa01 f605 	lsl.w	r6, r1, r5
 8008bf2:	1d72      	adds	r2, r6, #5
 8008bf4:	0092      	lsls	r2, r2, #2
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f000 fb5a 	bl	80092b0 <_calloc_r>
 8008bfc:	b160      	cbz	r0, 8008c18 <_Balloc+0x64>
 8008bfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c02:	e00e      	b.n	8008c22 <_Balloc+0x6e>
 8008c04:	2221      	movs	r2, #33	; 0x21
 8008c06:	2104      	movs	r1, #4
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fb51 	bl	80092b0 <_calloc_r>
 8008c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c10:	60f0      	str	r0, [r6, #12]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e4      	bne.n	8008be2 <_Balloc+0x2e>
 8008c18:	2000      	movs	r0, #0
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	6802      	ldr	r2, [r0, #0]
 8008c1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c22:	2300      	movs	r3, #0
 8008c24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c28:	e7f7      	b.n	8008c1a <_Balloc+0x66>
 8008c2a:	bf00      	nop
 8008c2c:	0800eb49 	.word	0x0800eb49
 8008c30:	0800ec30 	.word	0x0800ec30

08008c34 <_Bfree>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c38:	4605      	mov	r5, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	b976      	cbnz	r6, 8008c5c <_Bfree+0x28>
 8008c3e:	2010      	movs	r0, #16
 8008c40:	f7ff ffa2 	bl	8008b88 <malloc>
 8008c44:	4602      	mov	r2, r0
 8008c46:	6268      	str	r0, [r5, #36]	; 0x24
 8008c48:	b920      	cbnz	r0, 8008c54 <_Bfree+0x20>
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <_Bfree+0x3c>)
 8008c4c:	4809      	ldr	r0, [pc, #36]	; (8008c74 <_Bfree+0x40>)
 8008c4e:	218a      	movs	r1, #138	; 0x8a
 8008c50:	f000 ff04 	bl	8009a5c <__assert_func>
 8008c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c58:	6006      	str	r6, [r0, #0]
 8008c5a:	60c6      	str	r6, [r0, #12]
 8008c5c:	b13c      	cbz	r4, 8008c6e <_Bfree+0x3a>
 8008c5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c60:	6862      	ldr	r2, [r4, #4]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c68:	6021      	str	r1, [r4, #0]
 8008c6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	0800eb49 	.word	0x0800eb49
 8008c74:	0800ec30 	.word	0x0800ec30

08008c78 <__multadd>:
 8008c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7c:	690e      	ldr	r6, [r1, #16]
 8008c7e:	4607      	mov	r7, r0
 8008c80:	4698      	mov	r8, r3
 8008c82:	460c      	mov	r4, r1
 8008c84:	f101 0014 	add.w	r0, r1, #20
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6805      	ldr	r5, [r0, #0]
 8008c8c:	b2a9      	uxth	r1, r5
 8008c8e:	fb02 8101 	mla	r1, r2, r1, r8
 8008c92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008c96:	0c2d      	lsrs	r5, r5, #16
 8008c98:	fb02 c505 	mla	r5, r2, r5, ip
 8008c9c:	b289      	uxth	r1, r1
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ca4:	429e      	cmp	r6, r3
 8008ca6:	f840 1b04 	str.w	r1, [r0], #4
 8008caa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008cae:	dcec      	bgt.n	8008c8a <__multadd+0x12>
 8008cb0:	f1b8 0f00 	cmp.w	r8, #0
 8008cb4:	d022      	beq.n	8008cfc <__multadd+0x84>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	42b3      	cmp	r3, r6
 8008cba:	dc19      	bgt.n	8008cf0 <__multadd+0x78>
 8008cbc:	6861      	ldr	r1, [r4, #4]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	f7ff ff77 	bl	8008bb4 <_Balloc>
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <__multadd+0x5e>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	; (8008d04 <__multadd+0x8c>)
 8008cce:	480e      	ldr	r0, [pc, #56]	; (8008d08 <__multadd+0x90>)
 8008cd0:	21b5      	movs	r1, #181	; 0xb5
 8008cd2:	f000 fec3 	bl	8009a5c <__assert_func>
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	3202      	adds	r2, #2
 8008cda:	f104 010c 	add.w	r1, r4, #12
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f7ff ff59 	bl	8008b98 <memcpy>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ffa3 	bl	8008c34 <_Bfree>
 8008cee:	462c      	mov	r4, r5
 8008cf0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008cfa:	6126      	str	r6, [r4, #16]
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d02:	bf00      	nop
 8008d04:	0800ebbf 	.word	0x0800ebbf
 8008d08:	0800ec30 	.word	0x0800ec30

08008d0c <__hi0bits>:
 8008d0c:	0c03      	lsrs	r3, r0, #16
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	b9d3      	cbnz	r3, 8008d48 <__hi0bits+0x3c>
 8008d12:	0400      	lsls	r0, r0, #16
 8008d14:	2310      	movs	r3, #16
 8008d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d1a:	bf04      	itt	eq
 8008d1c:	0200      	lsleq	r0, r0, #8
 8008d1e:	3308      	addeq	r3, #8
 8008d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d24:	bf04      	itt	eq
 8008d26:	0100      	lsleq	r0, r0, #4
 8008d28:	3304      	addeq	r3, #4
 8008d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d2e:	bf04      	itt	eq
 8008d30:	0080      	lsleq	r0, r0, #2
 8008d32:	3302      	addeq	r3, #2
 8008d34:	2800      	cmp	r0, #0
 8008d36:	db05      	blt.n	8008d44 <__hi0bits+0x38>
 8008d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d3c:	f103 0301 	add.w	r3, r3, #1
 8008d40:	bf08      	it	eq
 8008d42:	2320      	moveq	r3, #32
 8008d44:	4618      	mov	r0, r3
 8008d46:	4770      	bx	lr
 8008d48:	2300      	movs	r3, #0
 8008d4a:	e7e4      	b.n	8008d16 <__hi0bits+0xa>

08008d4c <__lo0bits>:
 8008d4c:	6803      	ldr	r3, [r0, #0]
 8008d4e:	f013 0207 	ands.w	r2, r3, #7
 8008d52:	4601      	mov	r1, r0
 8008d54:	d00b      	beq.n	8008d6e <__lo0bits+0x22>
 8008d56:	07da      	lsls	r2, r3, #31
 8008d58:	d424      	bmi.n	8008da4 <__lo0bits+0x58>
 8008d5a:	0798      	lsls	r0, r3, #30
 8008d5c:	bf49      	itett	mi
 8008d5e:	085b      	lsrmi	r3, r3, #1
 8008d60:	089b      	lsrpl	r3, r3, #2
 8008d62:	2001      	movmi	r0, #1
 8008d64:	600b      	strmi	r3, [r1, #0]
 8008d66:	bf5c      	itt	pl
 8008d68:	600b      	strpl	r3, [r1, #0]
 8008d6a:	2002      	movpl	r0, #2
 8008d6c:	4770      	bx	lr
 8008d6e:	b298      	uxth	r0, r3
 8008d70:	b9b0      	cbnz	r0, 8008da0 <__lo0bits+0x54>
 8008d72:	0c1b      	lsrs	r3, r3, #16
 8008d74:	2010      	movs	r0, #16
 8008d76:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d7a:	bf04      	itt	eq
 8008d7c:	0a1b      	lsreq	r3, r3, #8
 8008d7e:	3008      	addeq	r0, #8
 8008d80:	071a      	lsls	r2, r3, #28
 8008d82:	bf04      	itt	eq
 8008d84:	091b      	lsreq	r3, r3, #4
 8008d86:	3004      	addeq	r0, #4
 8008d88:	079a      	lsls	r2, r3, #30
 8008d8a:	bf04      	itt	eq
 8008d8c:	089b      	lsreq	r3, r3, #2
 8008d8e:	3002      	addeq	r0, #2
 8008d90:	07da      	lsls	r2, r3, #31
 8008d92:	d403      	bmi.n	8008d9c <__lo0bits+0x50>
 8008d94:	085b      	lsrs	r3, r3, #1
 8008d96:	f100 0001 	add.w	r0, r0, #1
 8008d9a:	d005      	beq.n	8008da8 <__lo0bits+0x5c>
 8008d9c:	600b      	str	r3, [r1, #0]
 8008d9e:	4770      	bx	lr
 8008da0:	4610      	mov	r0, r2
 8008da2:	e7e8      	b.n	8008d76 <__lo0bits+0x2a>
 8008da4:	2000      	movs	r0, #0
 8008da6:	4770      	bx	lr
 8008da8:	2020      	movs	r0, #32
 8008daa:	4770      	bx	lr

08008dac <__i2b>:
 8008dac:	b510      	push	{r4, lr}
 8008dae:	460c      	mov	r4, r1
 8008db0:	2101      	movs	r1, #1
 8008db2:	f7ff feff 	bl	8008bb4 <_Balloc>
 8008db6:	4602      	mov	r2, r0
 8008db8:	b928      	cbnz	r0, 8008dc6 <__i2b+0x1a>
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <__i2b+0x24>)
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <__i2b+0x28>)
 8008dbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dc2:	f000 fe4b 	bl	8009a5c <__assert_func>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	6144      	str	r4, [r0, #20]
 8008dca:	6103      	str	r3, [r0, #16]
 8008dcc:	bd10      	pop	{r4, pc}
 8008dce:	bf00      	nop
 8008dd0:	0800ebbf 	.word	0x0800ebbf
 8008dd4:	0800ec30 	.word	0x0800ec30

08008dd8 <__multiply>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	4614      	mov	r4, r2
 8008dde:	690a      	ldr	r2, [r1, #16]
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	bfb8      	it	lt
 8008de6:	460b      	movlt	r3, r1
 8008de8:	460d      	mov	r5, r1
 8008dea:	bfbc      	itt	lt
 8008dec:	4625      	movlt	r5, r4
 8008dee:	461c      	movlt	r4, r3
 8008df0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008df4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008df8:	68ab      	ldr	r3, [r5, #8]
 8008dfa:	6869      	ldr	r1, [r5, #4]
 8008dfc:	eb0a 0709 	add.w	r7, sl, r9
 8008e00:	42bb      	cmp	r3, r7
 8008e02:	b085      	sub	sp, #20
 8008e04:	bfb8      	it	lt
 8008e06:	3101      	addlt	r1, #1
 8008e08:	f7ff fed4 	bl	8008bb4 <_Balloc>
 8008e0c:	b930      	cbnz	r0, 8008e1c <__multiply+0x44>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b42      	ldr	r3, [pc, #264]	; (8008f1c <__multiply+0x144>)
 8008e12:	4843      	ldr	r0, [pc, #268]	; (8008f20 <__multiply+0x148>)
 8008e14:	f240 115d 	movw	r1, #349	; 0x15d
 8008e18:	f000 fe20 	bl	8009a5c <__assert_func>
 8008e1c:	f100 0614 	add.w	r6, r0, #20
 8008e20:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008e24:	4633      	mov	r3, r6
 8008e26:	2200      	movs	r2, #0
 8008e28:	4543      	cmp	r3, r8
 8008e2a:	d31e      	bcc.n	8008e6a <__multiply+0x92>
 8008e2c:	f105 0c14 	add.w	ip, r5, #20
 8008e30:	f104 0314 	add.w	r3, r4, #20
 8008e34:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008e38:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008e3c:	9202      	str	r2, [sp, #8]
 8008e3e:	ebac 0205 	sub.w	r2, ip, r5
 8008e42:	3a15      	subs	r2, #21
 8008e44:	f022 0203 	bic.w	r2, r2, #3
 8008e48:	3204      	adds	r2, #4
 8008e4a:	f105 0115 	add.w	r1, r5, #21
 8008e4e:	458c      	cmp	ip, r1
 8008e50:	bf38      	it	cc
 8008e52:	2204      	movcc	r2, #4
 8008e54:	9201      	str	r2, [sp, #4]
 8008e56:	9a02      	ldr	r2, [sp, #8]
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d808      	bhi.n	8008e70 <__multiply+0x98>
 8008e5e:	2f00      	cmp	r7, #0
 8008e60:	dc55      	bgt.n	8008f0e <__multiply+0x136>
 8008e62:	6107      	str	r7, [r0, #16]
 8008e64:	b005      	add	sp, #20
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	f843 2b04 	str.w	r2, [r3], #4
 8008e6e:	e7db      	b.n	8008e28 <__multiply+0x50>
 8008e70:	f8b3 a000 	ldrh.w	sl, [r3]
 8008e74:	f1ba 0f00 	cmp.w	sl, #0
 8008e78:	d020      	beq.n	8008ebc <__multiply+0xe4>
 8008e7a:	f105 0e14 	add.w	lr, r5, #20
 8008e7e:	46b1      	mov	r9, r6
 8008e80:	2200      	movs	r2, #0
 8008e82:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008e86:	f8d9 b000 	ldr.w	fp, [r9]
 8008e8a:	b2a1      	uxth	r1, r4
 8008e8c:	fa1f fb8b 	uxth.w	fp, fp
 8008e90:	fb0a b101 	mla	r1, sl, r1, fp
 8008e94:	4411      	add	r1, r2
 8008e96:	f8d9 2000 	ldr.w	r2, [r9]
 8008e9a:	0c24      	lsrs	r4, r4, #16
 8008e9c:	0c12      	lsrs	r2, r2, #16
 8008e9e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008ea2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008ea6:	b289      	uxth	r1, r1
 8008ea8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008eac:	45f4      	cmp	ip, lr
 8008eae:	f849 1b04 	str.w	r1, [r9], #4
 8008eb2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008eb6:	d8e4      	bhi.n	8008e82 <__multiply+0xaa>
 8008eb8:	9901      	ldr	r1, [sp, #4]
 8008eba:	5072      	str	r2, [r6, r1]
 8008ebc:	9a03      	ldr	r2, [sp, #12]
 8008ebe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	f1b9 0f00 	cmp.w	r9, #0
 8008ec8:	d01f      	beq.n	8008f0a <__multiply+0x132>
 8008eca:	6834      	ldr	r4, [r6, #0]
 8008ecc:	f105 0114 	add.w	r1, r5, #20
 8008ed0:	46b6      	mov	lr, r6
 8008ed2:	f04f 0a00 	mov.w	sl, #0
 8008ed6:	880a      	ldrh	r2, [r1, #0]
 8008ed8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008edc:	fb09 b202 	mla	r2, r9, r2, fp
 8008ee0:	4492      	add	sl, r2
 8008ee2:	b2a4      	uxth	r4, r4
 8008ee4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008ee8:	f84e 4b04 	str.w	r4, [lr], #4
 8008eec:	f851 4b04 	ldr.w	r4, [r1], #4
 8008ef0:	f8be 2000 	ldrh.w	r2, [lr]
 8008ef4:	0c24      	lsrs	r4, r4, #16
 8008ef6:	fb09 2404 	mla	r4, r9, r4, r2
 8008efa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008efe:	458c      	cmp	ip, r1
 8008f00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f04:	d8e7      	bhi.n	8008ed6 <__multiply+0xfe>
 8008f06:	9a01      	ldr	r2, [sp, #4]
 8008f08:	50b4      	str	r4, [r6, r2]
 8008f0a:	3604      	adds	r6, #4
 8008f0c:	e7a3      	b.n	8008e56 <__multiply+0x7e>
 8008f0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1a5      	bne.n	8008e62 <__multiply+0x8a>
 8008f16:	3f01      	subs	r7, #1
 8008f18:	e7a1      	b.n	8008e5e <__multiply+0x86>
 8008f1a:	bf00      	nop
 8008f1c:	0800ebbf 	.word	0x0800ebbf
 8008f20:	0800ec30 	.word	0x0800ec30

08008f24 <__pow5mult>:
 8008f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f28:	4615      	mov	r5, r2
 8008f2a:	f012 0203 	ands.w	r2, r2, #3
 8008f2e:	4606      	mov	r6, r0
 8008f30:	460f      	mov	r7, r1
 8008f32:	d007      	beq.n	8008f44 <__pow5mult+0x20>
 8008f34:	4c25      	ldr	r4, [pc, #148]	; (8008fcc <__pow5mult+0xa8>)
 8008f36:	3a01      	subs	r2, #1
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f3e:	f7ff fe9b 	bl	8008c78 <__multadd>
 8008f42:	4607      	mov	r7, r0
 8008f44:	10ad      	asrs	r5, r5, #2
 8008f46:	d03d      	beq.n	8008fc4 <__pow5mult+0xa0>
 8008f48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f4a:	b97c      	cbnz	r4, 8008f6c <__pow5mult+0x48>
 8008f4c:	2010      	movs	r0, #16
 8008f4e:	f7ff fe1b 	bl	8008b88 <malloc>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6270      	str	r0, [r6, #36]	; 0x24
 8008f56:	b928      	cbnz	r0, 8008f64 <__pow5mult+0x40>
 8008f58:	4b1d      	ldr	r3, [pc, #116]	; (8008fd0 <__pow5mult+0xac>)
 8008f5a:	481e      	ldr	r0, [pc, #120]	; (8008fd4 <__pow5mult+0xb0>)
 8008f5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f60:	f000 fd7c 	bl	8009a5c <__assert_func>
 8008f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f68:	6004      	str	r4, [r0, #0]
 8008f6a:	60c4      	str	r4, [r0, #12]
 8008f6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f74:	b94c      	cbnz	r4, 8008f8a <__pow5mult+0x66>
 8008f76:	f240 2171 	movw	r1, #625	; 0x271
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7ff ff16 	bl	8008dac <__i2b>
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f86:	4604      	mov	r4, r0
 8008f88:	6003      	str	r3, [r0, #0]
 8008f8a:	f04f 0900 	mov.w	r9, #0
 8008f8e:	07eb      	lsls	r3, r5, #31
 8008f90:	d50a      	bpl.n	8008fa8 <__pow5mult+0x84>
 8008f92:	4639      	mov	r1, r7
 8008f94:	4622      	mov	r2, r4
 8008f96:	4630      	mov	r0, r6
 8008f98:	f7ff ff1e 	bl	8008dd8 <__multiply>
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f7ff fe47 	bl	8008c34 <_Bfree>
 8008fa6:	4647      	mov	r7, r8
 8008fa8:	106d      	asrs	r5, r5, #1
 8008faa:	d00b      	beq.n	8008fc4 <__pow5mult+0xa0>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	b938      	cbnz	r0, 8008fc0 <__pow5mult+0x9c>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f7ff ff0f 	bl	8008dd8 <__multiply>
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	f8c0 9000 	str.w	r9, [r0]
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	e7e4      	b.n	8008f8e <__pow5mult+0x6a>
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fca:	bf00      	nop
 8008fcc:	0800ed80 	.word	0x0800ed80
 8008fd0:	0800eb49 	.word	0x0800eb49
 8008fd4:	0800ec30 	.word	0x0800ec30

08008fd8 <__lshift>:
 8008fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	460c      	mov	r4, r1
 8008fde:	6849      	ldr	r1, [r1, #4]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	4607      	mov	r7, r0
 8008fea:	4691      	mov	r9, r2
 8008fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ff0:	f108 0601 	add.w	r6, r8, #1
 8008ff4:	42b3      	cmp	r3, r6
 8008ff6:	db0b      	blt.n	8009010 <__lshift+0x38>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff fddb 	bl	8008bb4 <_Balloc>
 8008ffe:	4605      	mov	r5, r0
 8009000:	b948      	cbnz	r0, 8009016 <__lshift+0x3e>
 8009002:	4602      	mov	r2, r0
 8009004:	4b28      	ldr	r3, [pc, #160]	; (80090a8 <__lshift+0xd0>)
 8009006:	4829      	ldr	r0, [pc, #164]	; (80090ac <__lshift+0xd4>)
 8009008:	f240 11d9 	movw	r1, #473	; 0x1d9
 800900c:	f000 fd26 	bl	8009a5c <__assert_func>
 8009010:	3101      	adds	r1, #1
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	e7ee      	b.n	8008ff4 <__lshift+0x1c>
 8009016:	2300      	movs	r3, #0
 8009018:	f100 0114 	add.w	r1, r0, #20
 800901c:	f100 0210 	add.w	r2, r0, #16
 8009020:	4618      	mov	r0, r3
 8009022:	4553      	cmp	r3, sl
 8009024:	db33      	blt.n	800908e <__lshift+0xb6>
 8009026:	6920      	ldr	r0, [r4, #16]
 8009028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800902c:	f104 0314 	add.w	r3, r4, #20
 8009030:	f019 091f 	ands.w	r9, r9, #31
 8009034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800903c:	d02b      	beq.n	8009096 <__lshift+0xbe>
 800903e:	f1c9 0e20 	rsb	lr, r9, #32
 8009042:	468a      	mov	sl, r1
 8009044:	2200      	movs	r2, #0
 8009046:	6818      	ldr	r0, [r3, #0]
 8009048:	fa00 f009 	lsl.w	r0, r0, r9
 800904c:	4302      	orrs	r2, r0
 800904e:	f84a 2b04 	str.w	r2, [sl], #4
 8009052:	f853 2b04 	ldr.w	r2, [r3], #4
 8009056:	459c      	cmp	ip, r3
 8009058:	fa22 f20e 	lsr.w	r2, r2, lr
 800905c:	d8f3      	bhi.n	8009046 <__lshift+0x6e>
 800905e:	ebac 0304 	sub.w	r3, ip, r4
 8009062:	3b15      	subs	r3, #21
 8009064:	f023 0303 	bic.w	r3, r3, #3
 8009068:	3304      	adds	r3, #4
 800906a:	f104 0015 	add.w	r0, r4, #21
 800906e:	4584      	cmp	ip, r0
 8009070:	bf38      	it	cc
 8009072:	2304      	movcc	r3, #4
 8009074:	50ca      	str	r2, [r1, r3]
 8009076:	b10a      	cbz	r2, 800907c <__lshift+0xa4>
 8009078:	f108 0602 	add.w	r6, r8, #2
 800907c:	3e01      	subs	r6, #1
 800907e:	4638      	mov	r0, r7
 8009080:	612e      	str	r6, [r5, #16]
 8009082:	4621      	mov	r1, r4
 8009084:	f7ff fdd6 	bl	8008c34 <_Bfree>
 8009088:	4628      	mov	r0, r5
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009092:	3301      	adds	r3, #1
 8009094:	e7c5      	b.n	8009022 <__lshift+0x4a>
 8009096:	3904      	subs	r1, #4
 8009098:	f853 2b04 	ldr.w	r2, [r3], #4
 800909c:	f841 2f04 	str.w	r2, [r1, #4]!
 80090a0:	459c      	cmp	ip, r3
 80090a2:	d8f9      	bhi.n	8009098 <__lshift+0xc0>
 80090a4:	e7ea      	b.n	800907c <__lshift+0xa4>
 80090a6:	bf00      	nop
 80090a8:	0800ebbf 	.word	0x0800ebbf
 80090ac:	0800ec30 	.word	0x0800ec30

080090b0 <__mcmp>:
 80090b0:	b530      	push	{r4, r5, lr}
 80090b2:	6902      	ldr	r2, [r0, #16]
 80090b4:	690c      	ldr	r4, [r1, #16]
 80090b6:	1b12      	subs	r2, r2, r4
 80090b8:	d10e      	bne.n	80090d8 <__mcmp+0x28>
 80090ba:	f100 0314 	add.w	r3, r0, #20
 80090be:	3114      	adds	r1, #20
 80090c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80090c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80090c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80090cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80090d0:	42a5      	cmp	r5, r4
 80090d2:	d003      	beq.n	80090dc <__mcmp+0x2c>
 80090d4:	d305      	bcc.n	80090e2 <__mcmp+0x32>
 80090d6:	2201      	movs	r2, #1
 80090d8:	4610      	mov	r0, r2
 80090da:	bd30      	pop	{r4, r5, pc}
 80090dc:	4283      	cmp	r3, r0
 80090de:	d3f3      	bcc.n	80090c8 <__mcmp+0x18>
 80090e0:	e7fa      	b.n	80090d8 <__mcmp+0x28>
 80090e2:	f04f 32ff 	mov.w	r2, #4294967295
 80090e6:	e7f7      	b.n	80090d8 <__mcmp+0x28>

080090e8 <__mdiff>:
 80090e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	460c      	mov	r4, r1
 80090ee:	4606      	mov	r6, r0
 80090f0:	4611      	mov	r1, r2
 80090f2:	4620      	mov	r0, r4
 80090f4:	4617      	mov	r7, r2
 80090f6:	f7ff ffdb 	bl	80090b0 <__mcmp>
 80090fa:	1e05      	subs	r5, r0, #0
 80090fc:	d110      	bne.n	8009120 <__mdiff+0x38>
 80090fe:	4629      	mov	r1, r5
 8009100:	4630      	mov	r0, r6
 8009102:	f7ff fd57 	bl	8008bb4 <_Balloc>
 8009106:	b930      	cbnz	r0, 8009116 <__mdiff+0x2e>
 8009108:	4b39      	ldr	r3, [pc, #228]	; (80091f0 <__mdiff+0x108>)
 800910a:	4602      	mov	r2, r0
 800910c:	f240 2132 	movw	r1, #562	; 0x232
 8009110:	4838      	ldr	r0, [pc, #224]	; (80091f4 <__mdiff+0x10c>)
 8009112:	f000 fca3 	bl	8009a5c <__assert_func>
 8009116:	2301      	movs	r3, #1
 8009118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800911c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	bfa4      	itt	ge
 8009122:	463b      	movge	r3, r7
 8009124:	4627      	movge	r7, r4
 8009126:	4630      	mov	r0, r6
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	bfa6      	itte	ge
 800912c:	461c      	movge	r4, r3
 800912e:	2500      	movge	r5, #0
 8009130:	2501      	movlt	r5, #1
 8009132:	f7ff fd3f 	bl	8008bb4 <_Balloc>
 8009136:	b920      	cbnz	r0, 8009142 <__mdiff+0x5a>
 8009138:	4b2d      	ldr	r3, [pc, #180]	; (80091f0 <__mdiff+0x108>)
 800913a:	4602      	mov	r2, r0
 800913c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009140:	e7e6      	b.n	8009110 <__mdiff+0x28>
 8009142:	693e      	ldr	r6, [r7, #16]
 8009144:	60c5      	str	r5, [r0, #12]
 8009146:	6925      	ldr	r5, [r4, #16]
 8009148:	f107 0114 	add.w	r1, r7, #20
 800914c:	f104 0914 	add.w	r9, r4, #20
 8009150:	f100 0e14 	add.w	lr, r0, #20
 8009154:	f107 0210 	add.w	r2, r7, #16
 8009158:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800915c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009160:	46f2      	mov	sl, lr
 8009162:	2700      	movs	r7, #0
 8009164:	f859 3b04 	ldr.w	r3, [r9], #4
 8009168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800916c:	fa1f f883 	uxth.w	r8, r3
 8009170:	fa17 f78b 	uxtah	r7, r7, fp
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	eba7 0808 	sub.w	r8, r7, r8
 800917a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800917e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009182:	fa1f f888 	uxth.w	r8, r8
 8009186:	141f      	asrs	r7, r3, #16
 8009188:	454d      	cmp	r5, r9
 800918a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800918e:	f84a 3b04 	str.w	r3, [sl], #4
 8009192:	d8e7      	bhi.n	8009164 <__mdiff+0x7c>
 8009194:	1b2b      	subs	r3, r5, r4
 8009196:	3b15      	subs	r3, #21
 8009198:	f023 0303 	bic.w	r3, r3, #3
 800919c:	3304      	adds	r3, #4
 800919e:	3415      	adds	r4, #21
 80091a0:	42a5      	cmp	r5, r4
 80091a2:	bf38      	it	cc
 80091a4:	2304      	movcc	r3, #4
 80091a6:	4419      	add	r1, r3
 80091a8:	4473      	add	r3, lr
 80091aa:	469e      	mov	lr, r3
 80091ac:	460d      	mov	r5, r1
 80091ae:	4565      	cmp	r5, ip
 80091b0:	d30e      	bcc.n	80091d0 <__mdiff+0xe8>
 80091b2:	f10c 0203 	add.w	r2, ip, #3
 80091b6:	1a52      	subs	r2, r2, r1
 80091b8:	f022 0203 	bic.w	r2, r2, #3
 80091bc:	3903      	subs	r1, #3
 80091be:	458c      	cmp	ip, r1
 80091c0:	bf38      	it	cc
 80091c2:	2200      	movcc	r2, #0
 80091c4:	441a      	add	r2, r3
 80091c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80091ca:	b17b      	cbz	r3, 80091ec <__mdiff+0x104>
 80091cc:	6106      	str	r6, [r0, #16]
 80091ce:	e7a5      	b.n	800911c <__mdiff+0x34>
 80091d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80091d4:	fa17 f488 	uxtah	r4, r7, r8
 80091d8:	1422      	asrs	r2, r4, #16
 80091da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80091de:	b2a4      	uxth	r4, r4
 80091e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80091e4:	f84e 4b04 	str.w	r4, [lr], #4
 80091e8:	1417      	asrs	r7, r2, #16
 80091ea:	e7e0      	b.n	80091ae <__mdiff+0xc6>
 80091ec:	3e01      	subs	r6, #1
 80091ee:	e7ea      	b.n	80091c6 <__mdiff+0xde>
 80091f0:	0800ebbf 	.word	0x0800ebbf
 80091f4:	0800ec30 	.word	0x0800ec30

080091f8 <__d2b>:
 80091f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	4689      	mov	r9, r1
 80091fe:	2101      	movs	r1, #1
 8009200:	ec57 6b10 	vmov	r6, r7, d0
 8009204:	4690      	mov	r8, r2
 8009206:	f7ff fcd5 	bl	8008bb4 <_Balloc>
 800920a:	4604      	mov	r4, r0
 800920c:	b930      	cbnz	r0, 800921c <__d2b+0x24>
 800920e:	4602      	mov	r2, r0
 8009210:	4b25      	ldr	r3, [pc, #148]	; (80092a8 <__d2b+0xb0>)
 8009212:	4826      	ldr	r0, [pc, #152]	; (80092ac <__d2b+0xb4>)
 8009214:	f240 310a 	movw	r1, #778	; 0x30a
 8009218:	f000 fc20 	bl	8009a5c <__assert_func>
 800921c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009224:	bb35      	cbnz	r5, 8009274 <__d2b+0x7c>
 8009226:	2e00      	cmp	r6, #0
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	d028      	beq.n	800927e <__d2b+0x86>
 800922c:	4668      	mov	r0, sp
 800922e:	9600      	str	r6, [sp, #0]
 8009230:	f7ff fd8c 	bl	8008d4c <__lo0bits>
 8009234:	9900      	ldr	r1, [sp, #0]
 8009236:	b300      	cbz	r0, 800927a <__d2b+0x82>
 8009238:	9a01      	ldr	r2, [sp, #4]
 800923a:	f1c0 0320 	rsb	r3, r0, #32
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	430b      	orrs	r3, r1
 8009244:	40c2      	lsrs	r2, r0
 8009246:	6163      	str	r3, [r4, #20]
 8009248:	9201      	str	r2, [sp, #4]
 800924a:	9b01      	ldr	r3, [sp, #4]
 800924c:	61a3      	str	r3, [r4, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bf14      	ite	ne
 8009252:	2202      	movne	r2, #2
 8009254:	2201      	moveq	r2, #1
 8009256:	6122      	str	r2, [r4, #16]
 8009258:	b1d5      	cbz	r5, 8009290 <__d2b+0x98>
 800925a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800925e:	4405      	add	r5, r0
 8009260:	f8c9 5000 	str.w	r5, [r9]
 8009264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009268:	f8c8 0000 	str.w	r0, [r8]
 800926c:	4620      	mov	r0, r4
 800926e:	b003      	add	sp, #12
 8009270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009278:	e7d5      	b.n	8009226 <__d2b+0x2e>
 800927a:	6161      	str	r1, [r4, #20]
 800927c:	e7e5      	b.n	800924a <__d2b+0x52>
 800927e:	a801      	add	r0, sp, #4
 8009280:	f7ff fd64 	bl	8008d4c <__lo0bits>
 8009284:	9b01      	ldr	r3, [sp, #4]
 8009286:	6163      	str	r3, [r4, #20]
 8009288:	2201      	movs	r2, #1
 800928a:	6122      	str	r2, [r4, #16]
 800928c:	3020      	adds	r0, #32
 800928e:	e7e3      	b.n	8009258 <__d2b+0x60>
 8009290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009298:	f8c9 0000 	str.w	r0, [r9]
 800929c:	6918      	ldr	r0, [r3, #16]
 800929e:	f7ff fd35 	bl	8008d0c <__hi0bits>
 80092a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092a6:	e7df      	b.n	8009268 <__d2b+0x70>
 80092a8:	0800ebbf 	.word	0x0800ebbf
 80092ac:	0800ec30 	.word	0x0800ec30

080092b0 <_calloc_r>:
 80092b0:	b513      	push	{r0, r1, r4, lr}
 80092b2:	434a      	muls	r2, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	9201      	str	r2, [sp, #4]
 80092b8:	f000 f85a 	bl	8009370 <_malloc_r>
 80092bc:	4604      	mov	r4, r0
 80092be:	b118      	cbz	r0, 80092c8 <_calloc_r+0x18>
 80092c0:	9a01      	ldr	r2, [sp, #4]
 80092c2:	2100      	movs	r1, #0
 80092c4:	f7fd fde2 	bl	8006e8c <memset>
 80092c8:	4620      	mov	r0, r4
 80092ca:	b002      	add	sp, #8
 80092cc:	bd10      	pop	{r4, pc}
	...

080092d0 <_free_r>:
 80092d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092d2:	2900      	cmp	r1, #0
 80092d4:	d048      	beq.n	8009368 <_free_r+0x98>
 80092d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092da:	9001      	str	r0, [sp, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f1a1 0404 	sub.w	r4, r1, #4
 80092e2:	bfb8      	it	lt
 80092e4:	18e4      	addlt	r4, r4, r3
 80092e6:	f000 fc59 	bl	8009b9c <__malloc_lock>
 80092ea:	4a20      	ldr	r2, [pc, #128]	; (800936c <_free_r+0x9c>)
 80092ec:	9801      	ldr	r0, [sp, #4]
 80092ee:	6813      	ldr	r3, [r2, #0]
 80092f0:	4615      	mov	r5, r2
 80092f2:	b933      	cbnz	r3, 8009302 <_free_r+0x32>
 80092f4:	6063      	str	r3, [r4, #4]
 80092f6:	6014      	str	r4, [r2, #0]
 80092f8:	b003      	add	sp, #12
 80092fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092fe:	f000 bc53 	b.w	8009ba8 <__malloc_unlock>
 8009302:	42a3      	cmp	r3, r4
 8009304:	d90b      	bls.n	800931e <_free_r+0x4e>
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	1862      	adds	r2, r4, r1
 800930a:	4293      	cmp	r3, r2
 800930c:	bf04      	itt	eq
 800930e:	681a      	ldreq	r2, [r3, #0]
 8009310:	685b      	ldreq	r3, [r3, #4]
 8009312:	6063      	str	r3, [r4, #4]
 8009314:	bf04      	itt	eq
 8009316:	1852      	addeq	r2, r2, r1
 8009318:	6022      	streq	r2, [r4, #0]
 800931a:	602c      	str	r4, [r5, #0]
 800931c:	e7ec      	b.n	80092f8 <_free_r+0x28>
 800931e:	461a      	mov	r2, r3
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	b10b      	cbz	r3, 8009328 <_free_r+0x58>
 8009324:	42a3      	cmp	r3, r4
 8009326:	d9fa      	bls.n	800931e <_free_r+0x4e>
 8009328:	6811      	ldr	r1, [r2, #0]
 800932a:	1855      	adds	r5, r2, r1
 800932c:	42a5      	cmp	r5, r4
 800932e:	d10b      	bne.n	8009348 <_free_r+0x78>
 8009330:	6824      	ldr	r4, [r4, #0]
 8009332:	4421      	add	r1, r4
 8009334:	1854      	adds	r4, r2, r1
 8009336:	42a3      	cmp	r3, r4
 8009338:	6011      	str	r1, [r2, #0]
 800933a:	d1dd      	bne.n	80092f8 <_free_r+0x28>
 800933c:	681c      	ldr	r4, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	6053      	str	r3, [r2, #4]
 8009342:	4421      	add	r1, r4
 8009344:	6011      	str	r1, [r2, #0]
 8009346:	e7d7      	b.n	80092f8 <_free_r+0x28>
 8009348:	d902      	bls.n	8009350 <_free_r+0x80>
 800934a:	230c      	movs	r3, #12
 800934c:	6003      	str	r3, [r0, #0]
 800934e:	e7d3      	b.n	80092f8 <_free_r+0x28>
 8009350:	6825      	ldr	r5, [r4, #0]
 8009352:	1961      	adds	r1, r4, r5
 8009354:	428b      	cmp	r3, r1
 8009356:	bf04      	itt	eq
 8009358:	6819      	ldreq	r1, [r3, #0]
 800935a:	685b      	ldreq	r3, [r3, #4]
 800935c:	6063      	str	r3, [r4, #4]
 800935e:	bf04      	itt	eq
 8009360:	1949      	addeq	r1, r1, r5
 8009362:	6021      	streq	r1, [r4, #0]
 8009364:	6054      	str	r4, [r2, #4]
 8009366:	e7c7      	b.n	80092f8 <_free_r+0x28>
 8009368:	b003      	add	sp, #12
 800936a:	bd30      	pop	{r4, r5, pc}
 800936c:	200002e0 	.word	0x200002e0

08009370 <_malloc_r>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	1ccd      	adds	r5, r1, #3
 8009374:	f025 0503 	bic.w	r5, r5, #3
 8009378:	3508      	adds	r5, #8
 800937a:	2d0c      	cmp	r5, #12
 800937c:	bf38      	it	cc
 800937e:	250c      	movcc	r5, #12
 8009380:	2d00      	cmp	r5, #0
 8009382:	4606      	mov	r6, r0
 8009384:	db01      	blt.n	800938a <_malloc_r+0x1a>
 8009386:	42a9      	cmp	r1, r5
 8009388:	d903      	bls.n	8009392 <_malloc_r+0x22>
 800938a:	230c      	movs	r3, #12
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	2000      	movs	r0, #0
 8009390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009392:	f000 fc03 	bl	8009b9c <__malloc_lock>
 8009396:	4921      	ldr	r1, [pc, #132]	; (800941c <_malloc_r+0xac>)
 8009398:	680a      	ldr	r2, [r1, #0]
 800939a:	4614      	mov	r4, r2
 800939c:	b99c      	cbnz	r4, 80093c6 <_malloc_r+0x56>
 800939e:	4f20      	ldr	r7, [pc, #128]	; (8009420 <_malloc_r+0xb0>)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	b923      	cbnz	r3, 80093ae <_malloc_r+0x3e>
 80093a4:	4621      	mov	r1, r4
 80093a6:	4630      	mov	r0, r6
 80093a8:	f000 faf2 	bl	8009990 <_sbrk_r>
 80093ac:	6038      	str	r0, [r7, #0]
 80093ae:	4629      	mov	r1, r5
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 faed 	bl	8009990 <_sbrk_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d123      	bne.n	8009402 <_malloc_r+0x92>
 80093ba:	230c      	movs	r3, #12
 80093bc:	6033      	str	r3, [r6, #0]
 80093be:	4630      	mov	r0, r6
 80093c0:	f000 fbf2 	bl	8009ba8 <__malloc_unlock>
 80093c4:	e7e3      	b.n	800938e <_malloc_r+0x1e>
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	1b5b      	subs	r3, r3, r5
 80093ca:	d417      	bmi.n	80093fc <_malloc_r+0x8c>
 80093cc:	2b0b      	cmp	r3, #11
 80093ce:	d903      	bls.n	80093d8 <_malloc_r+0x68>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	441c      	add	r4, r3
 80093d4:	6025      	str	r5, [r4, #0]
 80093d6:	e004      	b.n	80093e2 <_malloc_r+0x72>
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	42a2      	cmp	r2, r4
 80093dc:	bf0c      	ite	eq
 80093de:	600b      	streq	r3, [r1, #0]
 80093e0:	6053      	strne	r3, [r2, #4]
 80093e2:	4630      	mov	r0, r6
 80093e4:	f000 fbe0 	bl	8009ba8 <__malloc_unlock>
 80093e8:	f104 000b 	add.w	r0, r4, #11
 80093ec:	1d23      	adds	r3, r4, #4
 80093ee:	f020 0007 	bic.w	r0, r0, #7
 80093f2:	1ac2      	subs	r2, r0, r3
 80093f4:	d0cc      	beq.n	8009390 <_malloc_r+0x20>
 80093f6:	1a1b      	subs	r3, r3, r0
 80093f8:	50a3      	str	r3, [r4, r2]
 80093fa:	e7c9      	b.n	8009390 <_malloc_r+0x20>
 80093fc:	4622      	mov	r2, r4
 80093fe:	6864      	ldr	r4, [r4, #4]
 8009400:	e7cc      	b.n	800939c <_malloc_r+0x2c>
 8009402:	1cc4      	adds	r4, r0, #3
 8009404:	f024 0403 	bic.w	r4, r4, #3
 8009408:	42a0      	cmp	r0, r4
 800940a:	d0e3      	beq.n	80093d4 <_malloc_r+0x64>
 800940c:	1a21      	subs	r1, r4, r0
 800940e:	4630      	mov	r0, r6
 8009410:	f000 fabe 	bl	8009990 <_sbrk_r>
 8009414:	3001      	adds	r0, #1
 8009416:	d1dd      	bne.n	80093d4 <_malloc_r+0x64>
 8009418:	e7cf      	b.n	80093ba <_malloc_r+0x4a>
 800941a:	bf00      	nop
 800941c:	200002e0 	.word	0x200002e0
 8009420:	200002e4 	.word	0x200002e4

08009424 <__ssputs_r>:
 8009424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009428:	688e      	ldr	r6, [r1, #8]
 800942a:	429e      	cmp	r6, r3
 800942c:	4682      	mov	sl, r0
 800942e:	460c      	mov	r4, r1
 8009430:	4690      	mov	r8, r2
 8009432:	461f      	mov	r7, r3
 8009434:	d838      	bhi.n	80094a8 <__ssputs_r+0x84>
 8009436:	898a      	ldrh	r2, [r1, #12]
 8009438:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800943c:	d032      	beq.n	80094a4 <__ssputs_r+0x80>
 800943e:	6825      	ldr	r5, [r4, #0]
 8009440:	6909      	ldr	r1, [r1, #16]
 8009442:	eba5 0901 	sub.w	r9, r5, r1
 8009446:	6965      	ldr	r5, [r4, #20]
 8009448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800944c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009450:	3301      	adds	r3, #1
 8009452:	444b      	add	r3, r9
 8009454:	106d      	asrs	r5, r5, #1
 8009456:	429d      	cmp	r5, r3
 8009458:	bf38      	it	cc
 800945a:	461d      	movcc	r5, r3
 800945c:	0553      	lsls	r3, r2, #21
 800945e:	d531      	bpl.n	80094c4 <__ssputs_r+0xa0>
 8009460:	4629      	mov	r1, r5
 8009462:	f7ff ff85 	bl	8009370 <_malloc_r>
 8009466:	4606      	mov	r6, r0
 8009468:	b950      	cbnz	r0, 8009480 <__ssputs_r+0x5c>
 800946a:	230c      	movs	r3, #12
 800946c:	f8ca 3000 	str.w	r3, [sl]
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009476:	81a3      	strh	r3, [r4, #12]
 8009478:	f04f 30ff 	mov.w	r0, #4294967295
 800947c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009480:	6921      	ldr	r1, [r4, #16]
 8009482:	464a      	mov	r2, r9
 8009484:	f7ff fb88 	bl	8008b98 <memcpy>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800948e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	6126      	str	r6, [r4, #16]
 8009496:	6165      	str	r5, [r4, #20]
 8009498:	444e      	add	r6, r9
 800949a:	eba5 0509 	sub.w	r5, r5, r9
 800949e:	6026      	str	r6, [r4, #0]
 80094a0:	60a5      	str	r5, [r4, #8]
 80094a2:	463e      	mov	r6, r7
 80094a4:	42be      	cmp	r6, r7
 80094a6:	d900      	bls.n	80094aa <__ssputs_r+0x86>
 80094a8:	463e      	mov	r6, r7
 80094aa:	4632      	mov	r2, r6
 80094ac:	6820      	ldr	r0, [r4, #0]
 80094ae:	4641      	mov	r1, r8
 80094b0:	f000 fb5a 	bl	8009b68 <memmove>
 80094b4:	68a3      	ldr	r3, [r4, #8]
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	4432      	add	r2, r6
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	6022      	str	r2, [r4, #0]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e7db      	b.n	800947c <__ssputs_r+0x58>
 80094c4:	462a      	mov	r2, r5
 80094c6:	f000 fb75 	bl	8009bb4 <_realloc_r>
 80094ca:	4606      	mov	r6, r0
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d1e1      	bne.n	8009494 <__ssputs_r+0x70>
 80094d0:	6921      	ldr	r1, [r4, #16]
 80094d2:	4650      	mov	r0, sl
 80094d4:	f7ff fefc 	bl	80092d0 <_free_r>
 80094d8:	e7c7      	b.n	800946a <__ssputs_r+0x46>
	...

080094dc <_svfiprintf_r>:
 80094dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e0:	4698      	mov	r8, r3
 80094e2:	898b      	ldrh	r3, [r1, #12]
 80094e4:	061b      	lsls	r3, r3, #24
 80094e6:	b09d      	sub	sp, #116	; 0x74
 80094e8:	4607      	mov	r7, r0
 80094ea:	460d      	mov	r5, r1
 80094ec:	4614      	mov	r4, r2
 80094ee:	d50e      	bpl.n	800950e <_svfiprintf_r+0x32>
 80094f0:	690b      	ldr	r3, [r1, #16]
 80094f2:	b963      	cbnz	r3, 800950e <_svfiprintf_r+0x32>
 80094f4:	2140      	movs	r1, #64	; 0x40
 80094f6:	f7ff ff3b 	bl	8009370 <_malloc_r>
 80094fa:	6028      	str	r0, [r5, #0]
 80094fc:	6128      	str	r0, [r5, #16]
 80094fe:	b920      	cbnz	r0, 800950a <_svfiprintf_r+0x2e>
 8009500:	230c      	movs	r3, #12
 8009502:	603b      	str	r3, [r7, #0]
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	e0d1      	b.n	80096ae <_svfiprintf_r+0x1d2>
 800950a:	2340      	movs	r3, #64	; 0x40
 800950c:	616b      	str	r3, [r5, #20]
 800950e:	2300      	movs	r3, #0
 8009510:	9309      	str	r3, [sp, #36]	; 0x24
 8009512:	2320      	movs	r3, #32
 8009514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009518:	f8cd 800c 	str.w	r8, [sp, #12]
 800951c:	2330      	movs	r3, #48	; 0x30
 800951e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096c8 <_svfiprintf_r+0x1ec>
 8009522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009526:	f04f 0901 	mov.w	r9, #1
 800952a:	4623      	mov	r3, r4
 800952c:	469a      	mov	sl, r3
 800952e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009532:	b10a      	cbz	r2, 8009538 <_svfiprintf_r+0x5c>
 8009534:	2a25      	cmp	r2, #37	; 0x25
 8009536:	d1f9      	bne.n	800952c <_svfiprintf_r+0x50>
 8009538:	ebba 0b04 	subs.w	fp, sl, r4
 800953c:	d00b      	beq.n	8009556 <_svfiprintf_r+0x7a>
 800953e:	465b      	mov	r3, fp
 8009540:	4622      	mov	r2, r4
 8009542:	4629      	mov	r1, r5
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff ff6d 	bl	8009424 <__ssputs_r>
 800954a:	3001      	adds	r0, #1
 800954c:	f000 80aa 	beq.w	80096a4 <_svfiprintf_r+0x1c8>
 8009550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009552:	445a      	add	r2, fp
 8009554:	9209      	str	r2, [sp, #36]	; 0x24
 8009556:	f89a 3000 	ldrb.w	r3, [sl]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 80a2 	beq.w	80096a4 <_svfiprintf_r+0x1c8>
 8009560:	2300      	movs	r3, #0
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956a:	f10a 0a01 	add.w	sl, sl, #1
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009576:	931a      	str	r3, [sp, #104]	; 0x68
 8009578:	4654      	mov	r4, sl
 800957a:	2205      	movs	r2, #5
 800957c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009580:	4851      	ldr	r0, [pc, #324]	; (80096c8 <_svfiprintf_r+0x1ec>)
 8009582:	f7f6 fe35 	bl	80001f0 <memchr>
 8009586:	9a04      	ldr	r2, [sp, #16]
 8009588:	b9d8      	cbnz	r0, 80095c2 <_svfiprintf_r+0xe6>
 800958a:	06d0      	lsls	r0, r2, #27
 800958c:	bf44      	itt	mi
 800958e:	2320      	movmi	r3, #32
 8009590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009594:	0711      	lsls	r1, r2, #28
 8009596:	bf44      	itt	mi
 8009598:	232b      	movmi	r3, #43	; 0x2b
 800959a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959e:	f89a 3000 	ldrb.w	r3, [sl]
 80095a2:	2b2a      	cmp	r3, #42	; 0x2a
 80095a4:	d015      	beq.n	80095d2 <_svfiprintf_r+0xf6>
 80095a6:	9a07      	ldr	r2, [sp, #28]
 80095a8:	4654      	mov	r4, sl
 80095aa:	2000      	movs	r0, #0
 80095ac:	f04f 0c0a 	mov.w	ip, #10
 80095b0:	4621      	mov	r1, r4
 80095b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b6:	3b30      	subs	r3, #48	; 0x30
 80095b8:	2b09      	cmp	r3, #9
 80095ba:	d94e      	bls.n	800965a <_svfiprintf_r+0x17e>
 80095bc:	b1b0      	cbz	r0, 80095ec <_svfiprintf_r+0x110>
 80095be:	9207      	str	r2, [sp, #28]
 80095c0:	e014      	b.n	80095ec <_svfiprintf_r+0x110>
 80095c2:	eba0 0308 	sub.w	r3, r0, r8
 80095c6:	fa09 f303 	lsl.w	r3, r9, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	46a2      	mov	sl, r4
 80095d0:	e7d2      	b.n	8009578 <_svfiprintf_r+0x9c>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	1d19      	adds	r1, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9103      	str	r1, [sp, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bfbb      	ittet	lt
 80095de:	425b      	neglt	r3, r3
 80095e0:	f042 0202 	orrlt.w	r2, r2, #2
 80095e4:	9307      	strge	r3, [sp, #28]
 80095e6:	9307      	strlt	r3, [sp, #28]
 80095e8:	bfb8      	it	lt
 80095ea:	9204      	strlt	r2, [sp, #16]
 80095ec:	7823      	ldrb	r3, [r4, #0]
 80095ee:	2b2e      	cmp	r3, #46	; 0x2e
 80095f0:	d10c      	bne.n	800960c <_svfiprintf_r+0x130>
 80095f2:	7863      	ldrb	r3, [r4, #1]
 80095f4:	2b2a      	cmp	r3, #42	; 0x2a
 80095f6:	d135      	bne.n	8009664 <_svfiprintf_r+0x188>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	9203      	str	r2, [sp, #12]
 8009600:	2b00      	cmp	r3, #0
 8009602:	bfb8      	it	lt
 8009604:	f04f 33ff 	movlt.w	r3, #4294967295
 8009608:	3402      	adds	r4, #2
 800960a:	9305      	str	r3, [sp, #20]
 800960c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096d8 <_svfiprintf_r+0x1fc>
 8009610:	7821      	ldrb	r1, [r4, #0]
 8009612:	2203      	movs	r2, #3
 8009614:	4650      	mov	r0, sl
 8009616:	f7f6 fdeb 	bl	80001f0 <memchr>
 800961a:	b140      	cbz	r0, 800962e <_svfiprintf_r+0x152>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	eba0 000a 	sub.w	r0, r0, sl
 8009622:	fa03 f000 	lsl.w	r0, r3, r0
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	4303      	orrs	r3, r0
 800962a:	3401      	adds	r4, #1
 800962c:	9304      	str	r3, [sp, #16]
 800962e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009632:	4826      	ldr	r0, [pc, #152]	; (80096cc <_svfiprintf_r+0x1f0>)
 8009634:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009638:	2206      	movs	r2, #6
 800963a:	f7f6 fdd9 	bl	80001f0 <memchr>
 800963e:	2800      	cmp	r0, #0
 8009640:	d038      	beq.n	80096b4 <_svfiprintf_r+0x1d8>
 8009642:	4b23      	ldr	r3, [pc, #140]	; (80096d0 <_svfiprintf_r+0x1f4>)
 8009644:	bb1b      	cbnz	r3, 800968e <_svfiprintf_r+0x1b2>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	3307      	adds	r3, #7
 800964a:	f023 0307 	bic.w	r3, r3, #7
 800964e:	3308      	adds	r3, #8
 8009650:	9303      	str	r3, [sp, #12]
 8009652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009654:	4433      	add	r3, r6
 8009656:	9309      	str	r3, [sp, #36]	; 0x24
 8009658:	e767      	b.n	800952a <_svfiprintf_r+0x4e>
 800965a:	fb0c 3202 	mla	r2, ip, r2, r3
 800965e:	460c      	mov	r4, r1
 8009660:	2001      	movs	r0, #1
 8009662:	e7a5      	b.n	80095b0 <_svfiprintf_r+0xd4>
 8009664:	2300      	movs	r3, #0
 8009666:	3401      	adds	r4, #1
 8009668:	9305      	str	r3, [sp, #20]
 800966a:	4619      	mov	r1, r3
 800966c:	f04f 0c0a 	mov.w	ip, #10
 8009670:	4620      	mov	r0, r4
 8009672:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009676:	3a30      	subs	r2, #48	; 0x30
 8009678:	2a09      	cmp	r2, #9
 800967a:	d903      	bls.n	8009684 <_svfiprintf_r+0x1a8>
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0c5      	beq.n	800960c <_svfiprintf_r+0x130>
 8009680:	9105      	str	r1, [sp, #20]
 8009682:	e7c3      	b.n	800960c <_svfiprintf_r+0x130>
 8009684:	fb0c 2101 	mla	r1, ip, r1, r2
 8009688:	4604      	mov	r4, r0
 800968a:	2301      	movs	r3, #1
 800968c:	e7f0      	b.n	8009670 <_svfiprintf_r+0x194>
 800968e:	ab03      	add	r3, sp, #12
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	462a      	mov	r2, r5
 8009694:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <_svfiprintf_r+0x1f8>)
 8009696:	a904      	add	r1, sp, #16
 8009698:	4638      	mov	r0, r7
 800969a:	f7fd fc9f 	bl	8006fdc <_printf_float>
 800969e:	1c42      	adds	r2, r0, #1
 80096a0:	4606      	mov	r6, r0
 80096a2:	d1d6      	bne.n	8009652 <_svfiprintf_r+0x176>
 80096a4:	89ab      	ldrh	r3, [r5, #12]
 80096a6:	065b      	lsls	r3, r3, #25
 80096a8:	f53f af2c 	bmi.w	8009504 <_svfiprintf_r+0x28>
 80096ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ae:	b01d      	add	sp, #116	; 0x74
 80096b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b4:	ab03      	add	r3, sp, #12
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	462a      	mov	r2, r5
 80096ba:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <_svfiprintf_r+0x1f8>)
 80096bc:	a904      	add	r1, sp, #16
 80096be:	4638      	mov	r0, r7
 80096c0:	f7fd ff30 	bl	8007524 <_printf_i>
 80096c4:	e7eb      	b.n	800969e <_svfiprintf_r+0x1c2>
 80096c6:	bf00      	nop
 80096c8:	0800ed8c 	.word	0x0800ed8c
 80096cc:	0800ed96 	.word	0x0800ed96
 80096d0:	08006fdd 	.word	0x08006fdd
 80096d4:	08009425 	.word	0x08009425
 80096d8:	0800ed92 	.word	0x0800ed92

080096dc <__sfputc_r>:
 80096dc:	6893      	ldr	r3, [r2, #8]
 80096de:	3b01      	subs	r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	b410      	push	{r4}
 80096e4:	6093      	str	r3, [r2, #8]
 80096e6:	da08      	bge.n	80096fa <__sfputc_r+0x1e>
 80096e8:	6994      	ldr	r4, [r2, #24]
 80096ea:	42a3      	cmp	r3, r4
 80096ec:	db01      	blt.n	80096f2 <__sfputc_r+0x16>
 80096ee:	290a      	cmp	r1, #10
 80096f0:	d103      	bne.n	80096fa <__sfputc_r+0x1e>
 80096f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096f6:	f7fe b8e9 	b.w	80078cc <__swbuf_r>
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	1c58      	adds	r0, r3, #1
 80096fe:	6010      	str	r0, [r2, #0]
 8009700:	7019      	strb	r1, [r3, #0]
 8009702:	4608      	mov	r0, r1
 8009704:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009708:	4770      	bx	lr

0800970a <__sfputs_r>:
 800970a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	4614      	mov	r4, r2
 8009712:	18d5      	adds	r5, r2, r3
 8009714:	42ac      	cmp	r4, r5
 8009716:	d101      	bne.n	800971c <__sfputs_r+0x12>
 8009718:	2000      	movs	r0, #0
 800971a:	e007      	b.n	800972c <__sfputs_r+0x22>
 800971c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009720:	463a      	mov	r2, r7
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ffda 	bl	80096dc <__sfputc_r>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d1f3      	bne.n	8009714 <__sfputs_r+0xa>
 800972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009730 <_vfiprintf_r>:
 8009730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009734:	460d      	mov	r5, r1
 8009736:	b09d      	sub	sp, #116	; 0x74
 8009738:	4614      	mov	r4, r2
 800973a:	4698      	mov	r8, r3
 800973c:	4606      	mov	r6, r0
 800973e:	b118      	cbz	r0, 8009748 <_vfiprintf_r+0x18>
 8009740:	6983      	ldr	r3, [r0, #24]
 8009742:	b90b      	cbnz	r3, 8009748 <_vfiprintf_r+0x18>
 8009744:	f7ff f916 	bl	8008974 <__sinit>
 8009748:	4b89      	ldr	r3, [pc, #548]	; (8009970 <_vfiprintf_r+0x240>)
 800974a:	429d      	cmp	r5, r3
 800974c:	d11b      	bne.n	8009786 <_vfiprintf_r+0x56>
 800974e:	6875      	ldr	r5, [r6, #4]
 8009750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009752:	07d9      	lsls	r1, r3, #31
 8009754:	d405      	bmi.n	8009762 <_vfiprintf_r+0x32>
 8009756:	89ab      	ldrh	r3, [r5, #12]
 8009758:	059a      	lsls	r2, r3, #22
 800975a:	d402      	bmi.n	8009762 <_vfiprintf_r+0x32>
 800975c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800975e:	f7ff f9ac 	bl	8008aba <__retarget_lock_acquire_recursive>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	071b      	lsls	r3, r3, #28
 8009766:	d501      	bpl.n	800976c <_vfiprintf_r+0x3c>
 8009768:	692b      	ldr	r3, [r5, #16]
 800976a:	b9eb      	cbnz	r3, 80097a8 <_vfiprintf_r+0x78>
 800976c:	4629      	mov	r1, r5
 800976e:	4630      	mov	r0, r6
 8009770:	f7fe f8fe 	bl	8007970 <__swsetup_r>
 8009774:	b1c0      	cbz	r0, 80097a8 <_vfiprintf_r+0x78>
 8009776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009778:	07dc      	lsls	r4, r3, #31
 800977a:	d50e      	bpl.n	800979a <_vfiprintf_r+0x6a>
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	b01d      	add	sp, #116	; 0x74
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	4b7b      	ldr	r3, [pc, #492]	; (8009974 <_vfiprintf_r+0x244>)
 8009788:	429d      	cmp	r5, r3
 800978a:	d101      	bne.n	8009790 <_vfiprintf_r+0x60>
 800978c:	68b5      	ldr	r5, [r6, #8]
 800978e:	e7df      	b.n	8009750 <_vfiprintf_r+0x20>
 8009790:	4b79      	ldr	r3, [pc, #484]	; (8009978 <_vfiprintf_r+0x248>)
 8009792:	429d      	cmp	r5, r3
 8009794:	bf08      	it	eq
 8009796:	68f5      	ldreq	r5, [r6, #12]
 8009798:	e7da      	b.n	8009750 <_vfiprintf_r+0x20>
 800979a:	89ab      	ldrh	r3, [r5, #12]
 800979c:	0598      	lsls	r0, r3, #22
 800979e:	d4ed      	bmi.n	800977c <_vfiprintf_r+0x4c>
 80097a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097a2:	f7ff f98b 	bl	8008abc <__retarget_lock_release_recursive>
 80097a6:	e7e9      	b.n	800977c <_vfiprintf_r+0x4c>
 80097a8:	2300      	movs	r3, #0
 80097aa:	9309      	str	r3, [sp, #36]	; 0x24
 80097ac:	2320      	movs	r3, #32
 80097ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80097b6:	2330      	movs	r3, #48	; 0x30
 80097b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800997c <_vfiprintf_r+0x24c>
 80097bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c0:	f04f 0901 	mov.w	r9, #1
 80097c4:	4623      	mov	r3, r4
 80097c6:	469a      	mov	sl, r3
 80097c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097cc:	b10a      	cbz	r2, 80097d2 <_vfiprintf_r+0xa2>
 80097ce:	2a25      	cmp	r2, #37	; 0x25
 80097d0:	d1f9      	bne.n	80097c6 <_vfiprintf_r+0x96>
 80097d2:	ebba 0b04 	subs.w	fp, sl, r4
 80097d6:	d00b      	beq.n	80097f0 <_vfiprintf_r+0xc0>
 80097d8:	465b      	mov	r3, fp
 80097da:	4622      	mov	r2, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	4630      	mov	r0, r6
 80097e0:	f7ff ff93 	bl	800970a <__sfputs_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	f000 80aa 	beq.w	800993e <_vfiprintf_r+0x20e>
 80097ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097ec:	445a      	add	r2, fp
 80097ee:	9209      	str	r2, [sp, #36]	; 0x24
 80097f0:	f89a 3000 	ldrb.w	r3, [sl]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80a2 	beq.w	800993e <_vfiprintf_r+0x20e>
 80097fa:	2300      	movs	r3, #0
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009804:	f10a 0a01 	add.w	sl, sl, #1
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	9307      	str	r3, [sp, #28]
 800980c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009810:	931a      	str	r3, [sp, #104]	; 0x68
 8009812:	4654      	mov	r4, sl
 8009814:	2205      	movs	r2, #5
 8009816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981a:	4858      	ldr	r0, [pc, #352]	; (800997c <_vfiprintf_r+0x24c>)
 800981c:	f7f6 fce8 	bl	80001f0 <memchr>
 8009820:	9a04      	ldr	r2, [sp, #16]
 8009822:	b9d8      	cbnz	r0, 800985c <_vfiprintf_r+0x12c>
 8009824:	06d1      	lsls	r1, r2, #27
 8009826:	bf44      	itt	mi
 8009828:	2320      	movmi	r3, #32
 800982a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800982e:	0713      	lsls	r3, r2, #28
 8009830:	bf44      	itt	mi
 8009832:	232b      	movmi	r3, #43	; 0x2b
 8009834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009838:	f89a 3000 	ldrb.w	r3, [sl]
 800983c:	2b2a      	cmp	r3, #42	; 0x2a
 800983e:	d015      	beq.n	800986c <_vfiprintf_r+0x13c>
 8009840:	9a07      	ldr	r2, [sp, #28]
 8009842:	4654      	mov	r4, sl
 8009844:	2000      	movs	r0, #0
 8009846:	f04f 0c0a 	mov.w	ip, #10
 800984a:	4621      	mov	r1, r4
 800984c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009850:	3b30      	subs	r3, #48	; 0x30
 8009852:	2b09      	cmp	r3, #9
 8009854:	d94e      	bls.n	80098f4 <_vfiprintf_r+0x1c4>
 8009856:	b1b0      	cbz	r0, 8009886 <_vfiprintf_r+0x156>
 8009858:	9207      	str	r2, [sp, #28]
 800985a:	e014      	b.n	8009886 <_vfiprintf_r+0x156>
 800985c:	eba0 0308 	sub.w	r3, r0, r8
 8009860:	fa09 f303 	lsl.w	r3, r9, r3
 8009864:	4313      	orrs	r3, r2
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	46a2      	mov	sl, r4
 800986a:	e7d2      	b.n	8009812 <_vfiprintf_r+0xe2>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	1d19      	adds	r1, r3, #4
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	9103      	str	r1, [sp, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	bfbb      	ittet	lt
 8009878:	425b      	neglt	r3, r3
 800987a:	f042 0202 	orrlt.w	r2, r2, #2
 800987e:	9307      	strge	r3, [sp, #28]
 8009880:	9307      	strlt	r3, [sp, #28]
 8009882:	bfb8      	it	lt
 8009884:	9204      	strlt	r2, [sp, #16]
 8009886:	7823      	ldrb	r3, [r4, #0]
 8009888:	2b2e      	cmp	r3, #46	; 0x2e
 800988a:	d10c      	bne.n	80098a6 <_vfiprintf_r+0x176>
 800988c:	7863      	ldrb	r3, [r4, #1]
 800988e:	2b2a      	cmp	r3, #42	; 0x2a
 8009890:	d135      	bne.n	80098fe <_vfiprintf_r+0x1ce>
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	1d1a      	adds	r2, r3, #4
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	9203      	str	r2, [sp, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfb8      	it	lt
 800989e:	f04f 33ff 	movlt.w	r3, #4294967295
 80098a2:	3402      	adds	r4, #2
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800998c <_vfiprintf_r+0x25c>
 80098aa:	7821      	ldrb	r1, [r4, #0]
 80098ac:	2203      	movs	r2, #3
 80098ae:	4650      	mov	r0, sl
 80098b0:	f7f6 fc9e 	bl	80001f0 <memchr>
 80098b4:	b140      	cbz	r0, 80098c8 <_vfiprintf_r+0x198>
 80098b6:	2340      	movs	r3, #64	; 0x40
 80098b8:	eba0 000a 	sub.w	r0, r0, sl
 80098bc:	fa03 f000 	lsl.w	r0, r3, r0
 80098c0:	9b04      	ldr	r3, [sp, #16]
 80098c2:	4303      	orrs	r3, r0
 80098c4:	3401      	adds	r4, #1
 80098c6:	9304      	str	r3, [sp, #16]
 80098c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098cc:	482c      	ldr	r0, [pc, #176]	; (8009980 <_vfiprintf_r+0x250>)
 80098ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d2:	2206      	movs	r2, #6
 80098d4:	f7f6 fc8c 	bl	80001f0 <memchr>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d03f      	beq.n	800995c <_vfiprintf_r+0x22c>
 80098dc:	4b29      	ldr	r3, [pc, #164]	; (8009984 <_vfiprintf_r+0x254>)
 80098de:	bb1b      	cbnz	r3, 8009928 <_vfiprintf_r+0x1f8>
 80098e0:	9b03      	ldr	r3, [sp, #12]
 80098e2:	3307      	adds	r3, #7
 80098e4:	f023 0307 	bic.w	r3, r3, #7
 80098e8:	3308      	adds	r3, #8
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ee:	443b      	add	r3, r7
 80098f0:	9309      	str	r3, [sp, #36]	; 0x24
 80098f2:	e767      	b.n	80097c4 <_vfiprintf_r+0x94>
 80098f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80098f8:	460c      	mov	r4, r1
 80098fa:	2001      	movs	r0, #1
 80098fc:	e7a5      	b.n	800984a <_vfiprintf_r+0x11a>
 80098fe:	2300      	movs	r3, #0
 8009900:	3401      	adds	r4, #1
 8009902:	9305      	str	r3, [sp, #20]
 8009904:	4619      	mov	r1, r3
 8009906:	f04f 0c0a 	mov.w	ip, #10
 800990a:	4620      	mov	r0, r4
 800990c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009910:	3a30      	subs	r2, #48	; 0x30
 8009912:	2a09      	cmp	r2, #9
 8009914:	d903      	bls.n	800991e <_vfiprintf_r+0x1ee>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c5      	beq.n	80098a6 <_vfiprintf_r+0x176>
 800991a:	9105      	str	r1, [sp, #20]
 800991c:	e7c3      	b.n	80098a6 <_vfiprintf_r+0x176>
 800991e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009922:	4604      	mov	r4, r0
 8009924:	2301      	movs	r3, #1
 8009926:	e7f0      	b.n	800990a <_vfiprintf_r+0x1da>
 8009928:	ab03      	add	r3, sp, #12
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	462a      	mov	r2, r5
 800992e:	4b16      	ldr	r3, [pc, #88]	; (8009988 <_vfiprintf_r+0x258>)
 8009930:	a904      	add	r1, sp, #16
 8009932:	4630      	mov	r0, r6
 8009934:	f7fd fb52 	bl	8006fdc <_printf_float>
 8009938:	4607      	mov	r7, r0
 800993a:	1c78      	adds	r0, r7, #1
 800993c:	d1d6      	bne.n	80098ec <_vfiprintf_r+0x1bc>
 800993e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009940:	07d9      	lsls	r1, r3, #31
 8009942:	d405      	bmi.n	8009950 <_vfiprintf_r+0x220>
 8009944:	89ab      	ldrh	r3, [r5, #12]
 8009946:	059a      	lsls	r2, r3, #22
 8009948:	d402      	bmi.n	8009950 <_vfiprintf_r+0x220>
 800994a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994c:	f7ff f8b6 	bl	8008abc <__retarget_lock_release_recursive>
 8009950:	89ab      	ldrh	r3, [r5, #12]
 8009952:	065b      	lsls	r3, r3, #25
 8009954:	f53f af12 	bmi.w	800977c <_vfiprintf_r+0x4c>
 8009958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800995a:	e711      	b.n	8009780 <_vfiprintf_r+0x50>
 800995c:	ab03      	add	r3, sp, #12
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	462a      	mov	r2, r5
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <_vfiprintf_r+0x258>)
 8009964:	a904      	add	r1, sp, #16
 8009966:	4630      	mov	r0, r6
 8009968:	f7fd fddc 	bl	8007524 <_printf_i>
 800996c:	e7e4      	b.n	8009938 <_vfiprintf_r+0x208>
 800996e:	bf00      	nop
 8009970:	0800ebf0 	.word	0x0800ebf0
 8009974:	0800ec10 	.word	0x0800ec10
 8009978:	0800ebd0 	.word	0x0800ebd0
 800997c:	0800ed8c 	.word	0x0800ed8c
 8009980:	0800ed96 	.word	0x0800ed96
 8009984:	08006fdd 	.word	0x08006fdd
 8009988:	0800970b 	.word	0x0800970b
 800998c:	0800ed92 	.word	0x0800ed92

08009990 <_sbrk_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d06      	ldr	r5, [pc, #24]	; (80099ac <_sbrk_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4604      	mov	r4, r0
 8009998:	4608      	mov	r0, r1
 800999a:	602b      	str	r3, [r5, #0]
 800999c:	f7f8 fad2 	bl	8001f44 <_sbrk>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_sbrk_r+0x1a>
 80099a4:	682b      	ldr	r3, [r5, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_sbrk_r+0x1a>
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20000480 	.word	0x20000480

080099b0 <__sread>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	460c      	mov	r4, r1
 80099b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b8:	f000 f922 	bl	8009c00 <_read_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	bfab      	itete	ge
 80099c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099c2:	89a3      	ldrhlt	r3, [r4, #12]
 80099c4:	181b      	addge	r3, r3, r0
 80099c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ca:	bfac      	ite	ge
 80099cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80099ce:	81a3      	strhlt	r3, [r4, #12]
 80099d0:	bd10      	pop	{r4, pc}

080099d2 <__swrite>:
 80099d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	461f      	mov	r7, r3
 80099d8:	898b      	ldrh	r3, [r1, #12]
 80099da:	05db      	lsls	r3, r3, #23
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	4616      	mov	r6, r2
 80099e2:	d505      	bpl.n	80099f0 <__swrite+0x1e>
 80099e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e8:	2302      	movs	r3, #2
 80099ea:	2200      	movs	r2, #0
 80099ec:	f000 f898 	bl	8009b20 <_lseek_r>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099fa:	81a3      	strh	r3, [r4, #12]
 80099fc:	4632      	mov	r2, r6
 80099fe:	463b      	mov	r3, r7
 8009a00:	4628      	mov	r0, r5
 8009a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a06:	f000 b817 	b.w	8009a38 <_write_r>

08009a0a <__sseek>:
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a12:	f000 f885 	bl	8009b20 <_lseek_r>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	bf15      	itete	ne
 8009a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a26:	81a3      	strheq	r3, [r4, #12]
 8009a28:	bf18      	it	ne
 8009a2a:	81a3      	strhne	r3, [r4, #12]
 8009a2c:	bd10      	pop	{r4, pc}

08009a2e <__sclose>:
 8009a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a32:	f000 b831 	b.w	8009a98 <_close_r>
	...

08009a38 <_write_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_write_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f7 fc02 	bl	8001250 <_write>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_write_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_write_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000480 	.word	0x20000480

08009a5c <__assert_func>:
 8009a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5e:	4614      	mov	r4, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <__assert_func+0x2c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4605      	mov	r5, r0
 8009a68:	68d8      	ldr	r0, [r3, #12]
 8009a6a:	b14c      	cbz	r4, 8009a80 <__assert_func+0x24>
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <__assert_func+0x30>)
 8009a6e:	9100      	str	r1, [sp, #0]
 8009a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a74:	4906      	ldr	r1, [pc, #24]	; (8009a90 <__assert_func+0x34>)
 8009a76:	462b      	mov	r3, r5
 8009a78:	f000 f81e 	bl	8009ab8 <fiprintf>
 8009a7c:	f000 f8df 	bl	8009c3e <abort>
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <__assert_func+0x38>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e7f3      	b.n	8009a6e <__assert_func+0x12>
 8009a86:	bf00      	nop
 8009a88:	20000024 	.word	0x20000024
 8009a8c:	0800ed9d 	.word	0x0800ed9d
 8009a90:	0800edaa 	.word	0x0800edaa
 8009a94:	0800edd8 	.word	0x0800edd8

08009a98 <_close_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d06      	ldr	r5, [pc, #24]	; (8009ab4 <_close_r+0x1c>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	f7f8 fa19 	bl	8001eda <_close>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_close_r+0x1a>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_close_r+0x1a>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	20000480 	.word	0x20000480

08009ab8 <fiprintf>:
 8009ab8:	b40e      	push	{r1, r2, r3}
 8009aba:	b503      	push	{r0, r1, lr}
 8009abc:	4601      	mov	r1, r0
 8009abe:	ab03      	add	r3, sp, #12
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <fiprintf+0x20>)
 8009ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	f7ff fe31 	bl	8009730 <_vfiprintf_r>
 8009ace:	b002      	add	sp, #8
 8009ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	4770      	bx	lr
 8009ad8:	20000024 	.word	0x20000024

08009adc <_fstat_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	; (8009afc <_fstat_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f7f8 fa02 	bl	8001ef2 <_fstat>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_fstat_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_fstat_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20000480 	.word	0x20000480

08009b00 <_isatty_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	; (8009b1c <_isatty_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7f8 fa01 	bl	8001f12 <_isatty>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_isatty_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_isatty_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000480 	.word	0x20000480

08009b20 <_lseek_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	; (8009b40 <_lseek_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7f8 f9fa 	bl	8001f28 <_lseek>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_lseek_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_lseek_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20000480 	.word	0x20000480

08009b44 <__ascii_mbtowc>:
 8009b44:	b082      	sub	sp, #8
 8009b46:	b901      	cbnz	r1, 8009b4a <__ascii_mbtowc+0x6>
 8009b48:	a901      	add	r1, sp, #4
 8009b4a:	b142      	cbz	r2, 8009b5e <__ascii_mbtowc+0x1a>
 8009b4c:	b14b      	cbz	r3, 8009b62 <__ascii_mbtowc+0x1e>
 8009b4e:	7813      	ldrb	r3, [r2, #0]
 8009b50:	600b      	str	r3, [r1, #0]
 8009b52:	7812      	ldrb	r2, [r2, #0]
 8009b54:	1e10      	subs	r0, r2, #0
 8009b56:	bf18      	it	ne
 8009b58:	2001      	movne	r0, #1
 8009b5a:	b002      	add	sp, #8
 8009b5c:	4770      	bx	lr
 8009b5e:	4610      	mov	r0, r2
 8009b60:	e7fb      	b.n	8009b5a <__ascii_mbtowc+0x16>
 8009b62:	f06f 0001 	mvn.w	r0, #1
 8009b66:	e7f8      	b.n	8009b5a <__ascii_mbtowc+0x16>

08009b68 <memmove>:
 8009b68:	4288      	cmp	r0, r1
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	eb01 0402 	add.w	r4, r1, r2
 8009b70:	d902      	bls.n	8009b78 <memmove+0x10>
 8009b72:	4284      	cmp	r4, r0
 8009b74:	4623      	mov	r3, r4
 8009b76:	d807      	bhi.n	8009b88 <memmove+0x20>
 8009b78:	1e43      	subs	r3, r0, #1
 8009b7a:	42a1      	cmp	r1, r4
 8009b7c:	d008      	beq.n	8009b90 <memmove+0x28>
 8009b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b86:	e7f8      	b.n	8009b7a <memmove+0x12>
 8009b88:	4402      	add	r2, r0
 8009b8a:	4601      	mov	r1, r0
 8009b8c:	428a      	cmp	r2, r1
 8009b8e:	d100      	bne.n	8009b92 <memmove+0x2a>
 8009b90:	bd10      	pop	{r4, pc}
 8009b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b9a:	e7f7      	b.n	8009b8c <memmove+0x24>

08009b9c <__malloc_lock>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	; (8009ba4 <__malloc_lock+0x8>)
 8009b9e:	f7fe bf8c 	b.w	8008aba <__retarget_lock_acquire_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20000478 	.word	0x20000478

08009ba8 <__malloc_unlock>:
 8009ba8:	4801      	ldr	r0, [pc, #4]	; (8009bb0 <__malloc_unlock+0x8>)
 8009baa:	f7fe bf87 	b.w	8008abc <__retarget_lock_release_recursive>
 8009bae:	bf00      	nop
 8009bb0:	20000478 	.word	0x20000478

08009bb4 <_realloc_r>:
 8009bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb6:	4607      	mov	r7, r0
 8009bb8:	4614      	mov	r4, r2
 8009bba:	460e      	mov	r6, r1
 8009bbc:	b921      	cbnz	r1, 8009bc8 <_realloc_r+0x14>
 8009bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	f7ff bbd4 	b.w	8009370 <_malloc_r>
 8009bc8:	b922      	cbnz	r2, 8009bd4 <_realloc_r+0x20>
 8009bca:	f7ff fb81 	bl	80092d0 <_free_r>
 8009bce:	4625      	mov	r5, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	f000 f83a 	bl	8009c4c <_malloc_usable_size_r>
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d20f      	bcs.n	8009bfc <_realloc_r+0x48>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4638      	mov	r0, r7
 8009be0:	f7ff fbc6 	bl	8009370 <_malloc_r>
 8009be4:	4605      	mov	r5, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	d0f2      	beq.n	8009bd0 <_realloc_r+0x1c>
 8009bea:	4631      	mov	r1, r6
 8009bec:	4622      	mov	r2, r4
 8009bee:	f7fe ffd3 	bl	8008b98 <memcpy>
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	f7ff fb6b 	bl	80092d0 <_free_r>
 8009bfa:	e7e9      	b.n	8009bd0 <_realloc_r+0x1c>
 8009bfc:	4635      	mov	r5, r6
 8009bfe:	e7e7      	b.n	8009bd0 <_realloc_r+0x1c>

08009c00 <_read_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d07      	ldr	r5, [pc, #28]	; (8009c20 <_read_r+0x20>)
 8009c04:	4604      	mov	r4, r0
 8009c06:	4608      	mov	r0, r1
 8009c08:	4611      	mov	r1, r2
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	602a      	str	r2, [r5, #0]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	f7f8 f946 	bl	8001ea0 <_read>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_read_r+0x1e>
 8009c18:	682b      	ldr	r3, [r5, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_read_r+0x1e>
 8009c1c:	6023      	str	r3, [r4, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20000480 	.word	0x20000480

08009c24 <__ascii_wctomb>:
 8009c24:	b149      	cbz	r1, 8009c3a <__ascii_wctomb+0x16>
 8009c26:	2aff      	cmp	r2, #255	; 0xff
 8009c28:	bf85      	ittet	hi
 8009c2a:	238a      	movhi	r3, #138	; 0x8a
 8009c2c:	6003      	strhi	r3, [r0, #0]
 8009c2e:	700a      	strbls	r2, [r1, #0]
 8009c30:	f04f 30ff 	movhi.w	r0, #4294967295
 8009c34:	bf98      	it	ls
 8009c36:	2001      	movls	r0, #1
 8009c38:	4770      	bx	lr
 8009c3a:	4608      	mov	r0, r1
 8009c3c:	4770      	bx	lr

08009c3e <abort>:
 8009c3e:	b508      	push	{r3, lr}
 8009c40:	2006      	movs	r0, #6
 8009c42:	f000 f833 	bl	8009cac <raise>
 8009c46:	2001      	movs	r0, #1
 8009c48:	f7f8 f920 	bl	8001e8c <_exit>

08009c4c <_malloc_usable_size_r>:
 8009c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c50:	1f18      	subs	r0, r3, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfbc      	itt	lt
 8009c56:	580b      	ldrlt	r3, [r1, r0]
 8009c58:	18c0      	addlt	r0, r0, r3
 8009c5a:	4770      	bx	lr

08009c5c <_raise_r>:
 8009c5c:	291f      	cmp	r1, #31
 8009c5e:	b538      	push	{r3, r4, r5, lr}
 8009c60:	4604      	mov	r4, r0
 8009c62:	460d      	mov	r5, r1
 8009c64:	d904      	bls.n	8009c70 <_raise_r+0x14>
 8009c66:	2316      	movs	r3, #22
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c72:	b112      	cbz	r2, 8009c7a <_raise_r+0x1e>
 8009c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c78:	b94b      	cbnz	r3, 8009c8e <_raise_r+0x32>
 8009c7a:	4620      	mov	r0, r4
 8009c7c:	f000 f830 	bl	8009ce0 <_getpid_r>
 8009c80:	462a      	mov	r2, r5
 8009c82:	4601      	mov	r1, r0
 8009c84:	4620      	mov	r0, r4
 8009c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8a:	f000 b817 	b.w	8009cbc <_kill_r>
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d00a      	beq.n	8009ca8 <_raise_r+0x4c>
 8009c92:	1c59      	adds	r1, r3, #1
 8009c94:	d103      	bne.n	8009c9e <_raise_r+0x42>
 8009c96:	2316      	movs	r3, #22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	e7e7      	b.n	8009c6e <_raise_r+0x12>
 8009c9e:	2400      	movs	r4, #0
 8009ca0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	4798      	blx	r3
 8009ca8:	2000      	movs	r0, #0
 8009caa:	e7e0      	b.n	8009c6e <_raise_r+0x12>

08009cac <raise>:
 8009cac:	4b02      	ldr	r3, [pc, #8]	; (8009cb8 <raise+0xc>)
 8009cae:	4601      	mov	r1, r0
 8009cb0:	6818      	ldr	r0, [r3, #0]
 8009cb2:	f7ff bfd3 	b.w	8009c5c <_raise_r>
 8009cb6:	bf00      	nop
 8009cb8:	20000024 	.word	0x20000024

08009cbc <_kill_r>:
 8009cbc:	b538      	push	{r3, r4, r5, lr}
 8009cbe:	4d07      	ldr	r5, [pc, #28]	; (8009cdc <_kill_r+0x20>)
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	4608      	mov	r0, r1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f7f8 f8cf 	bl	8001e6c <_kill>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d102      	bne.n	8009cd8 <_kill_r+0x1c>
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	b103      	cbz	r3, 8009cd8 <_kill_r+0x1c>
 8009cd6:	6023      	str	r3, [r4, #0]
 8009cd8:	bd38      	pop	{r3, r4, r5, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000480 	.word	0x20000480

08009ce0 <_getpid_r>:
 8009ce0:	f7f8 b8bc 	b.w	8001e5c <_getpid>

08009ce4 <_init>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	bf00      	nop
 8009ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cea:	bc08      	pop	{r3}
 8009cec:	469e      	mov	lr, r3
 8009cee:	4770      	bx	lr

08009cf0 <_fini>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	bf00      	nop
 8009cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf6:	bc08      	pop	{r3}
 8009cf8:	469e      	mov	lr, r3
 8009cfa:	4770      	bx	lr
