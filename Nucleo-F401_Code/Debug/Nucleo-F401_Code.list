
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dd4  08004dd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ddc  08004ddc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ddc  08004ddc  00014ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004de0  08004de0  00014de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08004e54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004e54  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea49  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fd  00000000  00000000  0002eae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00031c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018081  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffe3  00000000  00000000  0004a7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935b1  00000000  00000000  0005a79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edd4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000330c  00000000  00000000  000edda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cfc 	.word	0x08004cfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004cfc 	.word	0x08004cfc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <I2C_LCD1602_Send_Command>:
#define LCD1_address 		0x4E // A0,A1,A2 OPEN->E

extern I2C_HandleTypeDef hi2c1;

void I2C_LCD1602_Send_Command(unsigned char command)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	char command_MSB, command_LSB;
	uint8_t I2C_cmd[4];
	command_MSB = ( command & 0xf0 );
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f023 030f 	bic.w	r3, r3, #15
 8000d64:	73fb      	strb	r3, [r7, #15]
	command_LSB = ( (command << 4) & 0xf0 ) ;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	73bb      	strb	r3, [r7, #14]

	I2C_cmd[ 0 ] = command_MSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	f043 030c 	orr.w	r3, r3, #12
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	723b      	strb	r3, [r7, #8]
	I2C_cmd[ 1 ] = command_MSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f043 0308 	orr.w	r3, r3, #8
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	727b      	strb	r3, [r7, #9]
	I2C_cmd[ 2 ] = command_LSB | 0x0c ; // P3(lcd on) =1, enable = 1, rs = 0
 8000d80:	7bbb      	ldrb	r3, [r7, #14]
 8000d82:	f043 030c 	orr.w	r3, r3, #12
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	72bb      	strb	r3, [r7, #10]
	I2C_cmd[ 3 ] = command_LSB | 0x08 ; // P3(lcd on) =1, enable = 0, rs = 0
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_cmd, 4, 100 );
 8000d94:	f107 0208 	add.w	r2, r7, #8
 8000d98:	2364      	movs	r3, #100	; 0x64
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	214e      	movs	r1, #78	; 0x4e
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <I2C_LCD1602_Send_Command+0x5c>)
 8000da2:	f002 f9bb 	bl	800311c <HAL_I2C_Master_Transmit>
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000144 	.word	0x20000144

08000db4 <I2C_LCD1602_Send_Data>:

void I2C_LCD1602_Send_Data(unsigned char data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	char data_MSB, data_LSB;
	uint8_t I2C_data[4];
	data_MSB = ( data & 0xf0 ) ;
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f023 030f 	bic.w	r3, r3, #15
 8000dc4:	73fb      	strb	r3, [r7, #15]
	data_LSB =  ( (data << 4) & 0xf0 ) ;
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	73bb      	strb	r3, [r7, #14]

	I2C_data[ 0 ] = data_MSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	f043 030d 	orr.w	r3, r3, #13
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	723b      	strb	r3, [r7, #8]
	I2C_data[ 1 ] = data_MSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	f043 0309 	orr.w	r3, r3, #9
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	727b      	strb	r3, [r7, #9]
	I2C_data[ 2 ] = data_LSB | 0x0d ; // P3(lcd on) =1, enable = 1, rs = 1
 8000de0:	7bbb      	ldrb	r3, [r7, #14]
 8000de2:	f043 030d 	orr.w	r3, r3, #13
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	72bb      	strb	r3, [r7, #10]
	I2C_data[ 3 ] = data_LSB | 0x09 ; // P3(lcd on) =1, enable = 0, rs = 1
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	f043 0309 	orr.w	r3, r3, #9
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit( &hi2c1, LCD1_address, (uint8_t *) I2C_data, 4, 100 );
 8000df4:	f107 0208 	add.w	r2, r7, #8
 8000df8:	2364      	movs	r3, #100	; 0x64
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	214e      	movs	r1, #78	; 0x4e
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <I2C_LCD1602_Send_Data+0x5c>)
 8000e02:	f002 f98b 	bl	800311c <HAL_I2C_Master_Transmit>
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000144 	.word	0x20000144

08000e14 <I2C_LCD1602_Init>:

void I2C_LCD1602_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000e18:	2032      	movs	r0, #50	; 0x32
 8000e1a:	f000 fe05 	bl	8001a28 <HAL_Delay>

	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8000e1e:	2030      	movs	r0, #48	; 0x30
 8000e20:	f7ff ff98 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e24:	2005      	movs	r0, #5
 8000e26:	f000 fdff 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8000e2a:	2030      	movs	r0, #48	; 0x30
 8000e2c:	f7ff ff92 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e30:	2005      	movs	r0, #5
 8000e32:	f000 fdf9 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( INTERFACE8BIT ); HAL_Delay(5);
 8000e36:	2030      	movs	r0, #48	; 0x30
 8000e38:	f7ff ff8c 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f000 fdf3 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( MODE4bit ); HAL_Delay(5);
 8000e42:	2020      	movs	r0, #32
 8000e44:	f7ff ff86 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e48:	2005      	movs	r0, #5
 8000e4a:	f000 fded 	bl	8001a28 <HAL_Delay>

	I2C_LCD1602_Send_Command(FUNCTIONSET ); HAL_Delay(5); // 4bit 2line font5x10
 8000e4e:	202c      	movs	r0, #44	; 0x2c
 8000e50:	f7ff ff80 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e54:	2005      	movs	r0, #5
 8000e56:	f000 fde7 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( DISPLAYON ); HAL_Delay(5);
 8000e5a:	200c      	movs	r0, #12
 8000e5c:	f7ff ff7a 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e60:	2005      	movs	r0, #5
 8000e62:	f000 fde1 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( ALLCLR ); HAL_Delay(5);
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff ff74 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f000 fddb 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command( ENTMODE ); HAL_Delay(5);
 8000e72:	2006      	movs	r0, #6
 8000e74:	f7ff ff6e 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000e78:	2005      	movs	r0, #5
 8000e7a:	f000 fdd5 	bl	8001a28 <HAL_Delay>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <I2C_LCD1602_Send_string>:

void I2C_LCD1602_Send_string( char *string)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	while( * string ) I2C_LCD1602_Send_Data( *string++ );
 8000e8a:	e006      	b.n	8000e9a <I2C_LCD1602_Send_string+0x18>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	607a      	str	r2, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff8d 	bl	8000db4 <I2C_LCD1602_Send_Data>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f4      	bne.n	8000e8c <I2C_LCD1602_Send_string+0xa>
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <I2C_LCD1602_GotoXY>:
void I2C_LCD1602_GotoXY(char x, char y)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	if( !y ) I2C_LCD1602_Send_Command( 0x80 | x );
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d107      	bne.n	8000ed2 <I2C_LCD1602_GotoXY+0x26>
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff42 	bl	8000d54 <I2C_LCD1602_Send_Command>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
}
 8000ed0:	e006      	b.n	8000ee0 <I2C_LCD1602_GotoXY+0x34>
	else I2C_LCD1602_Send_Command( 0xC0 | x );
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff3a 	bl	8000d54 <I2C_LCD1602_Send_Command>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <I2C_LCD1602_Send_String_XY>:

void I2C_LCD1602_Send_String_XY( char x, char y, char *string )
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	603a      	str	r2, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD1602_GotoXY( x , y );
 8000ef8:	79ba      	ldrb	r2, [r7, #6]
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ffd4 	bl	8000eac <I2C_LCD1602_GotoXY>
	I2C_LCD1602_Send_string( string );
 8000f04:	6838      	ldr	r0, [r7, #0]
 8000f06:	f7ff ffbc 	bl	8000e82 <I2C_LCD1602_Send_string>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <I2C_LCD1602_Clear>:
void I2C_LCD1602_BlinkOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x01); }
void I2C_LCD1602_CursorOn(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON | 0x02); }
void I2C_LCD1602_CursorOff(void) 	{ I2C_LCD1602_Send_Command( DISPLAYON & ~0x02); }

void I2C_LCD1602_Clear()
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
/*	I2C_LCD1602_Send_Command (0x80);
	for (int i=0; i<70; i++)
	{
		I2C_LCD1602_Send_Data (' ');
	}*/
	I2C_LCD1602_Send_Command(ALLCLR); HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff ff1c 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 fd83 	bl	8001a28 <HAL_Delay>
	I2C_LCD1602_Send_Command(0x80); HAL_Delay(1);
 8000f22:	2080      	movs	r0, #128	; 0x80
 8000f24:	f7ff ff16 	bl	8000d54 <I2C_LCD1602_Send_Command>
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f000 fd7d 	bl	8001a28 <HAL_Delay>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <Buzzer_OnOff>:
	return (status == HAL_OK ? len : 0);
}

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e012      	b.n	8000f68 <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2102      	movs	r1, #2
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <Buzzer_OnOff+0x48>)
 8000f48:	f001 ff8a 	bl	8002e60 <HAL_GPIO_WritePin>
 8000f4c:	200a      	movs	r0, #10
 8000f4e:	f000 fd6b 	bl	8001a28 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2102      	movs	r1, #2
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <Buzzer_OnOff+0x48>)
 8000f58:	f001 ff82 	bl	8002e60 <HAL_GPIO_WritePin>
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 fd63 	bl	8001a28 <HAL_Delay>
	for(int i=0;i< times ; i++)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbe8      	blt.n	8000f42 <Buzzer_OnOff+0xe>
	}
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020400 	.word	0x40020400

08000f80 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <Key_input+0x58>)
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	f023 030f 	bic.w	r3, r3, #15
 8000f90:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2bf0      	cmp	r3, #240	; 0xf0
 8000f96:	d10d      	bne.n	8000fb4 <Key_input+0x34>
    { if(key_flag == 0)
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <Key_input+0x5c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <Key_input+0x24>
        return key;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	e014      	b.n	8000fce <Key_input+0x4e>
      else
        { HAL_Delay(20);
 8000fa4:	2014      	movs	r0, #20
 8000fa6:	f000 fd3f 	bl	8001a28 <HAL_Delay>
          key_flag = 0;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <Key_input+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
          return key;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	e00c      	b.n	8000fce <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <Key_input+0x5c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <Key_input+0x40>
        //return 0xF0;
    	return key;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	e006      	b.n	8000fce <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff ffb7 	bl	8000f34 <Buzzer_OnOff>
          key_flag = 1;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <Key_input+0x5c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
          return key;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	2000008c 	.word	0x2000008c

08000fe0 <Average_ADC>:
// =================  End of Key function  ====================

// =================  ADC input(Noise clear) ==================
uint16_t Average_ADC(uint16_t NumSum,uint8_t NumAvg, uint16_t *Adc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	603a      	str	r2, [r7, #0]
 8000fea:	80fb      	strh	r3, [r7, #6]
 8000fec:	460b      	mov	r3, r1
 8000fee:	717b      	strb	r3, [r7, #5]
	double SumAdc =0, AvgAdc=0;
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int j=0; j < NumAvg ;j++ ) {
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e040      	b.n	8001090 <Average_ADC+0xb0>
		for(int i=0; i< NumSum ; i++ ) {
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	e011      	b.n	8001038 <Average_ADC+0x58>
			SumAdc += Adc[0];
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa83 	bl	8000524 <__aeabi_i2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	e9c7 2306 	strd	r2, r3, [r7, #24]
		for(int i=0; i< NumSum ; i++ ) {
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	dbe9      	blt.n	8001014 <Average_ADC+0x34>
		}
		AvgAdc += (uint16_t)( SumAdc / NumSum );
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa6e 	bl	8000524 <__aeabi_i2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fcde 	bl	8000a1c <__aeabi_d2uiz>
 8001060:	4603      	mov	r3, r0
 8001062:	b29b      	uxth	r3, r3
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa5d 	bl	8000524 <__aeabi_i2d>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001072:	f7ff f90b 	bl	800028c <__adddf3>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		SumAdc = 0;
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	f04f 0300 	mov.w	r3, #0
 8001086:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int j=0; j < NumAvg ;j++ ) {
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	797b      	ldrb	r3, [r7, #5]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbba      	blt.n	800100e <Average_ADC+0x2e>
	}
	AvgAdc =(uint16_t)(AvgAdc /NumAvg );
 8001098:	797b      	ldrb	r3, [r7, #5]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa42 	bl	8000524 <__aeabi_i2d>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010a8:	f7ff fbd0 	bl	800084c <__aeabi_ddiv>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff fcb2 	bl	8000a1c <__aeabi_d2uiz>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa21 	bl	8000504 <__aeabi_ui2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return (uint16_t)AvgAdc;
 80010ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010ce:	f7ff fca5 	bl	8000a1c <__aeabi_d2uiz>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3720      	adds	r7, #32
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <MX_ADC1_Init+0x98>)
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_ADC1_Init+0x9c>)
 80010f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f8:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_ADC1_Init+0x98>)
 80010fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_ADC1_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_ADC1_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <MX_ADC1_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <MX_ADC1_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <MX_ADC1_Init+0x98>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <MX_ADC1_Init+0xa0>)
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_ADC1_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_ADC1_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_ADC1_Init+0x98>)
 8001134:	2201      	movs	r2, #1
 8001136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_ADC1_Init+0x98>)
 800113c:	2201      	movs	r2, #1
 800113e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <MX_ADC1_Init+0x98>)
 8001142:	f000 fc95 	bl	8001a70 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800114c:	f000 faaa 	bl	80016a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001150:	2301      	movs	r3, #1
 8001152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001158:	2304      	movs	r3, #4
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_ADC1_Init+0x98>)
 8001162:	f000 fdd7 	bl	8001d14 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800116c:	f000 fa9a 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000009c 	.word	0x2000009c
 800117c:	40012000 	.word	0x40012000
 8001180:	0f000001 	.word	0x0f000001

08001184 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <HAL_ADC_MspInit+0xdc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d157      	bne.n	8001256 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a2d      	ldr	r2, [pc, #180]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a26      	ldr	r2, [pc, #152]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_ADC_MspInit+0xe0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011de:	2302      	movs	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e2:	2303      	movs	r3, #3
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	481d      	ldr	r0, [pc, #116]	; (8001268 <HAL_ADC_MspInit+0xe4>)
 80011f2:	f001 fcb1 	bl	8002b58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_ADC_MspInit+0xe8>)
 80011f8:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <HAL_ADC_MspInit+0xec>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_ADC_MspInit+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_ADC_MspInit+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001214:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001224:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <HAL_ADC_MspInit+0xe8>)
 800123c:	f001 f91c 	bl	8002478 <HAL_DMA_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001246:	f000 fa2d 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_ADC_MspInit+0xe8>)
 800124e:	639a      	str	r2, [r3, #56]	; 0x38
 8001250:	4a06      	ldr	r2, [pc, #24]	; (800126c <HAL_ADC_MspInit+0xe8>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40012000 	.word	0x40012000
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000
 800126c:	200000e4 	.word	0x200000e4
 8001270:	40026410 	.word	0x40026410

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <MX_DMA_Init+0x3c>)
 8001284:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_DMA_Init+0x3c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	2038      	movs	r0, #56	; 0x38
 800129c:	f001 f8b5 	bl	800240a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012a0:	2038      	movs	r0, #56	; 0x38
 80012a2:	f001 f8ce 	bl	8002442 <HAL_NVIC_EnableIRQ>

}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a3b      	ldr	r2, [pc, #236]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a34      	ldr	r2, [pc, #208]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MX_GPIO_Init+0x10c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <MX_GPIO_Init+0x10c>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a2d      	ldr	r2, [pc, #180]	; (80013c0 <MX_GPIO_Init+0x10c>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_GPIO_Init+0x10c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_GPIO_Init+0x10c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a26      	ldr	r2, [pc, #152]	; (80013c0 <MX_GPIO_Init+0x10c>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <MX_GPIO_Init+0x10c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2120      	movs	r1, #32
 800133e:	4821      	ldr	r0, [pc, #132]	; (80013c4 <MX_GPIO_Init+0x110>)
 8001340:	f001 fd8e 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	481f      	ldr	r0, [pc, #124]	; (80013c8 <MX_GPIO_Init+0x114>)
 800134a:	f001 fd89 	bl	8002e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800134e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_GPIO_Init+0x118>)
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <MX_GPIO_Init+0x11c>)
 8001364:	f001 fbf8 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001368:	2320      	movs	r3, #32
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_GPIO_Init+0x110>)
 8001380:	f001 fbea 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001384:	2302      	movs	r3, #2
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <MX_GPIO_Init+0x114>)
 800139c:	f001 fbdc 	bl	8002b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 80013a0:	23f0      	movs	r3, #240	; 0xf0
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_GPIO_Init+0x114>)
 80013b4:	f001 fbd0 	bl	8002b58 <HAL_GPIO_Init>

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	10210000 	.word	0x10210000
 80013d0:	40020800 	.word	0x40020800

080013d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_I2C1_Init+0x50>)
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_I2C1_Init+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_I2C1_Init+0x58>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <MX_I2C1_Init+0x50>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_I2C1_Init+0x50>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_I2C1_Init+0x50>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_I2C1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_I2C1_Init+0x50>)
 8001412:	f001 fd3f 	bl	8002e94 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f942 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000144 	.word	0x20000144
 8001428:	40005400 	.word	0x40005400
 800142c:	000186a0 	.word	0x000186a0

08001430 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <HAL_I2C_MspInit+0x84>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12c      	bne.n	80014ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001480:	2304      	movs	r3, #4
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	; (80014bc <HAL_I2C_MspInit+0x8c>)
 800148c:	f001 fb64 	bl	8002b58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_I2C_MspInit+0x88>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f000 fa3d 	bl	8001944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f881 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f7ff fef1 	bl	80012b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f7ff fecf 	bl	8001274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d6:	f000 f999 	bl	800180c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80014da:	f7ff fe01 	bl	80010e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80014de:	f7ff ff79 	bl	80013d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)Adc_Value, 1);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2201      	movs	r2, #1
 80014e8:	4619      	mov	r1, r3
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <main+0xec>)
 80014ec:	f000 fb04 	bl	8001af8 <HAL_ADC_Start_DMA>


  I2C_LCD1602_Init();
 80014f0:	f7ff fc90 	bl	8000e14 <I2C_LCD1602_Init>

  I2C_LCD1602_Send_String_XY( 0 , 0, "Welcom Zeus");
 80014f4:	4a2e      	ldr	r2, [pc, #184]	; (80015b0 <main+0xf0>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	2000      	movs	r0, #0
 80014fa:	f7ff fcf5 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
  I2C_LCD1602_Send_String_XY( 0 , 1, "I2C PCF8574");
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <main+0xf4>)
 8001500:	2101      	movs	r1, #1
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff fcf0 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
  HAL_Delay(2000);
 8001508:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800150c:	f000 fa8c 	bl	8001a28 <HAL_Delay>
  I2C_LCD1602_Clear();
 8001510:	f7ff fcff 	bl	8000f12 <I2C_LCD1602_Clear>

  sprintf( str, "start");
 8001514:	463b      	mov	r3, r7
 8001516:	4928      	ldr	r1, [pc, #160]	; (80015b8 <main+0xf8>)
 8001518:	4618      	mov	r0, r3
 800151a:	f002 ffc1 	bl	80044a0 <siprintf>
  I2C_LCD1602_Send_string(str);
 800151e:	463b      	mov	r3, r7
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fcae 	bl	8000e82 <I2C_LCD1602_Send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fd04 	bl	8000f34 <Buzzer_OnOff>

  uint16_t AvgAdc=0;
 800152c:	2300      	movs	r3, #0
 800152e:	82fb      	strh	r3, [r7, #22]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  AvgAdc = Average_ADC(200, 10,Adc_Value);
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	461a      	mov	r2, r3
 8001536:	210a      	movs	r1, #10
 8001538:	20c8      	movs	r0, #200	; 0xc8
 800153a:	f7ff fd51 	bl	8000fe0 <Average_ADC>
 800153e:	4603      	mov	r3, r0
 8001540:	82fb      	strh	r3, [r7, #22]

	  sprintf( str, "ADC : %4d", AvgAdc );
 8001542:	8afa      	ldrh	r2, [r7, #22]
 8001544:	463b      	mov	r3, r7
 8001546:	491d      	ldr	r1, [pc, #116]	; (80015bc <main+0xfc>)
 8001548:	4618      	mov	r0, r3
 800154a:	f002 ffa9 	bl	80044a0 <siprintf>
	  I2C_LCD1602_Send_String_XY( 0 , 0, str);
 800154e:	463b      	mov	r3, r7
 8001550:	461a      	mov	r2, r3
 8001552:	2100      	movs	r1, #0
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fcc7 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>

	  //HAL_Delay(500);



	  switch( Key_input() ) {
 800155a:	f7ff fd11 	bl	8000f80 <Key_input>
 800155e:	4603      	mov	r3, r0
 8001560:	2be0      	cmp	r3, #224	; 0xe0
 8001562:	d00f      	beq.n	8001584 <main+0xc4>
 8001564:	2be0      	cmp	r3, #224	; 0xe0
 8001566:	dc1f      	bgt.n	80015a8 <main+0xe8>
 8001568:	2bd0      	cmp	r3, #208	; 0xd0
 800156a:	d011      	beq.n	8001590 <main+0xd0>
 800156c:	2bd0      	cmp	r3, #208	; 0xd0
 800156e:	dc1b      	bgt.n	80015a8 <main+0xe8>
 8001570:	2b70      	cmp	r3, #112	; 0x70
 8001572:	d013      	beq.n	800159c <main+0xdc>
 8001574:	2bb0      	cmp	r3, #176	; 0xb0
 8001576:	d117      	bne.n	80015a8 <main+0xe8>
	  case KEY_UP:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "UP    pressed");
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <main+0x100>)
 800157a:	2101      	movs	r1, #1
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff fcb3 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
		  break;
 8001582:	e012      	b.n	80015aa <main+0xea>

	  case KEY_DOWN:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "DOWN  pressed");
 8001584:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <main+0x104>)
 8001586:	2101      	movs	r1, #1
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fcad 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
		  break;
 800158e:	e00c      	b.n	80015aa <main+0xea>

	  case KEY_RIGHT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "RIGHT pressed");
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <main+0x108>)
 8001592:	2101      	movs	r1, #1
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff fca7 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
		  break;
 800159a:	e006      	b.n	80015aa <main+0xea>

	  case KEY_LEFT:
		  I2C_LCD1602_Send_String_XY( 0 , 1, "LEFT  pressed");
 800159c:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <main+0x10c>)
 800159e:	2101      	movs	r1, #1
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fca1 	bl	8000ee8 <I2C_LCD1602_Send_String_XY>
		  break;
 80015a6:	e000      	b.n	80015aa <main+0xea>

	  default:
		  break;
 80015a8:	bf00      	nop
	  AvgAdc = Average_ADC(200, 10,Adc_Value);
 80015aa:	e7c1      	b.n	8001530 <main+0x70>
 80015ac:	2000009c 	.word	0x2000009c
 80015b0:	08004d14 	.word	0x08004d14
 80015b4:	08004d20 	.word	0x08004d20
 80015b8:	08004d2c 	.word	0x08004d2c
 80015bc:	08004d34 	.word	0x08004d34
 80015c0:	08004d40 	.word	0x08004d40
 80015c4:	08004d50 	.word	0x08004d50
 80015c8:	08004d60 	.word	0x08004d60
 80015cc:	08004d70 	.word	0x08004d70

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2230      	movs	r2, #48	; 0x30
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 ff56 	bl	8004490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	4b28      	ldr	r3, [pc, #160]	; (800169c <SystemClock_Config+0xcc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <SystemClock_Config+0xcc>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b25      	ldr	r3, [pc, #148]	; (800169c <SystemClock_Config+0xcc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <SystemClock_Config+0xd0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <SystemClock_Config+0xd0>)
 800161e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001630:	2301      	movs	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001634:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163a:	2302      	movs	r3, #2
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001644:	2308      	movs	r3, #8
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001648:	2354      	movs	r3, #84	; 0x54
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001650:	2307      	movs	r3, #7
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0320 	add.w	r3, r7, #32
 8001658:	4618      	mov	r0, r3
 800165a:	f002 f867 	bl	800372c <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001664:	f000 f81e 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2302      	movs	r3, #2
 800166e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2102      	movs	r1, #2
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fac9 	bl	8003c1c <HAL_RCC_ClockConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001690:	f000 f808 	bl	80016a4 <Error_Handler>
  }
}
 8001694:	bf00      	nop
 8001696:	3750      	adds	r7, #80	; 0x50
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fe7e 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f946 	bl	80019e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA2_Stream0_IRQHandler+0x10>)
 8001766:	f000 ff8d 	bl	8002684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000e4 	.word	0x200000e4

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f002 fe4a 	bl	800443c <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <_sbrk+0x64>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20018000 	.word	0x20018000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20000090 	.word	0x20000090
 80017dc:	200001f0 	.word	0x200001f0

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <SystemInit+0x28>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ea:	4a07      	ldr	r2, [pc, #28]	; (8001808 <SystemInit+0x28>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SystemInit+0x28>)
 80017f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017fa:	609a      	str	r2, [r3, #8]
#endif
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f002 fbe4 	bl	8004010 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f7ff ff29 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000198 	.word	0x20000198
 800185c:	40004400 	.word	0x40004400

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0x84>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d12b      	bne.n	80018da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_UART_MspInit+0x88>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_UART_MspInit+0x88>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_UART_MspInit+0x88>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_UART_MspInit+0x88>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_UART_MspInit+0x8c>)
 80018d6:	f001 f93f 	bl	8002b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40004400 	.word	0x40004400
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001928 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018f6:	e003      	b.n	8001900 <LoopCopyDataInit>

080018f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018fe:	3104      	adds	r1, #4

08001900 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001904:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001906:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001908:	d3f6      	bcc.n	80018f8 <CopyDataInit>
  ldr  r2, =_sbss
 800190a:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800190c:	e002      	b.n	8001914 <LoopFillZerobss>

0800190e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800190e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001910:	f842 3b04 	str.w	r3, [r2], #4

08001914 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001916:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001918:	d3f9      	bcc.n	800190e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800191a:	f7ff ff61 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191e:	f002 fd93 	bl	8004448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff fdcd 	bl	80014c0 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800192c:	08004de4 	.word	0x08004de4
  ldr  r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001934:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001938:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800193c:	200001f0 	.word	0x200001f0

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_Init+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_Init+0x40>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_Init+0x40>)
 800195a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_Init+0x40>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196c:	2003      	movs	r0, #3
 800196e:	f000 fd41 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001972:	2000      	movs	r0, #0
 8001974:	f000 f808 	bl	8001988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001978:	f7ff fe9c 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023c00 	.word	0x40023c00

08001988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x54>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x58>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fd59 	bl	800245e <HAL_SYSTICK_Config>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00e      	b.n	80019d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d80a      	bhi.n	80019d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f000 fd21 	bl	800240a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c8:	4a06      	ldr	r2, [pc, #24]	; (80019e4 <HAL_InitTick+0x5c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000008 	.word	0x20000008
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x20>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x24>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <HAL_IncTick+0x24>)
 80019fa:	6013      	str	r3, [r2, #0]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	200001dc 	.word	0x200001dc

08001a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetTick+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200001dc 	.word	0x200001dc

08001a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff ffee 	bl	8001a10 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d005      	beq.n	8001a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_Delay+0x44>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4e:	bf00      	nop
 8001a50:	f7ff ffde 	bl	8001a10 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d8f7      	bhi.n	8001a50 <HAL_Delay+0x28>
  {
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000008 	.word	0x20000008

08001a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e033      	b.n	8001aee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fb78 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ab6:	f023 0302 	bic.w	r3, r3, #2
 8001aba:	f043 0202 	orr.w	r2, r3, #2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 fa48 	bl	8001f58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f023 0303 	bic.w	r3, r3, #3
 8001ad6:	f043 0201 	orr.w	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ade:	e001      	b.n	8001ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start_DMA+0x1e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0ce      	b.n	8001cb4 <HAL_ADC_Start_DMA+0x1bc>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d018      	beq.n	8001b5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3c:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_ADC_Start_DMA+0x1c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5f      	ldr	r2, [pc, #380]	; (8001cc0 <HAL_ADC_Start_DMA+0x1c8>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	0c9a      	lsrs	r2, r3, #18
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b6c:	d107      	bne.n	8001b7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 8086 	bne.w	8001c9a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f023 0206 	bic.w	r2, r3, #6
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_ADC_Start_DMA+0x1cc>)
 8001bec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a35      	ldr	r2, [pc, #212]	; (8001cc8 <HAL_ADC_Start_DMA+0x1d0>)
 8001bf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	4a34      	ldr	r2, [pc, #208]	; (8001ccc <HAL_ADC_Start_DMA+0x1d4>)
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c02:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_ADC_Start_DMA+0x1d8>)
 8001c04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	334c      	adds	r3, #76	; 0x4c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f000 fcc8 	bl	80025d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10f      	bne.n	8001c70 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d129      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	e020      	b.n	8001cb2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_ADC_Start_DMA+0x1dc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d11b      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x1ba>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d114      	bne.n	8001cb2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e00b      	b.n	8001cb2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f043 0210 	orr.w	r2, r3, #16
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83
 8001cc4:	40012300 	.word	0x40012300
 8001cc8:	08002151 	.word	0x08002151
 8001ccc:	0800220b 	.word	0x0800220b
 8001cd0:	08002227 	.word	0x08002227
 8001cd4:	40012000 	.word	0x40012000

08001cd8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1c>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e105      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x228>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	d925      	bls.n	8001d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	2207      	movs	r2, #7
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	400a      	ands	r2, r1
 8001d64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68d9      	ldr	r1, [r3, #12]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	4603      	mov	r3, r0
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4403      	add	r3, r0
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	409a      	lsls	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	e022      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	2207      	movs	r2, #7
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	400a      	ands	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6919      	ldr	r1, [r3, #16]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4403      	add	r3, r0
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d824      	bhi.n	8001e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b05      	subs	r3, #5
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b05      	subs	r3, #5
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
 8001e22:	e04c      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d824      	bhi.n	8001e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b23      	subs	r3, #35	; 0x23
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	3b23      	subs	r3, #35	; 0x23
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
 8001e74:	e023      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b41      	subs	r3, #65	; 0x41
 8001e88:	221f      	movs	r2, #31
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b41      	subs	r3, #65	; 0x41
 8001eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_ADC_ConfigChannel+0x234>)
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_ADC_ConfigChannel+0x238>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1cc>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	; (8001f4c <HAL_ADC_ConfigChannel+0x238>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d123      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d003      	beq.n	8001efa <HAL_ADC_ConfigChannel+0x1e6>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b11      	cmp	r3, #17
 8001ef8:	d11b      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b10      	cmp	r3, #16
 8001f0c:	d111      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_ADC_ConfigChannel+0x23c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a10      	ldr	r2, [pc, #64]	; (8001f54 <HAL_ADC_ConfigChannel+0x240>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0c9a      	lsrs	r2, r3, #18
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f24:	e002      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f9      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	40012000 	.word	0x40012000
 8001f50:	20000000 	.word	0x20000000
 8001f54:	431bde83 	.word	0x431bde83

08001f58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f60:	4b79      	ldr	r3, [pc, #484]	; (8002148 <ADC_Init+0x1f0>)
 8001f62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	4a58      	ldr	r2, [pc, #352]	; (800214c <ADC_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d022      	beq.n	8002036 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002020:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6899      	ldr	r1, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e00f      	b.n	8002056 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0202 	bic.w	r2, r2, #2
 8002064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6899      	ldr	r1, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7e1b      	ldrb	r3, [r3, #24]
 8002070:	005a      	lsls	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002092:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	3b01      	subs	r3, #1
 80020b0:	035a      	lsls	r2, r3, #13
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	e007      	b.n	80020cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	051a      	lsls	r2, r3, #20
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800210e:	025a      	lsls	r2, r3, #9
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6899      	ldr	r1, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	029a      	lsls	r2, r3, #10
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	40012300 	.word	0x40012300
 800214c:	0f000001 	.word	0x0f000001

08002150 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002166:	2b00      	cmp	r3, #0
 8002168:	d13c      	bne.n	80021e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d12b      	bne.n	80021dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d127      	bne.n	80021dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002192:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002196:	2b00      	cmp	r3, #0
 8002198:	d006      	beq.n	80021a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d119      	bne.n	80021dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0220 	bic.w	r2, r2, #32
 80021b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fd7b 	bl	8001cd8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021e2:	e00e      	b.n	8002202 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff fd85 	bl	8001d00 <HAL_ADC_ErrorCallback>
}
 80021f6:	e004      	b.n	8002202 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff fd67 	bl	8001cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fd5a 	bl	8001d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	; (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	; (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fac4 	bl	8001a10 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e099      	b.n	80025c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b4:	e00f      	b.n	80024d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024b6:	f7ff faab 	bl	8001a10 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d908      	bls.n	80024d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2203      	movs	r2, #3
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e078      	b.n	80025c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e8      	bne.n	80024b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <HAL_DMA_Init+0x158>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b04      	cmp	r3, #4
 800252e:	d107      	bne.n	8002540 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4313      	orrs	r3, r2
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f023 0307 	bic.w	r3, r3, #7
 8002556:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2b04      	cmp	r3, #4
 8002568:	d117      	bne.n	800259a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00e      	beq.n	800259a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fa6f 	bl	8002a60 <DMA_CheckFifoParam>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002596:	2301      	movs	r3, #1
 8002598:	e016      	b.n	80025c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fa26 	bl	80029f4 <DMA_CalcBaseAndBitshift>
 80025a8:	4603      	mov	r3, r0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b0:	223f      	movs	r2, #63	; 0x3f
 80025b2:	409a      	lsls	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	f010803f 	.word	0xf010803f

080025d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_DMA_Start_IT+0x26>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e040      	b.n	800267c <HAL_DMA_Start_IT+0xa8>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d12f      	bne.n	800266e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f9b8 	bl	8002998 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0216 	orr.w	r2, r2, #22
 8002642:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0208 	orr.w	r2, r2, #8
 800265a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e005      	b.n	800267a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002676:	2302      	movs	r3, #2
 8002678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002690:	4b92      	ldr	r3, [pc, #584]	; (80028dc <HAL_DMA_IRQHandler+0x258>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a92      	ldr	r2, [pc, #584]	; (80028e0 <HAL_DMA_IRQHandler+0x25c>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2208      	movs	r2, #8
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01a      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0204 	bic.w	r2, r2, #4
 80026d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2208      	movs	r2, #8
 80026de:	409a      	lsls	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2201      	movs	r2, #1
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d012      	beq.n	8002726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2201      	movs	r2, #1
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f043 0202 	orr.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2204      	movs	r2, #4
 800272c:	409a      	lsls	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d012      	beq.n	800275c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002748:	2204      	movs	r2, #4
 800274a:	409a      	lsls	r2, r3
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	2210      	movs	r2, #16
 8002762:	409a      	lsls	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d043      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03c      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	2210      	movs	r2, #16
 8002780:	409a      	lsls	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d018      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d108      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d024      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e01f      	b.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e016      	b.n	80027f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0208 	bic.w	r2, r2, #8
 80027e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	2220      	movs	r2, #32
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 808e 	beq.w	8002922 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8086 	beq.w	8002922 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2220      	movs	r2, #32
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b05      	cmp	r3, #5
 800282c:	d136      	bne.n	800289c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0216 	bic.w	r2, r2, #22
 800283c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695a      	ldr	r2, [r3, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d103      	bne.n	800285e <HAL_DMA_IRQHandler+0x1da>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0208 	bic.w	r2, r2, #8
 800286c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	223f      	movs	r2, #63	; 0x3f
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288e:	2b00      	cmp	r3, #0
 8002890:	d07d      	beq.n	800298e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
        }
        return;
 800289a:	e078      	b.n	800298e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01c      	beq.n	80028e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d030      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
 80028c8:	e02b      	b.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d027      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
 80028da:	e022      	b.n	8002922 <HAL_DMA_IRQHandler+0x29e>
 80028dc:	20000000 	.word	0x20000000
 80028e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0210 	bic.w	r2, r2, #16
 8002900:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	2b00      	cmp	r3, #0
 8002928:	d032      	beq.n	8002990 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d022      	beq.n	800297c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2205      	movs	r2, #5
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	3301      	adds	r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	429a      	cmp	r2, r3
 8002958:	d307      	bcc.n	800296a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f2      	bne.n	800294e <HAL_DMA_IRQHandler+0x2ca>
 8002968:	e000      	b.n	800296c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800296a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
 800298c:	e000      	b.n	8002990 <HAL_DMA_IRQHandler+0x30c>
        return;
 800298e:	bf00      	nop
    }
  }
}
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d108      	bne.n	80029d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029d6:	e007      	b.n	80029e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3b10      	subs	r3, #16
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <DMA_CalcBaseAndBitshift+0x64>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <DMA_CalcBaseAndBitshift+0x68>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d909      	bls.n	8002a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	; 0x58
 8002a34:	e007      	b.n	8002a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a3e:	f023 0303 	bic.w	r3, r3, #3
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	aaaaaaab 	.word	0xaaaaaaab
 8002a5c:	08004d98 	.word	0x08004d98

08002a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d11f      	bne.n	8002aba <DMA_CheckFifoParam+0x5a>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d856      	bhi.n	8002b2e <DMA_CheckFifoParam+0xce>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <DMA_CheckFifoParam+0x28>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aab 	.word	0x08002aab
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	08002b2f 	.word	0x08002b2f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d046      	beq.n	8002b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa8:	e043      	b.n	8002b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ab2:	d140      	bne.n	8002b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab8:	e03d      	b.n	8002b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac2:	d121      	bne.n	8002b08 <DMA_CheckFifoParam+0xa8>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d837      	bhi.n	8002b3a <DMA_CheckFifoParam+0xda>
 8002aca:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <DMA_CheckFifoParam+0x70>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002ae7 	.word	0x08002ae7
 8002ad8:	08002ae1 	.word	0x08002ae1
 8002adc:	08002af9 	.word	0x08002af9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae4:	e030      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d025      	beq.n	8002b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af6:	e022      	b.n	8002b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b00:	d11f      	bne.n	8002b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b06:	e01c      	b.n	8002b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d903      	bls.n	8002b16 <DMA_CheckFifoParam+0xb6>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d003      	beq.n	8002b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b14:	e018      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1a:	e015      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e00b      	b.n	8002b46 <DMA_CheckFifoParam+0xe6>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e00a      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e008      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;
 8002b36:	bf00      	nop
 8002b38:	e006      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e004      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e002      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b42:	bf00      	nop
 8002b44:	e000      	b.n	8002b48 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
    }
  } 
  
  return status; 
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop

08002b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e159      	b.n	8002e28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b74:	2201      	movs	r2, #1
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	f040 8148 	bne.w	8002e22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d005      	beq.n	8002baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d130      	bne.n	8002c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be0:	2201      	movs	r2, #1
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 0201 	and.w	r2, r3, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d017      	beq.n	8002c48 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	2203      	movs	r2, #3
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d123      	bne.n	8002c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	69b9      	ldr	r1, [r7, #24]
 8002c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0203 	and.w	r2, r3, #3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80a2 	beq.w	8002e22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <HAL_GPIO_Init+0x2e8>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfa:	4a52      	ldr	r2, [pc, #328]	; (8002e44 <HAL_GPIO_Init+0x2ec>)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	3302      	adds	r3, #2
 8002d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	220f      	movs	r2, #15
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a49      	ldr	r2, [pc, #292]	; (8002e48 <HAL_GPIO_Init+0x2f0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x202>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_GPIO_Init+0x2f4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x1fe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a47      	ldr	r2, [pc, #284]	; (8002e50 <HAL_GPIO_Init+0x2f8>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x1fa>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <HAL_GPIO_Init+0x2fc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x1f6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a45      	ldr	r2, [pc, #276]	; (8002e58 <HAL_GPIO_Init+0x300>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x1f2>
 8002d46:	2304      	movs	r3, #4
 8002d48:	e008      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	e006      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e004      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d52:	2302      	movs	r3, #2
 8002d54:	e002      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_GPIO_Init+0x204>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	f002 0203 	and.w	r2, r2, #3
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	4093      	lsls	r3, r2
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d6c:	4935      	ldr	r1, [pc, #212]	; (8002e44 <HAL_GPIO_Init+0x2ec>)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	089b      	lsrs	r3, r3, #2
 8002d72:	3302      	adds	r3, #2
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7a:	4b38      	ldr	r3, [pc, #224]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002da4:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dc8:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dce:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <HAL_GPIO_Init+0x304>)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3301      	adds	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b0f      	cmp	r3, #15
 8002e2c:	f67f aea2 	bls.w	8002b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	; 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40013800 	.word	0x40013800
 8002e48:	40020000 	.word	0x40020000
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	40020800 	.word	0x40020800
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40013c00 	.word	0x40013c00

08002e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	807b      	strh	r3, [r7, #2]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e70:	787b      	ldrb	r3, [r7, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e7c:	e003      	b.n	8002e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7e:	887b      	ldrh	r3, [r7, #2]
 8002e80:	041a      	lsls	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e12b      	b.n	80030fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fab8 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ee6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ef8:	f001 f862 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8002efc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a81      	ldr	r2, [pc, #516]	; (8003108 <HAL_I2C_Init+0x274>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d807      	bhi.n	8002f18 <HAL_I2C_Init+0x84>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a80      	ldr	r2, [pc, #512]	; (800310c <HAL_I2C_Init+0x278>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e006      	b.n	8002f26 <HAL_I2C_Init+0x92>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a7d      	ldr	r2, [pc, #500]	; (8003110 <HAL_I2C_Init+0x27c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	bf94      	ite	ls
 8002f20:	2301      	movls	r3, #1
 8002f22:	2300      	movhi	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0e7      	b.n	80030fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	4a78      	ldr	r2, [pc, #480]	; (8003114 <HAL_I2C_Init+0x280>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0c9b      	lsrs	r3, r3, #18
 8002f38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <HAL_I2C_Init+0x274>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d802      	bhi.n	8002f68 <HAL_I2C_Init+0xd4>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3301      	adds	r3, #1
 8002f66:	e009      	b.n	8002f7c <HAL_I2C_Init+0xe8>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	4a69      	ldr	r2, [pc, #420]	; (8003118 <HAL_I2C_Init+0x284>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	099b      	lsrs	r3, r3, #6
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	495c      	ldr	r1, [pc, #368]	; (8003108 <HAL_I2C_Init+0x274>)
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d819      	bhi.n	8002fd0 <HAL_I2C_Init+0x13c>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e59      	subs	r1, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_I2C_Init+0x138>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1e59      	subs	r1, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	e051      	b.n	8003070 <HAL_I2C_Init+0x1dc>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	e04f      	b.n	8003070 <HAL_I2C_Init+0x1dc>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d111      	bne.n	8002ffc <HAL_I2C_Init+0x168>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1e58      	subs	r0, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	440b      	add	r3, r1
 8002fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e012      	b.n	8003022 <HAL_I2C_Init+0x18e>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Init+0x196>
 8003026:	2301      	movs	r3, #1
 8003028:	e022      	b.n	8003070 <HAL_I2C_Init+0x1dc>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10e      	bne.n	8003050 <HAL_I2C_Init+0x1bc>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	1e58      	subs	r0, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	440b      	add	r3, r1
 8003040:	fbb0 f3f3 	udiv	r3, r0, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800304e:	e00f      	b.n	8003070 <HAL_I2C_Init+0x1dc>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	0099      	lsls	r1, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6809      	ldr	r1, [r1, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800309e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6911      	ldr	r1, [r2, #16]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68d2      	ldr	r2, [r2, #12]
 80030aa:	4311      	orrs	r1, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	000186a0 	.word	0x000186a0
 800310c:	001e847f 	.word	0x001e847f
 8003110:	003d08ff 	.word	0x003d08ff
 8003114:	431bde83 	.word	0x431bde83
 8003118:	10624dd3 	.word	0x10624dd3

0800311c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	460b      	mov	r3, r1
 800312a:	817b      	strh	r3, [r7, #10]
 800312c:	4613      	mov	r3, r2
 800312e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003130:	f7fe fc6e 	bl	8001a10 <HAL_GetTick>
 8003134:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	f040 80e0 	bne.w	8003304 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2319      	movs	r3, #25
 800314a:	2201      	movs	r2, #1
 800314c:	4970      	ldr	r1, [pc, #448]	; (8003310 <HAL_I2C_Master_Transmit+0x1f4>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f964 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e0d3      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_I2C_Master_Transmit+0x50>
 8003168:	2302      	movs	r3, #2
 800316a:	e0cc      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b01      	cmp	r3, #1
 8003180:	d007      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2221      	movs	r2, #33	; 0x21
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2210      	movs	r2, #16
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	893a      	ldrh	r2, [r7, #8]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_I2C_Master_Transmit+0x1f8>)
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031d4:	8979      	ldrh	r1, [r7, #10]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f89c 	bl	8003318 <I2C_MasterRequestWrite>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e08d      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003200:	e066      	b.n	80032d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9de 	bl	80035c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e06b      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d11b      	bne.n	80032a4 <HAL_I2C_Master_Transmit+0x188>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d017      	beq.n	80032a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	6a39      	ldr	r1, [r7, #32]
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 f9ce 	bl	800364a <I2C_WaitOnBTFFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d107      	bne.n	80032cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01a      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d194      	bne.n	8003202 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	00100002 	.word	0x00100002
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b088      	sub	sp, #32
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	460b      	mov	r3, r1
 8003326:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d006      	beq.n	8003342 <I2C_MasterRequestWrite+0x2a>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d003      	beq.n	8003342 <I2C_MasterRequestWrite+0x2a>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003340:	d108      	bne.n	8003354 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e00b      	b.n	800336c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	2b12      	cmp	r3, #18
 800335a:	d107      	bne.n	800336c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f84f 	bl	800341c <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003392:	d103      	bne.n	800339c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e035      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a8:	d108      	bne.n	80033bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b8:	611a      	str	r2, [r3, #16]
 80033ba:	e01b      	b.n	80033f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	11db      	asrs	r3, r3, #7
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0306 	and.w	r3, r3, #6
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f063 030f 	orn	r3, r3, #15
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	490e      	ldr	r1, [pc, #56]	; (8003414 <I2C_MasterRequestWrite+0xfc>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f875 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e010      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4907      	ldr	r1, [pc, #28]	; (8003418 <I2C_MasterRequestWrite+0x100>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f865 	bl	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00010008 	.word	0x00010008
 8003418:	00010002 	.word	0x00010002

0800341c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	e025      	b.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003434:	d021      	beq.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe faeb 	bl	8001a10 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e023      	b.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10d      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	43da      	mvns	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	b2db      	uxtb	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	e00c      	b.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d0b6      	beq.n	800342e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d8:	e051      	b.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e8:	d123      	bne.n	8003532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e046      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d021      	beq.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe fa69 	bl	8001a10 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d116      	bne.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f043 0220 	orr.w	r2, r3, #32
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e020      	b.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10c      	bne.n	80035a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	e00b      	b.n	80035ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	43da      	mvns	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4013      	ands	r3, r2
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d18d      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d4:	e02d      	b.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f878 	bl	80036cc <I2C_IsAcknowledgeFailed>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02d      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d021      	beq.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ee:	f7fe fa0f 	bl	8001a10 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d302      	bcc.n	8003604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f043 0220 	orr.w	r2, r3, #32
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363c:	2b80      	cmp	r3, #128	; 0x80
 800363e:	d1ca      	bne.n	80035d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003656:	e02d      	b.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f837 	bl	80036cc <I2C_IsAcknowledgeFailed>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02d      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d021      	beq.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7fe f9ce 	bl	8001a10 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d302      	bcc.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f043 0220 	orr.w	r2, r3, #32
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e007      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d1ca      	bne.n	8003658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d11b      	bne.n	800371c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	f043 0204 	orr.w	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e264      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d075      	beq.n	8003836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800374a:	4ba3      	ldr	r3, [pc, #652]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d00c      	beq.n	8003770 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4ba0      	ldr	r3, [pc, #640]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d112      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b9d      	ldr	r3, [pc, #628]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376e:	d10b      	bne.n	8003788 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	4b99      	ldr	r3, [pc, #612]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05b      	beq.n	8003834 <HAL_RCC_OscConfig+0x108>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d157      	bne.n	8003834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e23f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x74>
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a90      	ldr	r2, [pc, #576]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x98>
 80037aa:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a8a      	ldr	r2, [pc, #552]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xb0>
 80037c4:	4b84      	ldr	r3, [pc, #528]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a83      	ldr	r2, [pc, #524]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a80      	ldr	r2, [pc, #512]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe f914 	bl	8001a10 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe f910 	bl	8001a10 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e204      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xc0>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f900 	bl	8001a10 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe f8fc 	bl	8001a10 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1f0      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b6c      	ldr	r3, [pc, #432]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0xe8>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003842:	4b65      	ldr	r3, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800384e:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c4      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b56      	ldr	r3, [pc, #344]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4952      	ldr	r1, [pc, #328]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b4f      	ldr	r3, [pc, #316]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fe f8b5 	bl	8001a10 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe f8b1 	bl	8001a10 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4940      	ldr	r1, [pc, #256]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_OscConfig+0x2b0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f894 	bl	8001a10 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe f890 	bl	8001a10 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e184      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d030      	beq.n	8003978 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d016      	beq.n	800394c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fe f874 	bl	8001a10 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe f870 	bl	8001a10 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e164      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x200>
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800394c:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCC_OscConfig+0x2b4>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe f85d 	bl	8001a10 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395a:	f7fe f859 	bl	8001a10 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e14d      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396c:	4b1a      	ldr	r3, [pc, #104]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a0 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10f      	bne.n	80039b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6413      	str	r3, [r2, #64]	; 0x40
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_RCC_OscConfig+0x2b8>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7fe f81f 	bl	8001a10 <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	e011      	b.n	80039fa <HAL_RCC_OscConfig+0x2ce>
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	42470000 	.word	0x42470000
 80039e0:	42470e80 	.word	0x42470e80
 80039e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e8:	f7fe f812 	bl	8001a10 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e106      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b85      	ldr	r3, [pc, #532]	; (8003c10 <HAL_RCC_OscConfig+0x4e4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x2f0>
 8003a0e:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a80      	ldr	r2, [pc, #512]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	f043 0301 	orr.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	e01c      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b05      	cmp	r3, #5
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x312>
 8003a24:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a7a      	ldr	r2, [pc, #488]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a2a:	f043 0304 	orr.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCC_OscConfig+0x32a>
 8003a3e:	4b75      	ldr	r3, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a74      	ldr	r2, [pc, #464]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a44:	f023 0301 	bic.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d015      	beq.n	8003a8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5e:	f7fd ffd7 	bl	8001a10 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fd ffd3 	bl	8001a10 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0c5      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ee      	beq.n	8003a66 <HAL_RCC_OscConfig+0x33a>
 8003a88:	e014      	b.n	8003ab4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fd ffc1 	bl	8001a10 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7fd ffbd 	bl	8001a10 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e0af      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ee      	bne.n	8003a92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d105      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aba:	4b56      	ldr	r3, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	4a55      	ldr	r2, [pc, #340]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 809b 	beq.w	8003c06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d05c      	beq.n	8003b96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d141      	bne.n	8003b68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b4c      	ldr	r3, [pc, #304]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd ff91 	bl	8001a10 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd ff8d 	bl	8001a10 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e081      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	019b      	lsls	r3, r3, #6
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	061b      	lsls	r3, r3, #24
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd ff66 	bl	8001a10 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd ff62 	bl	8001a10 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e056      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x41c>
 8003b66:	e04e      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x4ec>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fd ff4f 	bl	8001a10 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b76:	f7fd ff4b 	bl	8001a10 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e03f      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x44a>
 8003b94:	e037      	b.n	8003c06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e032      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <HAL_RCC_OscConfig+0x4e8>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d028      	beq.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d121      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d11a      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d111      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	3b01      	subs	r3, #1
 8003bec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40007000 	.word	0x40007000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470060 	.word	0x42470060

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0cc      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b65      	ldr	r3, [pc, #404]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b63      	ldr	r3, [pc, #396]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b8      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a58      	ldr	r2, [pc, #352]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b53      	ldr	r3, [pc, #332]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b50      	ldr	r3, [pc, #320]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494d      	ldr	r1, [pc, #308]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3b      	ldr	r3, [pc, #236]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e067      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b37      	ldr	r3, [pc, #220]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4934      	ldr	r1, [pc, #208]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fe80 	bl	8001a10 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fe7c 	bl	8001a10 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04f      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b20      	ldr	r3, [pc, #128]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e032      	b.n	8003dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4916      	ldr	r1, [pc, #88]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490e      	ldr	r1, [pc, #56]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f821 	bl	8003de8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd fde0 	bl	8001988 <HAL_InitTick>

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08004d80 	.word	0x08004d80
 8003de0:	20000000 	.word	0x20000000
 8003de4:	20000004 	.word	0x20000004

08003de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 030c 	and.w	r3, r3, #12
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x40>
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	f200 80bd 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_RCC_GetSysClockFreq+0x34>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1a:	e0b7      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b61      	ldr	r3, [pc, #388]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e1e:	60bb      	str	r3, [r7, #8]
       break;
 8003e20:	e0b7      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e22:	4b60      	ldr	r3, [pc, #384]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e24:	60bb      	str	r3, [r7, #8]
      break;
 8003e26:	e0b4      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e28:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e32:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d04d      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b58      	ldr	r3, [pc, #352]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	461a      	mov	r2, r3
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	ea02 0800 	and.w	r8, r2, r0
 8003e56:	ea03 0901 	and.w	r9, r3, r1
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	014b      	lsls	r3, r1, #5
 8003e68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e6c:	0142      	lsls	r2, r0, #5
 8003e6e:	4610      	mov	r0, r2
 8003e70:	4619      	mov	r1, r3
 8003e72:	ebb0 0008 	subs.w	r0, r0, r8
 8003e76:	eb61 0109 	sbc.w	r1, r1, r9
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	018b      	lsls	r3, r1, #6
 8003e84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e88:	0182      	lsls	r2, r0, #6
 8003e8a:	1a12      	subs	r2, r2, r0
 8003e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	00d9      	lsls	r1, r3, #3
 8003e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e9e:	00d0      	lsls	r0, r2, #3
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	eb12 0208 	adds.w	r2, r2, r8
 8003ea8:	eb43 0309 	adc.w	r3, r3, r9
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	0299      	lsls	r1, r3, #10
 8003eb6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eba:	0290      	lsls	r0, r2, #10
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	f7fc fdc6 	bl	8000a5c <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e04a      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	ea02 0400 	and.w	r4, r2, r0
 8003ef2:	ea03 0501 	and.w	r5, r3, r1
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	014b      	lsls	r3, r1, #5
 8003f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f08:	0142      	lsls	r2, r0, #5
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	1b00      	subs	r0, r0, r4
 8003f10:	eb61 0105 	sbc.w	r1, r1, r5
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	018b      	lsls	r3, r1, #6
 8003f1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f22:	0182      	lsls	r2, r0, #6
 8003f24:	1a12      	subs	r2, r2, r0
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	00d9      	lsls	r1, r3, #3
 8003f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f38:	00d0      	lsls	r0, r2, #3
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	1912      	adds	r2, r2, r4
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0299      	lsls	r1, r3, #10
 8003f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f52:	0290      	lsls	r0, r2, #10
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f7fc fd7a 	bl	8000a5c <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f8e:	60bb      	str	r3, [r7, #8]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08004d90 	.word	0x08004d90

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08004d90 	.word	0x08004d90

08004010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e03f      	b.n	80040a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd fc12 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2224      	movs	r2, #36	; 0x24
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f829 	bl	80040ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b0:	b09f      	sub	sp, #124	; 0x7c
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	68d9      	ldr	r1, [r3, #12]
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	ea40 0301 	orr.w	r3, r0, r1
 80040cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	431a      	orrs	r2, r3
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040f0:	f021 010c 	bic.w	r1, r1, #12
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040fa:	430b      	orrs	r3, r1
 80040fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	6999      	ldr	r1, [r3, #24]
 800410c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	ea40 0301 	orr.w	r3, r0, r1
 8004114:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	4bc5      	ldr	r3, [pc, #788]	; (8004430 <UART_SetConfig+0x384>)
 800411c:	429a      	cmp	r2, r3
 800411e:	d004      	beq.n	800412a <UART_SetConfig+0x7e>
 8004120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4bc3      	ldr	r3, [pc, #780]	; (8004434 <UART_SetConfig+0x388>)
 8004126:	429a      	cmp	r2, r3
 8004128:	d103      	bne.n	8004132 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800412a:	f7ff ff5d 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 800412e:	6778      	str	r0, [r7, #116]	; 0x74
 8004130:	e002      	b.n	8004138 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004132:	f7ff ff45 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004136:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004140:	f040 80b6 	bne.w	80042b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004146:	461c      	mov	r4, r3
 8004148:	f04f 0500 	mov.w	r5, #0
 800414c:	4622      	mov	r2, r4
 800414e:	462b      	mov	r3, r5
 8004150:	1891      	adds	r1, r2, r2
 8004152:	6439      	str	r1, [r7, #64]	; 0x40
 8004154:	415b      	adcs	r3, r3
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
 8004158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800415c:	1912      	adds	r2, r2, r4
 800415e:	eb45 0303 	adc.w	r3, r5, r3
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	00d9      	lsls	r1, r3, #3
 800416c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004170:	00d0      	lsls	r0, r2, #3
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	1911      	adds	r1, r2, r4
 8004178:	6639      	str	r1, [r7, #96]	; 0x60
 800417a:	416b      	adcs	r3, r5
 800417c:	667b      	str	r3, [r7, #100]	; 0x64
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	461a      	mov	r2, r3
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	1891      	adds	r1, r2, r2
 800418a:	63b9      	str	r1, [r7, #56]	; 0x38
 800418c:	415b      	adcs	r3, r3
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004194:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004198:	f7fc fc60 	bl	8000a5c <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4ba5      	ldr	r3, [pc, #660]	; (8004438 <UART_SetConfig+0x38c>)
 80041a2:	fba3 2302 	umull	r2, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	011e      	lsls	r6, r3, #4
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	461c      	mov	r4, r3
 80041ae:	f04f 0500 	mov.w	r5, #0
 80041b2:	4622      	mov	r2, r4
 80041b4:	462b      	mov	r3, r5
 80041b6:	1891      	adds	r1, r2, r2
 80041b8:	6339      	str	r1, [r7, #48]	; 0x30
 80041ba:	415b      	adcs	r3, r3
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041c2:	1912      	adds	r2, r2, r4
 80041c4:	eb45 0303 	adc.w	r3, r5, r3
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	00d9      	lsls	r1, r3, #3
 80041d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d6:	00d0      	lsls	r0, r2, #3
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	1911      	adds	r1, r2, r4
 80041de:	65b9      	str	r1, [r7, #88]	; 0x58
 80041e0:	416b      	adcs	r3, r5
 80041e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461a      	mov	r2, r3
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	1891      	adds	r1, r2, r2
 80041f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80041f2:	415b      	adcs	r3, r3
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80041fe:	f7fc fc2d 	bl	8000a5c <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4b8c      	ldr	r3, [pc, #560]	; (8004438 <UART_SetConfig+0x38c>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a87      	ldr	r2, [pc, #540]	; (8004438 <UART_SetConfig+0x38c>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004228:	441e      	add	r6, r3
 800422a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422c:	4618      	mov	r0, r3
 800422e:	f04f 0100 	mov.w	r1, #0
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	1894      	adds	r4, r2, r2
 8004238:	623c      	str	r4, [r7, #32]
 800423a:	415b      	adcs	r3, r3
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004242:	1812      	adds	r2, r2, r0
 8004244:	eb41 0303 	adc.w	r3, r1, r3
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	f04f 0500 	mov.w	r5, #0
 8004250:	00dd      	lsls	r5, r3, #3
 8004252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004256:	00d4      	lsls	r4, r2, #3
 8004258:	4622      	mov	r2, r4
 800425a:	462b      	mov	r3, r5
 800425c:	1814      	adds	r4, r2, r0
 800425e:	653c      	str	r4, [r7, #80]	; 0x50
 8004260:	414b      	adcs	r3, r1
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
 8004264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	461a      	mov	r2, r3
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	1891      	adds	r1, r2, r2
 8004270:	61b9      	str	r1, [r7, #24]
 8004272:	415b      	adcs	r3, r3
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800427a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800427e:	f7fc fbed 	bl	8000a5c <__aeabi_uldivmod>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4b6c      	ldr	r3, [pc, #432]	; (8004438 <UART_SetConfig+0x38c>)
 8004288:	fba3 1302 	umull	r1, r3, r3, r2
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	2164      	movs	r1, #100	; 0x64
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	3332      	adds	r3, #50	; 0x32
 800429a:	4a67      	ldr	r2, [pc, #412]	; (8004438 <UART_SetConfig+0x38c>)
 800429c:	fba2 2303 	umull	r2, r3, r2, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	f003 0207 	and.w	r2, r3, #7
 80042a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4432      	add	r2, r6
 80042ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042ae:	e0b9      	b.n	8004424 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b2:	461c      	mov	r4, r3
 80042b4:	f04f 0500 	mov.w	r5, #0
 80042b8:	4622      	mov	r2, r4
 80042ba:	462b      	mov	r3, r5
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	6139      	str	r1, [r7, #16]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042c8:	1912      	adds	r2, r2, r4
 80042ca:	eb45 0303 	adc.w	r3, r5, r3
 80042ce:	f04f 0000 	mov.w	r0, #0
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	00d9      	lsls	r1, r3, #3
 80042d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042dc:	00d0      	lsls	r0, r2, #3
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	eb12 0804 	adds.w	r8, r2, r4
 80042e6:	eb43 0905 	adc.w	r9, r3, r5
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	008b      	lsls	r3, r1, #2
 80042fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004302:	0082      	lsls	r2, r0, #2
 8004304:	4640      	mov	r0, r8
 8004306:	4649      	mov	r1, r9
 8004308:	f7fc fba8 	bl	8000a5c <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b49      	ldr	r3, [pc, #292]	; (8004438 <UART_SetConfig+0x38c>)
 8004312:	fba3 2302 	umull	r2, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	011e      	lsls	r6, r3, #4
 800431a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800431c:	4618      	mov	r0, r3
 800431e:	f04f 0100 	mov.w	r1, #0
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	1894      	adds	r4, r2, r2
 8004328:	60bc      	str	r4, [r7, #8]
 800432a:	415b      	adcs	r3, r3
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004332:	1812      	adds	r2, r2, r0
 8004334:	eb41 0303 	adc.w	r3, r1, r3
 8004338:	f04f 0400 	mov.w	r4, #0
 800433c:	f04f 0500 	mov.w	r5, #0
 8004340:	00dd      	lsls	r5, r3, #3
 8004342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004346:	00d4      	lsls	r4, r2, #3
 8004348:	4622      	mov	r2, r4
 800434a:	462b      	mov	r3, r5
 800434c:	1814      	adds	r4, r2, r0
 800434e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004350:	414b      	adcs	r3, r1
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	f04f 0100 	mov.w	r1, #0
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	008b      	lsls	r3, r1, #2
 8004368:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800436c:	0082      	lsls	r2, r0, #2
 800436e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004372:	f7fc fb73 	bl	8000a5c <__aeabi_uldivmod>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <UART_SetConfig+0x38c>)
 800437c:	fba3 1302 	umull	r1, r3, r3, r2
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	2164      	movs	r1, #100	; 0x64
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	3332      	adds	r3, #50	; 0x32
 800438e:	4a2a      	ldr	r2, [pc, #168]	; (8004438 <UART_SetConfig+0x38c>)
 8004390:	fba2 2303 	umull	r2, r3, r2, r3
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800439a:	441e      	add	r6, r3
 800439c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800439e:	4618      	mov	r0, r3
 80043a0:	f04f 0100 	mov.w	r1, #0
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	1894      	adds	r4, r2, r2
 80043aa:	603c      	str	r4, [r7, #0]
 80043ac:	415b      	adcs	r3, r3
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b4:	1812      	adds	r2, r2, r0
 80043b6:	eb41 0303 	adc.w	r3, r1, r3
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	f04f 0500 	mov.w	r5, #0
 80043c2:	00dd      	lsls	r5, r3, #3
 80043c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80043c8:	00d4      	lsls	r4, r2, #3
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	eb12 0a00 	adds.w	sl, r2, r0
 80043d2:	eb43 0b01 	adc.w	fp, r3, r1
 80043d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4618      	mov	r0, r3
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	008b      	lsls	r3, r1, #2
 80043ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043ee:	0082      	lsls	r2, r0, #2
 80043f0:	4650      	mov	r0, sl
 80043f2:	4659      	mov	r1, fp
 80043f4:	f7fc fb32 	bl	8000a5c <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <UART_SetConfig+0x38c>)
 80043fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2164      	movs	r1, #100	; 0x64
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	3332      	adds	r3, #50	; 0x32
 8004410:	4a09      	ldr	r2, [pc, #36]	; (8004438 <UART_SetConfig+0x38c>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	f003 020f 	and.w	r2, r3, #15
 800441c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4432      	add	r2, r6
 8004422:	609a      	str	r2, [r3, #8]
}
 8004424:	bf00      	nop
 8004426:	377c      	adds	r7, #124	; 0x7c
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40011000 	.word	0x40011000
 8004434:	40011400 	.word	0x40011400
 8004438:	51eb851f 	.word	0x51eb851f

0800443c <__errno>:
 800443c:	4b01      	ldr	r3, [pc, #4]	; (8004444 <__errno+0x8>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	2000000c 	.word	0x2000000c

08004448 <__libc_init_array>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4d0d      	ldr	r5, [pc, #52]	; (8004480 <__libc_init_array+0x38>)
 800444c:	4c0d      	ldr	r4, [pc, #52]	; (8004484 <__libc_init_array+0x3c>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	2600      	movs	r6, #0
 8004454:	42a6      	cmp	r6, r4
 8004456:	d109      	bne.n	800446c <__libc_init_array+0x24>
 8004458:	4d0b      	ldr	r5, [pc, #44]	; (8004488 <__libc_init_array+0x40>)
 800445a:	4c0c      	ldr	r4, [pc, #48]	; (800448c <__libc_init_array+0x44>)
 800445c:	f000 fc4e 	bl	8004cfc <_init>
 8004460:	1b64      	subs	r4, r4, r5
 8004462:	10a4      	asrs	r4, r4, #2
 8004464:	2600      	movs	r6, #0
 8004466:	42a6      	cmp	r6, r4
 8004468:	d105      	bne.n	8004476 <__libc_init_array+0x2e>
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004470:	4798      	blx	r3
 8004472:	3601      	adds	r6, #1
 8004474:	e7ee      	b.n	8004454 <__libc_init_array+0xc>
 8004476:	f855 3b04 	ldr.w	r3, [r5], #4
 800447a:	4798      	blx	r3
 800447c:	3601      	adds	r6, #1
 800447e:	e7f2      	b.n	8004466 <__libc_init_array+0x1e>
 8004480:	08004ddc 	.word	0x08004ddc
 8004484:	08004ddc 	.word	0x08004ddc
 8004488:	08004ddc 	.word	0x08004ddc
 800448c:	08004de0 	.word	0x08004de0

08004490 <memset>:
 8004490:	4402      	add	r2, r0
 8004492:	4603      	mov	r3, r0
 8004494:	4293      	cmp	r3, r2
 8004496:	d100      	bne.n	800449a <memset+0xa>
 8004498:	4770      	bx	lr
 800449a:	f803 1b01 	strb.w	r1, [r3], #1
 800449e:	e7f9      	b.n	8004494 <memset+0x4>

080044a0 <siprintf>:
 80044a0:	b40e      	push	{r1, r2, r3}
 80044a2:	b500      	push	{lr}
 80044a4:	b09c      	sub	sp, #112	; 0x70
 80044a6:	ab1d      	add	r3, sp, #116	; 0x74
 80044a8:	9002      	str	r0, [sp, #8]
 80044aa:	9006      	str	r0, [sp, #24]
 80044ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044b0:	4809      	ldr	r0, [pc, #36]	; (80044d8 <siprintf+0x38>)
 80044b2:	9107      	str	r1, [sp, #28]
 80044b4:	9104      	str	r1, [sp, #16]
 80044b6:	4909      	ldr	r1, [pc, #36]	; (80044dc <siprintf+0x3c>)
 80044b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044bc:	9105      	str	r1, [sp, #20]
 80044be:	6800      	ldr	r0, [r0, #0]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	a902      	add	r1, sp, #8
 80044c4:	f000 f868 	bl	8004598 <_svfiprintf_r>
 80044c8:	9b02      	ldr	r3, [sp, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	b01c      	add	sp, #112	; 0x70
 80044d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044d4:	b003      	add	sp, #12
 80044d6:	4770      	bx	lr
 80044d8:	2000000c 	.word	0x2000000c
 80044dc:	ffff0208 	.word	0xffff0208

080044e0 <__ssputs_r>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	688e      	ldr	r6, [r1, #8]
 80044e6:	429e      	cmp	r6, r3
 80044e8:	4682      	mov	sl, r0
 80044ea:	460c      	mov	r4, r1
 80044ec:	4690      	mov	r8, r2
 80044ee:	461f      	mov	r7, r3
 80044f0:	d838      	bhi.n	8004564 <__ssputs_r+0x84>
 80044f2:	898a      	ldrh	r2, [r1, #12]
 80044f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044f8:	d032      	beq.n	8004560 <__ssputs_r+0x80>
 80044fa:	6825      	ldr	r5, [r4, #0]
 80044fc:	6909      	ldr	r1, [r1, #16]
 80044fe:	eba5 0901 	sub.w	r9, r5, r1
 8004502:	6965      	ldr	r5, [r4, #20]
 8004504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800450c:	3301      	adds	r3, #1
 800450e:	444b      	add	r3, r9
 8004510:	106d      	asrs	r5, r5, #1
 8004512:	429d      	cmp	r5, r3
 8004514:	bf38      	it	cc
 8004516:	461d      	movcc	r5, r3
 8004518:	0553      	lsls	r3, r2, #21
 800451a:	d531      	bpl.n	8004580 <__ssputs_r+0xa0>
 800451c:	4629      	mov	r1, r5
 800451e:	f000 fb47 	bl	8004bb0 <_malloc_r>
 8004522:	4606      	mov	r6, r0
 8004524:	b950      	cbnz	r0, 800453c <__ssputs_r+0x5c>
 8004526:	230c      	movs	r3, #12
 8004528:	f8ca 3000 	str.w	r3, [sl]
 800452c:	89a3      	ldrh	r3, [r4, #12]
 800452e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	6921      	ldr	r1, [r4, #16]
 800453e:	464a      	mov	r2, r9
 8004540:	f000 fabe 	bl	8004ac0 <memcpy>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800454a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	6126      	str	r6, [r4, #16]
 8004552:	6165      	str	r5, [r4, #20]
 8004554:	444e      	add	r6, r9
 8004556:	eba5 0509 	sub.w	r5, r5, r9
 800455a:	6026      	str	r6, [r4, #0]
 800455c:	60a5      	str	r5, [r4, #8]
 800455e:	463e      	mov	r6, r7
 8004560:	42be      	cmp	r6, r7
 8004562:	d900      	bls.n	8004566 <__ssputs_r+0x86>
 8004564:	463e      	mov	r6, r7
 8004566:	4632      	mov	r2, r6
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	4641      	mov	r1, r8
 800456c:	f000 fab6 	bl	8004adc <memmove>
 8004570:	68a3      	ldr	r3, [r4, #8]
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	1b9b      	subs	r3, r3, r6
 8004576:	4432      	add	r2, r6
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	6022      	str	r2, [r4, #0]
 800457c:	2000      	movs	r0, #0
 800457e:	e7db      	b.n	8004538 <__ssputs_r+0x58>
 8004580:	462a      	mov	r2, r5
 8004582:	f000 fb6f 	bl	8004c64 <_realloc_r>
 8004586:	4606      	mov	r6, r0
 8004588:	2800      	cmp	r0, #0
 800458a:	d1e1      	bne.n	8004550 <__ssputs_r+0x70>
 800458c:	6921      	ldr	r1, [r4, #16]
 800458e:	4650      	mov	r0, sl
 8004590:	f000 fabe 	bl	8004b10 <_free_r>
 8004594:	e7c7      	b.n	8004526 <__ssputs_r+0x46>
	...

08004598 <_svfiprintf_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	4698      	mov	r8, r3
 800459e:	898b      	ldrh	r3, [r1, #12]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	b09d      	sub	sp, #116	; 0x74
 80045a4:	4607      	mov	r7, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	d50e      	bpl.n	80045ca <_svfiprintf_r+0x32>
 80045ac:	690b      	ldr	r3, [r1, #16]
 80045ae:	b963      	cbnz	r3, 80045ca <_svfiprintf_r+0x32>
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	f000 fafd 	bl	8004bb0 <_malloc_r>
 80045b6:	6028      	str	r0, [r5, #0]
 80045b8:	6128      	str	r0, [r5, #16]
 80045ba:	b920      	cbnz	r0, 80045c6 <_svfiprintf_r+0x2e>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e0d1      	b.n	800476a <_svfiprintf_r+0x1d2>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	616b      	str	r3, [r5, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	2320      	movs	r3, #32
 80045d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d8:	2330      	movs	r3, #48	; 0x30
 80045da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004784 <_svfiprintf_r+0x1ec>
 80045de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e2:	f04f 0901 	mov.w	r9, #1
 80045e6:	4623      	mov	r3, r4
 80045e8:	469a      	mov	sl, r3
 80045ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ee:	b10a      	cbz	r2, 80045f4 <_svfiprintf_r+0x5c>
 80045f0:	2a25      	cmp	r2, #37	; 0x25
 80045f2:	d1f9      	bne.n	80045e8 <_svfiprintf_r+0x50>
 80045f4:	ebba 0b04 	subs.w	fp, sl, r4
 80045f8:	d00b      	beq.n	8004612 <_svfiprintf_r+0x7a>
 80045fa:	465b      	mov	r3, fp
 80045fc:	4622      	mov	r2, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff6d 	bl	80044e0 <__ssputs_r>
 8004606:	3001      	adds	r0, #1
 8004608:	f000 80aa 	beq.w	8004760 <_svfiprintf_r+0x1c8>
 800460c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800460e:	445a      	add	r2, fp
 8004610:	9209      	str	r2, [sp, #36]	; 0x24
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a2 	beq.w	8004760 <_svfiprintf_r+0x1c8>
 800461c:	2300      	movs	r3, #0
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004626:	f10a 0a01 	add.w	sl, sl, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004632:	931a      	str	r3, [sp, #104]	; 0x68
 8004634:	4654      	mov	r4, sl
 8004636:	2205      	movs	r2, #5
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	4851      	ldr	r0, [pc, #324]	; (8004784 <_svfiprintf_r+0x1ec>)
 800463e:	f7fb fdcf 	bl	80001e0 <memchr>
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	b9d8      	cbnz	r0, 800467e <_svfiprintf_r+0xe6>
 8004646:	06d0      	lsls	r0, r2, #27
 8004648:	bf44      	itt	mi
 800464a:	2320      	movmi	r3, #32
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004650:	0711      	lsls	r1, r2, #28
 8004652:	bf44      	itt	mi
 8004654:	232b      	movmi	r3, #43	; 0x2b
 8004656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xf6>
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	4654      	mov	r4, sl
 8004666:	2000      	movs	r0, #0
 8004668:	f04f 0c0a 	mov.w	ip, #10
 800466c:	4621      	mov	r1, r4
 800466e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004672:	3b30      	subs	r3, #48	; 0x30
 8004674:	2b09      	cmp	r3, #9
 8004676:	d94e      	bls.n	8004716 <_svfiprintf_r+0x17e>
 8004678:	b1b0      	cbz	r0, 80046a8 <_svfiprintf_r+0x110>
 800467a:	9207      	str	r2, [sp, #28]
 800467c:	e014      	b.n	80046a8 <_svfiprintf_r+0x110>
 800467e:	eba0 0308 	sub.w	r3, r0, r8
 8004682:	fa09 f303 	lsl.w	r3, r9, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	46a2      	mov	sl, r4
 800468c:	e7d2      	b.n	8004634 <_svfiprintf_r+0x9c>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbb      	ittet	lt
 800469a:	425b      	neglt	r3, r3
 800469c:	f042 0202 	orrlt.w	r2, r2, #2
 80046a0:	9307      	strge	r3, [sp, #28]
 80046a2:	9307      	strlt	r3, [sp, #28]
 80046a4:	bfb8      	it	lt
 80046a6:	9204      	strlt	r2, [sp, #16]
 80046a8:	7823      	ldrb	r3, [r4, #0]
 80046aa:	2b2e      	cmp	r3, #46	; 0x2e
 80046ac:	d10c      	bne.n	80046c8 <_svfiprintf_r+0x130>
 80046ae:	7863      	ldrb	r3, [r4, #1]
 80046b0:	2b2a      	cmp	r3, #42	; 0x2a
 80046b2:	d135      	bne.n	8004720 <_svfiprintf_r+0x188>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9203      	str	r2, [sp, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfb8      	it	lt
 80046c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c4:	3402      	adds	r4, #2
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004794 <_svfiprintf_r+0x1fc>
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	2203      	movs	r2, #3
 80046d0:	4650      	mov	r0, sl
 80046d2:	f7fb fd85 	bl	80001e0 <memchr>
 80046d6:	b140      	cbz	r0, 80046ea <_svfiprintf_r+0x152>
 80046d8:	2340      	movs	r3, #64	; 0x40
 80046da:	eba0 000a 	sub.w	r0, r0, sl
 80046de:	fa03 f000 	lsl.w	r0, r3, r0
 80046e2:	9b04      	ldr	r3, [sp, #16]
 80046e4:	4303      	orrs	r3, r0
 80046e6:	3401      	adds	r4, #1
 80046e8:	9304      	str	r3, [sp, #16]
 80046ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ee:	4826      	ldr	r0, [pc, #152]	; (8004788 <_svfiprintf_r+0x1f0>)
 80046f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f4:	2206      	movs	r2, #6
 80046f6:	f7fb fd73 	bl	80001e0 <memchr>
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d038      	beq.n	8004770 <_svfiprintf_r+0x1d8>
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <_svfiprintf_r+0x1f4>)
 8004700:	bb1b      	cbnz	r3, 800474a <_svfiprintf_r+0x1b2>
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	3307      	adds	r3, #7
 8004706:	f023 0307 	bic.w	r3, r3, #7
 800470a:	3308      	adds	r3, #8
 800470c:	9303      	str	r3, [sp, #12]
 800470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004710:	4433      	add	r3, r6
 8004712:	9309      	str	r3, [sp, #36]	; 0x24
 8004714:	e767      	b.n	80045e6 <_svfiprintf_r+0x4e>
 8004716:	fb0c 3202 	mla	r2, ip, r2, r3
 800471a:	460c      	mov	r4, r1
 800471c:	2001      	movs	r0, #1
 800471e:	e7a5      	b.n	800466c <_svfiprintf_r+0xd4>
 8004720:	2300      	movs	r3, #0
 8004722:	3401      	adds	r4, #1
 8004724:	9305      	str	r3, [sp, #20]
 8004726:	4619      	mov	r1, r3
 8004728:	f04f 0c0a 	mov.w	ip, #10
 800472c:	4620      	mov	r0, r4
 800472e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004732:	3a30      	subs	r2, #48	; 0x30
 8004734:	2a09      	cmp	r2, #9
 8004736:	d903      	bls.n	8004740 <_svfiprintf_r+0x1a8>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0c5      	beq.n	80046c8 <_svfiprintf_r+0x130>
 800473c:	9105      	str	r1, [sp, #20]
 800473e:	e7c3      	b.n	80046c8 <_svfiprintf_r+0x130>
 8004740:	fb0c 2101 	mla	r1, ip, r1, r2
 8004744:	4604      	mov	r4, r0
 8004746:	2301      	movs	r3, #1
 8004748:	e7f0      	b.n	800472c <_svfiprintf_r+0x194>
 800474a:	ab03      	add	r3, sp, #12
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462a      	mov	r2, r5
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <_svfiprintf_r+0x1f8>)
 8004752:	a904      	add	r1, sp, #16
 8004754:	4638      	mov	r0, r7
 8004756:	f3af 8000 	nop.w
 800475a:	1c42      	adds	r2, r0, #1
 800475c:	4606      	mov	r6, r0
 800475e:	d1d6      	bne.n	800470e <_svfiprintf_r+0x176>
 8004760:	89ab      	ldrh	r3, [r5, #12]
 8004762:	065b      	lsls	r3, r3, #25
 8004764:	f53f af2c 	bmi.w	80045c0 <_svfiprintf_r+0x28>
 8004768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800476a:	b01d      	add	sp, #116	; 0x74
 800476c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004770:	ab03      	add	r3, sp, #12
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	462a      	mov	r2, r5
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <_svfiprintf_r+0x1f8>)
 8004778:	a904      	add	r1, sp, #16
 800477a:	4638      	mov	r0, r7
 800477c:	f000 f87a 	bl	8004874 <_printf_i>
 8004780:	e7eb      	b.n	800475a <_svfiprintf_r+0x1c2>
 8004782:	bf00      	nop
 8004784:	08004da0 	.word	0x08004da0
 8004788:	08004daa 	.word	0x08004daa
 800478c:	00000000 	.word	0x00000000
 8004790:	080044e1 	.word	0x080044e1
 8004794:	08004da6 	.word	0x08004da6

08004798 <_printf_common>:
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	4616      	mov	r6, r2
 800479e:	4699      	mov	r9, r3
 80047a0:	688a      	ldr	r2, [r1, #8]
 80047a2:	690b      	ldr	r3, [r1, #16]
 80047a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a8:	4293      	cmp	r3, r2
 80047aa:	bfb8      	it	lt
 80047ac:	4613      	movlt	r3, r2
 80047ae:	6033      	str	r3, [r6, #0]
 80047b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b4:	4607      	mov	r7, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	b10a      	cbz	r2, 80047be <_printf_common+0x26>
 80047ba:	3301      	adds	r3, #1
 80047bc:	6033      	str	r3, [r6, #0]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	0699      	lsls	r1, r3, #26
 80047c2:	bf42      	ittt	mi
 80047c4:	6833      	ldrmi	r3, [r6, #0]
 80047c6:	3302      	addmi	r3, #2
 80047c8:	6033      	strmi	r3, [r6, #0]
 80047ca:	6825      	ldr	r5, [r4, #0]
 80047cc:	f015 0506 	ands.w	r5, r5, #6
 80047d0:	d106      	bne.n	80047e0 <_printf_common+0x48>
 80047d2:	f104 0a19 	add.w	sl, r4, #25
 80047d6:	68e3      	ldr	r3, [r4, #12]
 80047d8:	6832      	ldr	r2, [r6, #0]
 80047da:	1a9b      	subs	r3, r3, r2
 80047dc:	42ab      	cmp	r3, r5
 80047de:	dc26      	bgt.n	800482e <_printf_common+0x96>
 80047e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e4:	1e13      	subs	r3, r2, #0
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	bf18      	it	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	0692      	lsls	r2, r2, #26
 80047ee:	d42b      	bmi.n	8004848 <_printf_common+0xb0>
 80047f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f4:	4649      	mov	r1, r9
 80047f6:	4638      	mov	r0, r7
 80047f8:	47c0      	blx	r8
 80047fa:	3001      	adds	r0, #1
 80047fc:	d01e      	beq.n	800483c <_printf_common+0xa4>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	68e5      	ldr	r5, [r4, #12]
 8004802:	6832      	ldr	r2, [r6, #0]
 8004804:	f003 0306 	and.w	r3, r3, #6
 8004808:	2b04      	cmp	r3, #4
 800480a:	bf08      	it	eq
 800480c:	1aad      	subeq	r5, r5, r2
 800480e:	68a3      	ldr	r3, [r4, #8]
 8004810:	6922      	ldr	r2, [r4, #16]
 8004812:	bf0c      	ite	eq
 8004814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004818:	2500      	movne	r5, #0
 800481a:	4293      	cmp	r3, r2
 800481c:	bfc4      	itt	gt
 800481e:	1a9b      	subgt	r3, r3, r2
 8004820:	18ed      	addgt	r5, r5, r3
 8004822:	2600      	movs	r6, #0
 8004824:	341a      	adds	r4, #26
 8004826:	42b5      	cmp	r5, r6
 8004828:	d11a      	bne.n	8004860 <_printf_common+0xc8>
 800482a:	2000      	movs	r0, #0
 800482c:	e008      	b.n	8004840 <_printf_common+0xa8>
 800482e:	2301      	movs	r3, #1
 8004830:	4652      	mov	r2, sl
 8004832:	4649      	mov	r1, r9
 8004834:	4638      	mov	r0, r7
 8004836:	47c0      	blx	r8
 8004838:	3001      	adds	r0, #1
 800483a:	d103      	bne.n	8004844 <_printf_common+0xac>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	3501      	adds	r5, #1
 8004846:	e7c6      	b.n	80047d6 <_printf_common+0x3e>
 8004848:	18e1      	adds	r1, r4, r3
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	2030      	movs	r0, #48	; 0x30
 800484e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004852:	4422      	add	r2, r4
 8004854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800485c:	3302      	adds	r3, #2
 800485e:	e7c7      	b.n	80047f0 <_printf_common+0x58>
 8004860:	2301      	movs	r3, #1
 8004862:	4622      	mov	r2, r4
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d0e6      	beq.n	800483c <_printf_common+0xa4>
 800486e:	3601      	adds	r6, #1
 8004870:	e7d9      	b.n	8004826 <_printf_common+0x8e>
	...

08004874 <_printf_i>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	460c      	mov	r4, r1
 800487a:	4691      	mov	r9, r2
 800487c:	7e27      	ldrb	r7, [r4, #24]
 800487e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004880:	2f78      	cmp	r7, #120	; 0x78
 8004882:	4680      	mov	r8, r0
 8004884:	469a      	mov	sl, r3
 8004886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488a:	d807      	bhi.n	800489c <_printf_i+0x28>
 800488c:	2f62      	cmp	r7, #98	; 0x62
 800488e:	d80a      	bhi.n	80048a6 <_printf_i+0x32>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f000 80d8 	beq.w	8004a46 <_printf_i+0x1d2>
 8004896:	2f58      	cmp	r7, #88	; 0x58
 8004898:	f000 80a3 	beq.w	80049e2 <_printf_i+0x16e>
 800489c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a4:	e03a      	b.n	800491c <_printf_i+0xa8>
 80048a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048aa:	2b15      	cmp	r3, #21
 80048ac:	d8f6      	bhi.n	800489c <_printf_i+0x28>
 80048ae:	a001      	add	r0, pc, #4	; (adr r0, 80048b4 <_printf_i+0x40>)
 80048b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	08004921 	.word	0x08004921
 80048bc:	0800489d 	.word	0x0800489d
 80048c0:	0800489d 	.word	0x0800489d
 80048c4:	0800489d 	.word	0x0800489d
 80048c8:	0800489d 	.word	0x0800489d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800489d 	.word	0x0800489d
 80048d4:	0800489d 	.word	0x0800489d
 80048d8:	0800489d 	.word	0x0800489d
 80048dc:	0800489d 	.word	0x0800489d
 80048e0:	08004a2d 	.word	0x08004a2d
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004a0f 	.word	0x08004a0f
 80048ec:	0800489d 	.word	0x0800489d
 80048f0:	0800489d 	.word	0x0800489d
 80048f4:	08004a4f 	.word	0x08004a4f
 80048f8:	0800489d 	.word	0x0800489d
 80048fc:	08004951 	.word	0x08004951
 8004900:	0800489d 	.word	0x0800489d
 8004904:	0800489d 	.word	0x0800489d
 8004908:	08004a17 	.word	0x08004a17
 800490c:	680b      	ldr	r3, [r1, #0]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	600a      	str	r2, [r1, #0]
 8004914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800491c:	2301      	movs	r3, #1
 800491e:	e0a3      	b.n	8004a68 <_printf_i+0x1f4>
 8004920:	6825      	ldr	r5, [r4, #0]
 8004922:	6808      	ldr	r0, [r1, #0]
 8004924:	062e      	lsls	r6, r5, #24
 8004926:	f100 0304 	add.w	r3, r0, #4
 800492a:	d50a      	bpl.n	8004942 <_printf_i+0xce>
 800492c:	6805      	ldr	r5, [r0, #0]
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	2d00      	cmp	r5, #0
 8004932:	da03      	bge.n	800493c <_printf_i+0xc8>
 8004934:	232d      	movs	r3, #45	; 0x2d
 8004936:	426d      	negs	r5, r5
 8004938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493c:	485e      	ldr	r0, [pc, #376]	; (8004ab8 <_printf_i+0x244>)
 800493e:	230a      	movs	r3, #10
 8004940:	e019      	b.n	8004976 <_printf_i+0x102>
 8004942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004946:	6805      	ldr	r5, [r0, #0]
 8004948:	600b      	str	r3, [r1, #0]
 800494a:	bf18      	it	ne
 800494c:	b22d      	sxthne	r5, r5
 800494e:	e7ef      	b.n	8004930 <_printf_i+0xbc>
 8004950:	680b      	ldr	r3, [r1, #0]
 8004952:	6825      	ldr	r5, [r4, #0]
 8004954:	1d18      	adds	r0, r3, #4
 8004956:	6008      	str	r0, [r1, #0]
 8004958:	0628      	lsls	r0, r5, #24
 800495a:	d501      	bpl.n	8004960 <_printf_i+0xec>
 800495c:	681d      	ldr	r5, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0xf2>
 8004960:	0669      	lsls	r1, r5, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0xe8>
 8004964:	881d      	ldrh	r5, [r3, #0]
 8004966:	4854      	ldr	r0, [pc, #336]	; (8004ab8 <_printf_i+0x244>)
 8004968:	2f6f      	cmp	r7, #111	; 0x6f
 800496a:	bf0c      	ite	eq
 800496c:	2308      	moveq	r3, #8
 800496e:	230a      	movne	r3, #10
 8004970:	2100      	movs	r1, #0
 8004972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004976:	6866      	ldr	r6, [r4, #4]
 8004978:	60a6      	str	r6, [r4, #8]
 800497a:	2e00      	cmp	r6, #0
 800497c:	bfa2      	ittt	ge
 800497e:	6821      	ldrge	r1, [r4, #0]
 8004980:	f021 0104 	bicge.w	r1, r1, #4
 8004984:	6021      	strge	r1, [r4, #0]
 8004986:	b90d      	cbnz	r5, 800498c <_printf_i+0x118>
 8004988:	2e00      	cmp	r6, #0
 800498a:	d04d      	beq.n	8004a28 <_printf_i+0x1b4>
 800498c:	4616      	mov	r6, r2
 800498e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004992:	fb03 5711 	mls	r7, r3, r1, r5
 8004996:	5dc7      	ldrb	r7, [r0, r7]
 8004998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800499c:	462f      	mov	r7, r5
 800499e:	42bb      	cmp	r3, r7
 80049a0:	460d      	mov	r5, r1
 80049a2:	d9f4      	bls.n	800498e <_printf_i+0x11a>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d10b      	bne.n	80049c0 <_printf_i+0x14c>
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	07df      	lsls	r7, r3, #31
 80049ac:	d508      	bpl.n	80049c0 <_printf_i+0x14c>
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	6861      	ldr	r1, [r4, #4]
 80049b2:	4299      	cmp	r1, r3
 80049b4:	bfde      	ittt	le
 80049b6:	2330      	movle	r3, #48	; 0x30
 80049b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049c0:	1b92      	subs	r2, r2, r6
 80049c2:	6122      	str	r2, [r4, #16]
 80049c4:	f8cd a000 	str.w	sl, [sp]
 80049c8:	464b      	mov	r3, r9
 80049ca:	aa03      	add	r2, sp, #12
 80049cc:	4621      	mov	r1, r4
 80049ce:	4640      	mov	r0, r8
 80049d0:	f7ff fee2 	bl	8004798 <_printf_common>
 80049d4:	3001      	adds	r0, #1
 80049d6:	d14c      	bne.n	8004a72 <_printf_i+0x1fe>
 80049d8:	f04f 30ff 	mov.w	r0, #4294967295
 80049dc:	b004      	add	sp, #16
 80049de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e2:	4835      	ldr	r0, [pc, #212]	; (8004ab8 <_printf_i+0x244>)
 80049e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	680e      	ldr	r6, [r1, #0]
 80049ec:	061f      	lsls	r7, r3, #24
 80049ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80049f2:	600e      	str	r6, [r1, #0]
 80049f4:	d514      	bpl.n	8004a20 <_printf_i+0x1ac>
 80049f6:	07d9      	lsls	r1, r3, #31
 80049f8:	bf44      	itt	mi
 80049fa:	f043 0320 	orrmi.w	r3, r3, #32
 80049fe:	6023      	strmi	r3, [r4, #0]
 8004a00:	b91d      	cbnz	r5, 8004a0a <_printf_i+0x196>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f023 0320 	bic.w	r3, r3, #32
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	e7b0      	b.n	8004970 <_printf_i+0xfc>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f043 0320 	orr.w	r3, r3, #32
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	2378      	movs	r3, #120	; 0x78
 8004a18:	4828      	ldr	r0, [pc, #160]	; (8004abc <_printf_i+0x248>)
 8004a1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a1e:	e7e3      	b.n	80049e8 <_printf_i+0x174>
 8004a20:	065e      	lsls	r6, r3, #25
 8004a22:	bf48      	it	mi
 8004a24:	b2ad      	uxthmi	r5, r5
 8004a26:	e7e6      	b.n	80049f6 <_printf_i+0x182>
 8004a28:	4616      	mov	r6, r2
 8004a2a:	e7bb      	b.n	80049a4 <_printf_i+0x130>
 8004a2c:	680b      	ldr	r3, [r1, #0]
 8004a2e:	6826      	ldr	r6, [r4, #0]
 8004a30:	6960      	ldr	r0, [r4, #20]
 8004a32:	1d1d      	adds	r5, r3, #4
 8004a34:	600d      	str	r5, [r1, #0]
 8004a36:	0635      	lsls	r5, r6, #24
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	d501      	bpl.n	8004a40 <_printf_i+0x1cc>
 8004a3c:	6018      	str	r0, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <_printf_i+0x1d2>
 8004a40:	0671      	lsls	r1, r6, #25
 8004a42:	d5fb      	bpl.n	8004a3c <_printf_i+0x1c8>
 8004a44:	8018      	strh	r0, [r3, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	6123      	str	r3, [r4, #16]
 8004a4a:	4616      	mov	r6, r2
 8004a4c:	e7ba      	b.n	80049c4 <_printf_i+0x150>
 8004a4e:	680b      	ldr	r3, [r1, #0]
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	600a      	str	r2, [r1, #0]
 8004a54:	681e      	ldr	r6, [r3, #0]
 8004a56:	6862      	ldr	r2, [r4, #4]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7fb fbc0 	bl	80001e0 <memchr>
 8004a60:	b108      	cbz	r0, 8004a66 <_printf_i+0x1f2>
 8004a62:	1b80      	subs	r0, r0, r6
 8004a64:	6060      	str	r0, [r4, #4]
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	6123      	str	r3, [r4, #16]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a70:	e7a8      	b.n	80049c4 <_printf_i+0x150>
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	4632      	mov	r2, r6
 8004a76:	4649      	mov	r1, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	47d0      	blx	sl
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d0ab      	beq.n	80049d8 <_printf_i+0x164>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	079b      	lsls	r3, r3, #30
 8004a84:	d413      	bmi.n	8004aae <_printf_i+0x23a>
 8004a86:	68e0      	ldr	r0, [r4, #12]
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	bfb8      	it	lt
 8004a8e:	4618      	movlt	r0, r3
 8004a90:	e7a4      	b.n	80049dc <_printf_i+0x168>
 8004a92:	2301      	movs	r3, #1
 8004a94:	4632      	mov	r2, r6
 8004a96:	4649      	mov	r1, r9
 8004a98:	4640      	mov	r0, r8
 8004a9a:	47d0      	blx	sl
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d09b      	beq.n	80049d8 <_printf_i+0x164>
 8004aa0:	3501      	adds	r5, #1
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	9903      	ldr	r1, [sp, #12]
 8004aa6:	1a5b      	subs	r3, r3, r1
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dcf2      	bgt.n	8004a92 <_printf_i+0x21e>
 8004aac:	e7eb      	b.n	8004a86 <_printf_i+0x212>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	f104 0619 	add.w	r6, r4, #25
 8004ab4:	e7f5      	b.n	8004aa2 <_printf_i+0x22e>
 8004ab6:	bf00      	nop
 8004ab8:	08004db1 	.word	0x08004db1
 8004abc:	08004dc2 	.word	0x08004dc2

08004ac0 <memcpy>:
 8004ac0:	440a      	add	r2, r1
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ac8:	d100      	bne.n	8004acc <memcpy+0xc>
 8004aca:	4770      	bx	lr
 8004acc:	b510      	push	{r4, lr}
 8004ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	d1f9      	bne.n	8004ace <memcpy+0xe>
 8004ada:	bd10      	pop	{r4, pc}

08004adc <memmove>:
 8004adc:	4288      	cmp	r0, r1
 8004ade:	b510      	push	{r4, lr}
 8004ae0:	eb01 0402 	add.w	r4, r1, r2
 8004ae4:	d902      	bls.n	8004aec <memmove+0x10>
 8004ae6:	4284      	cmp	r4, r0
 8004ae8:	4623      	mov	r3, r4
 8004aea:	d807      	bhi.n	8004afc <memmove+0x20>
 8004aec:	1e43      	subs	r3, r0, #1
 8004aee:	42a1      	cmp	r1, r4
 8004af0:	d008      	beq.n	8004b04 <memmove+0x28>
 8004af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004afa:	e7f8      	b.n	8004aee <memmove+0x12>
 8004afc:	4402      	add	r2, r0
 8004afe:	4601      	mov	r1, r0
 8004b00:	428a      	cmp	r2, r1
 8004b02:	d100      	bne.n	8004b06 <memmove+0x2a>
 8004b04:	bd10      	pop	{r4, pc}
 8004b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b0e:	e7f7      	b.n	8004b00 <memmove+0x24>

08004b10 <_free_r>:
 8004b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b12:	2900      	cmp	r1, #0
 8004b14:	d048      	beq.n	8004ba8 <_free_r+0x98>
 8004b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b22:	bfb8      	it	lt
 8004b24:	18e4      	addlt	r4, r4, r3
 8004b26:	f000 f8d3 	bl	8004cd0 <__malloc_lock>
 8004b2a:	4a20      	ldr	r2, [pc, #128]	; (8004bac <_free_r+0x9c>)
 8004b2c:	9801      	ldr	r0, [sp, #4]
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	4615      	mov	r5, r2
 8004b32:	b933      	cbnz	r3, 8004b42 <_free_r+0x32>
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	6014      	str	r4, [r2, #0]
 8004b38:	b003      	add	sp, #12
 8004b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b3e:	f000 b8cd 	b.w	8004cdc <__malloc_unlock>
 8004b42:	42a3      	cmp	r3, r4
 8004b44:	d90b      	bls.n	8004b5e <_free_r+0x4e>
 8004b46:	6821      	ldr	r1, [r4, #0]
 8004b48:	1862      	adds	r2, r4, r1
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	bf04      	itt	eq
 8004b4e:	681a      	ldreq	r2, [r3, #0]
 8004b50:	685b      	ldreq	r3, [r3, #4]
 8004b52:	6063      	str	r3, [r4, #4]
 8004b54:	bf04      	itt	eq
 8004b56:	1852      	addeq	r2, r2, r1
 8004b58:	6022      	streq	r2, [r4, #0]
 8004b5a:	602c      	str	r4, [r5, #0]
 8004b5c:	e7ec      	b.n	8004b38 <_free_r+0x28>
 8004b5e:	461a      	mov	r2, r3
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	b10b      	cbz	r3, 8004b68 <_free_r+0x58>
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d9fa      	bls.n	8004b5e <_free_r+0x4e>
 8004b68:	6811      	ldr	r1, [r2, #0]
 8004b6a:	1855      	adds	r5, r2, r1
 8004b6c:	42a5      	cmp	r5, r4
 8004b6e:	d10b      	bne.n	8004b88 <_free_r+0x78>
 8004b70:	6824      	ldr	r4, [r4, #0]
 8004b72:	4421      	add	r1, r4
 8004b74:	1854      	adds	r4, r2, r1
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	6011      	str	r1, [r2, #0]
 8004b7a:	d1dd      	bne.n	8004b38 <_free_r+0x28>
 8004b7c:	681c      	ldr	r4, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	6053      	str	r3, [r2, #4]
 8004b82:	4421      	add	r1, r4
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	e7d7      	b.n	8004b38 <_free_r+0x28>
 8004b88:	d902      	bls.n	8004b90 <_free_r+0x80>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	6003      	str	r3, [r0, #0]
 8004b8e:	e7d3      	b.n	8004b38 <_free_r+0x28>
 8004b90:	6825      	ldr	r5, [r4, #0]
 8004b92:	1961      	adds	r1, r4, r5
 8004b94:	428b      	cmp	r3, r1
 8004b96:	bf04      	itt	eq
 8004b98:	6819      	ldreq	r1, [r3, #0]
 8004b9a:	685b      	ldreq	r3, [r3, #4]
 8004b9c:	6063      	str	r3, [r4, #4]
 8004b9e:	bf04      	itt	eq
 8004ba0:	1949      	addeq	r1, r1, r5
 8004ba2:	6021      	streq	r1, [r4, #0]
 8004ba4:	6054      	str	r4, [r2, #4]
 8004ba6:	e7c7      	b.n	8004b38 <_free_r+0x28>
 8004ba8:	b003      	add	sp, #12
 8004baa:	bd30      	pop	{r4, r5, pc}
 8004bac:	20000094 	.word	0x20000094

08004bb0 <_malloc_r>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	1ccd      	adds	r5, r1, #3
 8004bb4:	f025 0503 	bic.w	r5, r5, #3
 8004bb8:	3508      	adds	r5, #8
 8004bba:	2d0c      	cmp	r5, #12
 8004bbc:	bf38      	it	cc
 8004bbe:	250c      	movcc	r5, #12
 8004bc0:	2d00      	cmp	r5, #0
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	db01      	blt.n	8004bca <_malloc_r+0x1a>
 8004bc6:	42a9      	cmp	r1, r5
 8004bc8:	d903      	bls.n	8004bd2 <_malloc_r+0x22>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	2000      	movs	r0, #0
 8004bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd2:	f000 f87d 	bl	8004cd0 <__malloc_lock>
 8004bd6:	4921      	ldr	r1, [pc, #132]	; (8004c5c <_malloc_r+0xac>)
 8004bd8:	680a      	ldr	r2, [r1, #0]
 8004bda:	4614      	mov	r4, r2
 8004bdc:	b99c      	cbnz	r4, 8004c06 <_malloc_r+0x56>
 8004bde:	4f20      	ldr	r7, [pc, #128]	; (8004c60 <_malloc_r+0xb0>)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	b923      	cbnz	r3, 8004bee <_malloc_r+0x3e>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4630      	mov	r0, r6
 8004be8:	f000 f862 	bl	8004cb0 <_sbrk_r>
 8004bec:	6038      	str	r0, [r7, #0]
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f85d 	bl	8004cb0 <_sbrk_r>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d123      	bne.n	8004c42 <_malloc_r+0x92>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	6033      	str	r3, [r6, #0]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f000 f86c 	bl	8004cdc <__malloc_unlock>
 8004c04:	e7e3      	b.n	8004bce <_malloc_r+0x1e>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	1b5b      	subs	r3, r3, r5
 8004c0a:	d417      	bmi.n	8004c3c <_malloc_r+0x8c>
 8004c0c:	2b0b      	cmp	r3, #11
 8004c0e:	d903      	bls.n	8004c18 <_malloc_r+0x68>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	441c      	add	r4, r3
 8004c14:	6025      	str	r5, [r4, #0]
 8004c16:	e004      	b.n	8004c22 <_malloc_r+0x72>
 8004c18:	6863      	ldr	r3, [r4, #4]
 8004c1a:	42a2      	cmp	r2, r4
 8004c1c:	bf0c      	ite	eq
 8004c1e:	600b      	streq	r3, [r1, #0]
 8004c20:	6053      	strne	r3, [r2, #4]
 8004c22:	4630      	mov	r0, r6
 8004c24:	f000 f85a 	bl	8004cdc <__malloc_unlock>
 8004c28:	f104 000b 	add.w	r0, r4, #11
 8004c2c:	1d23      	adds	r3, r4, #4
 8004c2e:	f020 0007 	bic.w	r0, r0, #7
 8004c32:	1ac2      	subs	r2, r0, r3
 8004c34:	d0cc      	beq.n	8004bd0 <_malloc_r+0x20>
 8004c36:	1a1b      	subs	r3, r3, r0
 8004c38:	50a3      	str	r3, [r4, r2]
 8004c3a:	e7c9      	b.n	8004bd0 <_malloc_r+0x20>
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	6864      	ldr	r4, [r4, #4]
 8004c40:	e7cc      	b.n	8004bdc <_malloc_r+0x2c>
 8004c42:	1cc4      	adds	r4, r0, #3
 8004c44:	f024 0403 	bic.w	r4, r4, #3
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d0e3      	beq.n	8004c14 <_malloc_r+0x64>
 8004c4c:	1a21      	subs	r1, r4, r0
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f000 f82e 	bl	8004cb0 <_sbrk_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d1dd      	bne.n	8004c14 <_malloc_r+0x64>
 8004c58:	e7cf      	b.n	8004bfa <_malloc_r+0x4a>
 8004c5a:	bf00      	nop
 8004c5c:	20000094 	.word	0x20000094
 8004c60:	20000098 	.word	0x20000098

08004c64 <_realloc_r>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	4607      	mov	r7, r0
 8004c68:	4614      	mov	r4, r2
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	b921      	cbnz	r1, 8004c78 <_realloc_r+0x14>
 8004c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c72:	4611      	mov	r1, r2
 8004c74:	f7ff bf9c 	b.w	8004bb0 <_malloc_r>
 8004c78:	b922      	cbnz	r2, 8004c84 <_realloc_r+0x20>
 8004c7a:	f7ff ff49 	bl	8004b10 <_free_r>
 8004c7e:	4625      	mov	r5, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c84:	f000 f830 	bl	8004ce8 <_malloc_usable_size_r>
 8004c88:	42a0      	cmp	r0, r4
 8004c8a:	d20f      	bcs.n	8004cac <_realloc_r+0x48>
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	4638      	mov	r0, r7
 8004c90:	f7ff ff8e 	bl	8004bb0 <_malloc_r>
 8004c94:	4605      	mov	r5, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0f2      	beq.n	8004c80 <_realloc_r+0x1c>
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	f7ff ff0f 	bl	8004ac0 <memcpy>
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	f7ff ff33 	bl	8004b10 <_free_r>
 8004caa:	e7e9      	b.n	8004c80 <_realloc_r+0x1c>
 8004cac:	4635      	mov	r5, r6
 8004cae:	e7e7      	b.n	8004c80 <_realloc_r+0x1c>

08004cb0 <_sbrk_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d06      	ldr	r5, [pc, #24]	; (8004ccc <_sbrk_r+0x1c>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	602b      	str	r3, [r5, #0]
 8004cbc:	f7fc fd5a 	bl	8001774 <_sbrk>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_sbrk_r+0x1a>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_sbrk_r+0x1a>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	200001e0 	.word	0x200001e0

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f000 b811 	b.w	8004cf8 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	200001e8 	.word	0x200001e8

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f000 b80c 	b.w	8004cfa <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	200001e8 	.word	0x200001e8

08004ce8 <_malloc_usable_size_r>:
 8004ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cec:	1f18      	subs	r0, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfbc      	itt	lt
 8004cf2:	580b      	ldrlt	r3, [r1, r0]
 8004cf4:	18c0      	addlt	r0, r0, r3
 8004cf6:	4770      	bx	lr

08004cf8 <__retarget_lock_acquire_recursive>:
 8004cf8:	4770      	bx	lr

08004cfa <__retarget_lock_release_recursive>:
 8004cfa:	4770      	bx	lr

08004cfc <_init>:
 8004cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfe:	bf00      	nop
 8004d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d02:	bc08      	pop	{r3}
 8004d04:	469e      	mov	lr, r3
 8004d06:	4770      	bx	lr

08004d08 <_fini>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	bf00      	nop
 8004d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0e:	bc08      	pop	{r3}
 8004d10:	469e      	mov	lr, r3
 8004d12:	4770      	bx	lr
