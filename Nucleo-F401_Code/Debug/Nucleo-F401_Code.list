
Nucleo-F401_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002930  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b3c  08002b3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b44  08002b44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  08002b5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002b5c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c37  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196d  00000000  00000000  00028c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0002a5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  0002ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d5e  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088d0  00000000  00000000  0004114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084eb9  00000000  00000000  00049a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  000ce92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002ab0 	.word	0x08002ab0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08002ab0 	.word	0x08002ab0

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2uiz>:
 80007a4:	004a      	lsls	r2, r1, #1
 80007a6:	d211      	bcs.n	80007cc <__aeabi_d2uiz+0x28>
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d211      	bcs.n	80007d2 <__aeabi_d2uiz+0x2e>
 80007ae:	d50d      	bpl.n	80007cc <__aeabi_d2uiz+0x28>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d40e      	bmi.n	80007d8 <__aeabi_d2uiz+0x34>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d102      	bne.n	80007de <__aeabi_d2uiz+0x3a>
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	4770      	bx	lr
 80007de:	f04f 0000 	mov.w	r0, #0
 80007e2:	4770      	bx	lr

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96e 	b.w	8000ad8 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468c      	mov	ip, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8083 	bne.w	800092a <__udivmoddi4+0x116>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d947      	bls.n	80008ba <__udivmoddi4+0xa6>
 800082a:	fab2 f282 	clz	r2, r2
 800082e:	b142      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 8000830:	f1c2 0020 	rsb	r0, r2, #32
 8000834:	fa24 f000 	lsr.w	r0, r4, r0
 8000838:	4091      	lsls	r1, r2
 800083a:	4097      	lsls	r7, r2
 800083c:	ea40 0c01 	orr.w	ip, r0, r1
 8000840:	4094      	lsls	r4, r2
 8000842:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	fbbc f6f8 	udiv	r6, ip, r8
 800084c:	fa1f fe87 	uxth.w	lr, r7
 8000850:	fb08 c116 	mls	r1, r8, r6, ip
 8000854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000858:	fb06 f10e 	mul.w	r1, r6, lr
 800085c:	4299      	cmp	r1, r3
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x60>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295
 8000866:	f080 8119 	bcs.w	8000a9c <__udivmoddi4+0x288>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 8116 	bls.w	8000a9c <__udivmoddi4+0x288>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 fe0e 	mul.w	lr, r0, lr
 8000888:	45a6      	cmp	lr, r4
 800088a:	d909      	bls.n	80008a0 <__udivmoddi4+0x8c>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000892:	f080 8105 	bcs.w	8000aa0 <__udivmoddi4+0x28c>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f240 8102 	bls.w	8000aa0 <__udivmoddi4+0x28c>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a4:	eba4 040e 	sub.w	r4, r4, lr
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa0>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xaa>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d150      	bne.n	8000968 <__udivmoddi4+0x154>
 80008c6:	1bcb      	subs	r3, r1, r7
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f f887 	uxth.w	r8, r7
 80008d0:	2601      	movs	r6, #1
 80008d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008d6:	0c21      	lsrs	r1, r4, #16
 80008d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e0:	fb08 f30c 	mul.w	r3, r8, ip
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0xe4>
 80008e8:	1879      	adds	r1, r7, r1
 80008ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0xe2>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	f200 80e9 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 80008f6:	4684      	mov	ip, r0
 80008f8:	1ac9      	subs	r1, r1, r3
 80008fa:	b2a3      	uxth	r3, r4
 80008fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000900:	fb0e 1110 	mls	r1, lr, r0, r1
 8000904:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000908:	fb08 f800 	mul.w	r8, r8, r0
 800090c:	45a0      	cmp	r8, r4
 800090e:	d907      	bls.n	8000920 <__udivmoddi4+0x10c>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f100 33ff 	add.w	r3, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x10a>
 8000918:	45a0      	cmp	r8, r4
 800091a:	f200 80d9 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 800091e:	4618      	mov	r0, r3
 8000920:	eba4 0408 	sub.w	r4, r4, r8
 8000924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000928:	e7bf      	b.n	80008aa <__udivmoddi4+0x96>
 800092a:	428b      	cmp	r3, r1
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x12e>
 800092e:	2d00      	cmp	r5, #0
 8000930:	f000 80b1 	beq.w	8000a96 <__udivmoddi4+0x282>
 8000934:	2600      	movs	r6, #0
 8000936:	e9c5 0100 	strd	r0, r1, [r5]
 800093a:	4630      	mov	r0, r6
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f683 	clz	r6, r3
 8000946:	2e00      	cmp	r6, #0
 8000948:	d14a      	bne.n	80009e0 <__udivmoddi4+0x1cc>
 800094a:	428b      	cmp	r3, r1
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0x140>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 80b8 	bhi.w	8000ac4 <__udivmoddi4+0x2b0>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb61 0103 	sbc.w	r1, r1, r3
 800095a:	2001      	movs	r0, #1
 800095c:	468c      	mov	ip, r1
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0a8      	beq.n	80008b4 <__udivmoddi4+0xa0>
 8000962:	e9c5 4c00 	strd	r4, ip, [r5]
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000968:	f1c2 0320 	rsb	r3, r2, #32
 800096c:	fa20 f603 	lsr.w	r6, r0, r3
 8000970:	4097      	lsls	r7, r2
 8000972:	fa01 f002 	lsl.w	r0, r1, r2
 8000976:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800097a:	40d9      	lsrs	r1, r3
 800097c:	4330      	orrs	r0, r6
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	fbb1 f6fe 	udiv	r6, r1, lr
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	fb0e 1116 	mls	r1, lr, r6, r1
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f108 	mul.w	r1, r6, r8
 8000994:	4299      	cmp	r1, r3
 8000996:	fa04 f402 	lsl.w	r4, r4, r2
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x19c>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f106 3cff 	add.w	ip, r6, #4294967295
 80009a2:	f080 808d 	bcs.w	8000ac0 <__udivmoddi4+0x2ac>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 808a 	bls.w	8000ac0 <__udivmoddi4+0x2ac>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	443b      	add	r3, r7
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b281      	uxth	r1, r0
 80009b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb00 f308 	mul.w	r3, r0, r8
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x1c4>
 80009c8:	1879      	adds	r1, r7, r1
 80009ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ce:	d273      	bcs.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d971      	bls.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4439      	add	r1, r7
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009de:	e778      	b.n	80008d2 <__udivmoddi4+0xbe>
 80009e0:	f1c6 0c20 	rsb	ip, r6, #32
 80009e4:	fa03 f406 	lsl.w	r4, r3, r6
 80009e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009ec:	431c      	orrs	r4, r3
 80009ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80009f2:	fa01 f306 	lsl.w	r3, r1, r6
 80009f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80009fe:	431f      	orrs	r7, r3
 8000a00:	0c3b      	lsrs	r3, r7, #16
 8000a02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a06:	fa1f f884 	uxth.w	r8, r4
 8000a0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a12:	fb09 fa08 	mul.w	sl, r9, r8
 8000a16:	458a      	cmp	sl, r1
 8000a18:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x220>
 8000a22:	1861      	adds	r1, r4, r1
 8000a24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a28:	d248      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a2a:	458a      	cmp	sl, r1
 8000a2c:	d946      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a32:	4421      	add	r1, r4
 8000a34:	eba1 010a 	sub.w	r1, r1, sl
 8000a38:	b2bf      	uxth	r7, r7
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a46:	fb00 f808 	mul.w	r8, r0, r8
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x24a>
 8000a4e:	19e7      	adds	r7, r4, r7
 8000a50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a54:	d22e      	bcs.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d92c      	bls.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4427      	add	r7, r4
 8000a5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a62:	eba7 0708 	sub.w	r7, r7, r8
 8000a66:	fba0 8902 	umull	r8, r9, r0, r2
 8000a6a:	454f      	cmp	r7, r9
 8000a6c:	46c6      	mov	lr, r8
 8000a6e:	4649      	mov	r1, r9
 8000a70:	d31a      	bcc.n	8000aa8 <__udivmoddi4+0x294>
 8000a72:	d017      	beq.n	8000aa4 <__udivmoddi4+0x290>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x27a>
 8000a76:	ebb3 020e 	subs.w	r2, r3, lr
 8000a7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a82:	40f2      	lsrs	r2, r6
 8000a84:	ea4c 0202 	orr.w	r2, ip, r2
 8000a88:	40f7      	lsrs	r7, r6
 8000a8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e70b      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e9      	b.n	8000874 <__udivmoddi4+0x60>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6fd      	b.n	80008a0 <__udivmoddi4+0x8c>
 8000aa4:	4543      	cmp	r3, r8
 8000aa6:	d2e5      	bcs.n	8000a74 <__udivmoddi4+0x260>
 8000aa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aac:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7df      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e7d2      	b.n	8000a5e <__udivmoddi4+0x24a>
 8000ab8:	4660      	mov	r0, ip
 8000aba:	e78d      	b.n	80009d8 <__udivmoddi4+0x1c4>
 8000abc:	4681      	mov	r9, r0
 8000abe:	e7b9      	b.n	8000a34 <__udivmoddi4+0x220>
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	e775      	b.n	80009b0 <__udivmoddi4+0x19c>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e74a      	b.n	800095e <__udivmoddi4+0x14a>
 8000ac8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000acc:	4439      	add	r1, r7
 8000ace:	e713      	b.n	80008f8 <__udivmoddi4+0xe4>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	443c      	add	r4, r7
 8000ad4:	e724      	b.n	8000920 <__udivmoddi4+0x10c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
void LCD1602_EnablePulse(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <LCD1602_EnablePulse+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <LCD1602_EnablePulse+0x3c>)
 8000ae6:	8811      	ldrh	r1, [r2, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 f8e0 	bl	8001cb0 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 8000af0:	230a      	movs	r3, #10
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f97c 	bl	8000df0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <LCD1602_EnablePulse+0x38>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <LCD1602_EnablePulse+0x3c>)
 8000afe:	8811      	ldrh	r1, [r2, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f8d4 	bl	8001cb0 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(20);  // ORG VALUE =60
 8000b08:	2014      	movs	r0, #20
 8000b0a:	f000 f971 	bl	8000df0 <LCD1602_TIM_MicorSecDelay>
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000002c 	.word	0x2000002c
 8000b18:	20000032 	.word	0x20000032

08000b1c <LCD1602_RS>:
//2) RS control
void LCD1602_RS(bool state)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <LCD1602_RS+0x22>
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <LCD1602_RS+0x3c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LCD1602_RS+0x40>)
 8000b32:	8811      	ldrh	r1, [r2, #0]
 8000b34:	2201      	movs	r2, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f8ba 	bl	8001cb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 8000b3c:	e007      	b.n	8000b4e <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <LCD1602_RS+0x3c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <LCD1602_RS+0x40>)
 8000b44:	8811      	ldrh	r1, [r2, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f8b1 	bl	8001cb0 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000002c 	.word	0x2000002c
 8000b5c:	20000030 	.word	0x20000030

08000b60 <LCD1602_write>:

//3) Write Parallel interface
void LCD1602_write(uint8_t byte)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 030f 	and.w	r3, r3, #15
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	091b      	lsrs	r3, r3, #4
 8000b76:	73bb      	strb	r3, [r7, #14]
	 
	if(mode_8_4_I2C == 1)		//8bits mode
 8000b78:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <LCD1602_write+0x1a0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d15a      	bne.n	8000c36 <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000b80:	4b60      	ldr	r3, [pc, #384]	; (8000d04 <LCD1602_write+0x1a4>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	4b60      	ldr	r3, [pc, #384]	; (8000d08 <LCD1602_write+0x1a8>)
 8000b86:	8819      	ldrh	r1, [r3, #0]
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	461a      	mov	r2, r3
 8000b92:	f001 f88d 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000b96:	4b5b      	ldr	r3, [pc, #364]	; (8000d04 <LCD1602_write+0x1a4>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <LCD1602_write+0x1ac>)
 8000b9c:	8819      	ldrh	r1, [r3, #0]
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f001 f882 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000bac:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <LCD1602_write+0x1a4>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <LCD1602_write+0x1b0>)
 8000bb2:	8819      	ldrh	r1, [r3, #0]
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f001 f877 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000bc2:	4b50      	ldr	r3, [pc, #320]	; (8000d04 <LCD1602_write+0x1a4>)
 8000bc4:	6818      	ldr	r0, [r3, #0]
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <LCD1602_write+0x1b4>)
 8000bc8:	8819      	ldrh	r1, [r3, #0]
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	f001 f86c 	bl	8001cb0 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000bd8:	4b4f      	ldr	r3, [pc, #316]	; (8000d18 <LCD1602_write+0x1b8>)
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	4b4f      	ldr	r3, [pc, #316]	; (8000d1c <LCD1602_write+0x1bc>)
 8000bde:	8819      	ldrh	r1, [r3, #0]
 8000be0:	7bbb      	ldrb	r3, [r7, #14]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	f001 f861 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000bee:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <LCD1602_write+0x1b8>)
 8000bf0:	6818      	ldr	r0, [r3, #0]
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	; (8000d20 <LCD1602_write+0x1c0>)
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f001 f856 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c04:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <LCD1602_write+0x1c4>)
 8000c0a:	8819      	ldrh	r1, [r3, #0]
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f001 f84b 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <LCD1602_write+0x1c8>)
 8000c20:	8819      	ldrh	r1, [r3, #0]
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	f003 0308 	and.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f001 f840 	bl	8001cb0 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 8000c30:	f7ff ff54 	bl	8000adc <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 8000c34:	e05f      	b.n	8000cf6 <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 8000c36:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <LCD1602_write+0x1a0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d15b      	bne.n	8000cf6 <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c40:	6818      	ldr	r0, [r3, #0]
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <LCD1602_write+0x1bc>)
 8000c44:	8819      	ldrh	r1, [r3, #0]
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	f001 f82e 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c54:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <LCD1602_write+0x1c0>)
 8000c5a:	8819      	ldrh	r1, [r3, #0]
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	f001 f823 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c6c:	6818      	ldr	r0, [r3, #0]
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <LCD1602_write+0x1c4>)
 8000c70:	8819      	ldrh	r1, [r3, #0]
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f001 f818 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c80:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <LCD1602_write+0x1c8>)
 8000c86:	8819      	ldrh	r1, [r3, #0]
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	461a      	mov	r2, r3
 8000c92:	f001 f80d 	bl	8001cb0 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000c96:	f7ff ff21 	bl	8000adc <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <LCD1602_write+0x1b8>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <LCD1602_write+0x1bc>)
 8000ca0:	8819      	ldrh	r1, [r3, #0]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f001 f800 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <LCD1602_write+0x1b8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <LCD1602_write+0x1c0>)
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f000 fff5 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <LCD1602_write+0x1b8>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <LCD1602_write+0x1c4>)
 8000ccc:	8819      	ldrh	r1, [r3, #0]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f003 0304 	and.w	r3, r3, #4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f000 ffea 	bl	8001cb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <LCD1602_write+0x1b8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <LCD1602_write+0x1c8>)
 8000ce2:	8819      	ldrh	r1, [r3, #0]
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	f000 ffdf 	bl	8001cb0 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 8000cf2:	f7ff fef3 	bl	8000adc <LCD1602_EnablePulse>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000034 	.word	0x20000034
 8000d08:	20000038 	.word	0x20000038
 8000d0c:	2000003a 	.word	0x2000003a
 8000d10:	2000003c 	.word	0x2000003c
 8000d14:	2000003e 	.word	0x2000003e
 8000d18:	20000040 	.word	0x20000040
 8000d1c:	20000044 	.word	0x20000044
 8000d20:	20000046 	.word	0x20000046
 8000d24:	20000048 	.word	0x20000048
 8000d28:	2000004a 	.word	0x2000004a
 8000d2c:	00000000 	.word	0x00000000

08000d30 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
void LCD1602_TIM_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 8000d36:	1d3a      	adds	r2, r7, #4
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fc42 	bl	80025c8 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d103      	bne.n	8000d52 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 8000d4a:	f001 fc15 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8000d4e:	61f8      	str	r0, [r7, #28]
 8000d50:	e004      	b.n	8000d5c <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8000d52:	f001 fc11 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8000d56:	4603      	mov	r3, r0
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 8000d5c:	69f8      	ldr	r0, [r7, #28]
 8000d5e:	f7ff fca7 	bl	80006b0 <__aeabi_ui2d>
 8000d62:	a321      	add	r3, pc, #132	; (adr r3, 8000de8 <LCD1602_TIM_Config+0xb8>)
 8000d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d68:	f7ff fa36 	bl	80001d8 <__aeabi_dmul>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	460b      	mov	r3, r1
 8000d70:	4610      	mov	r0, r2
 8000d72:	4619      	mov	r1, r3
 8000d74:	f7ff fd16 	bl	80007a4 <__aeabi_d2uiz>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	61fb      	str	r3, [r7, #28]
	
	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <LCD1602_TIM_Config+0xb0>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <LCD1602_TIM_Config+0xb0>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000d8e:	f023 0310 	bic.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000d9a:	f023 0301 	bic.w	r3, r3, #1
 8000d9e:	6013      	str	r3, [r2, #0]
	//Update request source 
	TIM3->CR1 &= ~(1UL << 2);
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000da6:	f023 0304 	bic.w	r3, r3, #4
 8000daa:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);				  
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000db2:	f043 0308 	orr.w	r3, r3, #8
 8000db6:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dc2:	2209      	movs	r2, #9
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8000dc6:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <LCD1602_TIM_Config+0xb4>)
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	6113      	str	r3, [r2, #16]
}
 8000dd8:	bf00      	nop
 8000dda:	3720      	adds	r7, #32
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40000400 	.word	0x40000400
 8000de8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000dec:	3eb0c6f7 	.word	0x3eb0c6f7

08000df0 <LCD1602_TIM_MicorSecDelay>:
void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 8000e18:	bf00      	nop
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <LCD1602_TIM_MicorSecDelay+0x44>)
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d1f9      	bne.n	8000e1a <LCD1602_TIM_MicorSecDelay+0x2a>
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40000400 	.word	0x40000400

08000e38 <LCD1602_writeCommand>:
//5) Write command
void LCD1602_writeCommand(uint8_t command)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff fe6a 	bl	8000b1c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fe88 	bl	8000b60 <LCD1602_write>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <LCD1602_writeData>:
//6) Write 8 bits data
void LCD1602_writeData(uint8_t data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
	//Set RS to 1
	LCD1602_RS(true);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f7ff fe5a 	bl	8000b1c <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(data);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fe78 	bl	8000b60 <LCD1602_write>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <LCD1602_write4bitCommand>:
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
void LCD1602_write4bitCommand(uint8_t nibble)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fe46 	bl	8000b1c <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <LCD1602_write4bitCommand+0x7c>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <LCD1602_write4bitCommand+0x80>)
 8000e96:	8819      	ldrh	r1, [r3, #0]
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f000 ff05 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <LCD1602_write4bitCommand+0x7c>)
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <LCD1602_write4bitCommand+0x84>)
 8000eac:	8819      	ldrh	r1, [r3, #0]
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f000 fefa 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <LCD1602_write4bitCommand+0x7c>)
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <LCD1602_write4bitCommand+0x88>)
 8000ec2:	8819      	ldrh	r1, [r3, #0]
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f000 feef 	bl	8001cb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <LCD1602_write4bitCommand+0x7c>)
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <LCD1602_write4bitCommand+0x8c>)
 8000ed8:	8819      	ldrh	r1, [r3, #0]
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f000 fee4 	bl	8001cb0 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8000ee8:	f7ff fdf8 	bl	8000adc <LCD1602_EnablePulse>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000040 	.word	0x20000040
 8000ef8:	20000044 	.word	0x20000044
 8000efc:	20000046 	.word	0x20000046
 8000f00:	20000048 	.word	0x20000048
 8000f04:	2000004a 	.word	0x2000004a

08000f08 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	817b      	strh	r3, [r7, #10]
 8000f16:	4613      	mov	r3, r2
 8000f18:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <LCD1602_Begin4BIT+0xb0>)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 8000f20:	4a26      	ldr	r2, [pc, #152]	; (8000fbc <LCD1602_Begin4BIT+0xb4>)
 8000f22:	897b      	ldrh	r3, [r7, #10]
 8000f24:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 8000f26:	4a26      	ldr	r2, [pc, #152]	; (8000fc0 <LCD1602_Begin4BIT+0xb8>)
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 8000f2c:	4a25      	ldr	r2, [pc, #148]	; (8000fc4 <LCD1602_Begin4BIT+0xbc>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 8000f32:	4a25      	ldr	r2, [pc, #148]	; (8000fc8 <LCD1602_Begin4BIT+0xc0>)
 8000f34:	8b3b      	ldrh	r3, [r7, #24]
 8000f36:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <LCD1602_Begin4BIT+0xc4>)
 8000f3a:	8bbb      	ldrh	r3, [r7, #28]
 8000f3c:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 8000f3e:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <LCD1602_Begin4BIT+0xc8>)
 8000f40:	8c3b      	ldrh	r3, [r7, #32]
 8000f42:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 8000f44:	4a23      	ldr	r2, [pc, #140]	; (8000fd4 <LCD1602_Begin4BIT+0xcc>)
 8000f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f48:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 8000f4a:	f7ff fef1 	bl	8000d30 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <LCD1602_Begin4BIT+0xd0>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <LCD1602_Begin4BIT+0xd4>)
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	701a      	strb	r2, [r3, #0]
	
	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 8000f5a:	2014      	movs	r0, #20
 8000f5c:	f000 fc1a 	bl	8001794 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f7ff ff89 	bl	8000e78 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 8000f66:	2005      	movs	r0, #5
 8000f68:	f000 fc14 	bl	8001794 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f7ff ff83 	bl	8000e78 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fc0e 	bl	8001794 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f7ff ff7d 	bl	8000e78 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 fc08 	bl	8001794 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff ff77 	bl	8000e78 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 fc02 	bl	8001794 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff ff51 	bl	8000e38 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff ff4e 	bl	8000e38 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 fbf9 	bl	8001794 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000fa2:	2028      	movs	r0, #40	; 0x28
 8000fa4:	f7ff ff48 	bl	8000e38 <LCD1602_writeCommand>
	HAL_Delay(3);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fbf3 	bl	8001794 <HAL_Delay>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20000030 	.word	0x20000030
 8000fc0:	20000032 	.word	0x20000032
 8000fc4:	20000040 	.word	0x20000040
 8000fc8:	20000044 	.word	0x20000044
 8000fcc:	20000046 	.word	0x20000046
 8000fd0:	20000048 	.word	0x20000048
 8000fd4:	2000004a 	.word	0x2000004a
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000002 	.word	0x20000002

08000fe0 <LCD1602_print>:
//3) LCD print string
void LCD1602_print(char string[])
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;  i< 16 && string[i]!= 0 ; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e009      	b.n	8001002 <LCD1602_print+0x22>
	{
		LCD1602_writeData((uint8_t)string[i]);
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff2e 	bl	8000e58 <LCD1602_writeData>
	for(uint8_t i=0;  i< 16 && string[i]!= 0 ; i++)
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	3301      	adds	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d805      	bhi.n	8001014 <LCD1602_print+0x34>
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d1ec      	bne.n	8000fee <LCD1602_print+0xe>
	}
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <LCD1602_setCursor>:
//4) set cursor position
void LCD1602_setCursor(uint8_t row, uint8_t col)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
	uint8_t maskData;
	maskData = (col-1)&0x0F;
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	3b01      	subs	r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	73fb      	strb	r3, [r7, #15]
	if(row==1)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <LCD1602_setCursor+0x34>
	{
		maskData |= (0x80);
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001044:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fef5 	bl	8000e38 <LCD1602_writeCommand>
	else
	{
		maskData |= (0xc0);
		LCD1602_writeCommand(maskData);
	}
}	
 800104e:	e007      	b.n	8001060 <LCD1602_setCursor+0x44>
		maskData |= (0xc0);
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001056:	73fb      	strb	r3, [r7, #15]
		LCD1602_writeCommand(maskData);
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff feec 	bl	8000e38 <LCD1602_writeCommand>
}	
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LCD1602_1stLine>:
void LCD1602_1stLine(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(1,1);
 800106c:	2101      	movs	r1, #1
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ffd4 	bl	800101c <LCD1602_setCursor>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <LCD1602_2ndLine>:
void LCD1602_2ndLine(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	LCD1602_setCursor(2,1);
 800107c:	2101      	movs	r1, #1
 800107e:	2002      	movs	r0, #2
 8001080:	f7ff ffcc 	bl	800101c <LCD1602_setCursor>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <LCD1602_noCursor>:
	FunctionSet &= ~(0x08);
	LCD1602_writeCommand(FunctionSet);
}
//6) Cursor ON/OFF
void LCD1602_noCursor(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x02);
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <LCD1602_noCursor+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	f023 0302 	bic.w	r3, r3, #2
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <LCD1602_noCursor+0x20>)
 8001098:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <LCD1602_noCursor+0x20>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff feca 	bl	8000e38 <LCD1602_writeCommand>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000001 	.word	0x20000001

080010ac <LCD1602_clear>:
	DisplayControl |= (0x02);
	LCD1602_writeCommand(DisplayControl);
}
//7) Clear display
void LCD1602_clear(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fec1 	bl	8000e38 <LCD1602_writeCommand>
	HAL_Delay(3);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 fb6c 	bl	8001794 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LCD1602_noBlink>:
//8) Blinking cursor
void LCD1602_noBlink(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	DisplayControl &= ~(0x01);
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <LCD1602_noBlink+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <LCD1602_noBlink+0x20>)
 80010d0:	701a      	strb	r2, [r3, #0]
	LCD1602_writeCommand(DisplayControl);
 80010d2:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <LCD1602_noBlink+0x20>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff feae 	bl	8000e38 <LCD1602_writeCommand>
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000001 	.word	0x20000001

080010e4 <Buzzer_OnOff>:
	return (status == HAL_OK ? len : 0);
}

// =================  Buzzer function ======================
void Buzzer_OnOff(int times)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	for(int i=0;i< times ; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e012      	b.n	8001118 <Buzzer_OnOff+0x34>
	{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET); HAL_Delay(10);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2102      	movs	r1, #2
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <Buzzer_OnOff+0x48>)
 80010f8:	f000 fdda 	bl	8001cb0 <HAL_GPIO_WritePin>
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 fb49 	bl	8001794 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET); HAL_Delay(10);
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <Buzzer_OnOff+0x48>)
 8001108:	f000 fdd2 	bl	8001cb0 <HAL_GPIO_WritePin>
 800110c:	200a      	movs	r0, #10
 800110e:	f000 fb41 	bl	8001794 <HAL_Delay>
	for(int i=0;i< times ; i++)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbe8      	blt.n	80010f2 <Buzzer_OnOff+0xe>
	}
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020400 	.word	0x40020400

08001130 <Key_input>:


unsigned char key_flag = 0;

unsigned char Key_input(void)			// input key KEY1~KEY4
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  unsigned char key;

  key = GPIOB->IDR & 0x000000F0;		// any key pressed ?
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <Key_input+0x58>)
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f023 030f 	bic.w	r3, r3, #15
 8001140:	71fb      	strb	r3, [r7, #7]
  if(key == 0xF0)						// if no key, check key off
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2bf0      	cmp	r3, #240	; 0xf0
 8001146:	d10d      	bne.n	8001164 <Key_input+0x34>
    { if(key_flag == 0)
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <Key_input+0x5c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <Key_input+0x24>
        return key;
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	e014      	b.n	800117e <Key_input+0x4e>
      else
        { HAL_Delay(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f000 fb1d 	bl	8001794 <HAL_Delay>
          key_flag = 0;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <Key_input+0x5c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
          return key;
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	e00c      	b.n	800117e <Key_input+0x4e>
        }
    }
  else									// if key input, check continuous key
    { if(key_flag != 0)					// if continuous key, treat as no key input
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <Key_input+0x5c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <Key_input+0x40>
        //return 0xF0;
    	return key;
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	e006      	b.n	800117e <Key_input+0x4e>
      else								// if new key, beep and delay for debounce
        { Buzzer_OnOff(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff ffb7 	bl	80010e4 <Buzzer_OnOff>
          key_flag = 1;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <Key_input+0x5c>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
          return key;
 800117c:	79fb      	ldrb	r3, [r7, #7]
        }
    }
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020400 	.word	0x40020400
 800118c:	2000004c 	.word	0x2000004c

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	4b47      	ldr	r3, [pc, #284]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a3f      	ldr	r2, [pc, #252]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b39      	ldr	r3, [pc, #228]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a38      	ldr	r2, [pc, #224]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <MX_GPIO_Init+0x138>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <MX_GPIO_Init+0x138>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <MX_GPIO_Init+0x138>)
 8001204:	f043 0302 	orr.w	r3, r3, #2
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <MX_GPIO_Init+0x138>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2120      	movs	r1, #32
 800121a:	482c      	ldr	r0, [pc, #176]	; (80012cc <MX_GPIO_Init+0x13c>)
 800121c:	f000 fd48 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2102      	movs	r1, #2
 8001224:	482a      	ldr	r0, [pc, #168]	; (80012d0 <MX_GPIO_Init+0x140>)
 8001226:	f000 fd43 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8001230:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x144>)
 8001232:	f000 fd3d 	bl	8001cb0 <HAL_GPIO_WritePin>
                          |E_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0x148>)
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x144>)
 800124c:	f000 fbac 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001250:	2320      	movs	r3, #32
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4819      	ldr	r0, [pc, #100]	; (80012cc <MX_GPIO_Init+0x13c>)
 8001268:	f000 fb9e 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800126c:	2302      	movs	r3, #2
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4813      	ldr	r0, [pc, #76]	; (80012d0 <MX_GPIO_Init+0x140>)
 8001284:	f000 fb90 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001288:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 800128c:	617b      	str	r3, [r7, #20]
                          |E_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0x144>)
 80012a2:	f000 fb81 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Down_Pin|Right_Pin|Up_Pin|Left_Pin;
 80012a6:	23f0      	movs	r3, #240	; 0xf0
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x140>)
 80012ba:	f000 fb75 	bl	80019a8 <HAL_GPIO_Init>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	10210000 	.word	0x10210000

080012dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e2:	f000 f9e5 	bl	80016b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e6:	f000 f869 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ea:	f7ff ff51 	bl	8001190 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012ee:	f000 f943 	bl	8001578 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD1602_Begin4BIT(RS_GPIO_Port,RS_Pin,E_Pin,D4_GPIO_Port,D4_Pin,D5_Pin,D6_Pin,D7_Pin);
 80012f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f6:	9303      	str	r3, [sp, #12]
 80012f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <main+0xc4>)
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001310:	4823      	ldr	r0, [pc, #140]	; (80013a0 <main+0xc4>)
 8001312:	f7ff fdf9 	bl	8000f08 <LCD1602_Begin4BIT>

  LCD1602_clear();
 8001316:	f7ff fec9 	bl	80010ac <LCD1602_clear>
  LCD1602_1stLine();
 800131a:	f7ff fea5 	bl	8001068 <LCD1602_1stLine>
  LCD1602_print("Start LCD");
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <main+0xc8>)
 8001320:	f7ff fe5e 	bl	8000fe0 <LCD1602_print>
  HAL_Delay(2000);
 8001324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001328:	f000 fa34 	bl	8001794 <HAL_Delay>
  LCD1602_clear();
 800132c:	f7ff febe 	bl	80010ac <LCD1602_clear>
  LCD1602_1stLine();	LCD1602_print("Zeus Key Input");
 8001330:	f7ff fe9a 	bl	8001068 <LCD1602_1stLine>
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <main+0xcc>)
 8001336:	f7ff fe53 	bl	8000fe0 <LCD1602_print>
  LCD1602_noCursor(); LCD1602_noBlink();
 800133a:	f7ff fea5 	bl	8001088 <LCD1602_noCursor>
 800133e:	f7ff febf 	bl	80010c0 <LCD1602_noBlink>
  LCD1602_2ndLine();
 8001342:	f7ff fe99 	bl	8001078 <LCD1602_2ndLine>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Buzzer_OnOff(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fecc 	bl	80010e4 <Buzzer_OnOff>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch( Key_input() ) {
 800134c:	f7ff fef0 	bl	8001130 <Key_input>
 8001350:	4603      	mov	r3, r0
 8001352:	2be0      	cmp	r3, #224	; 0xe0
 8001354:	d00f      	beq.n	8001376 <main+0x9a>
 8001356:	2be0      	cmp	r3, #224	; 0xe0
 8001358:	dc1f      	bgt.n	800139a <main+0xbe>
 800135a:	2bd0      	cmp	r3, #208	; 0xd0
 800135c:	d011      	beq.n	8001382 <main+0xa6>
 800135e:	2bd0      	cmp	r3, #208	; 0xd0
 8001360:	dc1b      	bgt.n	800139a <main+0xbe>
 8001362:	2b70      	cmp	r3, #112	; 0x70
 8001364:	d013      	beq.n	800138e <main+0xb2>
 8001366:	2bb0      	cmp	r3, #176	; 0xb0
 8001368:	d117      	bne.n	800139a <main+0xbe>
	  case KEY_UP:
		  LCD1602_2ndLine();
 800136a:	f7ff fe85 	bl	8001078 <LCD1602_2ndLine>
		  LCD1602_print("UP    pressed");
 800136e:	480f      	ldr	r0, [pc, #60]	; (80013ac <main+0xd0>)
 8001370:	f7ff fe36 	bl	8000fe0 <LCD1602_print>
		  break;
 8001374:	e012      	b.n	800139c <main+0xc0>

	  case KEY_DOWN:
		  LCD1602_2ndLine();
 8001376:	f7ff fe7f 	bl	8001078 <LCD1602_2ndLine>
		  LCD1602_print("DOWN  pressed");
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <main+0xd4>)
 800137c:	f7ff fe30 	bl	8000fe0 <LCD1602_print>
		  break;
 8001380:	e00c      	b.n	800139c <main+0xc0>

	  case KEY_RIGHT:
		  LCD1602_2ndLine();
 8001382:	f7ff fe79 	bl	8001078 <LCD1602_2ndLine>
		  LCD1602_print("RIGHT pressed");
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <main+0xd8>)
 8001388:	f7ff fe2a 	bl	8000fe0 <LCD1602_print>
		  break;
 800138c:	e006      	b.n	800139c <main+0xc0>

	  case KEY_LEFT:
		  LCD1602_2ndLine();
 800138e:	f7ff fe73 	bl	8001078 <LCD1602_2ndLine>
		  LCD1602_print("LEFT  pressed");
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <main+0xdc>)
 8001394:	f7ff fe24 	bl	8000fe0 <LCD1602_print>
		  break;
 8001398:	e000      	b.n	800139c <main+0xc0>

	  default:
		  break;
 800139a:	bf00      	nop
	  switch( Key_input() ) {
 800139c:	e7d6      	b.n	800134c <main+0x70>
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800
 80013a4:	08002ac8 	.word	0x08002ac8
 80013a8:	08002ad4 	.word	0x08002ad4
 80013ac:	08002ae4 	.word	0x08002ae4
 80013b0:	08002af4 	.word	0x08002af4
 80013b4:	08002b04 	.word	0x08002b04
 80013b8:	08002b14 	.word	0x08002b14

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fb68 	bl	8002aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <SystemClock_Config+0xcc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <SystemClock_Config+0xcc>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <SystemClock_Config+0xcc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <SystemClock_Config+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <SystemClock_Config+0xd0>)
 800140a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <SystemClock_Config+0xd0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141c:	2301      	movs	r3, #1
 800141e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001430:	2308      	movs	r3, #8
 8001432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001434:	2354      	movs	r3, #84	; 0x54
 8001436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001438:	2302      	movs	r3, #2
 800143a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800143c:	2307      	movs	r3, #7
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4618      	mov	r0, r3
 8001446:	f000 fc4d 	bl	8001ce4 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001450:	f000 f81e 	bl	8001490 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001458:	2302      	movs	r3, #2
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2102      	movs	r1, #2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 feaf 	bl	80021d4 <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800147c:	f000 f808 	bl	8001490 <Error_Handler>
  }
}
 8001480:	bf00      	nop
 8001482:	3750      	adds	r7, #80	; 0x50
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x4c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014de:	2007      	movs	r0, #7
 80014e0:	f000 fa2e 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler+0x4>

0800150a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <BusFault_Handler+0x4>

08001510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler+0x4>

08001516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001544:	f000 f906 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SystemInit+0x28>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <SystemInit+0x28>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SystemInit+0x28>)
 8001562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001566:	609a      	str	r2, [r3, #8]
#endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f001 f83c 	bl	800262c <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f7ff ff69 	bl	8001490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000050 	.word	0x20000050
 80015c8:	40004400 	.word	0x40004400

080015cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_UART_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12b      	bne.n	8001646 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_UART_MspInit+0x88>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_UART_MspInit+0x88>)
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	6413      	str	r3, [r2, #64]	; 0x40
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <HAL_UART_MspInit+0x88>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_UART_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001626:	230c      	movs	r3, #12
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001636:	2307      	movs	r3, #7
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <HAL_UART_MspInit+0x8c>)
 8001642:	f000 f9b1 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40004400 	.word	0x40004400
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001660:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001662:	e003      	b.n	800166c <LoopCopyDataInit>

08001664 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001666:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001668:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800166a:	3104      	adds	r1, #4

0800166c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800166c:	480b      	ldr	r0, [pc, #44]	; (800169c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001670:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001672:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001674:	d3f6      	bcc.n	8001664 <CopyDataInit>
  ldr  r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001678:	e002      	b.n	8001680 <LoopFillZerobss>

0800167a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800167a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800167c:	f842 3b04 	str.w	r3, [r2], #4

08001680 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001682:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001684:	d3f9      	bcc.n	800167a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001686:	f7ff ff61 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f001 f9e5 	bl	8002a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7ff fe25 	bl	80012dc <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001694:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001698:	08002b4c 	.word	0x08002b4c
  ldr  r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016a0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80016a4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80016a8:	20000098 	.word	0x20000098

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_Init+0x40>)
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <HAL_Init+0x40>)
 80016c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <HAL_Init+0x40>)
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d8:	2003      	movs	r0, #3
 80016da:	f000 f931 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f808 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e4:	f7ff fedc 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f93b 	bl	800198e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f000 f911 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000004 	.word	0x20000004
 800174c:	2000000c 	.word	0x2000000c
 8001750:	20000008 	.word	0x20000008

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000000c 	.word	0x2000000c
 8001778:	20000094 	.word	0x20000094

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20000094 	.word	0x20000094

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000000c 	.word	0x2000000c

080017dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180e:	4a04      	ldr	r2, [pc, #16]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60d3      	str	r3, [r2, #12]
}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff47 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff5c 	bl	8001824 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb0 	bl	80018fc <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e159      	b.n	8001c78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 8148 	bne.w	8001c72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d005      	beq.n	80019fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d130      	bne.n	8001a5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a30:	2201      	movs	r2, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 0201 	and.w	r2, r3, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d017      	beq.n	8001a98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a2 	beq.w	8001c72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b57      	ldr	r3, [pc, #348]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a56      	ldr	r2, [pc, #344]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b54      	ldr	r3, [pc, #336]	; (8001c90 <HAL_GPIO_Init+0x2e8>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_GPIO_Init+0x2ec>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a49      	ldr	r2, [pc, #292]	; (8001c98 <HAL_GPIO_Init+0x2f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d019      	beq.n	8001baa <HAL_GPIO_Init+0x202>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2f4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_GPIO_Init+0x1fe>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a47      	ldr	r2, [pc, #284]	; (8001ca0 <HAL_GPIO_Init+0x2f8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_GPIO_Init+0x1fa>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_GPIO_Init+0x2fc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d007      	beq.n	8001b9e <HAL_GPIO_Init+0x1f6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_GPIO_Init+0x300>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d101      	bne.n	8001b9a <HAL_GPIO_Init+0x1f2>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x204>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	; (8001c94 <HAL_GPIO_Init+0x2ec>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bca:	4b38      	ldr	r3, [pc, #224]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bee:	4a2f      	ldr	r2, [pc, #188]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c18:	4a24      	ldr	r2, [pc, #144]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <HAL_GPIO_Init+0x304>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f aea2 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40013c00 	.word	0x40013c00

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ccc:	e003      	b.n	8001cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	619a      	str	r2, [r3, #24]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e264      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d075      	beq.n	8001dee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d02:	4ba3      	ldr	r3, [pc, #652]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d00c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4ba0      	ldr	r3, [pc, #640]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d112      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b9d      	ldr	r3, [pc, #628]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	4b99      	ldr	r3, [pc, #612]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05b      	beq.n	8001dec <HAL_RCC_OscConfig+0x108>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d157      	bne.n	8001dec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e23f      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d106      	bne.n	8001d58 <HAL_RCC_OscConfig+0x74>
 8001d4a:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a90      	ldr	r2, [pc, #576]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e01d      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x98>
 8001d62:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	4b88      	ldr	r3, [pc, #544]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a87      	ldr	r2, [pc, #540]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	4b84      	ldr	r3, [pc, #528]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a83      	ldr	r2, [pc, #524]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b81      	ldr	r3, [pc, #516]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a80      	ldr	r2, [pc, #512]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d013      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fcee 	bl	800177c <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fcea 	bl	800177c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e204      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0xc0>
 8001dc2:	e014      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fcda 	bl	800177c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fcd6 	bl	800177c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1f0      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0xe8>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d063      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b62      	ldr	r3, [pc, #392]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d11c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b5f      	ldr	r3, [pc, #380]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x152>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e1c4      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e36:	4b56      	ldr	r3, [pc, #344]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4952      	ldr	r1, [pc, #328]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d020      	beq.n	8001e96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <HAL_RCC_OscConfig+0x2b0>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fc8f 	bl	800177c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff fc8b 	bl	800177c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1a5      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4940      	ldr	r1, [pc, #256]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	e015      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HAL_RCC_OscConfig+0x2b0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc6e 	bl	800177c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc6a 	bl	800177c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e184      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d030      	beq.n	8001f30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d016      	beq.n	8001f04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x2b4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001edc:	f7ff fc4e 	bl	800177c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fc4a 	bl	800177c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e164      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	4b26      	ldr	r3, [pc, #152]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x200>
 8001f02:	e015      	b.n	8001f30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_OscConfig+0x2b4>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fc37 	bl	800177c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f12:	f7ff fc33 	bl	800177c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e14d      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80a0 	beq.w	800207e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_OscConfig+0x2b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d121      	bne.n	8001fbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_OscConfig+0x2b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_RCC_OscConfig+0x2b8>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fbf9 	bl	800177c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e011      	b.n	8001fb2 <HAL_RCC_OscConfig+0x2ce>
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	42470000 	.word	0x42470000
 8001f98:	42470e80 	.word	0x42470e80
 8001f9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7ff fbec 	bl	800177c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e106      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x4e4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x2f0>
 8001fc6:	4b81      	ldr	r3, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a80      	ldr	r2, [pc, #512]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x32a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x312>
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	4a7a      	ldr	r2, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe8:	4b78      	ldr	r3, [pc, #480]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a77      	ldr	r2, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x32a>
 8001ff6:	4b75      	ldr	r3, [pc, #468]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a74      	ldr	r2, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	4b72      	ldr	r3, [pc, #456]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff fbb1 	bl	800177c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fbad 	bl	800177c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0c5      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x33a>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff fb9b 	bl	800177c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fb97 	bl	800177c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0af      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b56      	ldr	r3, [pc, #344]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a55      	ldr	r2, [pc, #340]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 809b 	beq.w	80021be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d05c      	beq.n	800214e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d141      	bne.n	8002120 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x4ec>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fb6b 	bl	800177c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff fb67 	bl	800177c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e081      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020bc:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	019b      	lsls	r3, r3, #6
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	4937      	ldr	r1, [pc, #220]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f2:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HAL_RCC_OscConfig+0x4ec>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fb40 	bl	800177c <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002100:	f7ff fb3c 	bl	800177c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e056      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x41c>
 800211e:	e04e      	b.n	80021be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x4ec>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7ff fb29 	bl	800177c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212e:	f7ff fb25 	bl	800177c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e03f      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f0      	bne.n	800212e <HAL_RCC_OscConfig+0x44a>
 800214c:	e037      	b.n	80021be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d101      	bne.n	800215a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e032      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_RCC_OscConfig+0x4e8>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d028      	beq.n	80021ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d121      	bne.n	80021ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d11a      	bne.n	80021ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002190:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002192:	4293      	cmp	r3, r2
 8002194:	d111      	bne.n	80021ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40007000 	.word	0x40007000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	42470060 	.word	0x42470060

080021d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0cc      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e8:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d90c      	bls.n	8002210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b63      	ldr	r3, [pc, #396]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b8      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d020      	beq.n	800225e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002228:	4b59      	ldr	r3, [pc, #356]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002240:	4b53      	ldr	r3, [pc, #332]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800224a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b50      	ldr	r3, [pc, #320]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	494d      	ldr	r1, [pc, #308]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d044      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d119      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e07f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d003      	beq.n	8002292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800228e:	2b03      	cmp	r3, #3
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e067      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4934      	ldr	r1, [pc, #208]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c4:	f7ff fa5a 	bl	800177c <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7ff fa56 	bl	800177c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e04f      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d20c      	bcs.n	800231c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230a:	4b20      	ldr	r3, [pc, #128]	; (800238c <HAL_RCC_ClockConfig+0x1b8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	429a      	cmp	r2, r3
 8002316:	d001      	beq.n	800231c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e032      	b.n	8002382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	4916      	ldr	r1, [pc, #88]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d009      	beq.n	800235a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	490e      	ldr	r1, [pc, #56]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235a:	f000 f821 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	490a      	ldr	r1, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	5ccb      	ldrb	r3, [r1, r3]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_RCC_ClockConfig+0x1c8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f9ba 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00
 8002390:	40023800 	.word	0x40023800
 8002394:	08002b24 	.word	0x08002b24
 8002398:	20000004 	.word	0x20000004
 800239c:	20000008 	.word	0x20000008

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b8:	4b67      	ldr	r3, [pc, #412]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d00d      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x40>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	f200 80bd 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x1a4>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d003      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x3a>
 80023d2:	e0b7      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023d6:	60bb      	str	r3, [r7, #8]
       break;
 80023d8:	e0b7      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023da:	4b60      	ldr	r3, [pc, #384]	; (800255c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023dc:	60bb      	str	r3, [r7, #8]
      break;
 80023de:	e0b4      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e0:	4b5d      	ldr	r3, [pc, #372]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ea:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d04d      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	461a      	mov	r2, r3
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	ea02 0800 	and.w	r8, r2, r0
 800240e:	ea03 0901 	and.w	r9, r3, r1
 8002412:	4640      	mov	r0, r8
 8002414:	4649      	mov	r1, r9
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	f04f 0300 	mov.w	r3, #0
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002424:	0142      	lsls	r2, r0, #5
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	ebb0 0008 	subs.w	r0, r0, r8
 800242e:	eb61 0109 	sbc.w	r1, r1, r9
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002440:	0182      	lsls	r2, r0, #6
 8002442:	1a12      	subs	r2, r2, r0
 8002444:	eb63 0301 	sbc.w	r3, r3, r1
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	00d9      	lsls	r1, r3, #3
 8002452:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002456:	00d0      	lsls	r0, r2, #3
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	eb12 0208 	adds.w	r2, r2, r8
 8002460:	eb43 0309 	adc.w	r3, r3, r9
 8002464:	f04f 0000 	mov.w	r0, #0
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	0299      	lsls	r1, r3, #10
 800246e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002472:	0290      	lsls	r0, r2, #10
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f7fe f9ae 	bl	80007e4 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e04a      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	461a      	mov	r2, r3
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	ea02 0400 	and.w	r4, r2, r0
 80024aa:	ea03 0501 	and.w	r5, r3, r1
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	014b      	lsls	r3, r1, #5
 80024bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024c0:	0142      	lsls	r2, r0, #5
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	1b00      	subs	r0, r0, r4
 80024c8:	eb61 0105 	sbc.w	r1, r1, r5
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	018b      	lsls	r3, r1, #6
 80024d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024da:	0182      	lsls	r2, r0, #6
 80024dc:	1a12      	subs	r2, r2, r0
 80024de:	eb63 0301 	sbc.w	r3, r3, r1
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	00d9      	lsls	r1, r3, #3
 80024ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f0:	00d0      	lsls	r0, r2, #3
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	1912      	adds	r2, r2, r4
 80024f8:	eb45 0303 	adc.w	r3, r5, r3
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	0299      	lsls	r1, r3, #10
 8002506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800250a:	0290      	lsls	r0, r2, #10
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	f7fe f962 	bl	80007e4 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002546:	60bb      	str	r3, [r7, #8]
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	68bb      	ldr	r3, [r7, #8]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	00f42400 	.word	0x00f42400

08002560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000004 	.word	0x20000004

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a9b      	lsrs	r3, r3, #10
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	; (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	08002b34 	.word	0x08002b34

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a4:	f7ff ffdc 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0b5b      	lsrs	r3, r3, #13
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08002b34 	.word	0x08002b34

080025c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	220f      	movs	r2, #15
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCC_GetClockConfig+0x5c>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <HAL_RCC_GetClockConfig+0x5c>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_GetClockConfig+0x5c>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_GetClockConfig+0x5c>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	08db      	lsrs	r3, r3, #3
 8002602:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <HAL_RCC_GetClockConfig+0x60>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0207 	and.w	r2, r3, #7
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40023c00 	.word	0x40023c00

0800262c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e03f      	b.n	80026be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe ffba 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f829 	bl	80026c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026cc:	b09f      	sub	sp, #124	; 0x7c
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026de:	68d9      	ldr	r1, [r3, #12]
 80026e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	ea40 0301 	orr.w	r3, r0, r1
 80026e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	4313      	orrs	r3, r2
 8002700:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800270c:	f021 010c 	bic.w	r1, r1, #12
 8002710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002716:	430b      	orrs	r3, r1
 8002718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002726:	6999      	ldr	r1, [r3, #24]
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	ea40 0301 	orr.w	r3, r0, r1
 8002730:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4bc5      	ldr	r3, [pc, #788]	; (8002a4c <UART_SetConfig+0x384>)
 8002738:	429a      	cmp	r2, r3
 800273a:	d004      	beq.n	8002746 <UART_SetConfig+0x7e>
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4bc3      	ldr	r3, [pc, #780]	; (8002a50 <UART_SetConfig+0x388>)
 8002742:	429a      	cmp	r2, r3
 8002744:	d103      	bne.n	800274e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002746:	f7ff ff2b 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 800274a:	6778      	str	r0, [r7, #116]	; 0x74
 800274c:	e002      	b.n	8002754 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800274e:	f7ff ff13 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8002752:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	f040 80b6 	bne.w	80028cc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002762:	461c      	mov	r4, r3
 8002764:	f04f 0500 	mov.w	r5, #0
 8002768:	4622      	mov	r2, r4
 800276a:	462b      	mov	r3, r5
 800276c:	1891      	adds	r1, r2, r2
 800276e:	6439      	str	r1, [r7, #64]	; 0x40
 8002770:	415b      	adcs	r3, r3
 8002772:	647b      	str	r3, [r7, #68]	; 0x44
 8002774:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002778:	1912      	adds	r2, r2, r4
 800277a:	eb45 0303 	adc.w	r3, r5, r3
 800277e:	f04f 0000 	mov.w	r0, #0
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	00d9      	lsls	r1, r3, #3
 8002788:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800278c:	00d0      	lsls	r0, r2, #3
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	1911      	adds	r1, r2, r4
 8002794:	6639      	str	r1, [r7, #96]	; 0x60
 8002796:	416b      	adcs	r3, r5
 8002798:	667b      	str	r3, [r7, #100]	; 0x64
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	461a      	mov	r2, r3
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	1891      	adds	r1, r2, r2
 80027a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027a8:	415b      	adcs	r3, r3
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027b0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027b4:	f7fe f816 	bl	80007e4 <__aeabi_uldivmod>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4ba5      	ldr	r3, [pc, #660]	; (8002a54 <UART_SetConfig+0x38c>)
 80027be:	fba3 2302 	umull	r2, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	011e      	lsls	r6, r3, #4
 80027c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c8:	461c      	mov	r4, r3
 80027ca:	f04f 0500 	mov.w	r5, #0
 80027ce:	4622      	mov	r2, r4
 80027d0:	462b      	mov	r3, r5
 80027d2:	1891      	adds	r1, r2, r2
 80027d4:	6339      	str	r1, [r7, #48]	; 0x30
 80027d6:	415b      	adcs	r3, r3
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
 80027da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027de:	1912      	adds	r2, r2, r4
 80027e0:	eb45 0303 	adc.w	r3, r5, r3
 80027e4:	f04f 0000 	mov.w	r0, #0
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	00d9      	lsls	r1, r3, #3
 80027ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027f2:	00d0      	lsls	r0, r2, #3
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	1911      	adds	r1, r2, r4
 80027fa:	65b9      	str	r1, [r7, #88]	; 0x58
 80027fc:	416b      	adcs	r3, r5
 80027fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	461a      	mov	r2, r3
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	1891      	adds	r1, r2, r2
 800280c:	62b9      	str	r1, [r7, #40]	; 0x28
 800280e:	415b      	adcs	r3, r3
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002816:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800281a:	f7fd ffe3 	bl	80007e4 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4b8c      	ldr	r3, [pc, #560]	; (8002a54 <UART_SetConfig+0x38c>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	; 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	3332      	adds	r3, #50	; 0x32
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <UART_SetConfig+0x38c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002844:	441e      	add	r6, r3
 8002846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002848:	4618      	mov	r0, r3
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	1894      	adds	r4, r2, r2
 8002854:	623c      	str	r4, [r7, #32]
 8002856:	415b      	adcs	r3, r3
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
 800285a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800285e:	1812      	adds	r2, r2, r0
 8002860:	eb41 0303 	adc.w	r3, r1, r3
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	f04f 0500 	mov.w	r5, #0
 800286c:	00dd      	lsls	r5, r3, #3
 800286e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002872:	00d4      	lsls	r4, r2, #3
 8002874:	4622      	mov	r2, r4
 8002876:	462b      	mov	r3, r5
 8002878:	1814      	adds	r4, r2, r0
 800287a:	653c      	str	r4, [r7, #80]	; 0x50
 800287c:	414b      	adcs	r3, r1
 800287e:	657b      	str	r3, [r7, #84]	; 0x54
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	461a      	mov	r2, r3
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	1891      	adds	r1, r2, r2
 800288c:	61b9      	str	r1, [r7, #24]
 800288e:	415b      	adcs	r3, r3
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002896:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800289a:	f7fd ffa3 	bl	80007e4 <__aeabi_uldivmod>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <UART_SetConfig+0x38c>)
 80028a4:	fba3 1302 	umull	r1, r3, r3, r2
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	2164      	movs	r1, #100	; 0x64
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	3332      	adds	r3, #50	; 0x32
 80028b6:	4a67      	ldr	r2, [pc, #412]	; (8002a54 <UART_SetConfig+0x38c>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	f003 0207 	and.w	r2, r3, #7
 80028c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4432      	add	r2, r6
 80028c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028ca:	e0b9      	b.n	8002a40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ce:	461c      	mov	r4, r3
 80028d0:	f04f 0500 	mov.w	r5, #0
 80028d4:	4622      	mov	r2, r4
 80028d6:	462b      	mov	r3, r5
 80028d8:	1891      	adds	r1, r2, r2
 80028da:	6139      	str	r1, [r7, #16]
 80028dc:	415b      	adcs	r3, r3
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028e4:	1912      	adds	r2, r2, r4
 80028e6:	eb45 0303 	adc.w	r3, r5, r3
 80028ea:	f04f 0000 	mov.w	r0, #0
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	00d9      	lsls	r1, r3, #3
 80028f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f8:	00d0      	lsls	r0, r2, #3
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	eb12 0804 	adds.w	r8, r2, r4
 8002902:	eb43 0905 	adc.w	r9, r3, r5
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	008b      	lsls	r3, r1, #2
 800291a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800291e:	0082      	lsls	r2, r0, #2
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd ff5e 	bl	80007e4 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <UART_SetConfig+0x38c>)
 800292e:	fba3 2302 	umull	r2, r3, r3, r2
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	011e      	lsls	r6, r3, #4
 8002936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002938:	4618      	mov	r0, r3
 800293a:	f04f 0100 	mov.w	r1, #0
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	1894      	adds	r4, r2, r2
 8002944:	60bc      	str	r4, [r7, #8]
 8002946:	415b      	adcs	r3, r3
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800294e:	1812      	adds	r2, r2, r0
 8002950:	eb41 0303 	adc.w	r3, r1, r3
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	f04f 0500 	mov.w	r5, #0
 800295c:	00dd      	lsls	r5, r3, #3
 800295e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002962:	00d4      	lsls	r4, r2, #3
 8002964:	4622      	mov	r2, r4
 8002966:	462b      	mov	r3, r5
 8002968:	1814      	adds	r4, r2, r0
 800296a:	64bc      	str	r4, [r7, #72]	; 0x48
 800296c:	414b      	adcs	r3, r1
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	008b      	lsls	r3, r1, #2
 8002984:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002988:	0082      	lsls	r2, r0, #2
 800298a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800298e:	f7fd ff29 	bl	80007e4 <__aeabi_uldivmod>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4b2f      	ldr	r3, [pc, #188]	; (8002a54 <UART_SetConfig+0x38c>)
 8002998:	fba3 1302 	umull	r1, r3, r3, r2
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	2164      	movs	r1, #100	; 0x64
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	3332      	adds	r3, #50	; 0x32
 80029aa:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <UART_SetConfig+0x38c>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029b6:	441e      	add	r6, r3
 80029b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ba:	4618      	mov	r0, r3
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	1894      	adds	r4, r2, r2
 80029c6:	603c      	str	r4, [r7, #0]
 80029c8:	415b      	adcs	r3, r3
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d0:	1812      	adds	r2, r2, r0
 80029d2:	eb41 0303 	adc.w	r3, r1, r3
 80029d6:	f04f 0400 	mov.w	r4, #0
 80029da:	f04f 0500 	mov.w	r5, #0
 80029de:	00dd      	lsls	r5, r3, #3
 80029e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029e4:	00d4      	lsls	r4, r2, #3
 80029e6:	4622      	mov	r2, r4
 80029e8:	462b      	mov	r3, r5
 80029ea:	eb12 0a00 	adds.w	sl, r2, r0
 80029ee:	eb43 0b01 	adc.w	fp, r3, r1
 80029f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f04f 0100 	mov.w	r1, #0
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	008b      	lsls	r3, r1, #2
 8002a06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a0a:	0082      	lsls	r2, r0, #2
 8002a0c:	4650      	mov	r0, sl
 8002a0e:	4659      	mov	r1, fp
 8002a10:	f7fd fee8 	bl	80007e4 <__aeabi_uldivmod>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <UART_SetConfig+0x38c>)
 8002a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2164      	movs	r1, #100	; 0x64
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <UART_SetConfig+0x38c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4432      	add	r2, r6
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	377c      	adds	r7, #124	; 0x7c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40011000 	.word	0x40011000
 8002a50:	40011400 	.word	0x40011400
 8002a54:	51eb851f 	.word	0x51eb851f

08002a58 <__libc_init_array>:
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	4d0d      	ldr	r5, [pc, #52]	; (8002a90 <__libc_init_array+0x38>)
 8002a5c:	4c0d      	ldr	r4, [pc, #52]	; (8002a94 <__libc_init_array+0x3c>)
 8002a5e:	1b64      	subs	r4, r4, r5
 8002a60:	10a4      	asrs	r4, r4, #2
 8002a62:	2600      	movs	r6, #0
 8002a64:	42a6      	cmp	r6, r4
 8002a66:	d109      	bne.n	8002a7c <__libc_init_array+0x24>
 8002a68:	4d0b      	ldr	r5, [pc, #44]	; (8002a98 <__libc_init_array+0x40>)
 8002a6a:	4c0c      	ldr	r4, [pc, #48]	; (8002a9c <__libc_init_array+0x44>)
 8002a6c:	f000 f820 	bl	8002ab0 <_init>
 8002a70:	1b64      	subs	r4, r4, r5
 8002a72:	10a4      	asrs	r4, r4, #2
 8002a74:	2600      	movs	r6, #0
 8002a76:	42a6      	cmp	r6, r4
 8002a78:	d105      	bne.n	8002a86 <__libc_init_array+0x2e>
 8002a7a:	bd70      	pop	{r4, r5, r6, pc}
 8002a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a80:	4798      	blx	r3
 8002a82:	3601      	adds	r6, #1
 8002a84:	e7ee      	b.n	8002a64 <__libc_init_array+0xc>
 8002a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8a:	4798      	blx	r3
 8002a8c:	3601      	adds	r6, #1
 8002a8e:	e7f2      	b.n	8002a76 <__libc_init_array+0x1e>
 8002a90:	08002b44 	.word	0x08002b44
 8002a94:	08002b44 	.word	0x08002b44
 8002a98:	08002b44 	.word	0x08002b44
 8002a9c:	08002b48 	.word	0x08002b48

08002aa0 <memset>:
 8002aa0:	4402      	add	r2, r0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d100      	bne.n	8002aaa <memset+0xa>
 8002aa8:	4770      	bx	lr
 8002aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002aae:	e7f9      	b.n	8002aa4 <memset+0x4>

08002ab0 <_init>:
 8002ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab2:	bf00      	nop
 8002ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab6:	bc08      	pop	{r3}
 8002ab8:	469e      	mov	lr, r3
 8002aba:	4770      	bx	lr

08002abc <_fini>:
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	bf00      	nop
 8002ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac2:	bc08      	pop	{r3}
 8002ac4:	469e      	mov	lr, r3
 8002ac6:	4770      	bx	lr
